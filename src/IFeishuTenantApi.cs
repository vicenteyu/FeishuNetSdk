// ************************************************************************
// Assembly         : FeishuNetSdk
// Author           : yxr
// Created          : 2024-06-24
//
// Last Modified By : yxr
// Last Modified On : 2025-06-13
// ************************************************************************
// <copyright file="IFeishuTenantApi.cs" company="Vicente Yu">
//     MIT
// </copyright>
// <summary>适用于自建应用租户凭证（TenantAccessToken）的接口</summary>
// ************************************************************************
using FeishuNetSdk.Attributes;
using WebApiClientCore;
using WebApiClientCore.Attributes;
using WebApiClientCore.Parameters;

namespace FeishuNetSdk;
/// <summary>
/// 适用于自建应用租户凭证（TenantAccessToken）的接口
/// </summary>
[EnableLoggingFilter]
[IgnoreStatusExceptionFilter]
[HttpHost("https://open.feishu.cn/"), JsonReturn, OAuthToken]
public interface IFeishuTenantApi : IHttpApi
{
    /// <summary>
    /// <para>【消息与群组】延时更新消息卡片</para>
    /// <para>接口ID：6907568030018469890</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/message-card/delay-update-message-card</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>用户点击卡片进行交互、你的服务端在收到并响应卡片的回调请求后，可调用该接口延时更新卡片。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message</item>
    /// <item>im:message:send_as_bot</item>
    /// <item>im:message:update</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/interactive/v1/card/update")]
    System.Threading.Tasks.Task<FeishuResponse> PostInteractiveV1CardUpdateAsync(
        [JsonContent] Im.Spec.PostInteractiveV1CardUpdateBodyDto dto);

    /// <summary>
    /// <para>【云文档】导入表格</para>
    /// <para>接口ID：6907568031544229890</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/docs/sheets/sheet-operation/import-spreadsheet</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>为了更好地提升该接口的安全性，我们对其进行了升级，请尽快迁移至[新版本](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/import-user-guide)</para>
    /// <para>该接口用于将本地表格导入到云空间上。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/import-user-guide")]
    [HttpPost("/open-apis/sheets/v2/import")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PostSheetsV2ImportResponseDto>> PostSheetsV2ImportAsync(
        [JsonContent] Ccm.Spec.PostSheetsV2ImportBodyDto dto);

    /// <summary>
    /// <para>【审批】查询审批 ID（专用）</para>
    /// <para>接口ID：6907568031544737794</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/approval-search/search-approval-id-(dedicated)</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>用于灰度企业内的 userID、larkID 相互转换。</para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("https://www.feishu.cn/approval/openapi/v1/id/get")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.Spec.PostApprovalOpenapiV1IdGetResponseDto>> PostApprovalOpenapiV1IdGetAsync(
        [JsonContent] Approval.Spec.PostApprovalOpenapiV1IdGetBodyDto dto);

    /// <summary>
    /// <para>【审批】实例列表查询</para>
    /// <para>接口ID：6907568073251946498</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/approval/v2/approval-search/instance-list-query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>为了更好地提升接口文档的的易理解性，我们对文档进行了升级，请尽快迁移至[新版本&gt;&gt;](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/query)</para>
    /// <para>该接口通过不同条件查询审批系统中符合条件的审批实例列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval.list:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/query")]
    [HttpPost("https://www.feishu.cn/approval/openapi/v2/instance/search")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.Spec.PostApprovalOpenapiV2InstanceSearchResponseDto>> PostApprovalOpenapiV2InstanceSearchAsync(
        [JsonContent] Approval.Spec.PostApprovalOpenapiV2InstanceSearchBodyDto dto);

    /// <summary>
    /// <para>【审批】任务列表查询</para>
    /// <para>接口ID：6907568073252241410</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/approval/v2/approval-search/task-list-query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>为了更好地提升接口文档的的易理解性，我们对文档进行了升级，请尽快迁移至[新版本&gt;&gt;](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/task/search)</para>
    /// <para>该接口通过不同条件查询审批系统中符合条件的审批任务列表</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval.list:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/task/search")]
    [HttpPost("https://www.feishu.cn/approval/openapi/v2/task/search")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.Spec.PostApprovalOpenapiV2TaskSearchResponseDto>> PostApprovalOpenapiV2TaskSearchAsync(
        [JsonContent] Approval.Spec.PostApprovalOpenapiV2TaskSearchBodyDto dto);

    /// <summary>
    /// <para>【云文档】写入图片</para>
    /// <para>接口ID：6907568073252585474</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/data-operation/write-images</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>向电子表格某个工作表的单个指定单元格写入图片，支持传入图片的二进制流，支持多种图片格式。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheetToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>**示例值**："Iow7sNNEphp3WbtnbCscPqabcef"</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/sheets/v2/spreadsheets/{spreadsheetToken}/values_image")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenValuesImageResponseDto>> PostSheetsV2SpreadsheetsBySpreadsheetTokenValuesImageAsync(
        [PathQuery] string spreadsheetToken,
        [JsonContent] Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenValuesImageBodyDto dto);

    /// <summary>
    /// <para>【云文档】查询导入结果</para>
    /// <para>接口ID：6907568073252683778</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/docs/sheets/sheet-operation/query-import-results</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于查询文件导入结果。查询30分钟无结果为导入失败。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="ticket">
    /// <para>必填：是</para>
    /// <para>导入时获取的凭证</para>
    /// </param>
    [HttpGet("/open-apis/sheets/v2/import/result")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.GetSheetsV2ImportResultResponseDto>> GetSheetsV2ImportResultAsync(
        [PathQuery] string ticket);

    /// <summary>
    /// <para>【审批】抄送列表查询</para>
    /// <para>接口ID：6907568073252700162</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/approval/v2/approval-search/cc-list-query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>为了更好地提升接口文档的的易理解性，我们对文档进行了升级，请尽快迁移至[新版本&gt;&gt;](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/search_cc)</para>
    /// <para>该接口通过不同条件查询审批系统中符合条件的审批抄送列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval.list:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/search_cc")]
    [HttpPost("https://www.feishu.cn/approval/openapi/v2/cc/search")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.Spec.PostApprovalOpenapiV2CcSearchResponseDto>> PostApprovalOpenapiV2CcSearchAsync(
        [JsonContent] Approval.Spec.PostApprovalOpenapiV2CcSearchBodyDto dto);

    /// <summary>
    /// <para>【会议室】获取建筑物列表</para>
    /// <para>接口ID：6907569523176636417</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/meeting_room-v1/api-reference/obtain-building-list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取本企业下的建筑物（办公大楼）。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:room:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>请求期望返回的建筑物数量，不足则返回全部，该值默认为 10，最大为 100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>用于标记当前请求的分页标记，将返回以当前分页标记开始，往后 page_size 个元素</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="order_by">
    /// <para>必填：否</para>
    /// <para>提供用于对名称进行升序/降序排序的方式查询，可选项有："name-asc,name-desc"，传入其他字符串不做处理，默认无序</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="fields">
    /// <para>必填：否</para>
    /// <para>用于指定返回的字段名，每个字段名之间用逗号 "," 分隔，如：“id,name”，"*" 表示返回全部字段，可选字段有："id,name,description,floors"，默认返回所有字段</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/meeting_room/building/list")]
    System.Threading.Tasks.Task<FeishuResponse<MeetingRoom.Spec.GetMeetingRoomBuildingListResponseDto>> GetMeetingRoomBuildingListAsync(
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? order_by = null,
        [PathQuery] string? fields = null);

    /// <summary>
    /// <para>【云文档】设置单元格样式 </para>
    /// <para>接口ID：6907569523176783873</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/data-operation/set-cell-style</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>设置单元格中数据的样式。支持设置字体、背景、边框等样式。</para>
    /// <para>使用限制：- 单次设置的范围不可超过 5,000 行 100 列。</para>
    /// <para>- 在设置边框样式时，单次更新的单元格数量不可超过 30,000 个。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheetToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>**示例值**："Iow7sNNEphp3WbtnbCscPqabcef"</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/sheets/v2/spreadsheets/{spreadsheetToken}/style")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PutSheetsV2SpreadsheetsBySpreadsheetTokenStyleResponseDto>> PutSheetsV2SpreadsheetsBySpreadsheetTokenStyleAsync(
        [PathQuery] string spreadsheetToken,
        [JsonContent] Ccm.Spec.PutSheetsV2SpreadsheetsBySpreadsheetTokenStyleBodyDto dto);

    /// <summary>
    /// <para>【会议室】获取城市列表</para>
    /// <para>接口ID：6907569523176947713</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/meeting_room-v1/api-reference/obtain-city-list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>新建建筑时需要选择所处国家/地区，该接口用于获得系统预先提供的可供选择的城市列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:room:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="country_id">
    /// <para>必填：是</para>
    /// <para>国家地区ID</para>
    /// </param>
    [HttpGet("/open-apis/meeting_room/district/list")]
    System.Threading.Tasks.Task<FeishuResponse<MeetingRoom.Spec.GetMeetingRoomDistrictListResponseDto>> GetMeetingRoomDistrictListAsync(
        [PathQuery] int country_id);

    /// <summary>
    /// <para>【审批】三方审批实例同步</para>
    /// <para>接口ID：6907569523177013249</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/approval/v2/third-party-approval-integration/external-approval-instance-create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>为了更好地提升接口文档的的易理解性，我们对文档进行了升级，请尽快迁移至[新版本&gt;&gt;](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_instance/create)</para>
    /// <para>审批中心不负责审批的流转，审批的流转在三方系统，三方系统在审批流转后生成的审批实例、审批任务、审批抄送数据同步到审批中心。</para>
    /// <para>用户可以在审批中心中浏览三方系统同步过来的实例、任务、抄送信息，并且可以跳转回三方系统进行更详细的查看和操作，其中实例信息在【已发起】列表，任务信息在【待审批】和【已审批】列表，抄送信息在【抄送我】列表</para>
    /// <para>对于审批任务，三方系统也可以配置审批任务的回调接口，这样审批人可以在审批中心中直接进行审批操作，审批中心会回调三方系统，三方系统收到回调后更新任务信息，并将新的任务信息同步回审批中心，形成闭环。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_instance/create")]
    [HttpPost("https://www.feishu.cn/approval/openapi/v2/external/instance/create")]
    System.Threading.Tasks.Task<FeishuResponse> PostApprovalOpenapiV2ExternalInstanceCreateAsync(
        [JsonContent] Approval.Spec.PostApprovalOpenapiV2ExternalInstanceCreateBodyDto dto);

    /// <summary>
    /// <para>【消息与群组】发送仅特定人可见的消息卡片</para>
    /// <para>接口ID：6907569523177078785</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/message-card/send-message-cards-that-are-only-visible-to-certain-people</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口，可以使应用机器人在指定群聊中发送仅指定用户可见的卡片消息。卡片上将展示 **仅对你可见** 标识，如下图所示。</para>
    /// <para>![image.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/b0ec0ce45942463381457edc7b62e144_RXYCFtfUtb.png?height=486&amp;lazyload=true&amp;maxWidth=592&amp;width=1592)</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message</item>
    /// <item>im:message:send_as_bot</item>
    /// <item>im:message:update</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/ephemeral/v1/send")]
    System.Threading.Tasks.Task<FeishuResponse<Im.Spec.PostEphemeralV1SendResponseDto>> PostEphemeralV1SendAsync(
        [JsonContent] Im.Spec.PostEphemeralV1SendBodyDto dto);

    /// <summary>
    /// <para>【云文档】复制文档</para>
    /// <para>接口ID：6907569523177127937</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/docs/drive/file/copy-a-doc-or-sheet</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>为了更好地提升该接口的安全性，我们对其进行了升级，请尽快迁移至 [新版本&gt;&gt;](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/copy)</para>
    /// <para>将文件复制到用户云空间的其他文件夹中。不支持复制文件夹。</para>
    /// <para>如果目标文件夹是我的空间，则复制的文件会在「我的空间」的「归我所有」列表里。</para>
    /// <para>该接口不支持并发创建，且调用频率上限为 5QPS 且 10000次/天</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:doc</item>
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="fileToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>被复制文件的 token, 获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction)</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/copy")]
    [HttpPost("/open-apis/drive/explorer/v2/file/copy/files/{fileToken}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PostDriveExplorerV2FileCopyFilesByFileTokenResponseDto>> PostDriveExplorerV2FileCopyFilesByFileTokenAsync(
        [PathQuery] string fileToken,
        [JsonContent] Ccm.Spec.PostDriveExplorerV2FileCopyFilesByFileTokenBodyDto dto);

    /// <summary>
    /// <para>【应用信息】获取应用在企业内的可用范围</para>
    /// <para>接口ID：6907569523177160705</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/application-v6/admin/obtain-the-app-availability-in-an-organization</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于查询应用在该企业内可以被使用的范围，只能被企业自建应用调用。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:app.info:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>必填：是</para>
    /// <para>目标应用的 ID</para>
    /// </param>
    /// <param name="user_page_token">
    /// <para>必填：否</para>
    /// <para>分页拉取用户列表起始位置标示，不填表示从头开始</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_page_size">
    /// <para>必填：否</para>
    /// <para>本次拉取用户列表最大个数(最大值 1000 ，0 自动最大个数 )</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/application/v2/app/visibility")]
    System.Threading.Tasks.Task<FeishuResponse<Application.Spec.GetApplicationV2AppVisibilityResponseDto>> GetApplicationV2AppVisibilityAsync(
        [PathQuery] string app_id,
        [PathQuery] string? user_page_token = null,
        [PathQuery] int? user_page_size = null);

    /// <summary>
    /// <para>【通讯录】查询应用管理员列表</para>
    /// <para>接口ID：6907569523177406465</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/application-v6/admin/query-app-administrator-list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询审核应用的管理员列表，返回最新10个管理员账户id列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:app.admin_id:readonly</item>
    /// <item>admin:app.admin:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    [HttpGet("/open-apis/user/v4/app_admin_user/list")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.Spec.GetUserV4AppAdminUserListResponseDto>> GetUserV4AppAdminUserListAsync();

    /// <summary>
    /// <para>【会议室】查询建筑物详情</para>
    /// <para>接口ID：6907569523177635841</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/meeting_room-v1/api-reference/query-building-details</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取指定建筑物的详细信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:room:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="building_ids">
    /// <para>必填：是</para>
    /// <para>用于查询指定建筑物的 ID</para>
    /// </param>
    /// <param name="fields">
    /// <para>必填：否</para>
    /// <para>用于指定返回的字段名，每个字段名之间用逗号 "," 分隔，如：“id,name”，"*" 表示返回全部字段，可选字段有："id,name,description,floors"，默认返回所有字段</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/meeting_room/building/batch_get")]
    System.Threading.Tasks.Task<FeishuResponse<MeetingRoom.Spec.GetMeetingRoomBuildingBatchGetResponseDto>> GetMeetingRoomBuildingBatchGetAsync(
        [PathQuery] string[] building_ids,
        [PathQuery] string? fields = null);

    /// <summary>
    /// <para>【会议室】删除会议室</para>
    /// <para>接口ID：6907569523177750529</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/meeting_room-v1/api-reference/delete-meeting-room</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于删除会议室。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:room</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/meeting_room/room/delete")]
    System.Threading.Tasks.Task<FeishuResponse> PostMeetingRoomRoomDeleteAsync(
        [JsonContent] MeetingRoom.Spec.PostMeetingRoomRoomDeleteBodyDto dto);

    /// <summary>
    /// <para>【会议室】查询会议室详情</para>
    /// <para>接口ID：6907569523177766913</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/meeting_room-v1/api-reference/query-meeting-room-details</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取指定会议室的详细信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:room:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="room_ids">
    /// <para>必填：是</para>
    /// <para>用于查询指定会议室的 ID</para>
    /// </param>
    /// <param name="fields">
    /// <para>必填：否</para>
    /// <para>用于指定返回的字段名，每个字段名之间用逗号 "," 分隔，如：“id,name”，"*" 表示返回全部字段，可选字段有："id,name,description,capacity,building_id,building_name,floor_name,is_disabled,display_id"，默认返回所有字段</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/meeting_room/room/batch_get")]
    System.Threading.Tasks.Task<FeishuResponse<MeetingRoom.Spec.GetMeetingRoomRoomBatchGetResponseDto>> GetMeetingRoomRoomBatchGetAsync(
        [PathQuery] string[] room_ids,
        [PathQuery] string? fields = null);

    /// <summary>
    /// <para>【会议室】创建会议室</para>
    /// <para>接口ID：6907569523177799681</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/meeting_room-v1/api-reference/create-meeting-room</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于创建会议室。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:room</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/meeting_room/room/create")]
    System.Threading.Tasks.Task<FeishuResponse<MeetingRoom.Spec.PostMeetingRoomRoomCreateResponseDto>> PostMeetingRoomRoomCreateAsync(
        [JsonContent] MeetingRoom.Spec.PostMeetingRoomRoomCreateBodyDto dto);

    /// <summary>
    /// <para>【会议室】创建建筑物</para>
    /// <para>接口ID：6907569524099760129</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/meeting_room-v1/api-reference/create-building</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口对应管理后台的添加建筑，添加楼层的功能，可用于创建建筑物和建筑物的楼层信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:room</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/meeting_room/building/create")]
    System.Threading.Tasks.Task<FeishuResponse<MeetingRoom.Spec.PostMeetingRoomBuildingCreateResponseDto>> PostMeetingRoomBuildingCreateAsync(
        [JsonContent] MeetingRoom.Spec.PostMeetingRoomBuildingCreateBodyDto dto);

    /// <summary>
    /// <para>【审批】审批任务转交</para>
    /// <para>接口ID：6907569524099842049</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/approval/v2/feishu-native-approval/approval-task-transfer</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>为了更好地提升接口文档的的易理解性，我们对文档进行了升级，请尽快迁移至[新版本&gt;&gt;](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/task/transfer)</para>
    /// <para>对于单个审批任务进行转交操作。转交后审批流程流转给被转交人。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/task/transfer")]
    [HttpPost("https://www.feishu.cn/approval/openapi/v2/instance/transfer")]
    System.Threading.Tasks.Task<FeishuResponse> PostApprovalOpenapiV2InstanceTransferAsync(
        [JsonContent] Approval.Spec.PostApprovalOpenapiV2InstanceTransferBodyDto dto);

    /// <summary>
    /// <para>【云文档】获取云文档权限设置V2</para>
    /// <para>接口ID：6907569524099940353</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/docs/drive/permission/get-document-sharing-settings-v2</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于根据 filetoken 获取云文档的权限设置。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:doc</item>
    /// <item>docs:doc:readonly</item>
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>drive:drive.metadata:readonly</item>
    /// <item>drive:file</item>
    /// <item>drive:file:readonly</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/drive/permission/v2/public/")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PostDrivePermissionV2PublicResponseDto>> PostDrivePermissionV2PublicAsync(
        [JsonContent] Ccm.Spec.PostDrivePermissionV2PublicBodyDto dto);

    /// <summary>
    /// <para>【云文档】获取文件夹元数据</para>
    /// <para>接口ID：6907569524099989505</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/folder/get-folder-meta</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于根据文件夹 token 获取该文件夹的元数据，包括文件夹的 ID、名称、创建者 ID 等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:drive.metadata:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="folderToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文件夹 token。了解如何获取文件夹 token，参考[文件夹概述](https://open.feishu.cn/document/ukTMukTMukTM/ugTNzUjL4UzM14CO1MTN/folder-overview)。</para>
    /// </param>
    [HttpGet("/open-apis/drive/explorer/v2/folder/{folderToken}/meta")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.GetDriveExplorerV2FolderByFolderTokenMetaResponseDto>> GetDriveExplorerV2FolderByFolderTokenMetaAsync(
        [PathQuery] string folderToken);

    /// <summary>
    /// <para>【应用信息】校验应用管理员</para>
    /// <para>接口ID：6907569524100022273</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/application-v6/admin/verify-app-admin</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于查询用户是否为应用管理员。</para>
    /// <para>此处应用管理员是指可以进入企业管理后台对应用进行审核和管理的企业管理员，并不是应用的开发者。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:app.admin:check</item>
    /// <item>admin:app.admin:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="open_id">
    /// <para>必填：否</para>
    /// <para>用户 open_id，open_id 和 employee_id 两个参数必须包含其一，若同时传入取 open_id</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="employee_id">
    /// <para>必填：否</para>
    /// <para>用户 employee_id（同通讯录 v3 版本中的 user_id），open_id 和 employee_id 两个参数必须包含其一，若同时传入取 open_id</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/application/v3/is_user_admin")]
    System.Threading.Tasks.Task<FeishuResponse<Application.Spec.GetApplicationV3IsUserAdminResponseDto>> GetApplicationV3IsUserAdminAsync(
        [PathQuery] string? open_id = null,
        [PathQuery] string? employee_id = null);

    /// <summary>
    /// <para>【云文档】拆分单元格</para>
    /// <para>接口ID：6907569524100055041</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/data-operation/split-cells</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>拆分电子表格工作表中的单元格。</para>
    /// <para>使用限制：</para>
    /// <para>单次操作范围不可超过 5,000 行、100 列。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheetToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/sheets/v2/spreadsheets/{spreadsheetToken}/unmerge_cells")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenUnmergeCellsResponseDto>> PostSheetsV2SpreadsheetsBySpreadsheetTokenUnmergeCellsAsync(
        [PathQuery] string spreadsheetToken,
        [JsonContent] Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenUnmergeCellsBodyDto dto);

    /// <summary>
    /// <para>【云文档】删除行列</para>
    /// <para>接口ID：6907569524100382721</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/sheet-rowcol/-delete-rows-or-columns</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于删除电子表格中的指定行或列。</para>
    /// <para>使用限制：</para>
    /// <para>- 单次调用该接口，最多支持删除 5000 行或列。</para>
    /// <para>- 一个工作表最少需有一行一列。你无法删除所有行或列。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheetToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpDelete("/open-apis/sheets/v2/spreadsheets/{spreadsheetToken}/dimension_range")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.DeleteSheetsV2SpreadsheetsBySpreadsheetTokenDimensionRangeResponseDto>> DeleteSheetsV2SpreadsheetsBySpreadsheetTokenDimensionRangeAsync(
        [PathQuery] string spreadsheetToken,
        [JsonContent] Ccm.Spec.DeleteSheetsV2SpreadsheetsBySpreadsheetTokenDimensionRangeBodyDto dto);

    /// <summary>
    /// <para>【云文档】获取旧版文档元信息</para>
    /// <para>接口ID：6907569524100448257</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/docs/document/obtain-document-meta</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>此接口只支持查询旧版文档元信息。要查询新版文档（`docx` 类型）元信息，使用[获取文档元数据](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/meta/batch_query)接口。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:doc</item>
    /// <item>docs:doc:readonly</item>
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>drive:drive.metadata:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="docToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>doc 的 token，获取方式见[如何获取云文档资源相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)</para>
    /// </param>
    [HttpGet("/open-apis/doc/v2/meta/{docToken}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.GetDocV2MetaByDocTokenResponseDto>> GetDocV2MetaByDocTokenAsync(
        [PathQuery] string docToken);

    /// <summary>
    /// <para>【审批】获取单个审批实例详情</para>
    /// <para>接口ID：6907569524100497409</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/approval/v2/feishu-native-approval/obtain-single-approval-instance-details</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>为了更好地提升接口文档的的易理解性，我们对文档进行了升级，请尽快迁移至[新版本&gt;&gt;](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/get)</para>
    /// <para>通过审批实例 Instance Code 获取审批实例详情。Instance Code 由 [批量获取审批实例](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/list) 接口获取。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/get")]
    [HttpPost("https://www.feishu.cn/approval/openapi/v2/instance/get")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.Spec.PostApprovalOpenapiV2InstanceGetResponseDto>> PostApprovalOpenapiV2InstanceGetAsync(
        [JsonContent] Approval.Spec.PostApprovalOpenapiV2InstanceGetBodyDto dto);

    /// <summary>
    /// <para>【审批】取消订阅审批事件</para>
    /// <para>接口ID：6907569524100546561</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/approval/v2/feishu-native-approval/cancel-a-subscription-to-an-approvals-event</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>为了更好地提升接口文档的的易理解性，我们对文档进行了升级，请尽快迁移至[新版本&gt;&gt;](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/unsubscribe)</para>
    /// <para>取消订阅 approval_code 后，无法再收到该审批定义对应实例的事件通知。</para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/unsubscribe")]
    [HttpPost("https://www.feishu.cn/approval/openapi/v2/subscription/unsubscribe")]
    System.Threading.Tasks.Task<FeishuResponse> PostApprovalOpenapiV2SubscriptionUnsubscribeAsync(
        [JsonContent] Approval.Spec.PostApprovalOpenapiV2SubscriptionUnsubscribeBodyDto dto);

    /// <summary>
    /// <para>【会议室】更新会议室</para>
    /// <para>接口ID：6907569524100694017</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/meeting_room-v1/api-reference/update-meeting-room</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于更新会议室。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:room</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/meeting_room/room/update")]
    System.Threading.Tasks.Task<FeishuResponse> PostMeetingRoomRoomUpdateAsync(
        [JsonContent] MeetingRoom.Spec.PostMeetingRoomRoomUpdateBodyDto dto);

    /// <summary>
    /// <para>【会议室】获取国家地区列表</para>
    /// <para>接口ID：6907569524100808705</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/meeting_room-v1/api-reference/obtain-country/region-list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>新建建筑时需要标明所处国家/地区，该接口用于获得系统预先提供的可供选择的国家 /地区列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:room:readonly</item>
    /// </list></para>
    /// </summary>
    [HttpGet("/open-apis/meeting_room/country/list")]
    System.Threading.Tasks.Task<FeishuResponse<MeetingRoom.Spec.GetMeetingRoomCountryListResponseDto>> GetMeetingRoomCountryListAsync();

    /// <summary>
    /// <para>【云文档】追加数据</para>
    /// <para>接口ID：6907569524100857857</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/data-operation/append-data</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>在电子表格工作表的指定范围中，在空白位置中追加数据。例如，若指定范围参数 `range` 为 `6e5ed3!A1:B2`，该接口将会依次寻找 A1、A2、A3...单元格，在找到的第一个空白位置中写入数据。</para>
    /// <para>使用限制：</para>
    /// <para>- 单次写入范围不可超过 5,000 行、100 列。</para>
    /// <para>- 每个单元格不超过 50,000 字符，由于服务端会增加控制字符，因此推荐每个单元格不超过 40,000 字符。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheetToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>**示例值**："Iow7sNNEphp3WbtnbCscPqabcef"</para>
    /// </param>
    /// <param name="insertDataOption">
    /// <para>必填：否</para>
    /// <para>指定追加数据的方式，默认值为 OVERWRITE，即若空行数量小于追加数据的行数，则会覆盖已有数据。可选值：</para>
    /// <para>- OVERWRITE：若空行的数量小于追加数据的行数，则会覆盖已有数据</para>
    /// <para>- INSERT_ROWS：插入足够数量的行后再进行数据追加</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/sheets/v2/spreadsheets/{spreadsheetToken}/values_append")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenValuesAppendResponseDto>> PostSheetsV2SpreadsheetsBySpreadsheetTokenValuesAppendAsync(
        [PathQuery] string spreadsheetToken,
        [JsonContent] Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenValuesAppendBodyDto dto,
        [PathQuery] string? insertDataOption = null);

    /// <summary>
    /// <para>【审批】创建审批实例</para>
    /// <para>接口ID：6907569524100874241</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/approval/v2/feishu-native-approval/create-approval-instance</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>为了更好地提升接口文档的的易理解性，我们对文档进行了升级，请尽快迁移至[新版本&gt;&gt;](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/create)</para>
    /// <para>创建一个审批实例，调用方需对审批定义的表单有详细了解，将按照定义的表单结构，将表单 Value 通过接口传入。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/create")]
    [HttpPost("https://www.feishu.cn/approval/openapi/v2/instance/create")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.Spec.PostApprovalOpenapiV2InstanceCreateResponseDto>> PostApprovalOpenapiV2InstanceCreateAsync(
        [JsonContent] Approval.Spec.PostApprovalOpenapiV2InstanceCreateBodyDto dto);

    /// <summary>
    /// <para>【云文档】获取文件夹下的文档清单</para>
    /// <para>接口ID：6907569524100890625</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/docs/drive/folder/get-folder-children</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>为了更好地提升该接口的安全性，我们对其进行了升级，请尽快迁移至 [新版本&gt;&gt;](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>获取用户云空间中指定文件夹下的文件清单。清单类型包括文件、各种在线文档（文档、电子表格、多维表格、思维笔记）、文件夹和快捷方式。该接口不支持分页，并且不会递归的获取子文件夹的清单。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// </list></para>
    /// </summary>
    /// <param name="folderToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文件夹的 token，获取方式见 [如何获取云文档资源相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)</para>
    /// </param>
    /// <param name="types">
    /// <para>必填：否</para>
    /// <para>需要查询的文件类型，默认返回所有 children；types 可多选，可选类型有 doc、sheet、file、bitable、docx、folder、mindnote 。如 url?types=folder&amp;types=sheet</para>
    /// <para>默认值：null</para>
    /// </param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list")]
    [HttpGet("/open-apis/drive/explorer/v2/folder/{folderToken}/children")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.GetDriveExplorerV2FolderByFolderTokenChildrenResponseDto>> GetDriveExplorerV2FolderByFolderTokenChildrenAsync(
        [PathQuery] string folderToken,
        [PathQuery] string[]? types = null);

    /// <summary>
    /// <para>【会议室】查询会议室忙闲</para>
    /// <para>接口ID：6907569524100956161</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/meeting-room-event/query-room-availability</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口获取指定会议室的忙碌、空闲日程信息。</para>
    /// <para>查询结果中：</para>
    /// <para>- 非重复日程只有唯一的实例信息。</para>
    /// <para>- 重复日程可能存在多个实例信息，根据日程重复规则和时间范围进行扩展。建议查询的时间区间为 30 天内。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:room:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="room_ids">
    /// <para>必填：是</para>
    /// <para>会议室 ID。你可以通过[查询会议室列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room/list)或[搜索会议室](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room/search)接口获取指定会议室 ID。</para>
    /// <para>1. room_ids个数不要超过20。</para>
    /// <para>2. GET 请求中传入多个会议室 ID 的格式示例为 `room_ids=omm_83d09ad4f6896e02029a6a075f71xxxx&amp;room_ids=omm_eada1d61a550955240c28757e7dexxxx`。</para>
    /// </param>
    /// <param name="time_min">
    /// <para>必填：是</para>
    /// <para>查询的起始时间，需要遵循 [RFC3339](https://tools.ietf.org/html/rfc3339) 格式，示例：2019-09-04T08:45:00+08:00。</para>
    /// <para>**注意**：传入该参数时需要进行 URL 编码。</para>
    /// </param>
    /// <param name="time_max">
    /// <para>必填：是</para>
    /// <para>查询的结束时间，需要遵循 [RFC3339](https://tools.ietf.org/html/rfc3339) 格式，示例：2019-09-04T09:45:00+08:00。</para>
    /// <para>**注意**：传入该参数时需要进行 URL 编码。</para>
    /// </param>
    [HttpGet("/open-apis/meeting_room/freebusy/batch_get")]
    System.Threading.Tasks.Task<FeishuResponse<MeetingRoom.Spec.GetMeetingRoomFreebusyBatchGetResponseDto>> GetMeetingRoomFreebusyBatchGetAsync(
        [PathQuery] string[] room_ids,
        [PathQuery] string time_min,
        [PathQuery] string time_max);

    /// <summary>
    /// <para>【通讯录】批量新增部门</para>
    /// <para>接口ID：6907569524101021697</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version//import-api/batch-add-departments</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于向通讯录中批量新增多个部门。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item></item>
    /// <item></item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/contact/v2/department/batch_add")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.Spec.PostContactV2DepartmentBatchAddResponseDto>> PostContactV2DepartmentBatchAddAsync(
        [JsonContent] Contact.Spec.PostContactV2DepartmentBatchAddBodyDto dto);

    /// <summary>
    /// <para>【云文档】判断协作者是否有某权限</para>
    /// <para>接口ID：6907569524101087233</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/docs/drive/permission/querying-if-a-collaborator-has-a-specific-permission</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于根据 filetoken 判断当前登录用户是否具有某权限。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:doc</item>
    /// <item>docs:doc:readonly</item>
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>drive:file</item>
    /// <item>drive:file:readonly</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/drive/permission/member/permitted")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PostDrivePermissionMemberPermittedResponseDto>> PostDrivePermissionMemberPermittedAsync(
        [JsonContent] Ccm.Spec.PostDrivePermissionMemberPermittedBodyDto dto);

    /// <summary>
    /// <para>【云文档】更新行列</para>
    /// <para>接口ID：6907569742383562754</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/sheet-rowcol/update-rows-or-columns</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于更新设置电子表格中行列的属性，包括是否隐藏行列和设置行高列宽。</para>
    /// <para>使用限制：单次调用该接口，最多支持设置 5000 行或列。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheetToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/sheets/v2/spreadsheets/{spreadsheetToken}/dimension_range")]
    System.Threading.Tasks.Task<FeishuResponse> PutSheetsV2SpreadsheetsBySpreadsheetTokenDimensionRangeAsync(
        [PathQuery] string spreadsheetToken,
        [JsonContent] Ccm.Spec.PutSheetsV2SpreadsheetsBySpreadsheetTokenDimensionRangeBodyDto dto);

    /// <summary>
    /// <para>【云文档】删除Doc</para>
    /// <para>接口ID：6907569742383661058</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/docs/drive/file/delete-a-doc</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>为了更好地提升该接口的安全性，我们对其进行了升级，请尽快迁移至 [新版本&gt;&gt;](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/delete)</para>
    /// <para>该接口用于根据 docToken 删除对应的 Docs 文档。</para>
    /// <para>文档只能被文档所有者删除，文档被删除后将会放到回收站里</para>
    /// <para>该接口不支持并发调用，且调用频率上限为5QPS</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:doc</item>
    /// <item>drive:drive</item>
    /// </list></para>
    /// </summary>
    /// <param name="docToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>doc 的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction)</para>
    /// </param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/delete")]
    [HttpDelete("/open-apis/drive/explorer/v2/file/docs/{docToken}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.DeleteDriveExplorerV2FileDocsByDocTokenResponseDto>> DeleteDriveExplorerV2FileDocsByDocTokenAsync(
        [PathQuery] string docToken);

    /// <summary>
    /// <para>【云文档】批量设置单元格样式 </para>
    /// <para>接口ID：6907569742383923202</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/data-operation/batch-set-cell-style</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>批量设置单元格中数据的样式。支持设置字体、背景、边框等样式。</para>
    /// <para>使用限制：- 单次设置的范围不可超过 5,000 行 100 列。</para>
    /// <para>- 在设置边框样式时，单次更新的单元格数量不可超过 30,000 个。</para>
    /// <para>注意事项：</para>
    /// <para>在批量设置单元格时，当单元格在多个范围中时，单元格将应用请求体的最后一个样式。例如，对 A1:B2、B2:C3 分别设置样式，B2 单元格将应用 B2:C3 区域的样式。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheetToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/sheets/v2/spreadsheets/{spreadsheetToken}/styles_batch_update")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PutSheetsV2SpreadsheetsBySpreadsheetTokenStylesBatchUpdateResponseDto>> PutSheetsV2SpreadsheetsBySpreadsheetTokenStylesBatchUpdateAsync(
        [PathQuery] string spreadsheetToken,
        [JsonContent] Ccm.Spec.PutSheetsV2SpreadsheetsBySpreadsheetTokenStylesBatchUpdateBodyDto dto);

    /// <summary>
    /// <para>【云文档】增加保护范围</para>
    /// <para>接口ID：6907569742383988738</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/protect-range/add-locked-cells</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>在电子表格工作表中设置多个保护范围，支持对行或列设置保护范围。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>**示例值**："Iow7sNNEphp3WbtnbCscPqabcef"</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>指定请求体中 users 字段对应的用户 ID 类型。可选值如下所示。了解更多，参考[用户身份概述](https://open.feishu.cn/document/home/user-identity-introduction/introduction)。可选值：</para>
    /// <para>- `open_id`：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。了解更多：[如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</para>
    /// <para>- `union_id`：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。了解更多：[如何获取 Union ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</para>
    /// <para>**注意**：</para>
    /// <para>若要在请求体中传入 users 参数，user_id_type 参数必填。</para>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/sheets/v2/spreadsheets/{spreadsheet_token}/protected_dimension")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenProtectedDimensionResponseDto>> PostSheetsV2SpreadsheetsBySpreadsheetTokenProtectedDimensionAsync(
        [PathQuery] string spreadsheet_token,
        [JsonContent] Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenProtectedDimensionBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【会议室】删除建筑物</para>
    /// <para>接口ID：6907569742384005122</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/meeting_room-v1/api-reference/delete-building</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于删除建筑物（办公大楼）。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:room</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/meeting_room/building/delete")]
    System.Threading.Tasks.Task<FeishuResponse> PostMeetingRoomBuildingDeleteAsync(
        [JsonContent] MeetingRoom.Spec.PostMeetingRoomBuildingDeleteBodyDto dto);

    /// <summary>
    /// <para>【应用信息】查询订单详情</para>
    /// <para>接口ID：6907569742384037890</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/application-v6/appstore-paid-info/query-order-information</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于查询某个订单的具体信息</para>
    /// </summary>
    /// <param name="order_id">
    /// <para>必填：是</para>
    /// <para>订单ID</para>
    /// </param>
    [HttpGet("/open-apis/pay/v1/order/get")]
    System.Threading.Tasks.Task<FeishuResponse<Application.Spec.GetPayV1OrderGetResponseDto>> GetPayV1OrderGetAsync(
        [PathQuery] string order_id);

    /// <summary>
    /// <para>【应用信息】获取用户可用的应用</para>
    /// <para>接口ID：6907569742384070658</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/application-v6/admin/obtain-the-apps-available-to-a-user</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于查询用户可用的应用列表，只能被企业自建应用调用。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item></item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页起始位置标示，不填表示从头开始。</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>单页需求最大个数（最大 100），0 自动最大个数。</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="lang">
    /// <para>必填：否</para>
    /// <para>优先展示的应用信息的语言版本。</para>
    /// <para>- zh_cn：简体中文</para>
    /// <para>- zh_hk：繁体中文（中国香港）</para>
    /// <para>- zh_tw：繁体中文（中国台湾）</para>
    /// <para>- en_us：英文</para>
    /// <para>- ja_jp：日文</para>
    /// <para>- ko_kr：韩语</para>
    /// <para>- es_es：西班牙语</para>
    /// <para>- pt-br：葡萄牙语（巴西）</para>
    /// <para>- th_th：泰语</para>
    /// <para>- vi_vn：越南语</para>
    /// <para>- id_id：印尼语</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="open_id">
    /// <para>必填：否</para>
    /// <para>目标用户 open_id。</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id">
    /// <para>必填：否</para>
    /// <para>目标用户 user_id，与 open_id 至少给其中之一，user_id 优先于 open_id。</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/application/v1/user/visible_apps")]
    System.Threading.Tasks.Task<FeishuResponse<Application.Spec.GetApplicationV1UserVisibleAppsResponseDto>> GetApplicationV1UserVisibleAppsAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? lang = null,
        [PathQuery] string? open_id = null,
        [PathQuery] string? user_id = null);

    /// <summary>
    /// <para>【应用信息】查询用户是否在应用开通范围</para>
    /// <para>接口ID：6907569742384087042</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/application-v6/appstore-paid-info/query-a-user's-app-access</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>当付费套餐是按人数收费 或者 限制最大使用人数时，开放平台会引导企业管理员设置“付费功能开通范围”。 但是受开通范围限制，部分用户就无法使用对应的付费功能。 可以通过此接口，在付费功能点入口判断是否允许某个用户进入使用。</para>
    /// </summary>
    /// <param name="open_id">
    /// <para>必填：否</para>
    /// <para>用户 open_id，open_id 和 user_id 两个参数必须包含其一，若同时传入取 open_id</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id">
    /// <para>必填：否</para>
    /// <para>用户 user_id，user_id 和 open_id 两个参数必须包含其一，若同时传入取 open_id</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/pay/v1/paid_scope/check_user")]
    System.Threading.Tasks.Task<FeishuResponse<Application.Spec.GetPayV1PaidScopeCheckUserResponseDto>> GetPayV1PaidScopeCheckUserAsync(
        [PathQuery] string? open_id = null,
        [PathQuery] string? user_id = null);

    /// <summary>
    /// <para>【云文档】更新表格属性</para>
    /// <para>接口ID：6907569742384201730</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/docs/sheets/update-spreadsheet-properties</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于根据 spreadsheetToken 更新表格属性，如更新表格标题。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheetToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/sheets/v2/spreadsheets/{spreadsheetToken}/properties")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PutSheetsV2SpreadsheetsBySpreadsheetTokenPropertiesResponseDto>> PutSheetsV2SpreadsheetsBySpreadsheetTokenPropertiesAsync(
        [PathQuery] string spreadsheetToken,
        [JsonContent] Ccm.Spec.PutSheetsV2SpreadsheetsBySpreadsheetTokenPropertiesBodyDto dto);

    /// <summary>
    /// <para>【审批】审批任务拒绝</para>
    /// <para>接口ID：6907569742384283650</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/approval/v2/feishu-native-approval/approval-task-reject</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>为了更好地提升接口文档的的易理解性，我们对文档进行了升级，请尽快迁移至[新版本&gt;&gt;](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/task/reject)</para>
    /// <para>对于单个审批任务进行拒绝操作。拒绝后审批流程结束。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/task/reject")]
    [HttpPost("https://www.feishu.cn/approval/openapi/v2/instance/reject")]
    System.Threading.Tasks.Task<FeishuResponse> PostApprovalOpenapiV2InstanceRejectAsync(
        [JsonContent] Approval.Spec.PostApprovalOpenapiV2InstanceRejectBodyDto dto);

    /// <summary>
    /// <para>【消息与群组】删除仅特定人可见的消息卡片</para>
    /// <para>接口ID：6907569742384316418</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/message-card/delete-message-cards-that-are-only-visible-to-certain-people</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>当发送的仅特定人可见的卡片消息已交互完成，可调用本接口删除该卡片。删除后将不会在对应设备上留下任何痕迹。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message</item>
    /// <item>im:message:send_as_bot</item>
    /// <item>im:message:update</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/ephemeral/v1/delete")]
    System.Threading.Tasks.Task<FeishuResponse> PostEphemeralV1DeleteAsync(
        [JsonContent] Im.Spec.PostEphemeralV1DeleteBodyDto dto);

    /// <summary>
    /// <para>【云文档】向多个范围写入数据</para>
    /// <para>接口ID：6907569742384381954</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/data-operation/write-data-to-multiple-ranges</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>向电子表格某个工作表的多个指定范围中写入数据。若指定范围已内有数据，将被新写入的数据覆盖。</para>
    /// <para>使用限制：- 单次写入数据不得超过 5000 行、100列。</para>
    /// <para>- 每个单元格不超过 50,000 字符，由于服务端会增加控制字符，因此推荐每个单元格不超过 40,000 字符。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheetToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>**示例值**："Iow7sNNEphp3WbtnbCscPqabcef"</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/sheets/v2/spreadsheets/{spreadsheetToken}/values_batch_update")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenValuesBatchUpdateResponseDto>> PostSheetsV2SpreadsheetsBySpreadsheetTokenValuesBatchUpdateAsync(
        [PathQuery] string spreadsheetToken,
        [JsonContent] Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenValuesBatchUpdateBodyDto dto);

    /// <summary>
    /// <para>【云文档】插入数据</para>
    /// <para>接口ID：6907569742384398338</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/data-operation/prepend-data</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>在电子表格工作表的指定范围的起始位置上方增加若干行，并在该范围中填充数据。</para>
    /// <para>使用限制：</para>
    /// <para>- 单次写入数据不可超过 5,000 行、100 列。</para>
    /// <para>- 每个单元格不可超过 50,000 字符，由于服务端会增加控制字符，因此推荐每个单元格不超过 40,000 字符。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheetToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>**示例值**："Iow7sNNEphp3WbtnbCscPqabcef"</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/sheets/v2/spreadsheets/{spreadsheetToken}/values_prepend")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenValuesPrependResponseDto>> PostSheetsV2SpreadsheetsBySpreadsheetTokenValuesPrependAsync(
        [PathQuery] string spreadsheetToken,
        [JsonContent] Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenValuesPrependBodyDto dto);

    /// <summary>
    /// <para>【云文档】读取单个范围</para>
    /// <para>接口ID：6907569742384529410</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/data-operation/reading-a-single-range</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>读取电子表格中单个指定范围的数据。</para>
    /// <para>使用限制：</para>
    /// <para>- 该接口返回数据的最大限制为 10 MB。</para>
    /// <para>- 该接口不支持获取跨表引用和数组公式的计算结果。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheetToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>**示例值**："Iow7sNNEphp3WbtnbCscPqabcef"</para>
    /// </param>
    /// <param name="range">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>查询范围。格式为 `&lt;sheetId&gt;!&lt;开始位置&gt;:&lt;结束位置&gt;`。其中：</para>
    /// <para>- `sheetId` 为工作表 ID，通过[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query) 获取</para>
    /// <para>- `&lt;开始位置&gt;:&lt;结束位置&gt;` 为工作表中单元格的范围，数字表示行索引，字母表示列索引。如 `A2:B2` 表示该工作表第 2 行的 A 列到 B 列。`range`支持四种写法，详情参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)</para>
    /// <para>**注意**：若使用 `&lt;sheetId&gt;!&lt;开始单元格&gt;:&lt;结束列&gt;` 和 `&lt;sheetId&gt;!&lt;开始列&gt;:&lt;结束列&gt;` 的写法时，仅支持获取 100 列数据。</para>
    /// <para>**示例值**："Q7PlXT!A1:B2"</para>
    /// </param>
    /// <param name="valueRenderOption">
    /// <para>必填：否</para>
    /// <para>指定单元格数据的格式。可选值如下所示。当参数缺省时，默认不进行公式计算，返回公式本身，且单元格为数值格式。</para>
    /// <para>- ToString：返回纯文本的值（数值类型除外）</para>
    /// <para>- Formula：单元格中含有公式时，返回公式本身</para>
    /// <para>- FormattedValue：计算并格式化单元格</para>
    /// <para>- UnformattedValue：计算但不对单元格进行格式化</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dateTimeRenderOption">
    /// <para>必填：否</para>
    /// <para>指定数据类型为日期、时间、或时间日期的单元格数据的格式。</para>
    /// <para>- 若不传值，默认返回浮点数值，整数部分为自 1899 年 12 月 30 日以来的天数；小数部分为该时间占 24 小时的份额。例如：若时间为 1900 年 1 月 1 日中午 12 点，则默认返回 2.5。其中，2 表示 1900 年 1 月 1 日为 1899 年12 月 30 日之后的 2 天；0.5 表示 12 点占 24 小时的二分之一，即 12/24=0.5。</para>
    /// <para>- 可选值为 FormattedString，此时接口将计算并对日期、时间、或时间日期类型的数据格式化并返回格式化后的字符串，但不会对数字进行格式化。</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>当单元格中包含@用户等涉及用户信息的元素时，该参数可指定返回的用户 ID 类型。默认为 `lark_id`，建议选择 `open_id` 或 `union_id`。了解更多，参考[用户身份概述](https://open.feishu.cn/document/home/user-identity-introduction/introduction)。可选值：</para>
    /// <para>- `open_id`：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。了解更多：[如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</para>
    /// <para>- `union_id`：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。了解更多：[如何获取 Union ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</para>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/sheets/v2/spreadsheets/{spreadsheetToken}/values/{range}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.GetSheetsV2SpreadsheetsBySpreadsheetTokenValuesByRangeResponseDto>> GetSheetsV2SpreadsheetsBySpreadsheetTokenValuesByRangeAsync(
        [PathQuery] string spreadsheetToken,
        [PathQuery] string range,
        [PathQuery] string? valueRenderOption = null,
        [PathQuery] string? dateTimeRenderOption = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】获取旧版文档纯文本内容</para>
    /// <para>接口ID：6907569742384857090</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/docs/docs/content/obtain-document-content</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>此接口只支持查询旧版文档纯文本内容。要查询新版文档（文档类型：`docx`）的纯文本内容，使用[获取文档纯文本内容](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document/raw_content)接口。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:doc</item>
    /// <item>docs:doc:readonly</item>
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="docToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>获取方式详见 [如何获取云文档资源相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)</para>
    /// </param>
    [HttpGet("/open-apis/doc/v2/{docToken}/raw_content")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.GetDocV2ByDocTokenRawContentResponseDto>> GetDocV2ByDocTokenRawContentAsync(
        [PathQuery] string docToken);

    /// <summary>
    /// <para>【会议室】获取会议室列表</para>
    /// <para>接口ID：6907569742384889858</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/meeting_room-v1/api-reference/obtain-meeting-room-list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取指定建筑下的会议室。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:room:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="building_id">
    /// <para>必填：是</para>
    /// <para>被查询的建筑物 ID</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>请求期望返回的会议室数量，不足则返回全部，该值默认为 100，最大为 1000</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>用于标记当前请求的分页标记，将返回以当前分页标记开始，往后 page_size 个元素</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="order_by">
    /// <para>必填：否</para>
    /// <para>提供用于对名称/楼层进行升序/降序排序的方式查询，可选项有："name-asc,name-desc,floor_name-asc,floor_name-desc"，传入其他字符串不做处理，默认无序</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="fields">
    /// <para>必填：否</para>
    /// <para>用于指定返回的字段名，每个字段名之间用逗号 "," 分隔，如：“id,name”，"*" 表示返回全部字段，可选字段有："id,name,description,capacity,building_id,building_name,floor_name,is_disabled,display_id"，默认返回所有字段</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/meeting_room/room/list")]
    System.Threading.Tasks.Task<FeishuResponse<MeetingRoom.Spec.GetMeetingRoomRoomListResponseDto>> GetMeetingRoomRoomListAsync(
        [PathQuery] string building_id,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? order_by = null,
        [PathQuery] string? fields = null);

    /// <summary>
    /// <para>【审批】发送审批 Bot 消息</para>
    /// <para>接口ID：6907569742384906242</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/message/send-bot-messages</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>此接口可以用来通过飞书审批的 Bot 推送消息给用户，当有新的审批待办，或者审批待办的状态有更新时，可以通过飞书审批的 Bot 告知用户。如果出现推送成功，但是没有收到消息，可能是因为开通了审批机器人的聚合推送。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval:readonly</item>
    /// </list></para>
    /// </summary>
    [HttpPost("/open-apis/approval/v1/message/send")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.Spec.PostApprovalV1MessageSendResponseDto>> PostApprovalV1MessageSendAsync();

    /// <summary>
    /// <para>【审批】订阅审批事件</para>
    /// <para>接口ID：6907569742384922626</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/approval/v2/feishu-native-approval/subscribe-to-an-approvals-event-</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>为了更好地提升接口文档的的易理解性，我们对文档进行了升级，请尽快迁移至[新版本&gt;&gt;](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/subscribe)</para>
    /// <para>应用订阅 approval_code 后，该应用就可以收到该审批定义对应实例的事件通知。同一应用只需要订阅一次，无需重复订阅。</para>
    /// <para>当应用不希望再收到审批事件时，可以使用取消订阅接口进行取消，取消后将不再给应用推送消息。</para>
    /// <para>订阅和取消订阅都是应用维度的，多个应用可以同时订阅同一个 approval_code，每个应用都能收到审批事件。</para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/subscribe")]
    [HttpPost("https://www.feishu.cn/approval/openapi/v2/subscription/subscribe")]
    System.Threading.Tasks.Task<FeishuResponse> PostApprovalOpenapiV2SubscriptionSubscribeAsync(
        [JsonContent] Approval.Spec.PostApprovalOpenapiV2SubscriptionSubscribeBodyDto dto);

    /// <summary>
    /// <para>【通讯录】获取应用管理员管理范围</para>
    /// <para>接口ID：6907569742384971778</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/application-v6/admin/obtain-an-app-admin’s-management-permissions</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取应用管理员的管理范围，即该应用管理员能够管理哪些部门。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:app.admin:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_id">
    /// <para>必填：是</para>
    /// <para>支持通过 open_id 或者 employee_id 查询，不支持混合两种 ID 进行查询，其中 employee_id 同通讯录 v3 版本中的 user_id</para>
    /// </param>
    /// <param name="open_id">
    /// <para>必填：是</para>
    /// <para>支持通过 open_id 或者 employee_id 查询，不支持混合两种 ID 进行查询，其中 employee_id 同通讯录 v3 版本中的 user_id</para>
    /// </param>
    [HttpGet("/open-apis/contact/v1/user/admin_scope/get")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.Spec.GetContactV1UserAdminScopeGetResponseDto>> GetContactV1UserAdminScopeGetAsync(
        [PathQuery] string employee_id,
        [PathQuery] string open_id);

    /// <summary>
    /// <para>【应用信息】查询租户购买的付费方案</para>
    /// <para>接口ID：6907569742384988162</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/application-v6/appstore-paid-info/query-an-app-tenant’s-paid-orders</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于分页查询应用租户下的已付费订单，每次购买对应一个唯一的订单，订单会记录购买的套餐的相关信息，业务方需要自行处理套餐的有效期和付费方案的升级。</para>
    /// <para>备注：免费模式的应用不会产生订单，仅收费应用会产生订单 (含免费版)。</para>
    /// </summary>
    /// <param name="status">
    /// <para>必填：否</para>
    /// <para>获取用户购买套餐信息设置的过滤条件， normal为正常状态，refunded为已退款，该字段为空或者all表示所有，未支付的订单无法查到</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>每页显示的订单数量</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>翻页标识，可以从上次请求的响应中获取，不填或者为空时表示从开头获取</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="tenant_key">
    /// <para>必填：否</para>
    /// <para>购买应用的租户唯一标识，为空表示获取应用下所有订单，有值表示获取应用下该租户购买的订单</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/pay/v1/order/list")]
    System.Threading.Tasks.Task<FeishuResponse<Application.Spec.GetPayV1OrderListResponseDto>> GetPayV1OrderListAsync(
        [PathQuery] string? status = null,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? tenant_key = null);

    /// <summary>
    /// <para>【云文档】合并单元格</para>
    /// <para>接口ID：6907569742387707906</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/data-operation/merge-cells</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>合并电子表格工作表中的单元格。</para>
    /// <para>使用限制：</para>
    /// <para>单次操作范围不可超过 5,000 行、100 列。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheetToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/sheets/v2/spreadsheets/{spreadsheetToken}/merge_cells")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenMergeCellsResponseDto>> PostSheetsV2SpreadsheetsBySpreadsheetTokenMergeCellsAsync(
        [PathQuery] string spreadsheetToken,
        [JsonContent] Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenMergeCellsBodyDto dto);

    /// <summary>
    /// <para>【云文档】更新工作表属性</para>
    /// <para>接口ID：6907569743419473922</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet-sheet/update-sheet-properties</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新电子表格中的工作表。支持更新工作表的标题、位置，和隐藏、冻结、保护等属性。</para>
    /// <para>该接口和 [操作工作表](https://open.feishu.cn/document/ukTMukTMukTM/uYTMzUjL2EzM14iNxMTN) 的请求地址相同，但参数不同，调用前请仔细阅读文档。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型。默认为 `lark_id`，建议选择 `open_id` 或 `union_id`。了解更多，参考[用户身份概述](https://open.feishu.cn/document/home/user-identity-introduction/introduction)。可选值：</para>
    /// <para>- `open_id`：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。了解更多：[如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</para>
    /// <para>- `union_id`：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。了解更多：[如何获取 Union ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</para>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/sheets/v2/spreadsheets/{spreadsheet_token}/sheets_batch_update")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenSheetsBatchUpdate2ResponseDto>> PostSheetsV2SpreadsheetsBySpreadsheetTokenSheetsBatchUpdate2Async(
        [PathQuery] string spreadsheet_token,
        [JsonContent] Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenSheetsBatchUpdate2BodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【审批】审批实例抄送</para>
    /// <para>接口ID：6907569743419523074</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/approval/v2/feishu-native-approval/cc-instance</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>为了更好地提升接口文档的的易理解性，我们对文档进行了升级，请尽快迁移至[新版本&gt;&gt;](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/cc)</para>
    /// <para>通过接口可以将当前审批实例抄送给其他人。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/cc")]
    [HttpPost("https://www.feishu.cn/approval/openapi/v2/instance/cc")]
    System.Threading.Tasks.Task<FeishuResponse> PostApprovalOpenapiV2InstanceCcAsync(
        [JsonContent] Approval.Spec.PostApprovalOpenapiV2InstanceCcBodyDto dto);

    /// <summary>
    /// <para>【消息与群组】批量发送消息</para>
    /// <para>接口ID：6907569743419555842</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/batch_message/send-messages-in-batches</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>给多个用户或者多个部门中的成员发送消息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message</item>
    /// <item>im:message:send_as_bot</item>
    /// <item>im:message:send_multi_depts</item>
    /// <item>im:message:send_multi_users</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/message/v4/batch_send/")]
    System.Threading.Tasks.Task<FeishuResponse<Im.Spec.PostMessageV4BatchSendResponseDto>> PostMessageV4BatchSendAsync(
        [JsonContent] Im.Spec.PostMessageV4BatchSendBodyDto dto);

    /// <summary>
    /// <para>【审批】审批实例撤回</para>
    /// <para>接口ID：6907569743419670530</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/approval/v2/feishu-native-approval/approval-instance-cancel</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>为了更好地提升接口文档的的易理解性，我们对文档进行了升级，请尽快迁移至[新版本&gt;&gt;](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/cancel)</para>
    /// <para>对于状态为“审批中”的单个审批实例进行撤销操作，撤销后审批流程结束</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/cancel")]
    [HttpPost("https://www.feishu.cn/approval/openapi/v2/instance/cancel")]
    System.Threading.Tasks.Task<FeishuResponse> PostApprovalOpenapiV2InstanceCancelAsync(
        [JsonContent] Approval.Spec.PostApprovalOpenapiV2InstanceCancelBodyDto dto);

    /// <summary>
    /// <para>【审批】更新审批 Bot 消息</para>
    /// <para>接口ID：6907569743419752450</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/message/update-bot-messages</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用[发送审批 Bot 消息](https://open.feishu.cn/document/ukTMukTMukTM/ugDNyYjL4QjM24CO0IjN)接口后，可根据审批 Bot 消息 ID 及审批相应的状态，更新审批 Bot 消息。例如，给审批人推送了审批待办消息，当审批人通过审批后，可以将之前推送的 Bot 消息更新为已审批。</para>
    /// <para>使用限制：</para>
    /// <para>- 只能更新审批状态，以及审批同意或拒绝后的标题或者查看详情的文案。</para>
    /// <para>- 只能更新模板为 1008「收到审批待办」的卡片。</para>
    /// <para>- 只支持更新 30 天以内的审批 bot 消息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/approval/v1/message/update")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.Spec.PostApprovalV1MessageUpdateResponseDto>> PostApprovalV1MessageUpdateAsync(
        [JsonContent] Approval.Spec.PostApprovalV1MessageUpdateBodyDto dto);

    /// <summary>
    /// <para>【云文档】新建文件</para>
    /// <para>接口ID：6907569743419932674</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/file/create-online-document</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于在云空间指定文件夹中创建电子表格或者多维表格。</para>
    /// <para>使用限制：</para>
    /// <para>- 云空间中根目录或文件夹的单层节点上限为 1500 个。超过此限制时，接口将返回 1062507 错误码。可通过将文件新建到不同文件夹中解决。</para>
    /// <para>- 云空间中所有层级的节点总和的上限为 40 万个。</para>
    /// <para>- 该接口不支持并发调用，且调用频率上限为 5QPS 且 10000次/天。否则会返回 1061045 错误码，可通过稍后重试解决。</para>
    /// <para>- 该接口不支持创建[文档](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-overview)（文档类型为 `docx`），如需创建文档，请调用[创建文档](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document/create)接口。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:doc</item>
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="folderToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>指定新建文件所属的文件夹或云空间根目录的 token。了解如何获取文件夹 token，参考[文件夹概述](https://open.feishu.cn/document/ukTMukTMukTM/ugTNzUjL4UzM14CO1MTN/folder-overview)。</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [Obsolete("历史版本")]
    [HttpPost("/open-apis/drive/explorer/v2/file/{folderToken}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PostDriveExplorerV2FileByFolderTokenResponseDto>> PostDriveExplorerV2FileByFolderTokenAsync(
        [PathQuery] string folderToken,
        [JsonContent] Ccm.Spec.PostDriveExplorerV2FileByFolderTokenBodyDto dto);

    /// <summary>
    /// <para>【审批】审批任务同意</para>
    /// <para>接口ID：6907569743419981826</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/approval/v2/feishu-native-approval/approval-task-approve</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>为了更好地提升接口文档的的易理解性，我们对文档进行了升级，请尽快迁移至[新版本&gt;&gt;](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/task/approve)</para>
    /// <para>对于单个审批任务进行同意操作。同意后审批流程会流转到下一个审批人。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/task/approve")]
    [HttpPost("https://www.feishu.cn/approval/openapi/v2/instance/approve")]
    System.Threading.Tasks.Task<FeishuResponse> PostApprovalOpenapiV2InstanceApproveAsync(
        [JsonContent] Approval.Spec.PostApprovalOpenapiV2InstanceApproveBodyDto dto);

    /// <summary>
    /// <para>【云文档】插入行列</para>
    /// <para>接口ID：6907569743420194818</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/sheet-rowcol/insert-rows-or-columns</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于在电子表格的指定位置插入空白行或列。</para>
    /// <para>使用限制：</para>
    /// <para>单次调用该接口，最多支持插入 5000 行或列。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheetToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/sheets/v2/spreadsheets/{spreadsheetToken}/insert_dimension_range")]
    System.Threading.Tasks.Task<FeishuResponse> PostSheetsV2SpreadsheetsBySpreadsheetTokenInsertDimensionRangeAsync(
        [PathQuery] string spreadsheetToken,
        [JsonContent] Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenInsertDimensionRangeBodyDto dto);

    /// <summary>
    /// <para>【云文档】读取多个范围</para>
    /// <para>接口ID：6907569743420325890</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/data-operation/reading-multiple-ranges</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>读取电子表格中多个指定范围的数据。</para>
    /// <para>使用限制：</para>
    /// <para>- 该接口返回数据的最大限制为 10 MB。</para>
    /// <para>- 该接口不支持获取跨表引用和数组公式的计算结果。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheetToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>**示例值**："Iow7sNNEphp3WbtnbCscPqabcef"</para>
    /// </param>
    /// <param name="ranges">
    /// <para>必填：是</para>
    /// <para>多个查询范围，范围之间使用逗号分隔，如 `Q7PlXT!A2:B6,0b6377!B1:C8`。range 的格式为 `&lt;sheetId&gt;!&lt;开始位置&gt;:&lt;结束位置&gt;`。其中：</para>
    /// <para>- `sheetId` 为工作表 ID，通过[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query) 获取</para>
    /// <para>- `&lt;开始位置&gt;:&lt;结束位置&gt;` 为工作表中单元格的范围，数字表示行索引，字母表示列索引。如 `A2:B2` 表示该工作表第 2 行的 A 列到 B 列。`range`支持四种写法，详情参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)</para>
    /// <para>**注意**：若使用 `&lt;sheetId&gt;!&lt;开始单元格&gt;:&lt;结束列&gt;` 的写法时，仅支持获取 100 列数据。</para>
    /// </param>
    /// <param name="valueRenderOption">
    /// <para>必填：否</para>
    /// <para>指定单元格数据的格式。可选值如下所示。当参数缺省时，默认不进行公式计算，返回公式本身，且单元格为数值格式。</para>
    /// <para>- ToString：返回纯文本的值（数值类型除外）</para>
    /// <para>- Formula：单元格中含有公式时，返回公式本身</para>
    /// <para>- FormattedValue：计算并格式化单元格</para>
    /// <para>- UnformattedValue：计算但不对单元格进行格式化</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dateTimeRenderOption">
    /// <para>必填：否</para>
    /// <para>指定数据类型为日期、时间、或时间日期的单元格数据的格式。</para>
    /// <para>- 若不传值，默认返回浮点数值，整数部分为自 1899 年 12 月 30 日以来的天数；小数部分为该时间占 24 小时的份额。例如：若时间为 1900 年 1 月 1 日中午 12 点，则默认返回 2.5。其中，2 表示 1900 年 1 月 1 日为 1899 年12 月 30 日之后的 2 天；0.5 表示 12 点占 24 小时的二分之一，即 12/24=0.5。</para>
    /// <para>- 可选值为 FormattedString，此时接口将计算并对日期、时间、或时间日期类型的数据格式化并返回格式化后的字符串，但不会对数字进行格式化。</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>当单元格中包含@用户等涉及用户信息的元素时，该参数可指定返回的用户 ID 类型。默认为 `lark_id`，建议选择 `open_id` 或 `union_id`。了解更多，参考[用户身份概述](https://open.feishu.cn/document/home/user-identity-introduction/introduction)。可选值：</para>
    /// <para>- `open_id`：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。了解更多：[如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</para>
    /// <para>- `union_id`：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。了解更多：[如何获取 Union ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</para>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/sheets/v2/spreadsheets/{spreadsheetToken}/values_batch_get")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.GetSheetsV2SpreadsheetsBySpreadsheetTokenValuesBatchGetResponseDto>> GetSheetsV2SpreadsheetsBySpreadsheetTokenValuesBatchGetAsync(
        [PathQuery] string spreadsheetToken,
        [PathQuery] string ranges,
        [PathQuery] string? valueRenderOption = null,
        [PathQuery] string? dateTimeRenderOption = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】获取元数据</para>
    /// <para>接口ID：6907569743420637186</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/docs/drive/file/obtain-metadata</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于根据 token 获取各类文件的元数据。</para>
    /// <para>请求用户需要拥有该文件的访问（读）权限</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:drive.metadata:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/suite/docs-api/meta")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PostSuiteDocsApiMetaResponseDto>> PostSuiteDocsApiMetaAsync(
        [JsonContent] Ccm.Spec.PostSuiteDocsApiMetaBodyDto dto);

    /// <summary>
    /// <para>【审批】创建审批定义</para>
    /// <para>接口ID：6907569743420686338</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/approval/v2/feishu-store-app-integration/create-an-approval-definition</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>为了更好地提升接口文档的的易理解性，我们对文档进行了升级，请尽快迁移至[新版本&gt;&gt;](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/create)</para>
    /// <para>用于通过接口创建简单的审批定义，可以灵活指定定义的基础信息、表单和流程等。创建成功后，不支持从审批管理后台删除该定义。不推荐企业自建应用使用，如有需要尽量联系管理员在审批管理后台创建定义。</para>
    /// <para>接口谨慎调用，创建后的审批定义无法停用/删除</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/create")]
    [HttpPost("https://www.feishu.cn/approval/openapi/v2/approval/create")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.Spec.PostApprovalOpenapiV2ApprovalCreateResponseDto>> PostApprovalOpenapiV2ApprovalCreateAsync(
        [JsonContent] Approval.Spec.PostApprovalOpenapiV2ApprovalCreateBodyDto dto);

    /// <summary>
    /// <para>【通讯录】批量新增用户</para>
    /// <para>接口ID：6907569743420997634</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version//import-api/batch-add-users</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于向通讯录中批量新增多个用户。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item></item>
    /// <item></item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/contact/v2/user/batch_add")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.Spec.PostContactV2UserBatchAddResponseDto>> PostContactV2UserBatchAddAsync(
        [JsonContent] Contact.Spec.PostContactV2UserBatchAddBodyDto dto);

    /// <summary>
    /// <para>【云文档】转移拥有者</para>
    /// <para>接口ID：6907569744329719809</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/docs/drive/permission/transfer-ownership</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于根据文档信息和用户信息转移文档的所有者。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:doc</item>
    /// <item>drive:drive</item>
    /// <item>drive:file</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/drive/permission/member/transfer")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PostDrivePermissionMemberTransferResponseDto>> PostDrivePermissionMemberTransferAsync(
        [JsonContent] Ccm.Spec.PostDrivePermissionMemberTransferBodyDto dto);

    /// <summary>
    /// <para>【审批】三方审批定义创建</para>
    /// <para>接口ID：6907569744329883649</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/approval/v2/third-party-approval-integration/external-approval-create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>为了更好地提升接口文档的的易理解性，我们对文档进行了升级，请尽快迁移至[新版本&gt;&gt;](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_approval/create)</para>
    /// <para>审批定义是审批的描述，包括审批名称、图标、描述等基础信息。创建好审批定义，用户就可以在审批应用的发起页中看到审批，如果用户点击发起，则会跳转到配置的发起三方系统地址去发起审批。</para>
    /// <para>另外，审批定义还配置了审批操作时的回调地址：审批人在待审批列表中进行【同意】【拒绝】操作时，审批中心会调用回调地址通知三方系统。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_approval/create")]
    [HttpPost("https://www.feishu.cn/approval/openapi/v3/external/approval/create")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.Spec.PostApprovalOpenapiV3ExternalApprovalCreateResponseDto>> PostApprovalOpenapiV3ExternalApprovalCreateAsync(
        [JsonContent] Approval.Spec.PostApprovalOpenapiV3ExternalApprovalCreateBodyDto dto);

    /// <summary>
    /// <para>【云文档】获取表格元数据</para>
    /// <para>接口ID：6907569744330227713</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/docs/sheets/obtain-spreadsheet-metadata</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于根据 spreadsheetToken 获取表格元数据。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheetToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>spreadsheet 的 token；获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)</para>
    /// </param>
    /// <param name="extFields">
    /// <para>必填：否</para>
    /// <para>额外返回的字段，extFields=protectedRange时返回保护行列信息</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>返回的用户id类型，可选open_id,union_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/sheets/v2/spreadsheets/{spreadsheetToken}/metainfo")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.GetSheetsV2SpreadsheetsBySpreadsheetTokenMetainfoResponseDto>> GetSheetsV2SpreadsheetsBySpreadsheetTokenMetainfoAsync(
        [PathQuery] string spreadsheetToken,
        [PathQuery] string? extFields = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【审批】查看审批定义</para>
    /// <para>接口ID：6907569744330358785</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/approval/v2/feishu-native-approval/obtain-single-approval-form</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>为了更好地提升接口文档的的易理解性，我们对文档进行了升级，请尽快迁移至[新版本&gt;&gt;](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/get)</para>
    /// <para>根据 Approval Code 获取某个审批定义的详情，用于构造创建审批实例的请求。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/get")]
    [HttpPost("https://www.feishu.cn/approval/openapi/v2/approval/get")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.Spec.PostApprovalOpenapiV2ApprovalGetResponseDto>> PostApprovalOpenapiV2ApprovalGetAsync(
        [JsonContent] Approval.Spec.PostApprovalOpenapiV2ApprovalGetBodyDto dto);

    /// <summary>
    /// <para>【通讯录】获取角色列表</para>
    /// <para>接口ID：6907569744330391553</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version//user/obtain-a-role-list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取企业的用户角色列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item></item>
    /// <item></item>
    /// </list></para>
    /// </summary>
    [HttpGet("/open-apis/contact/v2/role/list")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.Spec.GetContactV2RoleListResponseDto>> GetContactV2RoleListAsync();

    /// <summary>
    /// <para>【应用信息】获取企业安装的应用</para>
    /// <para>接口ID：6907569744330555393</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/application-v6/admin/obtain-the-apps-installed-by-an-organization</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于查询企业安装的应用列表，只能被企业自建应用调用。</para>
    /// <para>该接口为旧版获取企业安装应用接口。推荐使用新版接口[获取企业安装的应用](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application/list)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:app.info:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页起始位置标示，不填表示从头开始（不保证 page_token 一定为数字，请填入上一次请求返回的 page_token）</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>单页需求最大个数（最大 100），0 自动最大个数</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="lang">
    /// <para>必填：否</para>
    /// <para>优先展示的应用信息的语言版本（zh_cn：中文，en_us：英文，ja_jp：日文）</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="status">
    /// <para>必填：否</para>
    /// <para>要返回的应用的状态，0:停用；1:启用；-1:全部，默认为 -1</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/application/v3/app/list")]
    System.Threading.Tasks.Task<FeishuResponse<Application.Spec.GetApplicationV3AppListResponseDto>> GetApplicationV3AppListAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? lang = null,
        [PathQuery] int? status = null);

    /// <summary>
    /// <para>【云文档】获取旧版文档中的电子表格元数据</para>
    /// <para>接口ID：6907569744330833921</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/docs/document/obtain-sheet-meta-info-in-doc</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>此接口只支持获取旧版文档数据。要获取新版文档（`docx` 类型）中的元数据，使用[获取文档元数据](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/meta/batch_query)接口。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:doc</item>
    /// <item>docs:doc:readonly</item>
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="docToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>doc 的 token，获取方式见 [如何获取云文档资源相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)</para>
    /// </param>
    [HttpGet("/open-apis/doc/v2/{docToken}/sheet_meta")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.GetDocV2ByDocTokenSheetMetaResponseDto>> GetDocV2ByDocTokenSheetMetaAsync(
        [PathQuery] string docToken);

    /// <summary>
    /// <para>【会议室】更新建筑物</para>
    /// <para>接口ID：6907569744330932225</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/meeting_room-v1/api-reference/update-building</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于编辑建筑信息，添加楼层，删除楼层，编辑楼层信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:room</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/meeting_room/building/update")]
    System.Threading.Tasks.Task<FeishuResponse> PostMeetingRoomBuildingUpdateAsync(
        [JsonContent] MeetingRoom.Spec.PostMeetingRoomBuildingUpdateBodyDto dto);

    /// <summary>
    /// <para>【云文档】增加行列</para>
    /// <para>接口ID：6907569744333864961</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/sheet-rowcol/add-rows-or-columns</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于在电子表格工作表中增加空白行或列。</para>
    /// <para>使用限制：</para>
    /// <para>- 单次调用该接口，最多支持增加 5000 行或列。</para>
    /// <para>- 该接口仅支持在工作表的行末尾或列末尾新增行列。要在指定位置新增行列，你需使用[插入行列](https://open.feishu.cn/document/ukTMukTMukTM/uQjMzUjL0IzM14CNyMTN)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/sheets/v2/spreadsheets/{spreadsheet_token}/dimension_range")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenDimensionRangeResponseDto>> PostSheetsV2SpreadsheetsBySpreadsheetTokenDimensionRangeAsync(
        [PathQuery] string spreadsheet_token,
        [JsonContent] Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenDimensionRangeBodyDto dto);

    /// <summary>
    /// <para>【审批】三方审批实例校验</para>
    /// <para>接口ID：6907569745298604034</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/approval/v2/third-party-approval-integration/external-approval-instance-check</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>为了更好地提升接口文档的的易理解性，我们对文档进行了升级，请尽快迁移至[新版本&gt;&gt;](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_instance/check)</para>
    /// <para>校验三方审批实例数据，用于判断服务端数据是否为最新的。用户提交实例最新更新时间，如果服务端不存在该实例，或者服务端实例更新时间不是最新的，则返回对应实例 id。</para>
    /// <para>例如，用户可以每隔5分钟，将最近5分钟产生的实例使用该接口进行对比。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_instance/check")]
    [HttpPost("https://www.feishu.cn/approval/openapi/v3/external/instance/check")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.Spec.PostApprovalOpenapiV3ExternalInstanceCheckResponseDto>> PostApprovalOpenapiV3ExternalInstanceCheckAsync(
        [JsonContent] Approval.Spec.PostApprovalOpenapiV3ExternalInstanceCheckBodyDto dto);

    /// <summary>
    /// <para>【审批】上传文件</para>
    /// <para>接口ID：6907569745298767874</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/file/upload-files</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>当审批表单中有图片或者附件控件时，开发者需要在调用[创建审批实例](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/create)前，将传入图片或附件控件的文件通过本接口上传到审批系统，接口会返回文件的 code，该 code 用于创建审批实例时为图片或附件控件赋值。</para>
    /// <para>例如，以下是创建审批实例时，图片控件值示例，其中的 value 为本接口返回的图片 code。</para>
    /// <para>{</para>
    /// <para>"id":"widget1",</para>
    /// <para>"type":"image",</para>
    /// <para>"value": ["D93653C3-2609-4EE0-8041-61DC1D84F0B5"]</para>
    /// <para>}</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    /// <param name="content">
    /// <para>必填：是</para>
    /// <para>文件</para>
    /// </param>
    [HttpPost("https://www.feishu.cn/approval/openapi/v2/file/upload")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.Spec.PostApprovalOpenapiV2FileUploadResponseDto>> PostApprovalOpenapiV2FileUploadAsync(
        [FormDataContent] Approval.Spec.PostApprovalOpenapiV2FileUploadBodyDto dto,
        [FormDataContent] FormDataFile content);

    /// <summary>
    /// <para>【应用信息】更新应用可用范围</para>
    /// <para>接口ID：6907569745298800642</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/application-v6/admin/update-the-availability-of-an-app</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于更新当前企业内自建应用或已安装的商店应用的可见范围，包括可用人员与禁用人员。更新后对线上立即生效。</para>
    /// <para>当通过接口新增用户或部门时，提前判断对应用户或部门是否已在禁用名单中，如果已在禁用名单中，则即便将用户或部门添加到可用名单，该用户或部门也无法看到该应用，即禁用名单优先级高于可用名单。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:app.visibility</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/application/v3/app/update_visibility")]
    System.Threading.Tasks.Task<FeishuResponse> PostApplicationV3AppUpdateVisibilityAsync(
        [JsonContent] Application.Spec.PostApplicationV3AppUpdateVisibilityBodyDto dto);

    /// <summary>
    /// <para>【云文档】向单个范围写入数据</para>
    /// <para>接口ID：6907569745298980866</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/data-operation/write-data-to-a-single-range</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>向电子表格某个工作表的单个指定范围中写入数据。若指定范围内已有数据，将被新写入的数据覆盖。</para>
    /// <para>使用限制：- 单次写入数据不得超过 5000 行、100列。</para>
    /// <para>- 每个单元格不超过 50,000 字符，由于服务端会增加控制字符，因此推荐每个单元格不超过 40,000 字符。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheetToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>**示例值**："Iow7sNNEphp3WbtnbCscPqabcef"</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/sheets/v2/spreadsheets/{spreadsheetToken}/values")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PutSheetsV2SpreadsheetsBySpreadsheetTokenValuesResponseDto>> PutSheetsV2SpreadsheetsBySpreadsheetTokenValuesAsync(
        [PathQuery] string spreadsheetToken,
        [JsonContent] Ccm.Spec.PutSheetsV2SpreadsheetsBySpreadsheetTokenValuesBodyDto dto);

    /// <summary>
    /// <para>【审批】批量获取审批实例ID</para>
    /// <para>接口ID：6907569745299046402</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/approval/v2/feishu-native-approval/batch-obtain-approval-instance-ids</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>为了更好地提升接口文档的的易理解性，我们对文档进行了升级，请尽快迁移至[新版本&gt;&gt;](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/list)</para>
    /// <para>根据 approval_code 批量获取审批实例的 instance_code，用于拉取租户下某个审批定义的全部审批实例。</para>
    /// <para>默认以审批创建时间排序。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/list")]
    [HttpPost("https://www.feishu.cn/approval/openapi/v2/instance/list")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.Spec.PostApprovalOpenapiV2InstanceListResponseDto>> PostApprovalOpenapiV2InstanceListAsync(
        [JsonContent] Approval.Spec.PostApprovalOpenapiV2InstanceListBodyDto dto);

    /// <summary>
    /// <para>【应用信息】获取机器人信息</para>
    /// <para>接口ID：6907569745299111938</para>
    /// <para>接口文档：https://open.feishu.cn/document/client-docs/bot-v3/obtain-bot-info</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取机器人的基本信息。</para>
    /// </summary>
    [HttpGet("/open-apis/bot/v3/info")]
    System.Threading.Tasks.Task<Application.Spec.GetBotV3InfoResponseDto> GetBotV3InfoAsync();

    /// <summary>
    /// <para>【会议室】回复会议室日程实例</para>
    /// <para>接口ID：6907569745299226626</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/meeting-room-event/reply-meeting-room-event-instance</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口用于回复会议室日程实例，支持回复未签到释放、提前结束释放、被管理员置为接受、被管理员置为拒绝。</para>
    /// <para>**说明**：你可以先调用[查询会议室忙闲](https://open.feishu.cn/document/ukTMukTMukTM/uIDOyUjLygjM14iM4ITN)接口，获取指定会议室的某一日程的 uid、original_time 信息，然后再调用本接口回复会议室日程。&lt;BR&gt;</para>
    /// <para>**ID说明**：日程 ID（event_id）格式为 `&lt;Uid&gt;_&lt;Original time&gt;`，因此你可以通过 event_id 获取日程的 Uid 和 Original time。例如，日程 ID 为 `c32537e6-e0a8-4506-b42f-47440655cdb4_0` ，则 Uid 为 `c32537e6-e0a8-4506-b42f-47440655cdb4`、Original time 为 `0`。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:room:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/meeting_room/instance/reply")]
    System.Threading.Tasks.Task<FeishuResponse> PostMeetingRoomInstanceReplyAsync(
        [JsonContent] MeetingRoom.Spec.PostMeetingRoomInstanceReplyBodyDto dto);

    /// <summary>
    /// <para>【会议室】查询建筑物ID</para>
    /// <para>接口ID：6907569745299374082</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/meeting_room-v1/api-reference/obtain-building-id</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于根据租户自定义建筑 ID 查询建筑 ID。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:room:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="custom_building_ids">
    /// <para>必填：是</para>
    /// <para>用于查询指定建筑物的租户自定义建筑ID</para>
    /// </param>
    [HttpGet("/open-apis/meeting_room/building/batch_get_id")]
    System.Threading.Tasks.Task<FeishuResponse<MeetingRoom.Spec.GetMeetingRoomBuildingBatchGetIdResponseDto>> GetMeetingRoomBuildingBatchGetIdAsync(
        [PathQuery] string[] custom_building_ids);

    /// <summary>
    /// <para>【云文档】操作工作表</para>
    /// <para>接口ID：6907569745299439618</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet-sheet/operate-sheets</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据电子表格的 token 对工作表进行操作，包括增加工作表、复制工作表、删除工作表。</para>
    /// <para>该接口和 [更新工作表属性](https://open.feishu.cn/document/ukTMukTMukTM/ugjMzUjL4IzM14COyMTN) 的请求地址相同，但参数不同，调用前请仔细阅读文档。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Ios7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/sheets/v2/spreadsheets/{spreadsheet_token}/sheets_batch_update")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenSheetsBatchUpdateResponseDto>> PostSheetsV2SpreadsheetsBySpreadsheetTokenSheetsBatchUpdateAsync(
        [PathQuery] string spreadsheet_token,
        [JsonContent] Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenSheetsBatchUpdateBodyDto dto);

    /// <summary>
    /// <para>【云文档】新建文件夹</para>
    /// <para>接口ID：6907569745299750914</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/docs/drive/folder/create-a-new-folder</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>为了更好地提升该接口的安全性，我们对其进行了升级，请尽快迁移至 [新版本&gt;&gt;](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/create_folder)</para>
    /// <para>该接口用于根据 folderToken 在该 folder 下创建文件夹。</para>
    /// <para>该接口不支持并发创建，且调用频率上限为 5QPS 以及 10000次/天</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// </list></para>
    /// </summary>
    /// <param name="folderToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文件夹的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction)</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/create_folder")]
    [HttpPost("/open-apis/drive/explorer/v2/folder/{folderToken}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PostDriveExplorerV2FolderByFolderTokenResponseDto>> PostDriveExplorerV2FolderByFolderTokenAsync(
        [PathQuery] string folderToken,
        [JsonContent] Ccm.Spec.PostDriveExplorerV2FolderByFolderTokenBodyDto dto);

    /// <summary>
    /// <para>【会议室】查询会议室ID</para>
    /// <para>接口ID：6907569745299767298</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/meeting_room-v1/api-reference/obtain-meeting-room-id</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于根据租户自定义会议室ID查询会议室ID。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:room:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="custom_room_ids">
    /// <para>必填：是</para>
    /// <para>用于查询指定会议室的租户自定义会议室ID</para>
    /// </param>
    [HttpGet("/open-apis/meeting_room/room/batch_get_id")]
    System.Threading.Tasks.Task<FeishuResponse<MeetingRoom.Spec.GetMeetingRoomRoomBatchGetIdResponseDto>> GetMeetingRoomRoomBatchGetIdAsync(
        [PathQuery] string[] custom_room_ids);

    /// <summary>
    /// <para>【通讯录】查询批量任务执行状态</para>
    /// <para>接口ID：6907569745299816450</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version//import-api/query-the-execution-status-of-a-batch-task</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于查询通讯录异步任务当前的执行状态以及执行结果。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item></item>
    /// <item></item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>必填：是</para>
    /// <para>批量任务接口返回的异步任务 ID。</para>
    /// </param>
    [HttpGet("/open-apis/contact/v2/task/get")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.Spec.GetContactV2TaskGetResponseDto>> GetContactV2TaskGetAsync(
        [PathQuery] string task_id);

    /// <summary>
    /// <para>【云文档】编辑旧版文档内容</para>
    /// <para>接口ID：6908984614439813122</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/docs/docs/content/batch-update-document</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>此接口只支持编辑旧版文档内容。要编辑新版文档（文档类型：`docx`）的内容，调用以下接口：</para>
    /// <para>- [创建块](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block-children/create)</para>
    /// <para>- [更新块](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block/patch)</para>
    /// <para>- [批量更新块](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block/batch_update)</para>
    /// <para>- [删除块](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block-children/batch_delete)</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:doc</item>
    /// <item>drive:drive</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/doc/v2/{docToken}/batch_update")]
    System.Threading.Tasks.Task<FeishuResponse> PostDocV2ByDocTokenBatchUpdateAsync(
        [JsonContent] Ccm.Spec.PostDocV2ByDocTokenBatchUpdateBodyDto dto);

    /// <summary>
    /// <para>【云文档】创建旧版文档</para>
    /// <para>接口ID：6908984614439829506</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/docs/docs/apiRef/create-document</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>此接口已废弃，不允许应用再调用该接口，若继续调用将返回 95054 的错误码。</para>
    /// <para>要创建文档，请使用[创建文档](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document/create)接口。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:doc</item>
    /// <item>drive:drive</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [Obsolete("历史版本")]
    [HttpPost("/open-apis/doc/v2/create")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PostDocV2CreateResponseDto>> PostDocV2CreateAsync(
        [JsonContent] Ccm.Spec.PostDocV2CreateBodyDto dto);

    /// <summary>
    /// <para>【云文档】获取旧版文档富文本内容</para>
    /// <para>接口ID：6908984614439845890</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/docs/docs/content/get-document</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>此接口只支持获取旧版文档富文本内容。要获取新版文档（文档类型：`docx`）的富文本内容，调用以下接口：</para>
    /// <para>- [获取文档所有块](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block/list)</para>
    /// <para>- [获取指定块](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block/get)</para>
    /// <para>- [获取指定块下所有子块](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block-children/get)</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:doc</item>
    /// <item>docs:doc:readonly</item>
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="docToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>获取方式详见[如何获取云文档资源相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)</para>
    /// </param>
    [HttpGet("/open-apis/doc/v2/{docToken}/content")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.GetDocV2ByDocTokenContentResponseDto>> GetDocV2ByDocTokenContentAsync(
        [PathQuery] string docToken);

    /// <summary>
    /// <para>【身份验证】JSAPI 临时授权凭证</para>
    /// <para>接口ID：6911312738021720065</para>
    /// <para>接口文档：https://open.feishu.cn/document/authentication-management/access-token/authorization</para>
    /// <para>Authorization：app_access_token、tenant_access_token、user_access_token</para>
    /// <para>该接口用于返回调用 JSAPI 临时调用凭证，使用该凭证调用 JSAPI 时，请求不会被拦截。</para>
    /// </summary>
    [HttpPost("/open-apis/jssdk/ticket/get")]
    System.Threading.Tasks.Task<FeishuResponse<Auth.Spec.PostJssdkTicketGetResponseDto>> PostJssdkTicketGetAsync();

    /// <summary>
    /// <para>【审批】获取三方审批任务状态</para>
    /// <para>接口ID：6915007875422568450</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/approval/v2/third-party-approval-integration/external_status</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>为了更好地提升接口文档的的易理解性，我们对文档进行了升级，请尽快迁移至[新版本&gt;&gt;](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_task/list)</para>
    /// <para>该接口用于获取三方审批的状态。用户传入查询条件，接口返回满足条件的审批实例的状态。</para>
    /// <para>该接口支持多种参数的组合， 包括如下组合：</para>
    /// <para>1. 通过 instance_ids 获取指定实例的任务状态</para>
    /// <para>2. 通过 user_ids 获取指定用户的任务状态</para>
    /// <para>3. 通过 status 获取指定状态的所有任务</para>
    /// <para>4. 获取下一批数据</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_task/list")]
    [HttpPost("https://www.feishu.cn/approval/openapi/v2/external/list")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.Spec.PostApprovalOpenapiV2ExternalListResponseDto>> PostApprovalOpenapiV2ExternalListAsync(
        [JsonContent] Approval.Spec.PostApprovalOpenapiV2ExternalListBodyDto dto);

    /// <summary>
    /// <para>【管理后台】获取行为审计日志数据</para>
    /// <para>接口ID：6921713375245352988</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/security_and_compliance-v1/audit_log/audit_data_get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于查询成员的操作行为日志。行为审计日志中记录了成员进行操作的时间、地点、操作对象等信息。通过查询成员行为日志，管理员可以发现成员是否有违规操作，以保护企业数据和信息安全。</para>
    /// <para>- 性能说明：查询时请适当缩短查询时间范围和适当控制查询频次（避免重复的无效查询等情况）</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:audit_info:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>**示例值**：user_id</para>
    /// <para>**可选值有**：</para>
    /// <para>open_id:标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid),union_id:标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id),user_id:标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</para>
    /// <para>**默认值**：`user_id`</para>
    /// <para>**当值为 `user_id`，字段权限要求**：</para>
    /// <para>- contact:user.employee_id:readonly : 获取用户 user ID</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](/ssl</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](/ssl</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](/ssl</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="latest">
    /// <para>必填：否</para>
    /// <para>日志时间范围： 结束时间。格式： 秒级时间戳。默认值： 此刻。起止日期之间相差不能超过30天</para>
    /// <para>**示例值**：1668700799</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="oldest">
    /// <para>必填：否</para>
    /// <para>日志时间范围： 起始时间。格式： 秒级时间戳。默认值：30日前此刻。起止日期之间相差不能超过30天</para>
    /// <para>**示例值**：1668528000</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="event_name">
    /// <para>必填：否</para>
    /// <para>行为审计的事件名称，可选事件名称见[枚举值列表](https://open.feishu.cn/document/ukTMukTMukTM/uQjM5YjL0ITO24CNykjN/audit_log/appendix)</para>
    /// <para>**示例值**：space_create_doc</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="operator_type">
    /// <para>必填：否</para>
    /// <para>过滤操作者: 操作者类型。 与 operator_value 配合使用，当填写operator_value时，此项必填</para>
    /// <para>**示例值**：user</para>
    /// <para>**可选值有**：</para>
    /// <para>user:用户,bot:[当前未开放] 以bot_id来识别用户</para>
    /// <list type="bullet">
    /// <item>user：用户</item>
    /// <item>bot：[当前未开放] 以bot_id来识别用户</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="operator_value">
    /// <para>必填：否</para>
    /// <para>操作者值</para>
    /// <para>**示例值**：55ed16fe</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="event_module">
    /// <para>必填：否</para>
    /// <para>行为审计的事件模块，可选事件模块见[枚举值列表](https://open.feishu.cn/document/ukTMukTMukTM/uQjM5YjL0ITO24CNykjN/audit_log/appendix)</para>
    /// <para>**示例值**：1</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>**示例值**：LC39/f1%2B/Sz9Uv39Gf39/ew/cd5WY0gfGYFdixOW9cVk4bC79ituO/gx0qpPn1bYf92nz/kI0nNJOG3wCwDJKoNU%2BtyaXbpI8pV/9UNDMZT0BNeyanFH17Wv711Qh9anR3l2GjQfc2fUqXtxg1YPp63XyhYY4iRMv54ySRG7r%2BI89iS3zAoPzFuuU1MUJKsf</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>**示例值**：20</para>
    /// <para>**默认值**：`20`</para>
    /// <para>**数据校验规则**：</para>
    /// <para>- 取值范围：`1` ～ `200`</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="user_type">
    /// <para>必填：否</para>
    /// <para>用户类型。此选项为空时，默认查询「组织内成员」。当填写此选项时，operator_type值必须为user。</para>
    /// <para>**示例值**：1</para>
    /// <para>**可选值有**：</para>
    /// <para>0:互联网上的任何人,1:组织内成员,2:组织外成员</para>
    /// <list type="bullet">
    /// <item>0：互联网上的任何人</item>
    /// <item>1：组织内成员</item>
    /// <item>2：组织外成员</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="object_type">
    /// <para>必填：否</para>
    /// <para>过滤操作对象: 操作对象类型. 与object_value配合使用</para>
    /// <para>**示例值**：1</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="object_value">
    /// <para>必填：否</para>
    /// <para>过滤操作对象: 操作对象ID. 与object_type配合使用</para>
    /// <para>**示例值**：55ed16fe</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/admin/v1/audit_infos")]
    System.Threading.Tasks.Task<FeishuResponse<Admin.Spec.GetAdminV1AuditInfosResponseDto>> GetAdminV1AuditInfosAsync(
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] int? latest = null,
        [PathQuery] int? oldest = null,
        [PathQuery] string? event_name = null,
        [PathQuery] string? operator_type = null,
        [PathQuery] string? operator_value = null,
        [PathQuery] int? event_module = null,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] int? user_type = null,
        [PathQuery] int? object_type = null,
        [PathQuery] string? object_value = null);

    /// <summary>
    /// <para>【视频会议】获取 Top 用户列表</para>
    /// <para>接口ID：6921909217674723355</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/report/get_top_user</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取一段时间内组织内会议使用的 Top 用户列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:report:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="start_time">
    /// <para>必填：是</para>
    /// <para>开始时间（unix时间，单位sec）</para>
    /// <para>示例值：1608888867</para>
    /// </param>
    /// <param name="end_time">
    /// <para>必填：是</para>
    /// <para>结束时间（unix时间，单位sec）</para>
    /// <para>示例值：1608889966</para>
    /// </param>
    /// <param name="limit">
    /// <para>必填：是</para>
    /// <para>取前多少位</para>
    /// <para>示例值：10</para>
    /// </param>
    /// <param name="order_by">
    /// <para>必填：是</para>
    /// <para>排序依据（降序）</para>
    /// <para>示例值：1</para>
    /// <list type="bullet">
    /// <item>1：会议数量</item>
    /// <item>2：会议时长</item>
    /// </list>
    /// </param>
    /// <param name="unit">
    /// <para>必填：否</para>
    /// <para>数据驻留地（传参前提是租户存在多个驻留地数据且开通了该查询功能）</para>
    /// <para>示例值：0</para>
    /// <list type="bullet">
    /// <item>0：中国大陆</item>
    /// <item>1：美国</item>
    /// <item>2：新加坡</item>
    /// <item>3：日本</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/vc/v1/reports/get_top_user")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.GetVcV1ReportsGetTopUserResponseDto>> GetVcV1ReportsGetTopUserAsync(
        [PathQuery] string start_time,
        [PathQuery] string end_time,
        [PathQuery] int limit,
        [PathQuery] int order_by,
        [PathQuery] int? unit = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】查询会议室配置</para>
    /// <para>接口ID：6921909217674739739</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/meeting_room-v1/room_config/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询一个范围内的会议室配置。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="scope">
    /// <para>必填：是</para>
    /// <para>查询节点范围</para>
    /// <para>示例值：5</para>
    /// <list type="bullet">
    /// <item>1：租户</item>
    /// <item>2：国家/地区</item>
    /// <item>3：城市</item>
    /// <item>4：建筑</item>
    /// <item>5：楼层</item>
    /// <item>6：会议室</item>
    /// </list>
    /// </param>
    /// <param name="country_id">
    /// <para>必填：否</para>
    /// <para>国家/地区ID scope为2，3时需要此参数</para>
    /// <para>示例值：086</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="district_id">
    /// <para>必填：否</para>
    /// <para>城市ID scope为3时需要此参数</para>
    /// <para>示例值：001</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="building_id">
    /// <para>必填：否</para>
    /// <para>建筑ID scope为4，5时需要此参数</para>
    /// <para>示例值：22</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="floor_name">
    /// <para>必填：否</para>
    /// <para>楼层 scope为5时需要此参数</para>
    /// <para>示例值：4</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="room_id">
    /// <para>必填：否</para>
    /// <para>会议室ID scope为6时需要此参数</para>
    /// <para>示例值：6383786266263</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的用户ID的类型，默认使用open_id可不填</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/vc/v1/room_configs/query")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.GetVcV1RoomConfigsQueryResponseDto>> GetVcV1RoomConfigsQueryAsync(
        [PathQuery] int scope,
        [PathQuery] string? country_id = null,
        [PathQuery] string? district_id = null,
        [PathQuery] string? building_id = null,
        [PathQuery] string? floor_name = null,
        [PathQuery] string? room_id = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】设置会议室配置</para>
    /// <para>接口ID：6921909217674756123</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/meeting_room-v1/room_config/set</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>设置一个范围内的会议室配置。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的用户ID的类型，默认使用open_id可不填</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/vc/v1/room_configs/set")]
    System.Threading.Tasks.Task<FeishuResponse> PostVcV1RoomConfigsSetAsync(
        [JsonContent] Vc.PostVcV1RoomConfigsSetBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】设置主持人</para>
    /// <para>接口ID：6921909217674805275</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/meeting/set_host</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>设置会议的主持人。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:meeting</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="meeting_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>会议ID（视频会议的唯一标识，视频会议开始后才会产生）</para>
    /// <para>示例值：6911188411932033028</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/vc/v1/meetings/{meeting_id}/set_host")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.PatchVcV1MeetingsByMeetingIdSetHostResponseDto>> PatchVcV1MeetingsByMeetingIdSetHostAsync(
        [PathQuery] string meeting_id,
        [JsonContent] Vc.PatchVcV1MeetingsByMeetingIdSetHostBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】获取会议报告</para>
    /// <para>接口ID：6921909217674821659</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/report/get_daily</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取一段时间内组织的每日会议使用报告。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:report:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="start_time">
    /// <para>必填：是</para>
    /// <para>开始时间（unix时间，单位sec）</para>
    /// <para>示例值：1608888867</para>
    /// </param>
    /// <param name="end_time">
    /// <para>必填：是</para>
    /// <para>结束时间（unix时间，单位sec）</para>
    /// <para>示例值：1608888966</para>
    /// </param>
    /// <param name="unit">
    /// <para>必填：否</para>
    /// <para>数据驻留地（传参前提是租户存在多个驻留地数据且开通了该查询功能）</para>
    /// <para>示例值：0</para>
    /// <list type="bullet">
    /// <item>0：中国大陆</item>
    /// <item>1：美国</item>
    /// <item>2：新加坡</item>
    /// <item>3：日本</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/vc/v1/reports/get_daily")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.GetVcV1ReportsGetDailyResponseDto>> GetVcV1ReportsGetDailyAsync(
        [PathQuery] string start_time,
        [PathQuery] string end_time,
        [PathQuery] int? unit = null);

    /// <summary>
    /// <para>【视频会议】更新预约</para>
    /// <para>接口ID：6921909217674854427</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/reserve/update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新一个预约。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:reserve</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="reserve_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>预约ID（预约的唯一标识）</para>
    /// <para>示例值：6911188411932033028</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/vc/v1/reserves/{reserve_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.PutVcV1ReservesByReserveIdResponseDto>> PutVcV1ReservesByReserveIdAsync(
        [PathQuery] string reserve_id,
        [JsonContent] Vc.PutVcV1ReservesByReserveIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】获取预约</para>
    /// <para>接口ID：6921909217674936347</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/reserve/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取一个预约的详情。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:reserve:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="reserve_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>预约ID（预约的唯一标识）</para>
    /// <para>示例值：6911188411932033028</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/vc/v1/reserves/{reserve_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.GetVcV1ReservesByReserveIdResponseDto>> GetVcV1ReservesByReserveIdAsync(
        [PathQuery] string reserve_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】获取活跃会议</para>
    /// <para>接口ID：6921909217674952731</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/reserve/get_active_meeting</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取一个预约的当前活跃会议。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:reserve:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="reserve_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>预约ID（预约的唯一标识）</para>
    /// <para>示例值：6911188411932033028</para>
    /// </param>
    /// <param name="with_participants">
    /// <para>必填：否</para>
    /// <para>是否需要参会人列表，默认为false</para>
    /// <para>示例值：false</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/vc/v1/reserves/{reserve_id}/get_active_meeting")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.GetVcV1ReservesByReserveIdGetActiveMeetingResponseDto>> GetVcV1ReservesByReserveIdGetActiveMeetingAsync(
        [PathQuery] string reserve_id,
        [PathQuery] bool? with_participants = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】创建附件</para>
    /// <para>接口ID：6921988678870040577</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/attachment/create_attachment</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>在招聘系统中上传附件文件，上传的附件为通用附件。</para>
    /// <para>使用限制：</para>
    /// <para>文件大小不得超过 300 MB。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:attachment</item>
    /// </list></para>
    /// </summary>
    /// <param name="content">
    /// <para>必填：是</para>
    /// <para>文件二进制内容，最大 300 MB</para>
    /// </param>
    [HttpPost("/open-apis/hire/v1/attachments")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.Spec.PostHireV1AttachmentsResponseDto>> PostHireV1AttachmentsAsync(
        [FormDataContent] FormDataFile content);

    /// <summary>
    /// <para>【会议室】查询会议室日程主题和会议详情</para>
    /// <para>接口ID：6922096654371831836</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/meeting-room-event/</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口使用日程的 Uid 和 Original time 查询会议室日程主题与详情。</para>
    /// <para>日程 ID（event_id）格式为 `&lt;Uid&gt;_&lt;Original time&gt;`，因此你可以通过 event_id 获取日程的 Uid 和 Original time。例如，日程 ID 为 `c32537e6-e0a8-4506-b42f-47440655cdb4_0` ，则 Uid 为 `c32537e6-e0a8-4506-b42f-47440655cdb4`、Original time 为 `0`。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:room</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/meeting_room/summary/batch_get")]
    System.Threading.Tasks.Task<FeishuResponse<MeetingRoom.Spec.PostMeetingRoomSummaryBatchGetResponseDto>> PostMeetingRoomSummaryBatchGetAsync(
        [JsonContent] MeetingRoom.Spec.PostMeetingRoomSummaryBatchGetBodyDto dto);

    /// <summary>
    /// <para>【云文档】获取保护范围</para>
    /// <para>接口ID：6923123667871596572</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/protect-range/retrieve-protection-scopes</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取电子表格工作表中指定保护范围的信息，包括保护的行列索引、支持编辑的用户 ID、保护范围的备注等。</para>
    /// <para>使用限制：</para>
    /// <para>- 单次调用该接口，最多支持获取 5 个保护范围的信息。</para>
    /// <para>- 不支持获取包含多个区域的保护范围。即如果一个保护范围中添加了多个区域，例如 B22:B26 和 C26:C28，则不支持调用该接口获取。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheetToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>**示例值**："Iow7sNNEphp3WbtnbCscPqabcef"</para>
    /// </param>
    /// <param name="protectIds">
    /// <para>必填：是</para>
    /// <para>保护范围的 ID，可通过[获取表格元数据](https://open.feishu.cn/document/ukTMukTMukTM/uETMzUjLxEzM14SMxMTN)接口获取。多个 ID 之间用逗号分隔。最多可传入 5 个 ID。</para>
    /// <para>**示例值**："7379738014546812456,7379738014546812456"</para>
    /// </param>
    /// <param name="memberType">
    /// <para>必填：否</para>
    /// <para>返回的用户 ID 的类型。默认为 `userId`，建议选择 `openId`。了解更多，参考[用户身份概述](https://open.feishu.cn/document/home/user-identity-introduction/introduction)。可选值：</para>
    /// <para>- `userId`：即 `lark_id`，为全局 ID，标识用户的物理用户身份。</para>
    /// <para>- `openId`：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。了解更多：[如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</para>
    /// <para>- `unionId`：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。了解更多：[如何获取 Union ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/sheets/v2/spreadsheets/{spreadsheetToken}/protected_range_batch_get")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.GetSheetsV2SpreadsheetsBySpreadsheetTokenProtectedRangeBatchGetResponseDto>> GetSheetsV2SpreadsheetsBySpreadsheetTokenProtectedRangeBatchGetAsync(
        [PathQuery] string spreadsheetToken,
        [PathQuery] string protectIds,
        [PathQuery] string? memberType = null);

    /// <summary>
    /// <para>【云文档】修改保护范围</para>
    /// <para>接口ID：6923123667871612956</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/protect-range/modify-protection-scopes</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>修改电子表格工作表中指定的保护范围。</para>
    /// <para>使用限制：单次调用该接口，最多支持修改 10 个保护范围。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheetToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>**示例值**："Iow7sNNEphp3WbtnbCscPqabcef"</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/sheets/v2/spreadsheets/{spreadsheetToken}/protected_range_batch_update")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenProtectedRangeBatchUpdateResponseDto>> PostSheetsV2SpreadsheetsBySpreadsheetTokenProtectedRangeBatchUpdateAsync(
        [PathQuery] string spreadsheetToken,
        [JsonContent] Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenProtectedRangeBatchUpdateBodyDto dto);

    /// <summary>
    /// <para>【云文档】删除保护范围</para>
    /// <para>接口ID：6923123667871629340</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/protect-range/delete-protection-scopes</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据保护范围 ID 删除保护范围。</para>
    /// <para>注意事项：单次调用该接口，最多支持删除 10 个保护范围。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheetToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>**示例值**："Iow7sNNEphp3WbtnbCscPqabcef"</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpDelete("/open-apis/sheets/v2/spreadsheets/{spreadsheetToken}/protected_range_batch_del")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.DeleteSheetsV2SpreadsheetsBySpreadsheetTokenProtectedRangeBatchDelResponseDto>> DeleteSheetsV2SpreadsheetsBySpreadsheetTokenProtectedRangeBatchDelAsync(
        [PathQuery] string spreadsheetToken,
        [JsonContent] Ccm.Spec.DeleteSheetsV2SpreadsheetsBySpreadsheetTokenProtectedRangeBatchDelBodyDto dto);

    /// <summary>
    /// <para>【云文档】批量删除条件格式</para>
    /// <para>接口ID：6939784115499859996</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/conditionformat/condition-format-delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除已有的条件格式。支持跨工作表删除多个条件格式。</para>
    /// <para>使用限制：单次调用该接口，最多支持删除 10 个条件格式。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpDelete("/open-apis/sheets/v2/spreadsheets/{spreadsheet_token}/condition_formats/batch_delete")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.DeleteSheetsV2SpreadsheetsBySpreadsheetTokenConditionFormatsBatchDeleteResponseDto>> DeleteSheetsV2SpreadsheetsBySpreadsheetTokenConditionFormatsBatchDeleteAsync(
        [PathQuery] string spreadsheet_token,
        [JsonContent] Ccm.Spec.DeleteSheetsV2SpreadsheetsBySpreadsheetTokenConditionFormatsBatchDeleteBodyDto dto);

    /// <summary>
    /// <para>【云文档】批量创建条件格式</para>
    /// <para>接口ID：6939784115499892764</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/conditionformat/condition-format-set</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>在电子表格工作表的指定区域中，为满足指定条件的单元格和单元格中的数据设置样式。支持跨工作表创建多个条件格式。</para>
    /// <para>使用限制：</para>
    /// <para>- 单次调用该接口，最多支持创建 10 个条件格式。</para>
    /// <para>- 单个工作表中最多支持 20 个条件格式。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/sheets/v2/spreadsheets/{spreadsheet_token}/condition_formats/batch_create")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenConditionFormatsBatchCreateResponseDto>> PostSheetsV2SpreadsheetsBySpreadsheetTokenConditionFormatsBatchCreateAsync(
        [PathQuery] string spreadsheet_token,
        [JsonContent] Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenConditionFormatsBatchCreateBodyDto dto);

    /// <summary>
    /// <para>【云文档】批量获取条件格式</para>
    /// <para>接口ID：6939784115499909148</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/conditionformat/condition-format-get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据工作表 ID 获取详细的条件格式信息，最多支持同时查询 10 个工作表的条件格式。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// </param>
    /// <param name="sheet_ids">
    /// <para>必填：否</para>
    /// <para>电子表格工作表的 ID。调用[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query)获取 ID。多个 ID 使用逗号分隔。</para>
    /// <para>**示例值**：`xxxID1,xxxID2`</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/sheets/v2/spreadsheets/{spreadsheet_token}/condition_formats")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.GetSheetsV2SpreadsheetsBySpreadsheetTokenConditionFormatsResponseDto>> GetSheetsV2SpreadsheetsBySpreadsheetTokenConditionFormatsAsync(
        [PathQuery] string spreadsheet_token,
        [PathQuery] string[]? sheet_ids = null);

    /// <summary>
    /// <para>【云文档】批量更新条件格式</para>
    /// <para>接口ID：6939784115499925532</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/conditionformat/condition-format-update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新已有的条件格式。支持跨工作表更新多个条件格式。该接口为全量更新接口，若非必填参数不传值，将改变原有配置。</para>
    /// <para>使用限制：</para>
    /// <para>单次调用该接口，最多支持更新 10 个条件格式。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/sheets/v2/spreadsheets/{spreadsheet_token}/condition_formats/batch_update")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenConditionFormatsBatchUpdateResponseDto>> PostSheetsV2SpreadsheetsBySpreadsheetTokenConditionFormatsBatchUpdateAsync(
        [PathQuery] string spreadsheet_token,
        [JsonContent] Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenConditionFormatsBatchUpdateBodyDto dto);

    /// <summary>
    /// <para>【实名认证】查询人脸认证结果</para>
    /// <para>接口ID：6940461543747256348</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/human_authentication-v1/query-recognition-result</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>人脸比对流程，开发者后台调用此接口请求飞书后台，对本次活体比对结果做校验，支持查询有源认证与无源认证结果。</para>
    /// <para>人脸比对接入需申请白名单，接入前请联系飞书开放平台工作人员，邮箱：open-platform@bytedance.com。</para>
    /// </summary>
    /// <param name="req_order_no">
    /// <para>必填：是</para>
    /// <para>人脸识别单次唯一标识，由`tt.startFaceVerify`接口返回</para>
    /// </param>
    /// <param name="open_id">
    /// <para>必填：否</para>
    /// <para>用户应用标识, 与employee_id二选其一</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="employee_id">
    /// <para>必填：否</para>
    /// <para>用户租户标识, 与open_id二选其一</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="ticket_type">
    /// <para>必填：否</para>
    /// <para>认证方式标识，可取值'verify'或空; verify表示查询有源认证结果,缺省表示查询无源认证结果</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/face_verify/v1/query_auth_result")]
    System.Threading.Tasks.Task<FeishuResponse<HumanAuthentication.Spec.GetFaceVerifyV1QueryAuthResultResponseDto>> GetFaceVerifyV1QueryAuthResultAsync(
        [PathQuery] string req_order_no,
        [PathQuery] string? open_id = null,
        [PathQuery] string? employee_id = null,
        [PathQuery] string? ticket_type = null);

    /// <summary>
    /// <para>【实名认证】上传人脸基准图片</para>
    /// <para>接口ID：6940461543747272732</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/human_authentication-v1/upload-facial-reference-image</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>无源人脸比对流程，开发者后台通过调用此接口将基准图片上传到飞书后台，做检测时的对比使用。</para>
    /// <para>无源人脸比对接入需申请白名单，接入前请联系飞书开放平台工作人员，邮箱：open-platform@bytedance.com。</para>
    /// </summary>
    /// <param name="open_id">
    /// <para>必填：否</para>
    /// <para>用户应用标识, 与employee_id二选其一</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="employee_id">
    /// <para>必填：否</para>
    /// <para>用户租户标识, 与open_id二选其一</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="image">
    /// <para>必填：是</para>
    /// <para>带有头像的人脸照片</para>
    /// </param>
    [HttpPost("/open-apis/face_verify/v1/upload_face_image")]
    System.Threading.Tasks.Task<FeishuResponse<HumanAuthentication.Spec.PostFaceVerifyV1UploadFaceImageResponseDto>> PostFaceVerifyV1UploadFaceImageAsync(
        [FormDataContent] FormDataFile image,
        [PathQuery] string? open_id = null,
        [PathQuery] string? employee_id = null);

    /// <summary>
    /// <para>【实名认证】裁剪人脸图片</para>
    /// <para>接口ID：6940461543747289116</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/human_authentication-v1/facial-image-cropping</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>无源人脸比对流程，开发者后台通过调用此接口对基准图片做规范校验及处理。</para>
    /// <para>无源人脸比对接入需申请白名单，接入前请联系飞书开放平台工作人员，邮箱：open-platform@bytedance.com。</para>
    /// </summary>
    /// <param name="raw_image">
    /// <para>必填：是</para>
    /// <para>带有头像的人脸照片文件名称</para>
    /// </param>
    [HttpPost("/open-apis/face_verify/v1/crop_face_image")]
    System.Threading.Tasks.Task<FeishuResponse<HumanAuthentication.Spec.PostFaceVerifyV1CropFaceImageResponseDto>> PostFaceVerifyV1CropFaceImageAsync(
        [FormDataContent] FormDataFile raw_image);

    /// <summary>
    /// <para>【实名认证】录入身份信息</para>
    /// <para>接口ID：6940461543747305500</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/human_authentication-v1/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于录入实名认证的身份信息，在唤起有源活体认证前，需要使用该接口进行实名认证。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>human_authentication:identity</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id">
    /// <para>必填：是</para>
    /// <para>用户的唯一标识（使用的ID类型见下一参数描述，不同ID类型的区别和获取，参考文档：[如何获得 User ID、Open ID 和 Union ID？](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get)）</para>
    /// <para>示例值：ou_2eb5483cb377daa5054bc6f86e2089a5</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/human_authentication/v1/identities")]
    System.Threading.Tasks.Task<FeishuResponse<HumanAuthentication.PostHumanAuthenticationV1IdentitiesResponseDto>> PostHumanAuthenticationV1IdentitiesAsync(
        [PathQuery] string user_id,
        [JsonContent] HumanAuthentication.PostHumanAuthenticationV1IdentitiesBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【通讯录】获取父部门信息</para>
    /// <para>接口ID：6943913881476775963</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/department/parent</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口递归获取指定部门的父部门信息，包括部门名称、ID、负责人以及状态等。</para>
    /// <para>## 注意事项</para>
    /// <para>- 使用应用身份（tenant_access_token）调用本接口时，该接口只返回应用通讯录可见范围内的父部门信息。例如有 A &gt; B &gt; C &gt; D 四层级部门关系，当前应用的通讯录权限内只包含了 B 部门，那么查询 D 部门的父部门信息时，只会返回 B、C 部门信息，不会返回 A 部门信息。了解权限范围参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>- 使用用户身份（user_access_token）调用本接口时，只返回对当前用户有可见性的部门信息。用户的组织架构可见范围需要由企业管理员在[管理后台](https://feishu.cn/admin/index) &gt; **安全** &gt; **成员权限** &gt; **组织架构可见范围** 内调整。</para>
    /// <para>- 所能查询到的父部门不包括根部门。</para>
    /// <para>- 当返回列表内包含多个部门信息时，会按照由子部门到父部门的顺序进行展示。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:contact.base:readonly</item>
    /// <item>contact:department.organize:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:department.base:readonly</item>
    /// <item>contact:department.hrbp:readonly</item>
    /// <item>contact:department.organize:readonly</item>
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。</para>
    /// <para>**默认值**：open_department_id</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 `od-`，在租户内全局唯一。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="department_id">
    /// <para>必填：是</para>
    /// <para>部门 ID。ID 类型需要与查询参数 department_id_type 的取值保持一致。</para>
    /// <para>当你在创建部门时，可从返回结果中获取到部门 ID 信息，你也可以调用[搜索部门](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/search)接口，获取所需的部门 ID。</para>
    /// <para>示例值：od-4e6ac4d14bcd5071a37a39de902c7141</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：AQD9/Rn9eij9Pm39ED40/RD/cIFmu77WxpxPB/2oHfQLZ%2BG8JG6tK7%2BZnHiT7COhD2hMSICh/eBl7cpzU6JEC3J7COKNe4jrQ8ExwBCR</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，用于限制一次请求所返回的数据条目数。</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/departments/parent")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3DepartmentsParentResponseDto>> GetContactV3DepartmentsParentAsync(
        [PathQuery] string department_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【通讯录】修改用户部分信息</para>
    /// <para>接口ID：6943913881476792347</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/user/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口更新通讯录中指定用户的信息，包括名称、邮箱、手机号、所属部门以及自定义字段等信息。</para>
    /// <para>## 注意事项</para>
    /// <para>- 发送请求时，未传递的参数不会更新。</para>
    /// <para>- 并发操作冻结用户时，因事务冲突会遇到概率性的接口调用失败。因此，请尝试降低请求速率或改为串行执行。</para>
    /// <para>- 更新 `department_ids`、`is_frozen` 时，限制调用频率为 1 QPS。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact</item>
    /// <item>contact:user.base</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:user.base:readonly</item>
    /// <item>contact:user.department:readonly</item>
    /// <item>contact:user.dotted_line_leader_info.read</item>
    /// <item>contact:user.email:readonly</item>
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>contact:user.employee_number:read</item>
    /// <item>contact:user.employee:readonly</item>
    /// <item>contact:user.gender:readonly</item>
    /// <item>contact:user.job_family:readonly</item>
    /// <item>contact:user.job_level:readonly</item>
    /// <item>contact:user.phone:readonly</item>
    /// <item>directory:employee.base.email:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户 ID，ID 类型需要与查询参数中的 user_id_type 类型保持一致。</para>
    /// <para>示例值：ou_7dab8a3d3cdcc9da365777c7ad535d62</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 od-，在租户内全局唯一。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/contact/v3/users/{user_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.PatchContactV3UsersByUserIdResponseDto>> PatchContactV3UsersByUserIdAsync(
        [PathQuery] string user_id,
        [JsonContent] Contact.PatchContactV3UsersByUserIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【通讯录】更新用户所有信息</para>
    /// <para>接口ID：6943913881476808731</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version//user/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于更新通讯录中用户的字段。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:user.base:readonly</item>
    /// <item>contact:user.department:readonly</item>
    /// <item>contact:user.email:readonly</item>
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>contact:user.employee:readonly</item>
    /// <item>contact:user.gender:readonly</item>
    /// <item>contact:user.phone:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户ID，需要与查询参数中的user_id_type类型保持一致。</para>
    /// <para>示例值：ou_7dab8a3d3cdcc9da365777c7ad535d62</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：以自定义department_id来标识部门</item>
    /// <item>open_department_id：以open_department_id来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/contact/v3/users/{user_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.PutContactV3UsersByUserIdResponseDto>> PutContactV3UsersByUserIdAsync(
        [PathQuery] string user_id,
        [JsonContent] Contact.PutContactV3UsersByUserIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【通讯录】创建部门</para>
    /// <para>接口ID：6943913881476857883</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/department/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口在通讯录内创建一个部门。</para>
    /// <para>## 注意事项</para>
    /// <para>只可在应用的通讯录权限范围内的部门下创建部门。如果需要在根部门下创建子部门，则应用的通讯录权限范围需要设置为 **全部成员**。了解更多可参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>## 使用限制</para>
    /// <para>- 单租户内部门总数上限为 30,000。</para>
    /// <para>- 单租户内单个部门的直属成员数量上限为 10,000。</para>
    /// <para>- 单租户内单个部门的直属子部门数量上限为 1,000。</para>
    /// <para>- 部门层级上限为 25 层。</para>
    /// <para>- 该接口不支持设置自定义部门字段。如果必须在创建部门时设置自定义部门字段，请联系企业管理员在 [管理后台](https://feishu.cn/admin) &gt; **组织架构** &gt; **成员与部门** &gt; **部门** 功能页创建部门并设置自定义部门字段。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:department.base:readonly</item>
    /// <item>contact:department.hrbp:readonly</item>
    /// <item>contact:department.organize:readonly</item>
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。</para>
    /// <para>**默认值**：open_department_id</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 `od-`，在租户内全局唯一。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>用于幂等判断是否为同一请求，避免重复请求。字符串类型，需要你自行生成参数值。</para>
    /// <para>**默认值**：空</para>
    /// <para>示例值：473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/contact/v3/departments")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.PostContactV3DepartmentsResponseDto>> PostContactV3DepartmentsAsync(
        [JsonContent] Contact.PostContactV3DepartmentsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【通讯录】获取用户列表</para>
    /// <para>接口ID：6943913881476874267</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version//user/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>基于部门ID获取部门下直属用户列表。</para>
    /// <para>[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:department.organize:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:user.base:readonly</item>
    /// <item>contact:user.department:readonly</item>
    /// <item>contact:user.email:readonly</item>
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>contact:user.employee:readonly</item>
    /// <item>contact:user.gender:readonly</item>
    /// <item>contact:user.job_family:readonly</item>
    /// <item>contact:user.job_level:readonly</item>
    /// <item>contact:user.phone:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的用户ID的类型</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型</para>
    /// <para>示例值：open_department_type</para>
    /// <list type="bullet">
    /// <item>department_id：以自定义department_id来标识部门</item>
    /// <item>open_department_id：以open_department_id来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="department_id">
    /// <para>必填：否</para>
    /// <para>填写该字段表示获取部门下所有用户，选填。</para>
    /// <para>示例值：od-xxxxxxxxxxxxx</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>示例值：AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS%2BJKiSIkdexPw=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/users")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3UsersResponseDto>> GetContactV3UsersAsync(
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? department_id = null,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【通讯录】删除用户</para>
    /// <para>接口ID：6943913881476907035</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/user/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口从通讯录内删除一个指定用户（该动作可以理解为员工离职），删除时可通过请求参数将用户所有的群组、文档、日程和应用等数据转让至他人。</para>
    /// <para>## 注意事项</para>
    /// <para>- 调用该接口的应用的[通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)必须包含用户所属的部门。例如，待删除用户归属部门 A、部门 B，则应用的通讯录权限范围必须包括部门 A 和部门 B，这样才可以成功删除用户。</para>
    /// <para>- 删除用户后，你可以调用[获取单个用户信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/get)接口，通过用户 ID 查询用户的状态（响应参数 status），从而确保用户已成功删除（对应已离职状态）。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户 ID。ID 类型需要与查询参数中的 user_id_type 类型保持一致。用户 ID 获取方式可参见[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)。</para>
    /// <para>示例值：ou_7dab8a3d3cdcc9da365777c7ad535d62</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpDelete("/open-apis/contact/v3/users/{user_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteContactV3UsersByUserIdAsync(
        [PathQuery] string user_id,
        [JsonContent] Contact.DeleteContactV3UsersByUserIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【通讯录】修改部门部分信息</para>
    /// <para>接口ID：6943913881476923419</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/department/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口更新指定部门的部分信息，包括名称、父部门、排序以及负责人等。</para>
    /// <para>## 注意事项</para>
    /// <para>- 调用该接口更新部门信息时，所涉及的所有部门需要在应用的通讯录权限范围内，否则会调用失败，并报无权限错误。了解权限范围，参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>- 本接口不是全量更新接口，如果某一请求参数不传值，则默认不会修改对应的部门信息（注意：leaders、department_hrbps 如果传入空数组，则会把原有值清空）。如果你需要使用全量更新接口，可参见[更新部门所有信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/update)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:department.base:readonly</item>
    /// <item>contact:department.hrbp:readonly</item>
    /// <item>contact:department.organize:readonly</item>
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="department_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>部门 ID，ID 类型需要与查询参数 department_id_type 的取值保持一致。ID 获取方式说明：</para>
    /// <para>- 调用[创建部门](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/create)接口后，可从返回结果中获取到部门 ID 信息。</para>
    /// <para>- 部门 API 提供了多种获取其他部门 ID 的方式，如[获取子部门列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/children)、[获取父部门信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/parent)、[搜索部门](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/search)，你可以选择合适的 API 进行查询。</para>
    /// <para>示例值：D096</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 `od-`，在租户内全局唯一。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/contact/v3/departments/{department_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.PatchContactV3DepartmentsByDepartmentIdResponseDto>> PatchContactV3DepartmentsByDepartmentIdAsync(
        [PathQuery] string department_id,
        [JsonContent] Contact.PatchContactV3DepartmentsByDepartmentIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【通讯录】创建用户</para>
    /// <para>接口ID：6943913881476939803</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/user/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口向通讯录创建一个用户（该动作可以理解为员工入职）。成功创建用户后，系统会以短信或邮件的形式向用户发送邀请，用户在同意邀请后方可访问企业或团队。</para>
    /// <para>## 注意事项</para>
    /// <para>- 创建用户时，所操作的所有部门均需要在当前应用的通讯录权限范围内，才能成功创建。如果需要在根部门下创建用户，则应用必须有全员权限。关于通讯录权限范围的具体说明可参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>- 发送请求后获取到的响应数据受接口的字段权限要求影响，接口只返回有权限的数据，因此你在调用前需要为应用申请必要的接口权限和字段权限。如何申请 API 权限可参见[申请 API 权限](https://open.feishu.cn/document/ukTMukTMukTM/uQjN3QjL0YzN04CN2cDN)。</para>
    /// <para>## 使用限制</para>
    /// <para>- 未认证企业的人数上限为 100。</para>
    /// <para>- 已认证企业的人数上限在不同飞书版本里不相同，具体参考[版本对比](https://www.feishu.cn/service)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:user.base:readonly</item>
    /// <item>contact:user.department:readonly</item>
    /// <item>contact:user.dotted_line_leader_info.read</item>
    /// <item>contact:user.email:readonly</item>
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>contact:user.employee_number:read</item>
    /// <item>contact:user.employee:readonly</item>
    /// <item>contact:user.gender:readonly</item>
    /// <item>contact:user.job_family:readonly</item>
    /// <item>contact:user.job_level:readonly</item>
    /// <item>contact:user.phone:readonly</item>
    /// <item>contact:user.user_geo</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 `od-`，在租户内全局唯一。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>用于幂等判断是否为同一请求，避免重复创建。请参考参数示例值，传入自定义的 client_token。</para>
    /// <para>**默认值**：空，表示不进行幂等判断</para>
    /// <para>示例值：abcd-12345-e6f</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/contact/v3/users")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.PostContactV3UsersResponseDto>> PostContactV3UsersAsync(
        [JsonContent] Contact.PostContactV3UsersBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【通讯录】获取单个用户信息</para>
    /// <para>接口ID：6943913881476956187</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/user/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口获取通讯录中某一用户的信息，包括用户 ID、名称、邮箱、手机号、状态以及所属部门等信息。</para>
    /// <para>## 注意事项</para>
    /// <para>使用应用身份（tenant_access_token）调用本接口时，响应结果中不会返回部门路径字段（department_path）。因此，如需获取部门路径字段值，请为应用申请 **获取成员所在部门路径** API 权限，并使用用户身份（user_access_token）调用接口。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:contact.base:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:user.assign_info:read</item>
    /// <item>contact:user.base:readonly</item>
    /// <item>contact:user.department_path:readonly</item>
    /// <item>contact:user.department:readonly</item>
    /// <item>contact:user.dotted_line_leader_info.read</item>
    /// <item>contact:user.email:readonly</item>
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>contact:user.employee_number:read</item>
    /// <item>contact:user.employee:readonly</item>
    /// <item>contact:user.gender:readonly</item>
    /// <item>contact:user.job_family:readonly</item>
    /// <item>contact:user.job_level:readonly</item>
    /// <item>contact:user.phone:readonly</item>
    /// <item>contact:user.user_geo</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户ID。ID 类型与查询参数 `user_id_type` 保持一致。</para>
    /// <para>示例值：7be5fg9a</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>指定查询结果中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 od-，在租户内全局唯一。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/users/{user_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3UsersByUserIdResponseDto>> GetContactV3UsersByUserIdAsync(
        [PathQuery] string user_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【通讯录】获取部门信息列表</para>
    /// <para>接口ID：6943913881476972571</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version//department/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于获取当前部门子部门列表。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:department.organize:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:department.base:readonly</item>
    /// <item>contact:department.hrbp:readonly</item>
    /// <item>contact:department.organize:readonly</item>
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的用户ID的类型</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：以自定义department_id来标识部门</item>
    /// <item>open_department_id：以open_department_id来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="parent_department_id">
    /// <para>必填：否</para>
    /// <para>父部门的ID，填上获取部门下所有子部门，此处填写的 ID 必须是 department_id_type 指定的 ID。</para>
    /// <para>示例值：od-4e6ac4d14bcd5071a37a39de902c7141</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="fetch_child">
    /// <para>必填：否</para>
    /// <para>是否递归获取子部门</para>
    /// <para>示例值：是否递归获取子部门，默认值：false</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>示例值：AQD9/Rn9eij9Pm39ED40/RD/cIFmu77WxpxPB/2oHfQLZ%2BG8JG6tK7%2BZnHiT7COhD2hMSICh/eBl7cpzU6JEC3J7COKNe4jrQ8ExwBCR</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    [Obsolete("历史版本")]
    [HttpGet("/open-apis/contact/v3/departments")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3DepartmentsResponseDto>> GetContactV3DepartmentsAsync(
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? parent_department_id = null,
        [PathQuery] bool? fetch_child = null,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【通讯录】获取单个部门信息</para>
    /// <para>接口ID：6943913881476988955</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/department/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口获取单个部门信息，包括部门名称、ID、父部门、负责人、状态以及成员个数等。</para>
    /// <para>## 注意事项</para>
    /// <para>使用不同身份调用本接口时，需要注意不同身份所需的不同权限范围。具体说明如下：</para>
    /// <para>- 当你使用应用身份（tenant_access_token）调用本接口时，应用的通讯录权限范围内需要包含当前被查询的部门。如果需要查询根部门信息，则应用的通讯录权限范围需设置为 **全部成员**。了解权限范围参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>- 当你使用用户身份（user_access_token）调用本接口时，需要确保该用户身份拥有待查询部门的可见性。如果需要查询根部门信息，则用户需要可见所有人。用户的组织架构可见范围需要由企业管理员在[管理后台](https://feishu.cn/admin/index) &gt; **安全** &gt; **成员权限** &gt; **组织架构可见范围** 内调整。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:contact.base:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:department.base:readonly</item>
    /// <item>contact:department.hrbp:readonly</item>
    /// <item>contact:department.organize:readonly</item>
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="department_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>部门 ID，ID 类型需要与查询参数 department_id_type 的取值保持一致。ID 获取方式说明：</para>
    /// <para>- 调用[创建部门](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/create)接口后，可从返回结果中获取到部门 ID 信息。</para>
    /// <para>- 部门 API 提供了多种获取其他部门 ID 的方式，如[获取子部门列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/children)、[获取父部门信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/parent)、[搜索部门](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/search)，你可以选择合适的 API 进行查询。</para>
    /// <para>示例值：D096</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 `od-`，在租户内全局唯一。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/departments/{department_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3DepartmentsByDepartmentIdResponseDto>> GetContactV3DepartmentsByDepartmentIdAsync(
        [PathQuery] string department_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【通讯录】删除部门</para>
    /// <para>接口ID：6943913881477005339</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/department/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口从通讯录中删除指定的部门。</para>
    /// <para>## 注意事项</para>
    /// <para>- 应用需要同时拥有待删除部门及其父部门的通讯录权限范围。如何设置通讯录权限范围，可参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>- 待删除的部门下边不能包含用户或子部门。</para>
    /// <para>- 你可以调用[获取部门直属用户列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/find_by_department)接口，查看部门下的用户信息。如果有存量用户，可以根据实际情况调用[修改用户部分信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/patch)接口，修改这部分用户的所属部门，或者[删除用户](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/delete)。</para>
    /// <para>- 你可以调用[获取子部门列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/children)接口，查看部门下的子部门信息。如果有存量子部门，可以根据实际情况调用[修改部门部分信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/patch)接口，修改子部门的父部门，或者[删除子部门](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/delete)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact</item>
    /// </list></para>
    /// </summary>
    /// <param name="department_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>部门 ID，ID 类型需要与查询参数 department_id_type 的取值保持一致。ID 获取方式说明：</para>
    /// <para>- 调用[创建部门](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/create)接口后，可从返回结果中获取到部门 ID 信息。</para>
    /// <para>- 部门 API 提供了多种获取其他部门 ID 的方式，如[获取子部门列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/children)、[获取父部门信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/parent)、[搜索部门](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/search)，你可以选择合适的 API 进行查询。</para>
    /// <para>示例值：D096</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 `od-`，在租户内全局唯一。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    [HttpDelete("/open-apis/contact/v3/departments/{department_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteContactV3DepartmentsByDepartmentIdAsync(
        [PathQuery] string department_id,
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【通讯录】更新部门所有信息</para>
    /// <para>接口ID：6943913881477021723</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/department/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口更新指定部门的信息，包括名称、父部门以及负责人等信息。</para>
    /// <para>## 注意事项</para>
    /// <para>- 调用该接口更新部门信息时，所涉及的所有部门需要在应用的通讯录权限范围内，否则会调用失败，并报无权限错误。了解权限范围，参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>- 本接口是全量更新接口，没有传值的请求参数默认会被置为空值（部门排序 order 参数除外）。如果你只需要更新部门的部分信息，可参见[修改部门部分信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/patch)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:department.base:readonly</item>
    /// <item>contact:department.organize:readonly</item>
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="department_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>部门 ID，ID 类型需要与查询参数 department_id_type 的取值保持一致。ID 获取方式说明：</para>
    /// <para>- 调用[创建部门](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/create)接口后，可从返回结果中获取到部门 ID 信息。</para>
    /// <para>- 部门 API 提供了多种获取其他部门 ID 的方式，如[获取子部门列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/children)、[获取父部门信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/parent)、[搜索部门](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/search)，你可以选择合适的 API 进行查询。</para>
    /// <para>示例值：D096</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 `od-`，在租户内全局唯一。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/contact/v3/departments/{department_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.PutContactV3DepartmentsByDepartmentIdResponseDto>> PutContactV3DepartmentsByDepartmentIdAsync(
        [PathQuery] string department_id,
        [JsonContent] Contact.PutContactV3DepartmentsByDepartmentIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【云文档】删除下拉列表设置</para>
    /// <para>接口ID：6943917246700257282</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/datavalidation/delete-datavalidation</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除电子表格工作表指定范围中下拉列表的设置，但仍保留选项文本。</para>
    /// <para>使用限制：单次删除请求可指定多个范围，单个范围指定的单元格不可超过 5,000 个，范围的总数不可超过 100 个。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheetToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpDelete("/open-apis/sheets/v2/spreadsheets/{spreadsheetToken}/dataValidation")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.DeleteSheetsV2SpreadsheetsBySpreadsheetTokenDataValidationResponseDto>> DeleteSheetsV2SpreadsheetsBySpreadsheetTokenDataValidationAsync(
        [PathQuery] string spreadsheetToken,
        [JsonContent] Ccm.Spec.DeleteSheetsV2SpreadsheetsBySpreadsheetTokenDataValidationBodyDto dto);

    /// <summary>
    /// <para>【云文档】设置下拉列表</para>
    /// <para>接口ID：6943917246700290050</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/datavalidation/set-dropdown</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>在电子表格工作表中为指定区域添加下拉列表选项，并设置下拉列表的属性，包括是否支持多选、设置下拉选项样式等。若一个数据区域中已有数据，支持将有效数据直接转为下拉列表中的选项。</para>
    /// <para>使用限制：</para>
    /// <para>单次调用该接口，最多支持为 5,000 行、100 列设置下拉列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheetToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/sheets/v2/spreadsheets/{spreadsheetToken}/dataValidation")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenDataValidationResponseDto>> PostSheetsV2SpreadsheetsBySpreadsheetTokenDataValidationAsync(
        [PathQuery] string spreadsheetToken,
        [JsonContent] Ccm.Spec.PostSheetsV2SpreadsheetsBySpreadsheetTokenDataValidationBodyDto dto);

    /// <summary>
    /// <para>【云文档】查询下拉列表设置</para>
    /// <para>接口ID：6943917246700306434</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/datavalidation/query-datavalidation</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>查询电子表格工作表中指定范围的下拉列表的设置信息。</para>
    /// <para>使用限制：</para>
    /// <para>单次查询范围不得超过 5000 行、100列。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheetToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// </param>
    /// <param name="range">
    /// <para>必填：是</para>
    /// <para>查询范围。格式为 `&lt;sheetId&gt;!&lt;开始位置&gt;:&lt;结束位置&gt;`。其中：</para>
    /// <para>- `sheetId` 为工作表 ID，通过[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query) 获取</para>
    /// <para>- `&lt;开始位置&gt;:&lt;结束位置&gt;` 为工作表中单元格的范围，数字表示行索引，字母表示列索引。如 `A2:B2` 表示该工作表第 2 行的 A 列到 B 列。`range`支持四种写法，详情参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)</para>
    /// </param>
    /// <param name="dataValidationType">
    /// <para>必填：是</para>
    /// <para>数据验证类型。取固定值 "list"，表示下拉列表。</para>
    /// </param>
    [HttpGet("/open-apis/sheets/v2/spreadsheets/{spreadsheetToken}/dataValidation")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.GetSheetsV2SpreadsheetsBySpreadsheetTokenDataValidationResponseDto>> GetSheetsV2SpreadsheetsBySpreadsheetTokenDataValidationAsync(
        [PathQuery] string spreadsheetToken,
        [PathQuery] string range,
        [PathQuery] string dataValidationType);

    /// <summary>
    /// <para>【云文档】更新下拉列表设置</para>
    /// <para>接口ID：6943917246700322818</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/datavalidation/update-datavalidation</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新电子表格工作表中单个下拉列表的设置，支持更新下拉列表的选项和属性，包括是否支持多选、下拉选项的样式等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheetToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// </param>
    /// <param name="sheetId">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格工作表的 ID。调用[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query)获取 ID。</para>
    /// </param>
    /// <param name="dataValidationId">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格工作表中下拉列表的 ID。调用[查询下拉列表](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/datavalidation/query-datavalidation)获取 ID。</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/sheets/v2/spreadsheets/{spreadsheetToken}/dataValidation/{sheetId}/{dataValidationId}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.PutSheetsV2SpreadsheetsBySpreadsheetTokenDataValidationBySheetIdByDataValidationIdResponseDto>> PutSheetsV2SpreadsheetsBySpreadsheetTokenDataValidationBySheetIdByDataValidationIdAsync(
        [PathQuery] string spreadsheetToken,
        [PathQuery] string sheetId,
        [PathQuery] int dataValidationId,
        [JsonContent] Ccm.Spec.PutSheetsV2SpreadsheetsBySpreadsheetTokenDataValidationBySheetIdByDataValidationIdBodyDto dto);

    /// <summary>
    /// <para>【消息与群组】查询消息已读信息</para>
    /// <para>接口ID：6946222929790386204</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/message/read_users</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询指定消息是否已读。接口只返回已读用户的信息，不返回未读用户的信息。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability) 。</para>
    /// <para>- 查询消息已读信息时，机器人需要在待查询消息所在的会话内。</para>
    /// <para>## 使用限制</para>
    /// <para>- 只能查询由当前机器人自己发送的、发送时间不超过 7 天的消息已读信息。</para>
    /// <para>- 一次请求只能查询一条消息，不支持批量查询。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message</item>
    /// <item>im:message:basic</item>
    /// <item>im:message:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="message_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待查询的消息 ID。ID 获取方式：</para>
    /// <para>- 调用[发送消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create)接口后，从响应结果的 `message_id` 参数获取。</para>
    /// <para>- 监听[接收消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/events/receive)事件，当触发该事件后可以从事件体内获取消息的 `message_id`。</para>
    /// <para>- 调用[获取会话历史消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/list)接口，从响应结果的 `message_id` 参数获取。</para>
    /// <para>示例值：om_dc13264520392913993dd051dba21dcf</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：是</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，用于限制单次请求所返回的数据条目数。</para>
    /// <para>示例值：20</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：GxmvlNRvP0NdQZpa7yIqf_Lv_QuBwTQ8tXkX7w-irAghVD_TvuYd1aoJ1LQph86O-XImC4X9j9FhUPhXQDvtrQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/im/v1/messages/{message_id}/read_users")]
    System.Threading.Tasks.Task<FeishuResponse<Im.GetImV1MessagesByMessageIdReadUsersResponseDto>> GetImV1MessagesByMessageIdReadUsersAsync(
        [PathQuery] string message_id,
        [PathQuery] string user_id_type = "open_id",
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【消息与群组】判断用户或机器人是否在群里</para>
    /// <para>接口ID：6946222929790418972</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat-member/is_in_chat</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据使用的 access_token 判断对应的用户或者机器人是否在指定的群里。</para>
    /// <para>## 前提条件</para>
    /// <para>调用该接口的应用，需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>## 使用限制</para>
    /// <para>获取内部群信息时，操作者须与群组在同一租户下。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat:readonly</item>
    /// <item>im:chat.group_info:readonly</item>
    /// <item>im:chat.members:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>示例值：oc_a0553eda9014c201e6969b478895c230</para>
    /// </param>
    [HttpGet("/open-apis/im/v1/chats/{chat_id}/members/is_in_chat")]
    System.Threading.Tasks.Task<FeishuResponse<Im.GetImV1ChatsByChatIdMembersIsInChatResponseDto>> GetImV1ChatsByChatIdMembersIsInChatAsync(
        [PathQuery] string chat_id);

    /// <summary>
    /// <para>【消息与群组】获取群公告信息</para>
    /// <para>接口ID：6946222929790435356</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat-announcement/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取指定群组中的群公告信息，公告信息格式与[旧版云文档](https://open.feishu.cn/document/ukTMukTMukTM/uAzM5YjLwMTO24CMzkjN)格式相同。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 调用当前接口的用户或者机器人必须在对应的群组内。</para>
    /// <para>- 获取内部群信息时，调用当前接口的用户或者机器人必须与对应群组在同一租户下。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat:readonly</item>
    /// <item>im:chat.announcement:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>**注意**：单聊（群类型为 `p2p`）不支持获取群公告。</para>
    /// <para>示例值：oc_5ad11d72b830411d72b836c20</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/im/v1/chats/{chat_id}/announcement")]
    System.Threading.Tasks.Task<FeishuResponse<Im.GetImV1ChatsByChatIdAnnouncementResponseDto>> GetImV1ChatsByChatIdAnnouncementAsync(
        [PathQuery] string chat_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【消息与群组】获取指定消息的内容</para>
    /// <para>接口ID：6946222929790451740</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/message/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口通过消息的 `message_id` 查询消息内容。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 机器人必须在消息所属的群组内。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message</item>
    /// <item>im:message:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="message_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>消息 ID。ID 获取方式：</para>
    /// <para>- 调用[发送消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create)接口后，从响应结果的 `message_id` 参数获取。</para>
    /// <para>- 监听[接收消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/events/receive)事件，当触发该事件后可以从事件体内获取消息的 `message_id`。</para>
    /// <para>- 调用[获取会话历史消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/list)接口，从响应结果的 `message_id` 参数获取。</para>
    /// <para>示例值：om_dc13264520392913993dd051dba21dcf</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/im/v1/messages/{message_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Im.GetImV1MessagesByMessageIdResponseDto>> GetImV1MessagesByMessageIdAsync(
        [PathQuery] string message_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【消息与群组】将用户或机器人移出群聊</para>
    /// <para>接口ID：6946222929790468124</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat-member/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>将指定的用户或机器人从群聊中移出。</para>
    /// <para>## 前提条件</para>
    /// <para>调用该接口的应用，需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>## 使用限制</para>
    /// <para>- 仅群主、群管理员，或者是创建群组且具有 **更新应用所创建群的群信息（im:chat:operate_as_owner）** 权限的机器人，可以将其他群成员移出群组。</para>
    /// <para>- 用户或机器人在任何条件下均可将自己移出群组（即主动退群）。</para>
    /// <para>- 每次请求，最多移除 50 个用户或者 5 个机器人。</para>
    /// <para>- 操作内部群时，操作者须与群组在同一租户下。</para>
    /// <para>- 操作同一个群组时，如果同时多次调用当前接口，可能会出现 232019 错误码，建议你串行调用，即等待当前调用完成后再进行下一次调用。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat.members:write_only</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>**注意**：仅支持群模式为 **群组（group）**、**话题（topic）** 的群组 ID。你可以调用[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)接口，在返回结果中查看 `chat_mode` 参数取值是否为 `group`、`topic`。</para>
    /// <para>示例值：oc_a0553eda9014c201e6969b478895c230</para>
    /// </param>
    /// <param name="member_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>app_id：飞书开放平台应用的唯一标识。在创建应用时，由系统自动生成，用户不能自行修改。[了解更多：如何获取应用的 App ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-app-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpDelete("/open-apis/im/v1/chats/{chat_id}/members")]
    System.Threading.Tasks.Task<FeishuResponse<Im.DeleteImV1ChatsByChatIdMembersResponseDto>> DeleteImV1ChatsByChatIdMembersAsync(
        [PathQuery] string chat_id,
        [JsonContent] Im.DeleteImV1ChatsByChatIdMembersBodyDto dto,
        [PathQuery] string? member_id_type = "open_id");

    /// <summary>
    /// <para>【消息与群组】回复消息</para>
    /// <para>接口ID：6946222929790500892</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/message/reply</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口回复指定消息。回复的内容支持文本、富文本、卡片、群名片、个人名片、图片、视频、文件等多种类型。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 回复用户消息（即单聊消息）时，用户需要在机器人的[可用范围](https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/availability)内。</para>
    /// <para>- 回复群消息时，机器人需要在群中，且拥有发言权限。</para>
    /// <para>## 使用限制</para>
    /// <para>为避免消息发送频繁对用户造成打扰，向同一用户发送消息的限频为 ==5 QPS==、向同一群组发送消息的限频为群内机器人共享 ==5 QPS==。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message</item>
    /// <item>im:message:send</item>
    /// <item>im:message:send_as_bot</item>
    /// </list></para>
    /// </summary>
    /// <param name="message_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待回复的消息的 ID。ID 获取方式：</para>
    /// <para>- 调用[发送消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create)接口后，从响应结果的 `message_id` 参数获取。</para>
    /// <para>- 监听[接收消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/events/receive)事件，当触发该事件后可以从事件体内获取消息的 `message_id`。</para>
    /// <para>- 调用[获取会话历史消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/list)接口，从响应结果的 `message_id` 参数获取。</para>
    /// <para>示例值：om_dc13264520392913993dd051dba21dcf</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/im/v1/messages/{message_id}/reply")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PostImV1MessagesByMessageIdReplyResponseDto>> PostImV1MessagesByMessageIdReplyAsync(
        [PathQuery] string message_id,
        [JsonContent] Im.PostImV1MessagesByMessageIdReplyBodyDto dto);

    /// <summary>
    /// <para>【消息与群组】下载文件</para>
    /// <para>接口ID：6946222929790517276</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/file/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过已上传文件的 Key 下载文件。</para>
    /// <para>## 前提条件</para>
    /// <para>应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>## 使用限制</para>
    /// <para>- 只能下载由当前机器人上传的文件。</para>
    /// <para>- 下载的资源大小不能超过 100 MB。</para>
    /// <para>- 该接口仅适用于通过文件的 Key 下载文件。如果你需要下载用户发送消息内的资源文件，可使用[获取消息中的资源文件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-resource/get)接口。</para>
    /// <para>- 如果需要 Content-Disposition header，发起请求时需要在 header 中设置 Content-Type 为 application/json。</para>
    /// </summary>
    /// <param name="file_key">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文件的 Key，通过[上传文件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/file/create)接口上传文件后，从返回结果中获取。</para>
    /// <para>示例值：file_456a92d6-c6ea-4de4-ac3f-7afcf44ac78g</para>
    /// </param>
    /// <returns>返回文件二进制流</returns>
    [HttpGet("/open-apis/im/v1/files/{file_key}")]
    System.Threading.Tasks.Task<HttpResponseMessage> GetImV1FilesByFileKeyAsync(
        [PathQuery] string file_key);

    /// <summary>
    /// <para>【消息与群组】获取群成员列表</para>
    /// <para>接口ID：6946222929790550044</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat-member/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取指定群组的成员信息，包括成员名字与 ID。</para>
    /// <para>## 前提条件</para>
    /// <para>- 调用该接口的应用，需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 当前接口的操作者（机器人或用户）必须在被查询的群组内。</para>
    /// <para>## 使用限制</para>
    /// <para>- 该接口不会返回群组内的机器人成员。</para>
    /// <para>- 由于返回的群成员列表会过滤掉机器人成员，因此返回的群成员个数可能会小于指定的 page_size。</para>
    /// <para>- 如果有同一时间加入群的群成员，会一次性返回，这会导致返回的群成员个数可能会大于指定的 page_size。</para>
    /// <para>- 获取内部群信息时，操作者须与群组在同一租户下。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat:readonly</item>
    /// <item>im:chat.group_info:readonly</item>
    /// <item>im:chat.members:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>示例值：oc_a0553eda9014c201e6969b478895c230</para>
    /// </param>
    /// <param name="member_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，用来限制一次请求所返回的数据条目数。</para>
    /// <para>- 由于返回的群成员列表会过滤掉机器人成员，因此返回的群成员个数可能会小于指定的 page_size。</para>
    /// <para>- 如果有同一时间加入群的群成员，会一次性返回，这会导致返回的群成员个数可能会大于指定的 page_size。</para>
    /// <para>示例值：20 **默认值**：`20` **数据校验规则**： - 最大值：`100`</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：WWxHTStrOEs5WHZpNktGbU94bUcvMWlxdDUzTWt1OXNrRmlLaGRNVG0yaz0=</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/im/v1/chats/{chat_id}/members")]
    System.Threading.Tasks.Task<FeishuResponse<Im.GetImV1ChatsByChatIdMembersResponseDto>> GetImV1ChatsByChatIdMembersAsync(
        [PathQuery] string chat_id,
        [PathQuery] string? member_id_type = "open_id",
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【消息与群组】下载图片</para>
    /// <para>接口ID：6946222929790582812</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/image/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过已上传图片的 Key 值下载图片。</para>
    /// <para>## 前提条件</para>
    /// <para>应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>## 使用限制</para>
    /// <para>- 只能下载由当前机器人上传的图片，且上传时图片类型为 **用于发送消息**。**用于设置头像** 的图片暂不支持下载。</para>
    /// <para>- 该接口仅适用于通过图片的 Key 下载图片。如果你需要下载用户发送消息内的资源文件，可使用[获取消息中的资源文件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-resource/get)接口。</para>
    /// </summary>
    /// <param name="image_key">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>图片的 Key，通过[上传图片](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/image/create)接口上传图片后，在返回结果中获取。</para>
    /// <para>示例值：img_8d5181ca-0aed-40f0-b0d1-b1452132afbg</para>
    /// </param>
    /// <returns>返回文件二进制流</returns>
    [HttpGet("/open-apis/im/v1/images/{image_key}")]
    System.Threading.Tasks.Task<HttpResponseMessage> GetImV1ImagesByImageKeyAsync(
        [PathQuery] string image_key);

    /// <summary>
    /// <para>【消息与群组】用户或机器人主动加入群聊</para>
    /// <para>接口ID：6946222929790631964</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat-member/me_join</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>将当前调用接口的操作者（用户或机器人）加入指定群聊。</para>
    /// <para>## 前提条件</para>
    /// <para>应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>## 使用限制</para>
    /// <para>- 调用该接口仅支持加入公开群。</para>
    /// <para>公开群是指的群类型，你可以调用[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)接口，在返回结果中查看 `chat_type ` 参数取值是否为 `public`。</para>
    /// <para>- 操作内部群时，操作者必须与相应的群组在同一租户内。</para>
    /// <para>内部群是指的群标签，你可以调用[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)接口，在返回结果中查看 `chat_tag ` 参数取值是否为 `inner `。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat.members:write_only</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>**注意**：</para>
    /// <para>- 仅支持公开群（public），你可以调用[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)接口，在返回结果中查看 `chat_type ` 参数取值是否为 `public`。</para>
    /// <para>- 群成员数量达到上限时无法进群。对于已认证企业的飞书的群人数默认上限：普通群 5000 人，会议群 3000 人，话题群 5000 人。</para>
    /// <para>示例值：oc_a0553eda9014c201e6969b478895c230</para>
    /// </param>
    [HttpPatch("/open-apis/im/v1/chats/{chat_id}/members/me_join")]
    System.Threading.Tasks.Task<FeishuResponse> PatchImV1ChatsByChatIdMembersMeJoinAsync(
        [PathQuery] string chat_id);

    /// <summary>
    /// <para>【消息与群组】搜索对用户或机器人可见的群列表</para>
    /// <para>接口ID：6946222929790648348</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat/search</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取当前身份（用户或机器人）可见的群列表，包括当前身份所在的群、对当前身份公开的群。支持关键词搜索、分页搜索。</para>
    /// <para>## 前提条件</para>
    /// <para>应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat:read</item>
    /// <item>im:chat:readonly</item>
    /// <item>im:chat.group_info:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="query">
    /// <para>必填：否</para>
    /// <para>关键词</para>
    /// <para>**注意**：</para>
    /// <para>- 关键词支持匹配群国际化名称、群成员名称</para>
    /// <para>- 支持使用多语种搜索（飞书客户端内支持的多语种）</para>
    /// <para>- 支持拼音、前缀等模糊搜索</para>
    /// <para>- 关键词为空值或长度超过 `64` 个字符时将返回空的结果</para>
    /// <para>- 关键词中尽量不要包含 `-` 符号。如果必须包含该符号，请在传值时添加双引号，例如 `“Example-0”`。</para>
    /// <para>示例值：abc</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：dmJCRHhpd3JRbGV1VEVNRFFyTitRWDY5ZFkybmYrMEUwMUFYT0VMMWdENEtuYUhsNUxGMDIwemtvdE5ORjBNQQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，用来限制一次请求所返回的数据条目数。</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    [HttpGet("/open-apis/im/v1/chats/search")]
    System.Threading.Tasks.Task<FeishuResponse<Im.GetImV1ChatsSearchResponseDto>> GetImV1ChatsSearchAsync(
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? query = null,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【消息与群组】撤回消息</para>
    /// <para>接口ID：6946222929790681116</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/message/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口撤回指定消息。调用接口的身份不同（身份通过 Authorization 请求头参数指定），可实现的效果不同：</para>
    /// <para>- 机器人可以撤回该机器人自己发送的消息。</para>
    /// <para>- 群聊的群主可以撤回群内指定的消息。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 撤回用户单聊内的消息时，用户需要在机器人的[可用范围](https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/availability)内。</para>
    /// <para>- 撤回群组内的消息时，机器人需要在该群组中。</para>
    /// <para>## 使用限制</para>
    /// <para>- 无法撤回通过[批量发送消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)接口发送的消息，撤回该接口发送的消息需要使用[批量撤回消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/batch_message/delete)接口。</para>
    /// <para>- 撤回的消息需要符合由企业管理员设置的撤回时限。详情了解[管理员设置撤回和编辑消息权限](https://www.feishu.cn/hc/zh-CN/articles/325339752183)。</para>
    /// <para>- 在群聊内的机器人如需撤回他人发送的消息，则该机器人必须是该群的群主、管理员或者创建者，且消息发送时间不超过 1 年。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message</item>
    /// <item>im:message:recall</item>
    /// <item>im:message:send_as_bot</item>
    /// </list></para>
    /// </summary>
    /// <param name="message_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待撤回的消息 ID。</para>
    /// <para>ID 获取方式：</para>
    /// <para>- 调用[发送消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create)接口后，从响应结果的 `message_id` 参数获取。</para>
    /// <para>- 监听[接收消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/events/receive)事件，当触发该事件后可以从事件体内获取消息的 `message_id`。</para>
    /// <para>- 调用[获取会话历史消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/list)接口，从响应结果的 `message_id` 参数获取。</para>
    /// <para>示例值：om_dc13264520392913993dd051dba21dcf</para>
    /// </param>
    [HttpDelete("/open-apis/im/v1/messages/{message_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteImV1MessagesByMessageIdAsync(
        [PathQuery] string message_id);

    /// <summary>
    /// <para>【消息与群组】创建群</para>
    /// <para>接口ID：6946222931479379969</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建群聊，创建时支持设置群头像、群名称、群主以及群类型等配置，同时支持邀请群成员、群机器人入群。</para>
    /// <para>## 前提条件</para>
    /// <para>应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>## 使用限制</para>
    /// <para>商店应用无法使用用户的 user_id，因此使用商店应用调用本接口时用户 ID 类型请选择 open_id 或者 union_id。</para>
    /// <para>## 注意事项</para>
    /// <para>- 如果你需要在已创建的群聊内邀请用户或机器人入群，可调用[将用户或机器人拉入群聊](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/create)接口。</para>
    /// <para>- 调用 API 只能创建普通消息群，消息形式可以选择对话消息或者话题消息。如果你需要直接创建话题群，请通过飞书客户端创建群组，创建时群模式选择 **话题**。</para>
    /// <para>- 已添加外部共享能力的机器人，允许在创建群时将外部企业用户和内部用户同时添加到群组中，这样创建的群为外部群。详情参见[机器人支持外部群和外部用户单聊](https://open.feishu.cn/document/uAjLw4CM/ukzMukzMukzM/develop-robots/add-bot-to-external-group)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat:create</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="set_bot_manager">
    /// <para>必填：否</para>
    /// <para>如果在请求体的 ==owner_id== 字段指定了某个用户为群主，可以选择是否同时设置创建此群的机器人为管理员，此标志位用于标记是否设置创建群的机器人为管理员。</para>
    /// <para>示例值：false</para>
    /// <para>默认值：false</para>
    /// </param>
    /// <param name="uuid">
    /// <para>必填：否</para>
    /// <para>由开发者生成的唯一字符串序列，用于创建群组请求去重；持有相同 uuid + owner_id（若有） 的请求 10 小时内只可成功创建 1 个群聊。不传值表示不进行请求去重，每一次请求成功后都会创建一个群聊。</para>
    /// <para>示例值：b13g2t38-1jd2-458b-8djf-dtbca5104204</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/im/v1/chats")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PostImV1ChatsResponseDto>> PostImV1ChatsAsync(
        [JsonContent] Im.PostImV1ChatsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] bool? set_bot_manager = false,
        [PathQuery] string? uuid = null);

    /// <summary>
    /// <para>【消息与群组】解散群</para>
    /// <para>接口ID：6946222931479396353</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>通过 chat_id 解散指定群组。通过 API 解散群组后，群聊天记录将不会保存。</para>
    /// <para>## 前提条件</para>
    /// <para>应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>## 使用限制</para>
    /// <para>- 如果以应用身份（tenant_access_token）解散群，则应用机器人需要符合以下任一情况。</para>
    /// <para>- 应用机器人是群主。</para>
    /// <para>- 应用机器人是群的创建者，且应用已开通 **更新应用所创建群的群信息**（im:chat:operate_as_owner）权限。</para>
    /// <para>- 如果以用户身份（user_access_token）解散群，需要该用户是群主。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat:delete</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>**注意**：仅支持群模式为 `group` 的群组 ID。你可以调用[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)接口，在返回结果中查看 `chat_mode` 参数取值是否为 `group`。</para>
    /// <para>示例值：oc_a0553eda9014c201e6969b478895c230</para>
    /// </param>
    [HttpDelete("/open-apis/im/v1/chats/{chat_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteImV1ChatsByChatIdAsync(
        [PathQuery] string chat_id);

    /// <summary>
    /// <para>【消息与群组】获取用户或机器人所在的群列表</para>
    /// <para>接口ID：6946222931479412737</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取 [access_token](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-choose-which-type-of-token-to-use) 所代表的用户或者机器人所在的群列表。</para>
    /// <para>## 前提条件</para>
    /// <para>应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>## 注意事项</para>
    /// <para>- 请注意区分本接口和[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)的请求 URL。</para>
    /// <para>- 获取到的群列表中，不包含单聊（群模式为 `p2p`）。</para>
    /// <para>- 查询参数 **user_id_type** 用于控制响应体中 owner_id 的类型，如果是获取机器人所在群列表该值可以不填。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat:read</item>
    /// <item>im:chat:readonly</item>
    /// <item>im:chat.group_info:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="sort_type">
    /// <para>必填：否</para>
    /// <para>群组排序方式</para>
    /// <para>示例值：ByCreateTimeAsc</para>
    /// <list type="bullet">
    /// <item>ByCreateTimeAsc：按群组创建时间升序排列</item>
    /// <item>ByActiveTimeDesc：按群组活跃时间降序排列。因群组活跃时间变动频繁，使用 `ByActiveTimeDesc` 排序方式可能会造成群组遗漏。例如，设置分页大小为 10，发起第一次请求获取到第一页数据后，原本排在第 11 位的群组中有群成员发送了一条消息，那么该群组将被排列到第 1 位，此时发起请求获取第二页数据时，该群组将不能被获取到，需要再从第一页开始获取。</item>
    /// </list>
    /// <para>默认值：ByCreateTimeAsc</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：dmJCRHhpd3JRbGV1VEVNRFFyTitRWDY5ZFkybmYrMEUwMUFYT0VMMWdENEtuYUhsNUxGMDIwemtvdE5ORjBNQQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，用来限制一次请求返回的数据条目数。</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    [HttpGet("/open-apis/im/v1/chats")]
    System.Threading.Tasks.Task<FeishuResponse<Im.GetImV1ChatsResponseDto>> GetImV1ChatsAsync(
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? sort_type = "ByCreateTimeAsc",
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【消息与群组】上传图片</para>
    /// <para>接口ID：6946222931479445505</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/image/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用本接口将图片上传至飞书开放平台，支持上传 JPG、JPEG、PNG、WEBP、GIF、BMP、ICO、TIFF、HEIC 格式的图片，但需要注意 TIFF、HEIC 上传后会被转为 JPG 格式。</para>
    /// <para>## 使用场景</para>
    /// <para>如果需要发送图片消息，或者将图片作为头像，则需要先调用本接口将图片上传至开放平台，平台会返回一个图片标识（image_key），后续使用该 Key 值调用其他 API。例如：</para>
    /// <para>- [发送消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create)时，如果需要发送图片，则需要先调用本接口上传图片（上传时图片类型需要选择 **用于发送消息**），并使用返回结果中的 image_key 发送图片消息。</para>
    /// <para>- [创建用户](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/create)时，如果需要设置用户头像，则需要先调用本接口将头像上传（上传时图片类型需要选择 **用于设置头像**），并使用返回结果中的 image_key 设置头像。</para>
    /// <para>## 前提条件</para>
    /// <para>应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>## 使用限制</para>
    /// <para>- 上传的图片大小不能超过 10 MB，且不支持上传大小为 0 的图片。</para>
    /// <para>- 上传图片的分辨率限制：</para>
    /// <para>- GIF 图片分辨率不能超过 2000 x 2000，其他图片分辨率不能超过 12000 x 12000。</para>
    /// <para>- 用于设置头像的图片分辨率不能超过 4096 x 4096。</para>
    /// <para>如需上传高分辨率图片，可使用[上传文件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/file/create)接口，将图片作为文件进行上传。注意该方式不支持将图片文件设置为头像。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:resource</item>
    /// <item>im:resource:upload</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    /// <param name="image">
    /// <para>必填：是</para>
    /// <para>图片内容。传值方式可以参考请求体示例。</para>
    /// <para>**注意**：</para>
    /// <para>- 上传的图片大小不能超过 10 MB，也不能上传大小为 0 的图片。</para>
    /// <para>- 分辨率限制：</para>
    /// <para>- GIF 图片分辨率不能超过 2000 x 2000，其他图片分辨率不能超过 12000 x 12000。</para>
    /// <para>- 用于设置头像的图片分辨率不能超过 4096 x 4096。</para>
    /// </param>
    [HttpPost("/open-apis/im/v1/images")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PostImV1ImagesResponseDto>> PostImV1ImagesAsync(
        [FormDataContent] Im.PostImV1ImagesBodyDto dto,
        [FormDataContent] FormDataFile image);

    /// <summary>
    /// <para>【消息与群组】上传文件</para>
    /// <para>接口ID：6946222931479461889</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/file/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口将本地文件上传至开放平台，支持上传音频、视频、文档等文件类型。上传后接口会返回文件的 Key，使用该 Key 值可以调用其他 OpenAPI。例如，调用[发送消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create)接口，发送文件。</para>
    /// <para>## 前提条件</para>
    /// <para>应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>## 使用限制</para>
    /// <para>文件大小不得超过 30 MB，且不允许上传空文件。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:resource</item>
    /// <item>im:resource:upload</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>文件内容，具体的传值方式可参考请求体示例。</para>
    /// <para>**注意**：文件大小不得超过 30 MB，且不允许上传空文件。</para>
    /// </param>
    [HttpPost("/open-apis/im/v1/files")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PostImV1FilesResponseDto>> PostImV1FilesAsync(
        [FormDataContent] Im.PostImV1FilesBodyDto dto,
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【消息与群组】获取群信息</para>
    /// <para>接口ID：6946222931479478273</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat/get-2</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取指定群的基本信息，包括群名称、群描述、群头像、群主 ID 以及群权限配置等。</para>
    /// <para>## 前提条件</para>
    /// <para>应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>## 使用限制</para>
    /// <para>- 调用接口的机器人或者用户需要在群组内，才可以获取完整信息，否则只返回群名称、群头像、成员数量以及群状态信息。</para>
    /// <para>- 获取内部群信息时，调用接口的机器人或者用户需要与群组在同一租户下。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat:read</item>
    /// <item>im:chat:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>示例值：oc_a0553eda9014c201e6969b478895c230</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/im/v1/chats/{chat_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Im.GetImV1ChatsByChatIdResponseDto>> GetImV1ChatsByChatIdAsync(
        [PathQuery] string chat_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【消息与群组】更新群公告信息</para>
    /// <para>接口ID：6946222931479511041</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat-announcement/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新指定群组中的群公告信息。更新的公告内容格式和更新[旧版云文档](https://open.feishu.cn/document/ukTMukTMukTM/uAzM5YjLwMTO24CMzkjN)的格式相同，不支持新版云文档格式。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 调用当前接口的用户或者机器人必须在对应的群组内，且需要拥有群公告文档的阅读权限。</para>
    /// <para>## 使用限制</para>
    /// <para>- 如果群组配置了 **仅群主和群管理员可编辑群信息**，则仅有群主、群管理员，或者是创建群组且具有 **更新应用所创建群的群信息（im:chat:operate_as_owner）** 权限的机器人，可以更新群公告信息。</para>
    /// <para>- 如果群组没有配置 **仅群主和群管理员可编辑群信息**，则所有群成员可以更新群公告信息。</para>
    /// <para>- 操作内部群时，操作者和被操作的群组必须在同一租户下。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat.announcement:write_only</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>**注意**：单聊（群类型为 `p2p`）不支持更新群公告。</para>
    /// <para>示例值：oc_5ad11d72b830411d72b836c20</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/im/v1/chats/{chat_id}/announcement")]
    System.Threading.Tasks.Task<FeishuResponse> PatchImV1ChatsByChatIdAnnouncementAsync(
        [PathQuery] string chat_id,
        [JsonContent] Im.PatchImV1ChatsByChatIdAnnouncementBodyDto dto);

    /// <summary>
    /// <para>【消息与群组】发送消息</para>
    /// <para>接口ID：6946222931479527425</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/message/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口向指定用户或者群聊发送消息。支持发送的消息类型包括文本、富文本、卡片、群名片、个人名片、图片、视频、音频、文件以及表情包等。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。 开启能力后需要发布版本才能生效，参考 [发布应用](https://open.feishu.cn/document/home/introduction-to-custom-app-development/self-built-application-development-process#baf09c7d)。</para>
    /// <para>- 给用户发送消息时，用户需要在机器人的[可用范围](https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/availability)内。</para>
    /// <para>- 给群组发送消息时，机器人需要在该群组中，且在群组内拥有发言权限。</para>
    /// <para>## 使用限制</para>
    /// <para>- 为避免消息发送频繁对用户造成打扰，向同一用户发送消息的限频为 ==5 QPS==、向同一群组发送消息的限频为群内机器人共享 ==5 QPS==。</para>
    /// <para>- 该接口仅支持在开发者后台创建的应用机器人调用，群自定义机器人无法调用该接口。了解群自定义机器人的使用方式，参见[自定义机器人使用指南](https://open.feishu.cn/document/ukTMukTMukTM/ucTM5YjL3ETO24yNxkjN)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message</item>
    /// <item>im:message:send</item>
    /// <item>im:message:send_as_bot</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="receive_id_type">
    /// <para>必填：是</para>
    /// <para>消息接收者 ID 类型。支持 open_id/union_id/user_id/email/chat_id</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)。</item>
    /// <item>email：以用户的真实邮箱来标识用户。</item>
    /// <item>chat_id：以群 ID 来标识群聊。[了解更多：如何获取群 ID ](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)&lt;/md-enum-item&gt;</item>
    /// </list>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/im/v1/messages")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PostImV1MessagesResponseDto>> PostImV1MessagesAsync(
        [PathQuery] string receive_id_type,
        [JsonContent] Im.PostImV1MessagesBodyDto dto);

    /// <summary>
    /// <para>【消息与群组】更新应用发送的消息卡片</para>
    /// <para>接口ID：6946222931479543809</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/message-card/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口，通过消息 ID（message_id）更新指定的消息卡片内容。</para>
    /// <para>## 前提条件</para>
    /// <para>应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>## 使用场景</para>
    /// <para>- 本接口适用于场景卡片发送后，对卡片无条件直接更新的场景。</para>
    /// <para>- 如果你需要在用户与卡片进行交互后更新卡片，可参考[处理卡片回调](https://open.feishu.cn/document/uAjLw4CM/ukzMukzMukzM/feishu-cards/handle-card-callbacks)，选择在 3 秒内立即更新卡片、或 30 分钟内[延时更新卡片](https://open.feishu.cn/document/ukTMukTMukTM/uMDO1YjLzgTN24yM4UjN)的方式。</para>
    /// <para>- 如果你需要仅更新部分成员接收到的卡片，你需调用[延时更新消息卡片](https://open.feishu.cn/document/ukTMukTMukTM/uMDO1YjLzgTN24yM4UjN)接口，指定用户的 open_id。</para>
    /// <para>## 注意事项</para>
    /// <para>- 若以 user_access_token 更新消息，该操作用户必须是卡片消息的发送者。</para>
    /// <para>- 仅支持更新未撤回的卡片。</para>
    /// <para>- 你需在更新**前后**卡片的 `config` 属性中，均显式声明 =="update_multi":true==（表示卡片为共享卡片，卡片的更新对所有接收的用户可见）。</para>
    /// <para>## 使用限制</para>
    /// <para>- 不支持更新[批量发送的消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)。</para>
    /// <para>- 仅支持更新 14 天内发送的消息。</para>
    /// <para>- 单条消息更新频控为 5 QPS。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message</item>
    /// <item>im:message:send_as_bot</item>
    /// <item>im:message:update</item>
    /// </list></para>
    /// </summary>
    /// <param name="message_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待更新的消息 ID，仅支持更新卡片（消息类型为 `interactive`）。ID 获取方式：</para>
    /// <para>- 调用[发送消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create)接口后，从响应结果的 `message_id` 参数获取。</para>
    /// <para>- 监听[接收消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/events/receive)事件，当触发该事件后可以从事件体内获取消息的 `message_id`。</para>
    /// <para>- 调用[获取会话历史消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/list)接口，从响应结果的 `message_id` 参数获取。</para>
    /// <para>示例值：om_dc13264520392913993dd051dba21dcf</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/im/v1/messages/{message_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PatchImV1MessagesByMessageIdAsync(
        [PathQuery] string message_id,
        [JsonContent] Im.PatchImV1MessagesByMessageIdBodyDto dto);

    /// <summary>
    /// <para>【消息与群组】获取会话历史消息</para>
    /// <para>接口ID：6946222931479560193</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/message/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取指定会话（包括单聊、群组）内的历史消息（即聊天记录）。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 获取消息时，机器人必须在被查询的群组中。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message</item>
    /// <item>im:message:readonly</item>
    /// <item>im:message.history:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="container_id_type">
    /// <para>必填：是</para>
    /// <para>容器类型。</para>
    /// <para>**可选值有**：</para>
    /// <para>- `chat`：包含单聊（p2p）和群聊（group）</para>
    /// <para>- `thread`：话题</para>
    /// <para>**注意**：对于 **普通对话群** 中的话题消息，通过 `chat` 容器类型仅能获取到话题的根消息，你可通过指定容器类型为 `thread` 获取话题回复中的所有消息。</para>
    /// <para>示例值：chat</para>
    /// </param>
    /// <param name="container_id">
    /// <para>必填：是</para>
    /// <para>容器 ID。ID 类型与 container_id_type 取值一致。</para>
    /// <para>- 群聊或单聊的 ID 获取方式参见[群 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)。</para>
    /// <para>- 话题 ID 获取参见[话题概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/thread-introduction)的 **如何获取 thread_id** 章节。</para>
    /// <para>示例值：oc_234jsi43d3ssi993d43545f</para>
    /// </param>
    /// <param name="start_time">
    /// <para>必填：否</para>
    /// <para>待查询历史信息的起始时间，秒级时间戳。</para>
    /// <para>**注意**：`thread` 容器类型暂不支持获取指定时间范围内的消息。</para>
    /// <para>示例值：1608594809</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="end_time">
    /// <para>必填：否</para>
    /// <para>待查询历史信息的结束时间，秒级时间戳。</para>
    /// <para>**注意**：`thread` 容器类型暂不支持获取指定时间范围内的消息。</para>
    /// <para>示例值：1609296809</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="sort_type">
    /// <para>必填：否</para>
    /// <para>消息排序方式。</para>
    /// <para>**注意**：使用 `page_token` 分页请求时，排序方式（`sort_type`）均与第一次请求一致，不支持中途改换排序方式。</para>
    /// <para>示例值：ByCreateTimeAsc</para>
    /// <list type="bullet">
    /// <item>ByCreateTimeAsc：按消息创建时间升序排列</item>
    /// <item>ByCreateTimeDesc：按消息创建时间降序排列</item>
    /// </list>
    /// <para>默认值：ByCreateTimeAsc</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，即单次请求所返回的数据条目数。</para>
    /// <para>示例值：20</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：GxmvlNRvP0NdQZpa7yIqf_Lv_QuBwTQ8tXkX7w-irAghVD_TvuYd1aoJ1LQph86O-XImC4X9j9FhUPhXQDvtrQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/im/v1/messages")]
    System.Threading.Tasks.Task<FeishuResponse<Im.GetImV1MessagesResponseDto>> GetImV1MessagesAsync(
        [PathQuery] string container_id_type,
        [PathQuery] string container_id,
        [PathQuery] string? start_time = null,
        [PathQuery] string? end_time = null,
        [PathQuery] string? sort_type = "ByCreateTimeAsc",
        [PathQuery] int? page_size = 20,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【消息与群组】获取消息中的资源文件</para>
    /// <para>接口ID：6946222931479576577</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/message/get-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取指定消息内包含的资源文件，包括音频、视频、图片和文件。成功调用后，返回二进制文件流下载文件。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 机器人和待操作的消息需要在同一会话内。</para>
    /// <para>## 使用限制</para>
    /// <para>- 仅支持下载 100 MB 以内的资源文件。</para>
    /// <para>- 暂不支持获取表情包资源。</para>
    /// <para>- 暂不支持获取合并转发消息中的子消息、卡片消息中的资源文件。如果请求时传入了合并转发消息或子消息的 ID、卡片消息 ID，则会返回错误码 234043。</para>
    /// <para>- 不支持在当前接口内调整文件格式，你可以获取资源文件后，在本地自行调整。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message</item>
    /// <item>im:message:readonly</item>
    /// <item>im:message.history:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="message_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待查询的消息 ID。ID 获取方式：</para>
    /// <para>- 调用[发送消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create)接口后，从响应结果的 `message_id` 参数获取。</para>
    /// <para>- 监听[接收消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/events/receive)事件，当触发该事件后可以从事件体内获取消息的 `message_id`。</para>
    /// <para>- 调用[获取会话历史消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/list)接口，从响应结果的 `message_id` 参数获取。</para>
    /// <para>示例值：om_dc13264520392913993dd051dba21dcf</para>
    /// </param>
    /// <param name="file_key">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待查询资源的 Key。你可以调用[获取指定消息的内容](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/get)接口，通过消息 ID 获取消息内容中的资源 Key。</para>
    /// <para>**注意**：路径参数 `file_key` 和 `message_id` 需要匹配。</para>
    /// <para>示例值：file_456a92d6-c6ea-4de4-ac3f-7afcf44ac78g</para>
    /// </param>
    /// <param name="type">
    /// <para>必填：是</para>
    /// <para>资源类型</para>
    /// <para>**可选值有：**</para>
    /// <para>- `image`：对应消息中的图片或富文本消息中的图片。</para>
    /// <para>- `file`：对应消息中的文件、音频、视频（表情包除外）。</para>
    /// <para>示例值：image</para>
    /// </param>
    /// <returns>返回文件二进制流</returns>
    [HttpGet("/open-apis/im/v1/messages/{message_id}/resources/{file_key}")]
    System.Threading.Tasks.Task<HttpResponseMessage> GetImV1MessagesByMessageIdResourcesByFileKeyAsync(
        [PathQuery] string message_id,
        [PathQuery] string file_key,
        [PathQuery] string type);

    /// <summary>
    /// <para>【消息与群组】更新群信息</para>
    /// <para>接口ID：6946222931479592961</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat/update-2</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新指定群的信息，包括群头像、群名称、群描述、群配置以及群主等。</para>
    /// <para>## 前提条件</para>
    /// <para>应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>## 使用限制</para>
    /// <para>- 对于群主和群管理员，或是创建群组且具备 ==更新应用所创建群的群信息（im:chat:operate_as_owner）== 权限的机器人，可调用本接口更新所有信息。</para>
    /// <para>- 对于不满足上述权限条件的群成员或机器人：</para>
    /// <para>- 如果群设置中配置了 **所有群成员可编辑群信息**，则仅可更新群头像、群名称、群描述、群国际化名称信息。</para>
    /// <para>- 如果群设置中配置了 **仅群主和群管理员可编辑群信息**，则无法修改任何群信息。</para>
    /// <para>## 注意事项</para>
    /// <para>调用该接口时，未传值的请求参数默认不更新，保持原有群信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat:update</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>**注意**：仅支持群模式为 `group` 的群组 ID。你可以调用[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)接口，在返回结果中查看 `chat_mode` 参数取值是否为 `group`。</para>
    /// <para>示例值：oc_a0553eda9014c201e6969b478895c230</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/im/v1/chats/{chat_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PutImV1ChatsByChatIdAsync(
        [PathQuery] string chat_id,
        [JsonContent] Im.PutImV1ChatsByChatIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【消息与群组】将用户或机器人拉入群聊</para>
    /// <para>接口ID：6946222931479609345</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat-member/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>把指定的用户或机器人拉入指定群聊内。</para>
    /// <para>## 前提条件</para>
    /// <para>- 调用该接口的应用，需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 调用该接口的应用或者用户，必须在相应的群组中。</para>
    /// <para>- 如需拉机器人进群，则该机器人必须开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 如果以应用身份拉用户进群，则该用户需要在应用的[可用范围](https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/availability)内。</para>
    /// <para>## 使用限制</para>
    /// <para>- 外部租户不能被拉入内部群，但可以被拉入外部群。通过机器人拉外部租户的用户进群，需要先为机器人配置对外共享能力，详情参考[机器人支持外部群和外部用户单聊](https://open.feishu.cn/document/uAjLw4CM/ukzMukzMukzM/develop-robots/add-bot-to-external-group)。</para>
    /// <para>- 操作内部群时，当前操作者必须与群组在同一租户内。</para>
    /// <para>- 如果群组配置了 **仅群主和群管理员可添加群成员**，则仅有群主、群管理员，或者是创建群组且具有 **更新应用所创建群的群信息（im:chat:operate_as_owner）** 权限的机器人，可以拉用户或机器人进群。</para>
    /// <para>- 如果群组没有配置 **仅群主和群管理员可添加群成员**，则所有群成员都可以拉用户或机器人进群。</para>
    /// <para>- 操作同一个群组时，如果同时多次调用当前接口，可能会出现 232019 错误码，建议你串行调用，即等待当前调用完成后再进行下一次调用。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat.members:write_only</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>**注意**：仅支持群模式为 **群组（group）**、**话题（topic）** 的群组 ID。你可以调用[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)接口，在返回结果中查看 `chat_mode` 参数取值是否为 `group`、`topic`。</para>
    /// <para>示例值：oc_a0553eda9014c201e6969b478895c230</para>
    /// </param>
    /// <param name="member_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>app_id：飞书开放平台应用的唯一标识。在创建应用时，由系统自动生成，用户不能自行修改。[了解更多：如何获取应用的 App ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-app-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="succeed_type">
    /// <para>必填：否</para>
    /// <para>出现不可用ID后的处理方式 0/1/2</para>
    /// <para>**默认值**：`0`</para>
    /// <para>示例值：0</para>
    /// <list type="bullet">
    /// <item>0：不存在/不可见的 ID 会拉群失败，并返回错误响应。存在已离职 ID 时，会将其他可用 ID 拉入群聊，返回拉群成功的响应。</item>
    /// <item>1：将参数中可用的 ID 全部拉入群聊，返回拉群成功的响应，并展示剩余不可用的 ID 及原因。</item>
    /// <item>2：参数中只要存在任一不可用的 ID ，就会拉群失败，返回错误响应，并展示出不可用的 ID。</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/im/v1/chats/{chat_id}/members")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PostImV1ChatsByChatIdMembersResponseDto>> PostImV1ChatsByChatIdMembersAsync(
        [PathQuery] string chat_id,
        [JsonContent] Im.PostImV1ChatsByChatIdMembersBodyDto dto,
        [PathQuery] string? member_id_type = "open_id",
        [PathQuery] int? succeed_type = null);

    /// <summary>
    /// <para>【消息与群组】发送应用内加急</para>
    /// <para>接口ID：6948245234036621340</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/buzz-messages/urgent_app</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口把指定消息加急给目标用户，加急仅在飞书客户端内通知。了解加急可参见[加急功能](https://www.feishu.cn/hc/zh-CN/articles/360024757913)。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability) 。</para>
    /// <para>- 确保机器人在被加急消息所属会话中。如果是群组，还需要确保群管理中设置了 **所有群成员可以加急**，或者设置了 **仅群主或管理员可以加急** 且机器人是管理员。</para>
    /// <para>## 使用限制</para>
    /// <para>- 只能加急当前机器人自己发送的消息。</para>
    /// <para>- 加急用户的未读加急总数不能超过 200 条。</para>
    /// <para>- 不支持加急[批量发送的消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)。</para>
    /// <para>- 加急[折叠会话](https://www.feishu.cn/hc/zh-CN/articles/360025267393)内的消息时，仅会在应用内推送提醒通知。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message.urgent</item>
    /// <item>im:message.urgent:app_send</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="message_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待加急的消息 ID。ID 获取方式：</para>
    /// <para>- 调用[发送消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create)接口后，从响应结果的 `message_id` 参数获取。</para>
    /// <para>- 监听[接收消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/events/receive)事件，当触发该事件后可以从事件体内获取消息的 `message_id`。</para>
    /// <para>- 调用[获取会话历史消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/list)接口，从响应结果的 `message_id` 参数获取。</para>
    /// <para>**注意**：不支持加急[批量发送的消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)（对应的消息ID 格式为 `bm_xxx`）。</para>
    /// <para>示例值：om_dc13264520392913993dd051dba21dcf</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：是</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/im/v1/messages/{message_id}/urgent_app")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PatchImV1MessagesByMessageIdUrgentAppResponseDto>> PatchImV1MessagesByMessageIdUrgentAppAsync(
        [PathQuery] string message_id,
        [JsonContent] Im.PatchImV1MessagesByMessageIdUrgentAppBodyDto dto,
        [PathQuery] string user_id_type = "open_id");

    /// <summary>
    /// <para>【消息与群组】发送短信加急</para>
    /// <para>接口ID：6948245234036637724</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/buzz-messages/urgent_sms</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口把指定消息加急给目标用户，加急将通过飞书客户端和短信进行通知。了解加急可参见[加急功能](https://www.feishu.cn/hc/zh-CN/articles/360024757913)。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability) 。</para>
    /// <para>- 确保机器人在被加急消息所属会话中。如果是群组，还需要确保群管理中设置了 **所有群成员可以加急**，或者设置了 **仅群主或管理员可以加急** 且机器人是管理员。</para>
    /// <para>## 使用限制</para>
    /// <para>- 只能加急当前机器人自己发送的消息。</para>
    /// <para>- 加急用户的未读加急总数不能超过 200 条。</para>
    /// <para>- 不支持加急[批量发送的消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)。</para>
    /// <para>- 加急[折叠会话](https://www.feishu.cn/hc/zh-CN/articles/360025267393)内的消息时，仅会在应用内推送提醒通知。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message.urgent:sms</item>
    /// <item>im:message.urgent:sms_send</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="message_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待加急的消息 ID。ID 获取方式：</para>
    /// <para>- 调用[发送消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create)接口后，从响应结果的 `message_id` 参数获取。</para>
    /// <para>- 监听[接收消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/events/receive)事件，当触发该事件后可以从事件体内获取消息的 `message_id`。</para>
    /// <para>- 调用[获取会话历史消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/list)接口，从响应结果的 `message_id` 参数获取。</para>
    /// <para>**注意**：不支持加急[批量发送的消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)（对应的消息ID 格式为 `bm_xxx`）。</para>
    /// <para>示例值：om_dc13264520392913993dd051dba21dcf</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：是</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/im/v1/messages/{message_id}/urgent_sms")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PatchImV1MessagesByMessageIdUrgentSmsResponseDto>> PatchImV1MessagesByMessageIdUrgentSmsAsync(
        [PathQuery] string message_id,
        [JsonContent] Im.PatchImV1MessagesByMessageIdUrgentSmsBodyDto dto,
        [PathQuery] string user_id_type = "open_id");

    /// <summary>
    /// <para>【消息与群组】发送电话加急</para>
    /// <para>接口ID：6948245234036654108</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/buzz-messages/urgent_phone</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口把指定消息加急给目标用户，加急将通过飞书客户端和电话进行通知。了解加急可参见[加急功能](https://www.feishu.cn/hc/zh-CN/articles/360024757913)。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability) 。</para>
    /// <para>- 确保机器人在被加急消息所属会话中。如果是群组，还需要确保群管理中设置了 **所有群成员可以加急**，或者设置了 **仅群主或管理员可以加急** 且机器人是管理员。</para>
    /// <para>## 使用限制</para>
    /// <para>- 只能加急当前机器人自己发送的消息。</para>
    /// <para>- 加急用户的未读加急总数不能超过 200 条。</para>
    /// <para>- 不支持加急[批量发送的消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)。</para>
    /// <para>- 加急[折叠会话](https://www.feishu.cn/hc/zh-CN/articles/360025267393)内的消息时，仅会在应用内推送提醒通知。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message.urgent:phone</item>
    /// <item>im:message.urgent:phone_send</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="message_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待加急的消息 ID。ID 获取方式：</para>
    /// <para>- 调用[发送消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create)接口后，从响应结果的 `message_id` 参数获取。</para>
    /// <para>- 监听[接收消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/events/receive)事件，当触发该事件后可以从事件体内获取消息的 `message_id`。</para>
    /// <para>- 调用[获取会话历史消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/list)接口，从响应结果的 `message_id` 参数获取。</para>
    /// <para>**注意**：不支持加急[批量发送的消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)（对应的消息ID 格式为 `bm_xxx`）。</para>
    /// <para>示例值：om_dc13264520392913993dd051dba21dcf</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：是</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/im/v1/messages/{message_id}/urgent_phone")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PatchImV1MessagesByMessageIdUrgentPhoneResponseDto>> PatchImV1MessagesByMessageIdUrgentPhoneAsync(
        [PathQuery] string message_id,
        [JsonContent] Im.PatchImV1MessagesByMessageIdUrgentPhoneBodyDto dto,
        [PathQuery] string user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事（标准版）】批量获取员工花名册信息</para>
    /// <para>接口ID：6948366696944648195</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/ehr-v1/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据员工飞书用户 ID / 员工状态 / 雇员类型等搜索条件 ，批量获取员工花名册字段信息。字段包括「系统标准字段 / system_fields」和「自定义字段 / custom_fields」。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>ehr:employee:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="view">
    /// <para>必填：否</para>
    /// <para>返回数据类型，不传值默认为 basic。</para>
    /// <para>示例值：basic</para>
    /// <list type="bullet">
    /// <item>basic：概览，只返回 id、name 等基本信息</item>
    /// <item>full：明细，返回系统标准字段和自定义字段集合</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="status">
    /// <para>必填：否</para>
    /// <para>员工状态，不传代表查询所有员工状态</para>
    /// <para>实际在职 = 2&amp;4</para>
    /// <para>可同时查询多个状态的记录，如 status=2&amp;status=4</para>
    /// <para>示例值：2</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="type">
    /// <para>必填：否</para>
    /// <para>人员类型，不传代表查询所有人员类型</para>
    /// <para>同时可使用自定义员工类型的 int 值进行查询，可通过下方接口获取到该租户的自定义员工类型的名称，参见 [获取人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list)</para>
    /// <para>示例值：1</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="start_time">
    /// <para>必填：否</para>
    /// <para>查询开始时间（入职时间 &gt;= 此时间）</para>
    /// <para>示例值：1608690517811</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="end_time">
    /// <para>必填：否</para>
    /// <para>查询结束时间（入职时间 &lt;= 此时间）</para>
    /// <para>示例值：1608690517811</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="user_ids">
    /// <para>必填：否</para>
    /// <para>user_id、open_id 或 union_id，默认为 open_id。</para>
    /// <para>如果传入的值不是 open_id，需要一并传入 user_id_type 参数。</para>
    /// <para>可一次查询多个 id 的用户，例如：user_ids=ou_8ebd4f35d7101ffdeb4771d7c8ec517e&amp;user_ids=ou_7abc4f35d7101ffdeb4771dabcde</para>
    /// <para>[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)</para>
    /// <para>示例值：ou_8ebd4f35d7101ffdeb4771d7c8ec517e</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：10</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，取值范围 1~100，默认 10</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    [HttpGet("/open-apis/ehr/v1/employees")]
    System.Threading.Tasks.Task<FeishuResponse<Ehr.GetEhrV1EmployeesResponseDto>> GetEhrV1EmployeesAsync(
        [PathQuery] string? view = null,
        [PathQuery] int[]? status = null,
        [PathQuery] int[]? type = null,
        [PathQuery] string? start_time = null,
        [PathQuery] string? end_time = null,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string[]? user_ids = null,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10);

    /// <summary>
    /// <para>【飞书人事（标准版）】下载人员的附件</para>
    /// <para>接口ID：6948366696944664579</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/ehr-v1/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据文件 token 下载文件。</para>
    /// <para>调用 「批量获取员工花名册信息」接口的返回值中，「文件」类型的字段 id，即是文件 token</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>ehr:attachment:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文件 token</para>
    /// <para>**示例值**："09bf7b924f9a4a69875788891b5970d8"</para>
    /// </param>
    /// <returns>返回文件二进制流</returns>
    [HttpGet("/open-apis/ehr/v1/attachments/{token}")]
    System.Threading.Tasks.Task<HttpResponseMessage> GetEhrV1AttachmentsByTokenAsync(
        [PathQuery] string token);

    /// <summary>
    /// <para>【AI 能力】翻译文本</para>
    /// <para>接口ID：6949829039871983617</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/ai/translation-v1/translate</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>机器翻译 (MT)，支持以下语种互译：</para>
    /// <para>"zh": 汉语；</para>
    /// <para>"zh-Hant": 繁体汉语；</para>
    /// <para>"en": 英语；</para>
    /// <para>"ja": 日语；</para>
    /// <para>"ru": 俄语；</para>
    /// <para>"de": 德语；</para>
    /// <para>"fr": 法语；</para>
    /// <para>"it": 意大利语；</para>
    /// <para>"pl": 波兰语；</para>
    /// <para>"th": 泰语；</para>
    /// <para>"hi": 印地语；</para>
    /// <para>"id": 印尼语；</para>
    /// <para>"es": 西班牙语；</para>
    /// <para>"pt": 葡萄牙语；</para>
    /// <para>"ko": 朝鲜语；</para>
    /// <para>"vi": 越南语；</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>translation:text</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/translation/v1/text/translate")]
    System.Threading.Tasks.Task<FeishuResponse<Ai.PostTranslationV1TextTranslateResponseDto>> PostTranslationV1TextTranslateAsync(
        [JsonContent] Ai.PostTranslationV1TextTranslateBodyDto dto);

    /// <summary>
    /// <para>【AI 能力】识别图片中的文字</para>
    /// <para>接口ID：6949829039872000001</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/ai/optical_char_recognition-v1/basic_recognize</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>可识别图片中的文字，按图片中的区域划分，分段返回文本列表。文件大小需小于5M。</para>
    /// <para>## 注意事项</para>
    /// <para>- 单租户限流为 20QPS，即同租户下的应用共享本租户的 20 QPS 限流。</para>
    /// <para>- 该接口不支持通过飞书个人版调试。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>optical_char_recognition:image</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/optical_char_recognition/v1/image/basic_recognize")]
    System.Threading.Tasks.Task<FeishuResponse<Ai.PostOpticalCharRecognitionV1ImageBasicRecognizeResponseDto>> PostOpticalCharRecognitionV1ImageBasicRecognizeAsync(
        [JsonContent] Ai.PostOpticalCharRecognitionV1ImageBasicRecognizeBodyDto dto);

    /// <summary>
    /// <para>【AI 能力】识别流式语音</para>
    /// <para>接口ID：6949829039872016385</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/ai/speech_to_text-v1/stream_recognize</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>语音流式接口，将整个音频文件分片进行传入模型。能够实时返回数据。建议每个音频分片的大小为 100-200ms。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>speech_to_text:speech</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/speech_to_text/v1/speech/stream_recognize")]
    System.Threading.Tasks.Task<FeishuResponse<Ai.PostSpeechToTextV1SpeechStreamRecognizeResponseDto>> PostSpeechToTextV1SpeechStreamRecognizeAsync(
        [JsonContent] Ai.PostSpeechToTextV1SpeechStreamRecognizeBodyDto dto);

    /// <summary>
    /// <para>【AI 能力】识别语音文件</para>
    /// <para>接口ID：6949829039872032769</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/ai/speech_to_text-v1/file_recognize</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>语音文件识别接口，上传整段语音文件进行一次性识别。接口适合 60 秒以内音频识别。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>speech_to_text:speech</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/speech_to_text/v1/speech/file_recognize")]
    System.Threading.Tasks.Task<FeishuResponse<Ai.PostSpeechToTextV1SpeechFileRecognizeResponseDto>> PostSpeechToTextV1SpeechFileRecognizeAsync(
        [JsonContent] Ai.PostSpeechToTextV1SpeechFileRecognizeBodyDto dto);

    /// <summary>
    /// <para>【AI 能力】识别文本语种</para>
    /// <para>接口ID：6949829039872049153</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/ai/translation-v1/detect</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>机器翻译 (MT)，支持 100 多种语言识别，返回符合 ISO 639-1 标准。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>translation:text</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/translation/v1/text/detect")]
    System.Threading.Tasks.Task<FeishuResponse<Ai.PostTranslationV1TextDetectResponseDto>> PostTranslationV1TextDetectAsync(
        [JsonContent] Ai.PostTranslationV1TextDetectBodyDto dto);

    /// <summary>
    /// <para>【招聘】创建备注</para>
    /// <para>接口ID：6950213983267274756</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/note/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>为人才创建备注信息，支持在备注中@其他用户。</para>
    /// <para>## 注意事项</para>
    /// <para>在备注中@其他用户时，会同时赋予该用户查看该人才的权限，即该用户有权限在「飞书招聘」产品中查看该人才。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:note</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/notes")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1NotesResponseDto>> PostHireV1NotesAsync(
        [JsonContent] Hire.PostHireV1NotesBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】获取备注</para>
    /// <para>接口ID：6950644745484386331</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/note/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据备注 ID 查询人才备注信息，包括备注内容、人才 ID、投递 ID 等。可用于人才备注信息展示等场景。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:note</item>
    /// <item>hire:note:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="note_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>备注 ID，可通过[获取备注列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/note/list)获取</para>
    /// <para>示例值：6949805467799537964</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/notes/{note_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1NotesByNoteIdResponseDto>> GetHireV1NotesByNoteIdAsync(
        [PathQuery] string note_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】更新备注</para>
    /// <para>接口ID：6950644745484402715</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/note/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据备注 ID 更新备注信息。</para>
    /// <para>## 注意事项</para>
    /// <para>在备注中@其他用户时，会同时赋予该用户查看该人才的权限，即该用户有权限在「飞书招聘」产品中查看该人才。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:note</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="note_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>备注 ID，可通过[获取备注列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/note/list)获取</para>
    /// <para>示例值：6960663240925956401</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/hire/v1/notes/{note_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PatchHireV1NotesByNoteIdResponseDto>> PatchHireV1NotesByNoteIdAsync(
        [PathQuery] string note_id,
        [JsonContent] Hire.PatchHireV1NotesByNoteIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】获取备注列表</para>
    /// <para>接口ID：6950644745484419099</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/note/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据人才ID获取备注列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:note</item>
    /// <item>hire:note:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，默认 10，最大值为 200</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：1</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="talent_id">
    /// <para>必填：是</para>
    /// <para>人才ID，可通过[获取人才列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent/list)获取</para>
    /// <para>示例值：6916472453069883661</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/notes")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1NotesResponseDto>> GetHireV1NotesAsync(
        [PathQuery] string talent_id,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【消息与群组】获取群成员发言权限</para>
    /// <para>接口ID：6951292665602883586</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取指定群组的发言模式、可发言用户名单等信息。</para>
    /// <para>## 前提条件</para>
    /// <para>应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>## 使用限制</para>
    /// <para>调用本接口的用户或机器人必须要在对应的群组内。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat:readonly</item>
    /// <item>im:chat.moderation:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>示例值：oc_a0553eda9014c201e6969b478895c230</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，用来限制一次请求返回的数据条目数。</para>
    /// <para>示例值：dmJCRHhpd3JRbGV1VEVNRFFyTitRWDY5ZFkybmYrMEUwMUFYT0VMMWdENEtuYUhsNUxGMDIwemtvdE5ORjBNQQ==</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：10</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/im/v1/chats/{chat_id}/moderation")]
    System.Threading.Tasks.Task<FeishuResponse<Im.GetImV1ChatsByChatIdModerationResponseDto>> GetImV1ChatsByChatIdModerationAsync(
        [PathQuery] string chat_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【消息与群组】更新群发言权限</para>
    /// <para>接口ID：6951292665602899970</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat/update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新指定群组的发言权限，可设置为所有群成员可发言、仅群主或管理员可发言、指定群成员可发言。</para>
    /// <para>## 前提条件</para>
    /// <para>应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>## 使用限制</para>
    /// <para>- 如果以用户身份（user_access_token）调用本接口，则该用户必须是群组的群主，才可以更新群发言权限。</para>
    /// <para>- 如果以应用身份（tenant_access_token）调用本接口，则该应用机器人需要符合以下任一情况才可以更新群发言权限。</para>
    /// <para>- 机器人是群组的群主。</para>
    /// <para>- 机器人是群组的创建者、具备==更新应用所创建群的群信息（im:chat:operate_as_owner）== 权限，且仍在群组内。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat:moderation:write_only</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>示例值：oc_a0553eda9014c201e6969b478895c230</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/im/v1/chats/{chat_id}/moderation")]
    System.Threading.Tasks.Task<FeishuResponse> PutImV1ChatsByChatIdModerationAsync(
        [PathQuery] string chat_id,
        [JsonContent] Im.PutImV1ChatsByChatIdModerationBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【多维表格】新增记录</para>
    /// <para>接口ID：6952707657162522626</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table-record/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>在多维表格数据表中新增一条记录。</para>
    /// <para>## 前提条件</para>
    /// <para>调用此接口前，请确保当前调用身份（tenant_access_token 或 user_access_token）已有多维表格的编辑等文档权限，否则接口将返回 HTTP 403 或 400 状态码。了解更多，参考[如何为应用或用户开通文档权限](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#16c6475a)。</para>
    /// <para>## 注意事项</para>
    /// <para>从其它数据源同步的数据表，不支持对记录进行增加、删除、和修改操作。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:record:create</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:user.base:readonly</item>
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：bascng7vrxcxpig7geggXiCtadY</para>
    /// </param>
    /// <param name="table_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格数据表的唯一标识。获取方式：</para>
    /// <para>- 你可通过多维表格 URL 获取 `table_id`，下图高亮部分即为当前数据表的 `table_id`</para>
    /// <para>- 也可通过[列出数据表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list)接口获取 `table_id`</para>
    /// <para>![](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/18741fe2a0d3cafafaf9949b263bb57d_yD1wkOrSju.png?height=746&amp;lazyload=true&amp;maxWidth=700&amp;width=2976)</para>
    /// <para>**数据校验规则**：</para>
    /// <para>- 长度范围：`0` ～ `50` 字符</para>
    /// <para>示例值：tblUa9vcYjWQYJCj</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>格式为标准的 uuidv4，操作的唯一标识，用于幂等的进行更新操作。此值为空表示将发起一次新的请求，此值非空表示幂等的进行更新操作。</para>
    /// <para>示例值：fe599b60-450f-46ff-b2ef-9f6675625b97</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="ignore_consistency_check">
    /// <para>必填：否</para>
    /// <para>是否忽略一致性读写检查，默认为 false，即在进行读写操作时，系统将确保读取到的数据和写入的数据是一致的。可选值：</para>
    /// <para>- true：忽略读写一致性检查，提高性能，但可能会导致某些节点的数据不同步，出现暂时不一致</para>
    /// <para>- false：开启读写一致性检查，确保数据在读写过程中一致</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/bitable/v1/apps/{app_token}/tables/{table_id}/records")]
    System.Threading.Tasks.Task<FeishuResponse<Base.PostBitableV1AppsByAppTokenTablesByTableIdRecordsResponseDto>> PostBitableV1AppsByAppTokenTablesByTableIdRecordsAsync(
        [PathQuery] string app_token,
        [PathQuery] string table_id,
        [JsonContent] Base.PostBitableV1AppsByAppTokenTablesByTableIdRecordsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? client_token = null,
        [PathQuery] bool? ignore_consistency_check = null);

    /// <summary>
    /// <para>【多维表格】更新多条记录</para>
    /// <para>接口ID：6952707657162539010</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table-record/batch_update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新数据表中的多条记录，单次调用最多更新 1,000 条记录。</para>
    /// <para>## 前提条件</para>
    /// <para>调用此接口前，请确保当前调用身份（tenant_access_token 或 user_access_token）已有多维表格的编辑等文档权限，否则接口将返回 HTTP 403 或 400 状态码。了解更多，参考[如何为应用或用户开通文档权限](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#16c6475a)。</para>
    /// <para>## 注意事项</para>
    /// <para>从其它数据源同步的数据表，不支持对记录进行增加、删除、和修改操作。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:record:update</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:user.base:readonly</item>
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 app_token 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 app_token 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 obj_type 的值为 bitable 时，obj_token 字段的值才是多维表格的 app_token。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="table_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格数据表的唯一标识。获取方式：</para>
    /// <para>- 你可通过多维表格 URL 获取 `table_id`，下图高亮部分即为当前数据表的 `table_id`</para>
    /// <para>- 也可通过[列出数据表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list)接口获取 `table_id`</para>
    /// <para>![](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/18741fe2a0d3cafafaf9949b263bb57d_yD1wkOrSju.png?height=746&amp;lazyload=true&amp;maxWidth=700&amp;width=2976)</para>
    /// <para>示例值：tblsRc9GRRXKqhvW</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="ignore_consistency_check">
    /// <para>必填：否</para>
    /// <para>是否忽略一致性读写检查，默认为 false，即在进行读写操作时，系统将确保读取到的数据和写入的数据是一致的。可选值：</para>
    /// <para>- true：忽略读写一致性检查，提高性能，但可能会导致某些节点的数据不同步，出现暂时不一致</para>
    /// <para>- false：开启读写一致性检查，确保数据在读写过程中一致</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/bitable/v1/apps/{app_token}/tables/{table_id}/records/batch_update")]
    System.Threading.Tasks.Task<FeishuResponse<Base.PostBitableV1AppsByAppTokenTablesByTableIdRecordsBatchUpdateResponseDto>> PostBitableV1AppsByAppTokenTablesByTableIdRecordsBatchUpdateAsync(
        [PathQuery] string app_token,
        [PathQuery] string table_id,
        [JsonContent] Base.PostBitableV1AppsByAppTokenTablesByTableIdRecordsBatchUpdateBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] bool? ignore_consistency_check = null);

    /// <summary>
    /// <para>【多维表格】删除记录</para>
    /// <para>接口ID：6952707657162555394</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table-record/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除多维表格数据表中的一条记录。</para>
    /// <para>## 前提条件</para>
    /// <para>调用此接口前，请确保当前调用身份（tenant_access_token 或 user_access_token）已有多维表格的编辑等文档权限，否则接口将返回 HTTP 403 或 400 状态码。了解更多，参考[如何为应用或用户开通文档权限](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#16c6475a)。</para>
    /// <para>## 注意事项</para>
    /// <para>从其它数据源同步的数据表，不支持对记录进行增加、删除、和修改操作。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:record:delete</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="table_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格数据表的唯一标识。获取方式：</para>
    /// <para>- 你可通过多维表格 URL 获取 `table_id`，下图高亮部分即为当前数据表的 `table_id`</para>
    /// <para>- 也可通过[列出数据表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list)接口获取 `table_id`</para>
    /// <para>![](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/18741fe2a0d3cafafaf9949b263bb57d_yD1wkOrSju.png?height=746&amp;lazyload=true&amp;maxWidth=700&amp;width=2976)</para>
    /// <para>示例值：tblsRc9GRRXKqhvW</para>
    /// </param>
    /// <param name="record_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>数据表中一条记录的唯一标识。通过[查询记录](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/search)接口获取。</para>
    /// <para>示例值：recpCsf4ME</para>
    /// </param>
    [HttpDelete("/open-apis/bitable/v1/apps/{app_token}/tables/{table_id}/records/{record_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Base.DeleteBitableV1AppsByAppTokenTablesByTableIdRecordsByRecordIdResponseDto>> DeleteBitableV1AppsByAppTokenTablesByTableIdRecordsByRecordIdAsync(
        [PathQuery] string app_token,
        [PathQuery] string table_id,
        [PathQuery] string record_id);

    /// <summary>
    /// <para>【多维表格】列出记录</para>
    /// <para>接口ID：6952707657162571778</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table-record/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于列出数据表中的现有记录，单次最多列出 500 行记录，支持分页获取。</para>
    /// <para>note</para>
    /// <para>该接口为历史接口，已不推荐使用。你可使用[查询记录](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/search)替代。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>bitable:app</item>
    /// <item>bitable:app:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:user.base:readonly</item>
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格的唯一标识符 [app_token 参数说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#8121eebe)</para>
    /// <para>示例值：bascnCMII2ORej2RItqpZZUNMIe</para>
    /// </param>
    /// <param name="table_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格数据表的唯一标识符 [table_id 参数说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#735fe883)</para>
    /// <para>示例值：tblxI2tWaxP5dG7p</para>
    /// </param>
    /// <param name="view_id">
    /// <para>必填：否</para>
    /// <para>视图的唯一标识符，获取指定视图下的记录[view_id 参数说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#8121eebe)</para>
    /// <para>注意：</para>
    /// <para>当 filter 参数 或 sort 参数不为空时，请求视为对数据表中的全部数据做条件过滤，指定的view_id 会被忽略。</para>
    /// <para>示例值：vewqhz51lk</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="filter">
    /// <para>必填：否</para>
    /// <para>筛选参数，用于指定本次查询的筛选条件</para>
    /// <para>注意：</para>
    /// <para>1.不支持对“人员”以及“关联字段”的属性进行过滤筛选，如人员的 OpenID。</para>
    /// <para>2.指定筛选条件时，参数长度不超过2000个字符。</para>
    /// <para>详细请参考[筛选条件支持的公式](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/filter)</para>
    /// <para>示例值：AND(CurrentValue.[身高]&gt;180, CurrentValue.[体重]&gt;150)</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="sort">
    /// <para>必填：否</para>
    /// <para>排序参数，用于指定本次查询返回结果的顺序</para>
    /// <para>注意：</para>
    /// <para>1.不支持对带“公式”和“关联字段”的表的使用。</para>
    /// <para>2.指定排序条件时，参数长度不超过1000字符。</para>
    /// <para>3.当存在多个排序条件时，数据将根据条件顺序逐层排序</para>
    /// <para>示例值：["字段1 DESC","字段2 ASC"]</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="field_names">
    /// <para>必填：否</para>
    /// <para>字段名称，用于指定本次查询返回记录中包含的字段</para>
    /// <para>示例值：["字段1","字段2"]</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="text_field_as_array">
    /// <para>必填：否</para>
    /// <para>控制多行文本字段数据的返回格式，true 表示以数组形式返回。</para>
    /// <para>注意：</para>
    /// <para>1.多行文本中如果有超链接部分，则会返回链接的 URL。</para>
    /// <para>2.目前可以返回多行文本中 URL 类型为多维表格链接、飞书 doc、飞书 sheet的URL类型以及@人员的数据结构。</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="display_formula_ref">
    /// <para>必填：否</para>
    /// <para>默认值为false，返回当前字段的默认类型和结果；当该参数的值为true时，公式 和 查找引用 类型的字段，将会以 被引用字段 的格式返回</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="automatic_fields">
    /// <para>必填：否</para>
    /// <para>控制是否返回自动计算的字段，例如 `created_by`/`created_time`/`last_modified_by`/`last_modified_time`，true 表示返回</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：recn0hoyXL</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    [HttpGet("/open-apis/bitable/v1/apps/{app_token}/tables/{table_id}/records")]
    System.Threading.Tasks.Task<FeishuResponse<Base.GetBitableV1AppsByAppTokenTablesByTableIdRecordsResponseDto>> GetBitableV1AppsByAppTokenTablesByTableIdRecordsAsync(
        [PathQuery] string app_token,
        [PathQuery] string table_id,
        [PathQuery] string? view_id = null,
        [PathQuery] string? filter = null,
        [PathQuery] string? sort = null,
        [PathQuery] string? field_names = null,
        [PathQuery] bool? text_field_as_array = null,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] bool? display_formula_ref = null,
        [PathQuery] bool? automatic_fields = null,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【多维表格】检索记录</para>
    /// <para>接口ID：6952707657162588162</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table-record/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于根据 record_id 的值检索现有记录。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>bitable:app</item>
    /// <item>bitable:app:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:user.base:readonly</item>
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>base app token</para>
    /// <para>示例值：bascnCMII2ORej2RItqpZZUNMIe</para>
    /// </param>
    /// <param name="table_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>table id</para>
    /// <para>示例值：tblxI2tWaxP5dG7p</para>
    /// </param>
    /// <param name="record_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>单条记录的 id</para>
    /// <para>示例值：recn0hoyXL</para>
    /// </param>
    /// <param name="text_field_as_array">
    /// <para>必填：否</para>
    /// <para>多行文本字段数据是否以数组形式返回。true 表示以数组形式返回。默认为 false</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="display_formula_ref">
    /// <para>必填：否</para>
    /// <para>控制公式、查找引用是否显示完整原样的返回结果。默认为 false</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="with_shared_url">
    /// <para>必填：否</para>
    /// <para>控制是否返回该记录的链接，即 record_url 参数。默认为 false，即不返回</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="automatic_fields">
    /// <para>必填：否</para>
    /// <para>控制是否返回自动计算的字段，例如 `created_by`/`created_time`/`last_modified_by`/`last_modified_time`，true 表示返回。默认为 false</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    [Obsolete("历史版本")]
    [HttpGet("/open-apis/bitable/v1/apps/{app_token}/tables/{table_id}/records/{record_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Base.GetBitableV1AppsByAppTokenTablesByTableIdRecordsByRecordIdResponseDto>> GetBitableV1AppsByAppTokenTablesByTableIdRecordsByRecordIdAsync(
        [PathQuery] string app_token,
        [PathQuery] string table_id,
        [PathQuery] string record_id,
        [PathQuery] bool? text_field_as_array = null,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] bool? display_formula_ref = null,
        [PathQuery] bool? with_shared_url = null,
        [PathQuery] bool? automatic_fields = null);

    /// <summary>
    /// <para>【多维表格】新增多条记录</para>
    /// <para>接口ID：6952707657162604546</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table-record/batch_create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>在多维表格数据表中新增多条记录，单次调用最多新增 1,000 条记录。</para>
    /// <para>## 前提条件</para>
    /// <para>调用此接口前，请确保当前调用身份（tenant_access_token 或 user_access_token）已有多维表格的编辑等文档权限，否则接口将返回 HTTP 403 或 400 状态码。了解更多，参考[如何为应用或用户开通文档权限](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#16c6475a)。</para>
    /// <para>## 注意事项</para>
    /// <para>从其它数据源同步的数据表，不支持对记录进行增加、删除、和修改操作。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:record:create</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:user.base:readonly</item>
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 app_token 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 app_token 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 obj_type 的值为 bitable 时，obj_token 字段的值才是多维表格的 app_token。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="table_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格数据表的唯一标识。获取方式：</para>
    /// <para>- 你可通过多维表格 URL 获取 `table_id`，下图高亮部分即为当前数据表的 `table_id`</para>
    /// <para>- 也可通过[列出数据表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list)接口获取 `table_id`</para>
    /// <para>![](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/18741fe2a0d3cafafaf9949b263bb57d_yD1wkOrSju.png?height=746&amp;lazyload=true&amp;maxWidth=700&amp;width=2976)</para>
    /// <para>示例值：tblsRc9GRRXKqhvW</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>格式为标准的 uuidv4，操作的唯一标识，用于幂等的进行更新操作。此值为空表示将发起一次新的请求，此值非空表示幂等的进行更新操作。</para>
    /// <para>示例值：fe599b60-450f-46ff-b2ef-9f6675625b97</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="ignore_consistency_check">
    /// <para>必填：否</para>
    /// <para>是否忽略一致性读写检查，默认为 false，即在进行读写操作时，系统将确保读取到的数据和写入的数据是一致的。可选值：</para>
    /// <para>- true：忽略读写一致性检查，提高性能，但可能会导致某些节点的数据不同步，出现暂时不一致</para>
    /// <para>- false：开启读写一致性检查，确保数据在读写过程中一致</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/bitable/v1/apps/{app_token}/tables/{table_id}/records/batch_create")]
    System.Threading.Tasks.Task<FeishuResponse<Base.PostBitableV1AppsByAppTokenTablesByTableIdRecordsBatchCreateResponseDto>> PostBitableV1AppsByAppTokenTablesByTableIdRecordsBatchCreateAsync(
        [PathQuery] string app_token,
        [PathQuery] string table_id,
        [JsonContent] Base.PostBitableV1AppsByAppTokenTablesByTableIdRecordsBatchCreateBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? client_token = null,
        [PathQuery] bool? ignore_consistency_check = null);

    /// <summary>
    /// <para>【多维表格】删除多条记录</para>
    /// <para>接口ID：6952707657162620930</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table-record/batch_delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除多维表格数据表中现有的多条记录，单次调用中最多删除 500 条记录。</para>
    /// <para>## 前提条件</para>
    /// <para>调用此接口前，请确保当前调用身份（tenant_access_token 或 user_access_token）已有多维表格的编辑等文档权限，否则接口将返回 HTTP 403 或 400 状态码。了解更多，参考[如何为应用或用户开通文档权限](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#16c6475a)。</para>
    /// <para>## 注意事项</para>
    /// <para>从其它数据源同步的数据表，不支持开发者对记录进行增加、删除、和修改操作。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:record:delete</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="table_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格数据表的唯一标识。获取方式：</para>
    /// <para>- 你可通过多维表格 URL 获取 `table_id`，下图高亮部分即为当前数据表的 `table_id`</para>
    /// <para>- 也可通过[列出数据表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list)接口获取 `table_id`</para>
    /// <para>![](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/18741fe2a0d3cafafaf9949b263bb57d_yD1wkOrSju.png?height=746&amp;lazyload=true&amp;maxWidth=700&amp;width=2976)</para>
    /// <para>示例值：tblsRc9GRRXKqhvW</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/bitable/v1/apps/{app_token}/tables/{table_id}/records/batch_delete")]
    System.Threading.Tasks.Task<FeishuResponse<Base.PostBitableV1AppsByAppTokenTablesByTableIdRecordsBatchDeleteResponseDto>> PostBitableV1AppsByAppTokenTablesByTableIdRecordsBatchDeleteAsync(
        [PathQuery] string app_token,
        [PathQuery] string table_id,
        [JsonContent] Base.PostBitableV1AppsByAppTokenTablesByTableIdRecordsBatchDeleteBodyDto dto);

    /// <summary>
    /// <para>【多维表格】更新记录</para>
    /// <para>接口ID：6952707657162637314</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table-record/update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新多维表格数据表中的一条记录。</para>
    /// <para>## 前提条件</para>
    /// <para>调用此接口前，请确保当前调用身份（tenant_access_token 或 user_access_token）已有多维表格的编辑等文档权限，否则接口将返回 HTTP 403 或 400 状态码。了解更多，参考[如何为应用或用户开通文档权限](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#16c6475a)。</para>
    /// <para>## 注意事项</para>
    /// <para>- 从其它数据源同步的数据表，不支持对记录进行增加、删除、和修改操作。</para>
    /// <para>- 更新记录为增量更新，仅更新传入的字段。如果想对记录中的某个字段值置空，可将字段设为 null，例如：</para>
    /// <para>```json</para>
    /// <para>{</para>
    /// <para>"fields": {</para>
    /// <para>"文本字段": null</para>
    /// <para>}</para>
    /// <para>}</para>
    /// <para>```</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:record:update</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:user.base:readonly</item>
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 app_token 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 app_token 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 obj_type 的值为 bitable 时，obj_token 字段的值才是多维表格的 app_token。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="table_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格数据表的唯一标识。获取方式：</para>
    /// <para>- 你可通过多维表格 URL 获取 `table_id`，下图高亮部分即为当前数据表的 `table_id`</para>
    /// <para>- 也可通过[列出数据表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list)接口获取 `table_id`</para>
    /// <para>![](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/18741fe2a0d3cafafaf9949b263bb57d_yD1wkOrSju.png?height=746&amp;lazyload=true&amp;maxWidth=700&amp;width=2976)</para>
    /// <para>示例值：tblsRc9GRRXKqhvW</para>
    /// </param>
    /// <param name="record_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>数据表中一条记录的唯一标识。通过[查询记录](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/search)接口获取。</para>
    /// <para>示例值：recqwIwhc6</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="ignore_consistency_check">
    /// <para>必填：否</para>
    /// <para>是否忽略一致性读写检查，默认为 false，即在进行读写操作时，系统将确保读取到的数据和写入的数据是一致的。可选值：</para>
    /// <para>- true：忽略读写一致性检查，提高性能，但可能会导致某些节点的数据不同步，出现暂时不一致</para>
    /// <para>- false：开启读写一致性检查，确保数据在读写过程中一致</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/bitable/v1/apps/{app_token}/tables/{table_id}/records/{record_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Base.PutBitableV1AppsByAppTokenTablesByTableIdRecordsByRecordIdResponseDto>> PutBitableV1AppsByAppTokenTablesByTableIdRecordsByRecordIdAsync(
        [PathQuery] string app_token,
        [PathQuery] string table_id,
        [PathQuery] string record_id,
        [JsonContent] Base.PutBitableV1AppsByAppTokenTablesByTableIdRecordsByRecordIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] bool? ignore_consistency_check = null);

    /// <summary>
    /// <para>【日历】获取日程</para>
    /// <para>接口ID：6952888507002699803</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/calendar-event/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口以当前身份（应用或用户）获取指定日历内的某一日程信息，包括日程的标题、时间段、视频会议信息、公开范围以及参与人权限等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar:readonly</item>
    /// <item>calendar:calendar.event:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="calendar_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日程所在的日历 ID。关于日历 ID 可参见[日历 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)。</para>
    /// <para>示例值：feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn</para>
    /// </param>
    /// <param name="event_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日程 ID。</para>
    /// <para>创建日程时会返回日程 ID。你也可以调用以下接口获取某一日历的 ID。</para>
    /// <para>- [获取日程列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/list)</para>
    /// <para>- [搜索日程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/search)</para>
    /// <para>示例值：xxxxxxxxx_0</para>
    /// </param>
    /// <param name="need_meeting_settings">
    /// <para>必填：否</para>
    /// <para>是否需要返回飞书视频会议（VC）的会前设置。需满足以下条件才可以获取到返回结果：</para>
    /// <para>- 日程的会议类型（vc_type）需要是 vc。</para>
    /// <para>- 需要有日程的编辑权限。</para>
    /// <para>**可选值有**：</para>
    /// <para>- true：需要</para>
    /// <para>- false（默认值）：不需要</para>
    /// <para>示例值：false</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="need_attendee">
    /// <para>必填：否</para>
    /// <para>是否需要返回参与人信息。</para>
    /// <para>**可选值有**：</para>
    /// <para>- true：需要</para>
    /// <para>- false（默认值）：不需要</para>
    /// <para>示例值：false</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="max_attendee_num">
    /// <para>必填：否</para>
    /// <para>返回的最大参与人数量。调用[获取日程参与人列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee/list)可获取日程完整的参与人信息。</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/calendar/v4/calendars/{calendar_id}/events/{event_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Calendar.GetCalendarV4CalendarsByCalendarIdEventsByEventIdResponseDto>> GetCalendarV4CalendarsByCalendarIdEventsByEventIdAsync(
        [PathQuery] string calendar_id,
        [PathQuery] string event_id,
        [PathQuery] bool? need_meeting_settings = null,
        [PathQuery] bool? need_attendee = null,
        [PathQuery] int? max_attendee_num = 10,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【日历】订阅日历</para>
    /// <para>接口ID：6952888507002748955</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/calendar/subscribe</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口以当前身份（应用或用户）订阅指定的日历。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar:subscribe</item>
    /// </list></para>
    /// </summary>
    /// <param name="calendar_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日历ID。</para>
    /// <para>创建共享日历时会返回日历 ID。你也可以调用以下接口获取某一日历的 ID。</para>
    /// <para>- [查询主日历信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/primary)</para>
    /// <para>- [查询日历列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/list)</para>
    /// <para>- [搜索日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/search)</para>
    /// <para>示例值：feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn</para>
    /// </param>
    [HttpPost("/open-apis/calendar/v4/calendars/{calendar_id}/subscribe")]
    System.Threading.Tasks.Task<FeishuResponse<Calendar.PostCalendarV4CalendarsByCalendarIdSubscribeResponseDto>> PostCalendarV4CalendarsByCalendarIdSubscribeAsync(
        [PathQuery] string calendar_id);

    /// <summary>
    /// <para>【日历】删除请假日程</para>
    /// <para>接口ID：6952888507002765339</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/timeoff_event/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口删除一个指定的请假日程。请假日程删除后，用户个人签名页的请假信息也会消失。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:time_off:delete</item>
    /// <item>calendar:timeoff</item>
    /// </list></para>
    /// </summary>
    /// <param name="timeoff_event_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>请假日程 ID，在创建请假日程时从返回结果中获取。</para>
    /// <para>示例值：timeoff:XXXXXX-XXXX-0917-1623-aa493d591a39</para>
    /// </param>
    [HttpDelete("/open-apis/calendar/v4/timeoff_events/{timeoff_event_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCalendarV4TimeoffEventsByTimeoffEventIdAsync(
        [PathQuery] string timeoff_event_id);

    /// <summary>
    /// <para>【日历】获取日程列表</para>
    /// <para>接口ID：6952888507002798107</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/calendar-event/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口以当前身份（应用或用户）获取指定日历下的日程列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar:readonly</item>
    /// <item>calendar:calendar.event:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="calendar_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日历 ID。关于日历 ID 可参见[日历 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)。</para>
    /// <para>示例值：feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>一次请求要求返回的最大日程数量。实际返回的日程数量可能小于该值，也可能为空，可以根据响应体里的has_more字段来判断是否还有更多日程。</para>
    /// <para>示例值：50</para>
    /// <para>默认值：500</para>
    /// </param>
    /// <param name="anchor_time">
    /// <para>必填：否</para>
    /// <para>时间锚点，Unix 时间戳（秒）。anchor_time 用于设置一个时间点，以便直接拉取该时间点之后的日程数据，从而避免拉取全量日程数据。可使用 page_token 或 sync_token 进行分页或增量拉取 anchor_time 之后的所有日程数据。</para>
    /// <para>**使用说明**：</para>
    /// <para>- 对于单次日程，会获取到 **日程结束时间 &gt;= anchor_time** 的日程信息。</para>
    /// <para>- 对于重复性日程，目前设置 anchor_time 后均会获取到，包括在 anchor_time 之前的已结束的历史重复性日程。</para>
    /// <para>- 对于例外日程，会获取到 **original_time &gt;= anchor_time** 以及 **日程结束时间 &gt;= anchor_time** 的日程信息，其中 original_time 从例外日程 ID 中获取，ID 结构为 `{uid}_{original_time}`。</para>
    /// <para>**注意**：该参数不可与 start_time 和 end_time 一起使用。</para>
    /// <para>**默认值**：空</para>
    /// <para>示例值：1609430400</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：ListCalendarsPageToken_1632452910_1632539310</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="sync_token">
    /// <para>必填：否</para>
    /// <para>增量同步标记，第一次请求不填。当分页查询结束（page_token 返回值为空）时，接口会返回 sync_token 字段，下次调用可使用该 sync_token 增量获取日历变更数据。</para>
    /// <para>**默认值**：空</para>
    /// <para>示例值：ListCalendarsSyncToken_1632452910</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="start_time">
    /// <para>必填：否</para>
    /// <para>时间区间的开始时间， Unix 时间戳（秒），与end_time搭配使用，用于拉取指定时间区间内的日程数据.</para>
    /// <para>**注意**：</para>
    /// <para>- 该方式只能一次性返回数据，无法进行分页。一次性返回的数据大小受page_size限制，超过限制的数据将被截断。</para>
    /// <para>- 在使用start_time和end_time时，不能与page_token或sync_token一起使用。</para>
    /// <para>- 在使用start_time和end_time时，不能与anchor_time一起使用。</para>
    /// <para>**默认值**：空</para>
    /// <para>示例值：1631777271</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="end_time">
    /// <para>必填：否</para>
    /// <para>时间区间的结束时间， Unix 时间戳（秒）。与start_time搭配使用，用于拉取指定时间区间内的日程数据.</para>
    /// <para>**注意**：</para>
    /// <para>- 该方式只能一次性返回数据，无法进行分页。一次性返回的数据大小受page_size限制，超过限制的数据将被截断。</para>
    /// <para>- 在使用start_time和end_time时不能与page_token或sync_token一起使用。</para>
    /// <para>- 在使用start_time和end_time时，不能与anchor_time一起使用。</para>
    /// <para>**默认值**：空</para>
    /// <para>示例值：1631777271</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/calendar/v4/calendars/{calendar_id}/events")]
    System.Threading.Tasks.Task<FeishuResponse<Calendar.GetCalendarV4CalendarsByCalendarIdEventsResponseDto>> GetCalendarV4CalendarsByCalendarIdEventsAsync(
        [PathQuery] string calendar_id,
        [PathQuery] int? page_size = 500,
        [PathQuery] string? anchor_time = null,
        [PathQuery] string? page_token = null,
        [PathQuery] string? sync_token = null,
        [PathQuery] string? start_time = null,
        [PathQuery] string? end_time = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【日历】创建访问控制</para>
    /// <para>接口ID：6952888507002814491</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/calendar-acl/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口以当前身份（应用或用户）为指定日历添加访问控制，即日历成员权限。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar.acl:create</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="calendar_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要添加访问控制的日历 ID。</para>
    /// <para>创建共享日历时会返回日历 ID。你也可以调用以下接口获取某一日历的 ID。</para>
    /// <para>- [查询主日历信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/primary)</para>
    /// <para>- [查询日历列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/list)</para>
    /// <para>- [搜索日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/search)</para>
    /// <para>示例值：feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/calendar/v4/calendars/{calendar_id}/acls")]
    System.Threading.Tasks.Task<FeishuResponse<Calendar.PostCalendarV4CalendarsByCalendarIdAclsResponseDto>> PostCalendarV4CalendarsByCalendarIdAclsAsync(
        [PathQuery] string calendar_id,
        [JsonContent] Calendar.PostCalendarV4CalendarsByCalendarIdAclsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【日历】删除日程参与人</para>
    /// <para>接口ID：6952888507002830875</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/calendar-event-attendee/batch_delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口以当前身份（应用或用户）删除指定日程的一个或多个参与人。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar.event:update</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="calendar_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日程对应的日历 ID。了解更多，参见[日历 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)。</para>
    /// <para>示例值：feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn</para>
    /// </param>
    /// <param name="event_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日程 ID。</para>
    /// <para>创建日程时会返回日程 ID。你也可以调用以下接口获取某一日历的 ID。</para>
    /// <para>- [获取日程列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/list)</para>
    /// <para>- [搜索日程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/search)</para>
    /// <para>示例值：xxxxxxxxx_0</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/calendar/v4/calendars/{calendar_id}/events/{event_id}/attendees/batch_delete")]
    System.Threading.Tasks.Task<FeishuResponse> PostCalendarV4CalendarsByCalendarIdEventsByEventIdAttendeesBatchDeleteAsync(
        [PathQuery] string calendar_id,
        [PathQuery] string event_id,
        [JsonContent] Calendar.PostCalendarV4CalendarsByCalendarIdEventsByEventIdAttendeesBatchDeleteBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【日历】获取日程参与群成员列表</para>
    /// <para>接口ID：6952888507002847259</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/calendar-event-attendee/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口以当前身份（应用或用户）获取日程的群组类型参与人的群成员列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar:readonly</item>
    /// <item>calendar:calendar.event:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="calendar_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日程所在的日历 ID。关于日历 ID 可参见[日历 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)。</para>
    /// <para>示例值：feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn</para>
    /// </param>
    /// <param name="event_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日程 ID。</para>
    /// <para>创建日程时会返回日程 ID。你也可以调用以下接口获取某一日历的 ID。</para>
    /// <para>- [获取日程列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/list)</para>
    /// <para>- [搜索日程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/search)</para>
    /// <para>示例值：xxxxxxxxx_0</para>
    /// </param>
    /// <param name="attendee_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群组类型参与人 ID。</para>
    /// <para>添加日程参与人时，会返回参与人 ID（attendee_id），你也可以调用[获取日程参与人列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee/list)接口，查询指定日程的参与人 ID。</para>
    /// <para>示例值：chat_xxxxxx</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：23jhysaxxxxsysy</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>一次请求返回的最大群成员数量。</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/calendar/v4/calendars/{calendar_id}/events/{event_id}/attendees/{attendee_id}/chat_members")]
    System.Threading.Tasks.Task<FeishuResponse<Calendar.GetCalendarV4CalendarsByCalendarIdEventsByEventIdAttendeesByAttendeeIdChatMembersResponseDto>> GetCalendarV4CalendarsByCalendarIdEventsByEventIdAttendeesByAttendeeIdChatMembersAsync(
        [PathQuery] string calendar_id,
        [PathQuery] string event_id,
        [PathQuery] string attendee_id,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【日历】搜索日历</para>
    /// <para>接口ID：6952888507002863643</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/calendar/search</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口通过关键字搜索日历，搜索结果为标题或描述包含关键字的公共日历或用户主日历。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar:read</item>
    /// <item>calendar:calendar:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：10</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>一次请求返回的最大日历数量。</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/calendar/v4/calendars/search")]
    System.Threading.Tasks.Task<FeishuResponse<Calendar.PostCalendarV4CalendarsSearchResponseDto>> PostCalendarV4CalendarsSearchAsync(
        [JsonContent] Calendar.PostCalendarV4CalendarsSearchBodyDto dto,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【日历】查询日历列表</para>
    /// <para>接口ID：6952888507002880027</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/calendar/list-2</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口分页查询当前身份（应用或用户）的日历列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar:read</item>
    /// <item>calendar:calendar:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>一次请求要求返回的最大日历数量。实际返回的日历数量可能小于该值，也可能为空，可以根据响应体里的has_more字段来判断是否还有更多日历。</para>
    /// <para>示例值：`50`</para>
    /// <para>默认值：500</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：ListCalendarsPageToken_xxx</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="sync_token">
    /// <para>必填：否</para>
    /// <para>增量同步标记，第一次请求不填。当分页查询结束（page_token 返回值为空）时，接口会返回 sync_token 字段，下次调用可使用该 sync_token 增量获取日历变更数据。</para>
    /// <para>**默认值**：空</para>
    /// <para>示例值：ListCalendarsSyncToken_xxx</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/calendar/v4/calendars")]
    System.Threading.Tasks.Task<FeishuResponse<Calendar.GetCalendarV4CalendarsResponseDto>> GetCalendarV4CalendarsAsync(
        [PathQuery] int? page_size = 500,
        [PathQuery] string? page_token = null,
        [PathQuery] string? sync_token = null);

    /// <summary>
    /// <para>【日历】获取日程参与人列表</para>
    /// <para>接口ID：6952888507002896411</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/calendar-event-attendee/list-2</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口以当前身份（应用或用户）获取日程的参与人列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar:readonly</item>
    /// <item>calendar:calendar.event:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="calendar_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日程所在的日历 ID。关于日历 ID 可参见[日历 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)。</para>
    /// <para>示例值：feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn</para>
    /// </param>
    /// <param name="event_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日程 ID。</para>
    /// <para>创建日程时会返回日程 ID。你也可以调用以下接口获取某一日历的 ID。</para>
    /// <para>- [获取日程列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/list)</para>
    /// <para>- [搜索日程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/search)</para>
    /// <para>示例值：xxxxxxxxx_0</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="need_resource_customization">
    /// <para>必填：否</para>
    /// <para>是否需要会议室表单信息。</para>
    /// <para>**可选值有**：</para>
    /// <para>- true：需要</para>
    /// <para>- false（默认值）：不需要</para>
    /// <para>**注意**：当前身份需要有日程的编辑权限才会返回会议室表单信息，即当前身份需要是日程的组织者，或者是日程参与人且日程设置了**参与人可编辑日程**权限。你可以调用[获取日程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/get)接口，获取日程的参与人权限（attendee_ability）。</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：780TRhwXXXXX</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>一次请求返回的最大日程参与人数量。最小值为 10，传入小于 10 的值默认按照 10 计算。</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    [HttpGet("/open-apis/calendar/v4/calendars/{calendar_id}/events/{event_id}/attendees")]
    System.Threading.Tasks.Task<FeishuResponse<Calendar.GetCalendarV4CalendarsByCalendarIdEventsByEventIdAttendeesResponseDto>> GetCalendarV4CalendarsByCalendarIdEventsByEventIdAttendeesAsync(
        [PathQuery] string calendar_id,
        [PathQuery] string event_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] bool? need_resource_customization = null,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【日历】查询主日历日程忙闲信息</para>
    /// <para>接口ID：6952888507002912795</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/calendar/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口查询指定用户的主日历忙闲信息，或者查询指定会议室的忙闲信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar:readonly</item>
    /// <item>calendar:calendar.free_busy:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/calendar/v4/freebusy/list")]
    System.Threading.Tasks.Task<FeishuResponse<Calendar.PostCalendarV4FreebusyListResponseDto>> PostCalendarV4FreebusyListAsync(
        [JsonContent] Calendar.PostCalendarV4FreebusyListBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【日历】删除访问控制</para>
    /// <para>接口ID：6952888507002945563</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/calendar-acl/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口以当前身份（应用或用户）删除指定日历内的某一访问控制，即成员权限。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar.acl:delete</item>
    /// </list></para>
    /// </summary>
    /// <param name="calendar_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要删除访问控制的日历 ID。</para>
    /// <para>创建共享日历时会返回日历 ID。你也可以调用以下接口获取某一日历的 ID。</para>
    /// <para>- [查询主日历信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/primary)</para>
    /// <para>- [查询日历列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/list)</para>
    /// <para>- [搜索日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/search)</para>
    /// <para>示例值：feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn</para>
    /// </param>
    /// <param name="acl_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>访问控制 ID。</para>
    /// <para>为日历创建访问控制时会返回访问控制 ID。你也可以调用[获取访问控制列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-acl/list)接口，获取指定日历内的访问控制信息。</para>
    /// <para>示例值：user_xxxxxx</para>
    /// </param>
    [HttpDelete("/open-apis/calendar/v4/calendars/{calendar_id}/acls/{acl_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCalendarV4CalendarsByCalendarIdAclsByAclIdAsync(
        [PathQuery] string calendar_id,
        [PathQuery] string acl_id);

    /// <summary>
    /// <para>【日历】删除日程</para>
    /// <para>接口ID：6952888507002961947</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/calendar-event/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口以当前身份（应用或用户）删除指定日历上的一个日程。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar.event:delete</item>
    /// </list></para>
    /// </summary>
    /// <param name="calendar_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日程所在的日历 ID。了解更多，参见[日历 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)。</para>
    /// <para>示例值：feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn</para>
    /// </param>
    /// <param name="event_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日程 ID。获取方式：</para>
    /// <para>- [创建日程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/create)会返回日程 ID</para>
    /// <para>- [获取日程列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/list)</para>
    /// <para>- [搜索日程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/search)</para>
    /// <para>示例值：xxxxxxxxx_0</para>
    /// </param>
    /// <param name="need_notification">
    /// <para>必填：否</para>
    /// <para>删除日程是否给日程参与人发送 Bot 通知。</para>
    /// <para>**默认值**：true</para>
    /// <para>示例值：false</para>
    /// <list type="bullet">
    /// <item>true：发送</item>
    /// <item>false：不发送</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    [HttpDelete("/open-apis/calendar/v4/calendars/{calendar_id}/events/{event_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCalendarV4CalendarsByCalendarIdEventsByEventIdAsync(
        [PathQuery] string calendar_id,
        [PathQuery] string event_id,
        [PathQuery] bool? need_notification = null);

    /// <summary>
    /// <para>【日历】查询日历信息</para>
    /// <para>接口ID：6952888507002978331</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/calendar/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口以当前身份（应用或用户）查询指定日历的信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar:read</item>
    /// <item>calendar:calendar:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="calendar_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日历 ID。</para>
    /// <para>创建共享日历时会返回日历 ID。你也可以调用以下接口获取某一日历的 ID。</para>
    /// <para>- [查询主日历信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/primary)</para>
    /// <para>- [查询日历列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/list)</para>
    /// <para>- [搜索日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/search)</para>
    /// <para>示例值：feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn</para>
    /// </param>
    [HttpGet("/open-apis/calendar/v4/calendars/{calendar_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Calendar.GetCalendarV4CalendarsByCalendarIdResponseDto>> GetCalendarV4CalendarsByCalendarIdAsync(
        [PathQuery] string calendar_id);

    /// <summary>
    /// <para>【日历】删除共享日历</para>
    /// <para>接口ID：6952888507002994715</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/calendar/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口以当前身份（应用或用户）删除某一指定的共享日历。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar:delete</item>
    /// </list></para>
    /// </summary>
    /// <param name="calendar_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日历 ID。</para>
    /// <para>创建共享日历时会返回日历 ID。你也可以调用以下接口获取某一日历的 ID。</para>
    /// <para>- [查询主日历信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/primary)</para>
    /// <para>- [查询日历列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/list)</para>
    /// <para>- [搜索日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/search)</para>
    /// <para>示例值：feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn</para>
    /// </param>
    [HttpDelete("/open-apis/calendar/v4/calendars/{calendar_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCalendarV4CalendarsByCalendarIdAsync(
        [PathQuery] string calendar_id);

    /// <summary>
    /// <para>【日历】更新日程</para>
    /// <para>接口ID：6952888507003043867</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/calendar-event/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口以当前身份（应用或用户）更新指定日历上的一个日程，包括日程标题、描述、开始与结束时间、视频会议以及日程地点等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar.event:update</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="calendar_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日程所在的日历 ID。了解更多，参见[日历 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)。</para>
    /// <para>示例值：feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn</para>
    /// </param>
    /// <param name="event_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日程 ID。</para>
    /// <para>创建日程时会返回日程 ID。你也可以调用以下接口获取某一日历的 ID。</para>
    /// <para>- [获取日程列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/list)</para>
    /// <para>- [搜索日程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/search)</para>
    /// <para>示例值：00592a0e-7edf-4678-bc9d-1b77383ef08e_0</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/calendar/v4/calendars/{calendar_id}/events/{event_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Calendar.PatchCalendarV4CalendarsByCalendarIdEventsByEventIdResponseDto>> PatchCalendarV4CalendarsByCalendarIdEventsByEventIdAsync(
        [PathQuery] string calendar_id,
        [PathQuery] string event_id,
        [JsonContent] Calendar.PatchCalendarV4CalendarsByCalendarIdEventsByEventIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【日历】创建共享日历</para>
    /// <para>接口ID：6952888507003076635</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/calendar/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口为当前身份（应用或用户）创建一个共享日历。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar:create</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/calendar/v4/calendars")]
    System.Threading.Tasks.Task<FeishuResponse<Calendar.PostCalendarV4CalendarsResponseDto>> PostCalendarV4CalendarsAsync(
        [JsonContent] Calendar.PostCalendarV4CalendarsBodyDto dto);

    /// <summary>
    /// <para>【日历】取消订阅日历</para>
    /// <para>接口ID：6952888507003093019</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/calendar/unsubscribe</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口以当前身份（应用或用户）取消指定日历的订阅状态。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar:subscribe</item>
    /// </list></para>
    /// </summary>
    /// <param name="calendar_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日历 ID。</para>
    /// <para>你可以调用以下接口获取某一日历的 ID。</para>
    /// <para>- [查询主日历信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/primary)</para>
    /// <para>- [查询日历列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/list)</para>
    /// <para>- [搜索日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/search)</para>
    /// <para>示例值：feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn</para>
    /// </param>
    [HttpPost("/open-apis/calendar/v4/calendars/{calendar_id}/unsubscribe")]
    System.Threading.Tasks.Task<FeishuResponse> PostCalendarV4CalendarsByCalendarIdUnsubscribeAsync(
        [PathQuery] string calendar_id);

    /// <summary>
    /// <para>【日历】搜索日程</para>
    /// <para>接口ID：6952888507003109403</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/calendar-event/search</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口搜索指定日历下的相关日程，支持关键词搜索、过滤条件搜索。</para>
    /// <para>## 注意事项</para>
    /// <para>适用于主日历和共享日历，且当前身份必须对日历有 reader、writer 或 owner 权限。你可以调用[查询日历信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/get)接口，获取当前身份对日历的访问权限。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar:readonly</item>
    /// <item>calendar:calendar.event:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="calendar_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日历 ID。关于日历 ID 可参见[日历 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)。</para>
    /// <para>示例值：feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：xxxxx</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>一次调用所返回的最大日程数量。最小值为10，不足10取10。</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/calendar/v4/calendars/{calendar_id}/events/search")]
    System.Threading.Tasks.Task<FeishuResponse<Calendar.PostCalendarV4CalendarsByCalendarIdEventsSearchResponseDto>> PostCalendarV4CalendarsByCalendarIdEventsSearchAsync(
        [PathQuery] string calendar_id,
        [JsonContent] Calendar.PostCalendarV4CalendarsByCalendarIdEventsSearchBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【日历】添加日程参与人</para>
    /// <para>接口ID：6952888507003125787</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/calendar-event-attendee/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口以当前身份（应用或用户）为指定日程添加一个或多个参与人，参与人类型包括用户、群组、会议室以及邮箱。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar.event:update</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="calendar_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日程对应的日历 ID。了解更多，参见[日历 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)。</para>
    /// <para>示例值：feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn</para>
    /// </param>
    /// <param name="event_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日程 ID。</para>
    /// <para>创建日程时会返回日程 ID。你也可以调用以下接口获取某一日历的 ID。</para>
    /// <para>- [获取日程列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/list)</para>
    /// <para>- [搜索日程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/search)</para>
    /// <para>示例值：xxxxxxxxx_0</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/calendar/v4/calendars/{calendar_id}/events/{event_id}/attendees")]
    System.Threading.Tasks.Task<FeishuResponse<Calendar.PostCalendarV4CalendarsByCalendarIdEventsByEventIdAttendeesResponseDto>> PostCalendarV4CalendarsByCalendarIdEventsByEventIdAttendeesAsync(
        [PathQuery] string calendar_id,
        [PathQuery] string event_id,
        [JsonContent] Calendar.PostCalendarV4CalendarsByCalendarIdEventsByEventIdAttendeesBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【日历】创建请假日程</para>
    /// <para>接口ID：6952888507003142171</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/timeoff_event/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口为指定用户创建一个请假日程。请假日程分为普通日程和全天日程。创建请假日程后，在请假时间内，用户个人签名页会展示请假信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:time_off:create</item>
    /// <item>calendar:timeoff</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/calendar/v4/timeoff_events")]
    System.Threading.Tasks.Task<FeishuResponse<Calendar.PostCalendarV4TimeoffEventsResponseDto>> PostCalendarV4TimeoffEventsAsync(
        [JsonContent] Calendar.PostCalendarV4TimeoffEventsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【日历】更新日历信息</para>
    /// <para>接口ID：6952888507003158555</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/calendar/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口以当前身份（应用或用户）修改指定日历的标题、描述、公开范围等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar:update</item>
    /// </list></para>
    /// </summary>
    /// <param name="calendar_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日历 ID。</para>
    /// <para>创建共享日历时会返回日历 ID。你也可以调用以下接口获取某一日历的 ID。</para>
    /// <para>- [查询主日历信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/primary)</para>
    /// <para>- [查询日历列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/list)</para>
    /// <para>- [搜索日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/search)</para>
    /// <para>示例值：feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/calendar/v4/calendars/{calendar_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Calendar.PatchCalendarV4CalendarsByCalendarIdResponseDto>> PatchCalendarV4CalendarsByCalendarIdAsync(
        [PathQuery] string calendar_id,
        [JsonContent] Calendar.PatchCalendarV4CalendarsByCalendarIdBodyDto dto);

    /// <summary>
    /// <para>【日历】获取访问控制列表</para>
    /// <para>接口ID：6953067803433009153</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/calendar-acl/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口以当前身份（应用或用户）获取指定日历的访问控制列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar:readonly</item>
    /// <item>calendar:calendar.acl:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="calendar_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日历 ID。</para>
    /// <para>创建共享日历时会返回日历 ID。你也可以调用以下接口获取某一日历的 ID。</para>
    /// <para>- [查询主日历信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/primary)</para>
    /// <para>- [查询日历列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/list)</para>
    /// <para>- [搜索日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/search)</para>
    /// <para>示例值：feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：xxx</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，即一次请求返回的最大条目数。</para>
    /// <para>**注意**：最小值 10，即取值小于 10 时统一按 10 处理。</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    [HttpGet("/open-apis/calendar/v4/calendars/{calendar_id}/acls")]
    System.Threading.Tasks.Task<FeishuResponse<Calendar.GetCalendarV4CalendarsByCalendarIdAclsResponseDto>> GetCalendarV4CalendarsByCalendarIdAclsAsync(
        [PathQuery] string calendar_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【搜索】为指定数据项创建索引</para>
    /// <para>接口ID：6953505452630163459</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/search-v2/open-search/data_source-item/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>索引一条数据记录。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>search:data_source</item>
    /// </list></para>
    /// </summary>
    /// <param name="data_source_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>数据源的ID</para>
    /// <para>**示例值**："6953903108179099667"</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/search/v2/data_sources/{data_source_id}/items")]
    System.Threading.Tasks.Task<FeishuResponse> PostSearchV2DataSourcesByDataSourceIdItemsAsync(
        [PathQuery] string data_source_id,
        [JsonContent] Search.Spec.PostSearchV2DataSourcesByDataSourceIdItemsBodyDto dto);

    /// <summary>
    /// <para>【搜索】修改数据源</para>
    /// <para>接口ID：6953505452630179843</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/search-v2/open-search/data_source/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新一个已经存在的数据源。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>search:data_source</item>
    /// </list></para>
    /// </summary>
    /// <param name="data_source_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>数据源的唯一标识</para>
    /// <para>**示例值**："6953903108179099667"</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/search/v2/data_sources/{data_source_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Search.Spec.PatchSearchV2DataSourcesByDataSourceIdResponseDto>> PatchSearchV2DataSourcesByDataSourceIdAsync(
        [PathQuery] string data_source_id,
        [JsonContent] Search.Spec.PatchSearchV2DataSourcesByDataSourceIdBodyDto dto);

    /// <summary>
    /// <para>【搜索】获取数据源</para>
    /// <para>接口ID：6953505452630196227</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/search-v2/open-search/data_source/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取已经创建的数据源。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>search:data_source</item>
    /// <item>search:data_source:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="data_source_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>数据源的唯一标识</para>
    /// <para>**示例值**："6953903108179099667"</para>
    /// </param>
    [HttpGet("/open-apis/search/v2/data_sources/{data_source_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Search.Spec.GetSearchV2DataSourcesByDataSourceIdResponseDto>> GetSearchV2DataSourcesByDataSourceIdAsync(
        [PathQuery] string data_source_id);

    /// <summary>
    /// <para>【搜索】创建数据源</para>
    /// <para>接口ID：6953505452630212611</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/search-v2/open-search/data_source/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建一个数据源。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>search:data_source</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/search/v2/data_sources")]
    System.Threading.Tasks.Task<FeishuResponse<Search.Spec.PostSearchV2DataSourcesResponseDto>> PostSearchV2DataSourcesAsync(
        [JsonContent] Search.Spec.PostSearchV2DataSourcesBodyDto dto);

    /// <summary>
    /// <para>【搜索】查询指定数据项</para>
    /// <para>接口ID：6953505452630228995</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/search-v2/open-search/data_source-item/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取单个数据记录。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>search:data_item:readonly</item>
    /// <item>search:data_source</item>
    /// <item>search:data_source:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="data_source_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>数据源的id</para>
    /// <para>示例值：service_ticket</para>
    /// </param>
    /// <param name="item_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>数据记录的唯一标识</para>
    /// <para>**注意**：</para>
    /// <para>- 该字段大小写敏感。</para>
    /// <para>- 如果调用成功但返回结果为空数据，请检查该字段传值是否正确。</para>
    /// <para>示例值：01010111</para>
    /// </param>
    [HttpGet("/open-apis/search/v2/data_sources/{data_source_id}/items/{item_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Search.GetSearchV2DataSourcesByDataSourceIdItemsByItemIdResponseDto>> GetSearchV2DataSourcesByDataSourceIdItemsByItemIdAsync(
        [PathQuery] string data_source_id,
        [PathQuery] string item_id);

    /// <summary>
    /// <para>【搜索】删除数据源</para>
    /// <para>接口ID：6953505452630245379</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/search-v2/open-search/data_source/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除一个已存在的数据源。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>search:data_source</item>
    /// </list></para>
    /// </summary>
    /// <param name="data_source_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>数据源的唯一标识</para>
    /// <para>**示例值**："6953903108179099667"</para>
    /// </param>
    [HttpDelete("/open-apis/search/v2/data_sources/{data_source_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteSearchV2DataSourcesByDataSourceIdAsync(
        [PathQuery] string data_source_id);

    /// <summary>
    /// <para>【搜索】批量获取数据源</para>
    /// <para>接口ID：6953505452630261763</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/search-v2/open-search/data_source/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量获取创建的数据源信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>search:data_source</item>
    /// <item>search:data_source:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="view">
    /// <para>必填：否</para>
    /// <para>回包数据格式，0-全量数据；1-摘要数据。</para>
    /// <para>**注**：摘要数据仅包含"id"，"name"，"state"。</para>
    /// <para>**示例值**：0</para>
    /// <para>**可选值有**：</para>
    /// <para>0:全量数据,1:摘要数据</para>
    /// <list type="bullet">
    /// <item>0：全量数据</item>
    /// <item>1：摘要数据</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>**示例值**：10</para>
    /// <para>**数据校验规则**：</para>
    /// <para>- 最大值：`50`</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>**示例值**："PxZFma9OIRhdBlT/dOYNiu2Ro8F2WAhcby7OhOijfljZ"</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/search/v2/data_sources")]
    System.Threading.Tasks.Task<FeishuResponse<Search.Spec.GetSearchV2DataSourcesResponseDto>> GetSearchV2DataSourcesAsync(
        [PathQuery] int? view = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【搜索】删除数据项</para>
    /// <para>接口ID：6953505452630278147</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/search-v2/open-search/data_source-item/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除数据项。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>search:data_source</item>
    /// </list></para>
    /// </summary>
    /// <param name="data_source_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>数据源的ID</para>
    /// <para>**示例值**："service_ticket"</para>
    /// </param>
    /// <param name="item_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>数据记录的ID</para>
    /// <para>**示例值**："01010111"</para>
    /// </param>
    [HttpDelete("/open-apis/search/v2/data_sources/{data_source_id}/items/{item_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteSearchV2DataSourcesByDataSourceIdItemsByItemIdAsync(
        [PathQuery] string data_source_id,
        [PathQuery] string item_id);

    /// <summary>
    /// <para>【企业信息】获取企业信息</para>
    /// <para>接口ID：6954228485356568579</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/tenant-v2/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取企业名称、企业编号等企业信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>tenant:tenant:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>tenant:tenant.domain:read</item>
    /// </list></para>
    /// </summary>
    [HttpGet("/open-apis/tenant/v2/tenant/query")]
    System.Threading.Tasks.Task<FeishuResponse<Tenant.GetTenantV2TenantQueryResponseDto>> GetTenantV2TenantQueryAsync();

    /// <summary>
    /// <para>【管理后台】获取用户维度的用户活跃和功能使用数据</para>
    /// <para>接口ID：6954303251601276955</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/admin-v1/data-report-management/list-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>用于获取用户维度的用户活跃和功能使用数据，即IM（即时通讯）、日历、云文档、音视频会议、邮箱功能的使用数据。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:admin_user_stat:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>部门ID类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：部门的 ID</item>
    /// <item>open_department_id：部门的 Open ID</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="start_date">
    /// <para>必填：是</para>
    /// <para>起始日期（包含），格式是YYYY-mm-dd</para>
    /// <para>示例值：2020-02-15</para>
    /// </param>
    /// <param name="end_date">
    /// <para>必填：是</para>
    /// <para>终止日期（包含），格式是YYYY-mm-dd。起止日期之间相差不能超过31天（包含31天）</para>
    /// <para>示例值：2020-02-15</para>
    /// </param>
    /// <param name="department_id">
    /// <para>必填：否</para>
    /// <para>部门的 ID，取决于department_id_type</para>
    /// <para>示例值：od-382e2793cfc9471f892e8a672987654c</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id">
    /// <para>必填：否</para>
    /// <para>用户的open_id，user_id或者union_id，取决于user_id_type</para>
    /// <para>示例值：ou_7dab8a3d3cdcc9da365777c7ad535d62</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：2</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="target_geo">
    /// <para>必填：否</para>
    /// <para>需跨域访问的Geo数据，每个Geo仅包含本Geo数据，不传默认查本地数据，调用前需要先开通FG（cn、us、sg、jp），每次只能查一个Geo数据</para>
    /// <para>示例值：cn</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/admin/v1/admin_user_stats")]
    System.Threading.Tasks.Task<FeishuResponse<Admin.GetAdminV1AdminUserStatsResponseDto>> GetAdminV1AdminUserStatsAsync(
        [PathQuery] string start_date,
        [PathQuery] string end_date,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? department_id = null,
        [PathQuery] string? user_id = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? target_geo = null);

    /// <summary>
    /// <para>【管理后台】获取部门维度的用户活跃和功能使用数据</para>
    /// <para>接口ID：6954303251601309723</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/admin-v1/data-report-management/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取部门维度的用户活跃和功能使用数据，即IM（即时通讯）、日历、云文档、音视频会议、邮箱功能的使用数据。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:admin_dept_stat:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="department_id_type">
    /// <para>必填：是</para>
    /// <para>部门ID类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：部门的 ID</item>
    /// <item>open_department_id：部门的 Open ID</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="start_date">
    /// <para>必填：是</para>
    /// <para>起始日期（包含），格式是YYYY-mm-dd</para>
    /// <para>示例值：2020-02-15</para>
    /// </param>
    /// <param name="end_date">
    /// <para>必填：是</para>
    /// <para>终止日期（包含），格式是YYYY-mm-dd，起止日期之间相差不能超过91天（包含91天）</para>
    /// <para>示例值：2020-02-15</para>
    /// </param>
    /// <param name="department_id">
    /// <para>必填：是</para>
    /// <para>部门的 ID，取决于department_id_type，仅支持根部门及其下前4级子部门</para>
    /// <para>示例值：od-382e2793cfc9471f892e8a672987654c</para>
    /// </param>
    /// <param name="contains_child_dept">
    /// <para>必填：是</para>
    /// <para>是否包含子部门，如果该值为false，则只查出本部门直属用户活跃和功能使用数据；如果该值为true，则查出该部门以及其子部门（子部门层级最多不超过根部门下的前4级）的用户活跃和功能使用数据</para>
    /// <para>示例值：false</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：2</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="target_geo">
    /// <para>必填：否</para>
    /// <para>需跨域访问的Geo数据，每个Geo仅包含本Geo数据，不传默认查本地数据，调用前需要先开通FG(cn、sg、jp、us)</para>
    /// <para>示例值：cn</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="with_product_version">
    /// <para>必填：否</para>
    /// <para>是否返回分产品版本数据（灰度功能，如需使用请联系 CMS 团队）</para>
    /// <para>示例值：true(默认是false)</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/admin/v1/admin_dept_stats")]
    System.Threading.Tasks.Task<FeishuResponse<Admin.GetAdminV1AdminDeptStatsResponseDto>> GetAdminV1AdminDeptStatsAsync(
        [PathQuery] string start_date,
        [PathQuery] string end_date,
        [PathQuery] string department_id,
        [PathQuery] bool contains_child_dept,
        [PathQuery] string department_id_type = "open_department_id",
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? target_geo = null,
        [PathQuery] bool? with_product_version = null);

    /// <summary>
    /// <para>【邮箱】创建公共邮箱</para>
    /// <para>接口ID：6954915601882677251</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/public-mailbox/public_mailbox/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建一个公共邮箱。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:public_mailbox</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>mail:public_mailbox.public_mailbox_geo</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/mail/v1/public_mailboxes")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.PostMailV1PublicMailboxesResponseDto>> PostMailV1PublicMailboxesAsync(
        [JsonContent] Mail.PostMailV1PublicMailboxesBodyDto dto);

    /// <summary>
    /// <para>【邮箱】查询指定公共邮箱成员信息</para>
    /// <para>接口ID：6954915601882693635</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/public-mailbox/public_mailbox-member/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取公共邮箱单个成员信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:public_mailbox</item>
    /// <item>mail:public_mailbox:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="public_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>公共邮箱唯一标识或公共邮箱地址</para>
    /// <para>示例值：xxxxxxxxxxxxxxx 或 test_public_mailbox@xxx.xx</para>
    /// </param>
    /// <param name="member_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>公共邮箱内成员唯一标识</para>
    /// <para>示例值：xxxxxxxxxxxxxxx</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/mail/v1/public_mailboxes/{public_mailbox_id}/members/{member_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.GetMailV1PublicMailboxesByPublicMailboxIdMembersByMemberIdResponseDto>> GetMailV1PublicMailboxesByPublicMailboxIdMembersByMemberIdAsync(
        [PathQuery] string public_mailbox_id,
        [PathQuery] string member_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【邮箱】修改邮件组部分信息</para>
    /// <para>接口ID：6954915601882710019</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/mail-group/mailgroup/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新邮件组部分字段，没有填写的字段不会被更新。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:mailgroup</item>
    /// </list></para>
    /// </summary>
    /// <param name="mailgroup_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>邮件组ID或者邮件组地址</para>
    /// <para>示例值：xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/mail/v1/mailgroups/{mailgroup_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.PatchMailV1MailgroupsByMailgroupIdResponseDto>> PatchMailV1MailgroupsByMailgroupIdAsync(
        [PathQuery] string mailgroup_id,
        [JsonContent] Mail.PatchMailV1MailgroupsByMailgroupIdBodyDto dto);

    /// <summary>
    /// <para>【邮箱】查询指定邮件组成员</para>
    /// <para>接口ID：6954915601882726403</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/mail-group/mailgroup-member/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取邮件组单个成员信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:mailgroup</item>
    /// <item>mail:mailgroup:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="mailgroup_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>邮件组ID或者邮件组地址</para>
    /// <para>示例值：xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx</para>
    /// </param>
    /// <param name="member_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>邮件组内成员唯一标识</para>
    /// <para>示例值：xxxxxxxxxxxxxxx</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：以自定义department_id来标识部门</item>
    /// <item>open_department_id：以open_department_id来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    [HttpGet("/open-apis/mail/v1/mailgroups/{mailgroup_id}/members/{member_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.GetMailV1MailgroupsByMailgroupIdMembersByMemberIdResponseDto>> GetMailV1MailgroupsByMailgroupIdMembersByMemberIdAsync(
        [PathQuery] string mailgroup_id,
        [PathQuery] string member_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【邮箱】删除公共邮箱单个成员</para>
    /// <para>接口ID：6954915601882742787</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/public-mailbox/public_mailbox-member/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除公共邮箱单个成员。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:public_mailbox</item>
    /// </list></para>
    /// </summary>
    /// <param name="public_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>公共邮箱唯一标识或公共邮箱地址</para>
    /// <para>示例值：xxxxxxxxxxxxxxx 或 test_public_mailbox@xxx.xx</para>
    /// </param>
    /// <param name="member_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>公共邮箱内成员唯一标识</para>
    /// <para>示例值：xxxxxxxxxxxxxxx</para>
    /// </param>
    [HttpDelete("/open-apis/mail/v1/public_mailboxes/{public_mailbox_id}/members/{member_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteMailV1PublicMailboxesByPublicMailboxIdMembersByMemberIdAsync(
        [PathQuery] string public_mailbox_id,
        [PathQuery] string member_id);

    /// <summary>
    /// <para>【邮箱】查询指定邮件组</para>
    /// <para>接口ID：6954915601882759171</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/mail-group/mailgroup/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取特定邮件组信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:mailgroup</item>
    /// <item>mail:mailgroup:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="mailgroup_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>邮件组ID或者邮件组地址</para>
    /// <para>示例值：xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx</para>
    /// </param>
    [HttpGet("/open-apis/mail/v1/mailgroups/{mailgroup_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.GetMailV1MailgroupsByMailgroupIdResponseDto>> GetMailV1MailgroupsByMailgroupIdAsync(
        [PathQuery] string mailgroup_id);

    /// <summary>
    /// <para>【邮箱】删除邮件组</para>
    /// <para>接口ID：6954915601882775555</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/mail-group/mailgroup/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除一个邮件组</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:mailgroup</item>
    /// </list></para>
    /// </summary>
    /// <param name="mailgroup_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>邮件组ID或者邮件组地址</para>
    /// <para>示例值：xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx</para>
    /// </param>
    [HttpDelete("/open-apis/mail/v1/mailgroups/{mailgroup_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteMailV1MailgroupsByMailgroupIdAsync(
        [PathQuery] string mailgroup_id);

    /// <summary>
    /// <para>【邮箱】修改邮件组全部信息</para>
    /// <para>接口ID：6954915601882791939</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/mail-group/mailgroup/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新邮件组所有信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:mailgroup</item>
    /// </list></para>
    /// </summary>
    /// <param name="mailgroup_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>邮件组ID或者邮件组地址</para>
    /// <para>示例值：xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/mail/v1/mailgroups/{mailgroup_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.PutMailV1MailgroupsByMailgroupIdResponseDto>> PutMailV1MailgroupsByMailgroupIdAsync(
        [PathQuery] string mailgroup_id,
        [JsonContent] Mail.PutMailV1MailgroupsByMailgroupIdBodyDto dto);

    /// <summary>
    /// <para>【邮箱】批量获取邮件组权限成员</para>
    /// <para>接口ID：6954915601882808323</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/mail-group/mailgroup-permission_member/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>分页批量获取邮件组权限成员列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:mailgroup</item>
    /// <item>mail:mailgroup:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="mailgroup_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>邮件组ID或者邮件组地址</para>
    /// <para>示例值：xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：以自定义department_id来标识部门</item>
    /// <item>open_department_id：以open_department_id来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：xxx</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    [HttpGet("/open-apis/mail/v1/mailgroups/{mailgroup_id}/permission_members")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.GetMailV1MailgroupsByMailgroupIdPermissionMembersResponseDto>> GetMailV1MailgroupsByMailgroupIdPermissionMembersAsync(
        [PathQuery] string mailgroup_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【邮箱】删除公共邮箱所有成员</para>
    /// <para>接口ID：6954915601882824707</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/public-mailbox/public_mailbox-member/clear</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除公共邮箱所有成员。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:public_mailbox</item>
    /// </list></para>
    /// </summary>
    /// <param name="public_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>公共邮箱唯一标识或公共邮箱地址</para>
    /// <para>示例值：xxxxxxxxxxxxxxx 或 test_public_mailbox@xxx.xx</para>
    /// </param>
    [HttpPost("/open-apis/mail/v1/public_mailboxes/{public_mailbox_id}/members/clear")]
    System.Threading.Tasks.Task<FeishuResponse> PostMailV1PublicMailboxesByPublicMailboxIdMembersClearAsync(
        [PathQuery] string public_mailbox_id);

    /// <summary>
    /// <para>【邮箱】创建邮件组</para>
    /// <para>接口ID：6954915601882857475</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/mail-group/mailgroup/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建一个邮件组</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:mailgroup</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/mail/v1/mailgroups")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.PostMailV1MailgroupsResponseDto>> PostMailV1MailgroupsAsync(
        [JsonContent] Mail.PostMailV1MailgroupsBodyDto dto);

    /// <summary>
    /// <para>【邮箱】删除邮件组成员</para>
    /// <para>接口ID：6954915601882906627</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/mail-group/mailgroup-member/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除邮件组单个成员。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:mailgroup</item>
    /// </list></para>
    /// </summary>
    /// <param name="mailgroup_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>The unique ID or email address of a mail group</para>
    /// <para>示例值：xxxxxxxxxxxxxxx or test_mail_group@xxx.xx</para>
    /// </param>
    /// <param name="member_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>The unique ID of a member in this mail group</para>
    /// <para>示例值：xxxxxxxxxxxxxxx</para>
    /// </param>
    [HttpDelete("/open-apis/mail/v1/mailgroups/{mailgroup_id}/members/{member_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteMailV1MailgroupsByMailgroupIdMembersByMemberIdAsync(
        [PathQuery] string mailgroup_id,
        [PathQuery] string member_id);

    /// <summary>
    /// <para>【邮箱】创建邮件组权限成员</para>
    /// <para>接口ID：6954915601882923011</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/mail-group/mailgroup-permission_member/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>向邮件组添加单个自定义权限成员，添加后该成员可发送邮件到该邮件组。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:mailgroup</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="mailgroup_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>邮件组ID或者邮件组地址</para>
    /// <para>示例值：xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型</para>
    /// <para>示例值：xxx</para>
    /// <list type="bullet">
    /// <item>department_id：以自定义department_id来标识部门</item>
    /// <item>open_department_id：以open_department_id来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/mail/v1/mailgroups/{mailgroup_id}/permission_members")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.PostMailV1MailgroupsByMailgroupIdPermissionMembersResponseDto>> PostMailV1MailgroupsByMailgroupIdPermissionMembersAsync(
        [PathQuery] string mailgroup_id,
        [JsonContent] Mail.PostMailV1MailgroupsByMailgroupIdPermissionMembersBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【邮箱】删除邮件组权限成员</para>
    /// <para>接口ID：6954915601882939395</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/mail-group/mailgroup-permission_member/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>从自定义成员中删除单个成员，删除后该成员无法发送邮件到该邮件组。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:mailgroup</item>
    /// </list></para>
    /// </summary>
    /// <param name="mailgroup_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>The unique ID or email address of a mail group</para>
    /// <para>示例值：xxxxxxxxxxxxxxx or test_mail_group@xxx.xx</para>
    /// </param>
    /// <param name="permission_member_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>The unique ID of a member in this permission group</para>
    /// <para>示例值：xxxxxxxxxxxxxxx</para>
    /// </param>
    [HttpDelete("/open-apis/mail/v1/mailgroups/{mailgroup_id}/permission_members/{permission_member_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteMailV1MailgroupsByMailgroupIdPermissionMembersByPermissionMemberIdAsync(
        [PathQuery] string mailgroup_id,
        [PathQuery] string permission_member_id);

    /// <summary>
    /// <para>【邮箱】查询所有公共邮箱</para>
    /// <para>接口ID：6954915601882955779</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/public-mailbox/public_mailbox/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>分页批量获取公共邮箱列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:public_mailbox</item>
    /// <item>mail:public_mailbox:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>mail:public_mailbox.public_mailbox_geo</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：xxx</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    [HttpGet("/open-apis/mail/v1/public_mailboxes")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.GetMailV1PublicMailboxesResponseDto>> GetMailV1PublicMailboxesAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【邮箱】获取所有邮件组成员</para>
    /// <para>接口ID：6954915601882972163</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/mail-group/mailgroup-member/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>分页批量获取邮件组成员列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:mailgroup</item>
    /// <item>mail:mailgroup:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="mailgroup_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>The unique ID or email address of a mail group</para>
    /// <para>示例值：xxxxxxxxxxxxxxx or test_mail_group@xxx.xx</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：以自定义department_id来标识部门</item>
    /// <item>open_department_id：以open_department_id来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：xxx</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    [HttpGet("/open-apis/mail/v1/mailgroups/{mailgroup_id}/members")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.GetMailV1MailgroupsByMailgroupIdMembersResponseDto>> GetMailV1MailgroupsByMailgroupIdMembersAsync(
        [PathQuery] string mailgroup_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【邮箱】批量获取邮件组</para>
    /// <para>接口ID：6954915601882988547</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/mail-group/mailgroup/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>分页批量获取邮件组</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:mailgroup</item>
    /// <item>mail:mailgroup:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="manager_user_id">
    /// <para>必填：否</para>
    /// <para>邮件组管理员用户ID，用于获取该用户有管理权限的邮件组</para>
    /// <para>示例值：ou_xxxxxx</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：xxx</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    [HttpGet("/open-apis/mail/v1/mailgroups")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.GetMailV1MailgroupsResponseDto>> GetMailV1MailgroupsAsync(
        [PathQuery] string? manager_user_id = null,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【邮箱】查询所有公共邮箱成员信息</para>
    /// <para>接口ID：6954915601883004931</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/public-mailbox/public_mailbox-member/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>分页批量获取公共邮箱成员列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:public_mailbox</item>
    /// <item>mail:public_mailbox:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="public_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>The unique ID or email address of a public mailbox</para>
    /// <para>示例值：xxxxxxxxxxxxxxx or test_public_mailbox@xxx.xx</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：xxx</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    [HttpGet("/open-apis/mail/v1/public_mailboxes/{public_mailbox_id}/members")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.GetMailV1PublicMailboxesByPublicMailboxIdMembersResponseDto>> GetMailV1PublicMailboxesByPublicMailboxIdMembersAsync(
        [PathQuery] string public_mailbox_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【邮箱】修改公共邮箱全部信息</para>
    /// <para>接口ID：6954915601883021315</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/public-mailbox/public_mailbox/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新公共邮箱所有信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:public_mailbox</item>
    /// </list></para>
    /// </summary>
    /// <param name="public_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>公共邮箱唯一标识或公共邮箱地址</para>
    /// <para>示例值：xxxxxxxxxxxxxxx 或 test_public_mailbox@xxx.xx</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/mail/v1/public_mailboxes/{public_mailbox_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.PutMailV1PublicMailboxesByPublicMailboxIdResponseDto>> PutMailV1PublicMailboxesByPublicMailboxIdAsync(
        [PathQuery] string public_mailbox_id,
        [JsonContent] Mail.PutMailV1PublicMailboxesByPublicMailboxIdBodyDto dto);

    /// <summary>
    /// <para>【邮箱】创建邮件组成员</para>
    /// <para>接口ID：6954915601883037699</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/mail-group/mailgroup-member/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>向邮件组添加单个成员。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:mailgroup</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="mailgroup_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>邮件组ID或者邮件组地址</para>
    /// <para>示例值：xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：以自定义department_id来标识部门</item>
    /// <item>open_department_id：以open_department_id来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/mail/v1/mailgroups/{mailgroup_id}/members")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.PostMailV1MailgroupsByMailgroupIdMembersResponseDto>> PostMailV1MailgroupsByMailgroupIdMembersAsync(
        [PathQuery] string mailgroup_id,
        [JsonContent] Mail.PostMailV1MailgroupsByMailgroupIdMembersBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【邮箱】获取邮件组权限成员</para>
    /// <para>接口ID：6954915601883054083</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/mail-group/mailgroup-permission_member/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取邮件组单个权限成员信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:mailgroup</item>
    /// <item>mail:mailgroup:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="mailgroup_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>邮件组ID或者邮件组地址</para>
    /// <para>示例值：xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx</para>
    /// </param>
    /// <param name="permission_member_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>权限组内成员唯一标识</para>
    /// <para>示例值：xxxxxxxxxxxxxxx</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：以自定义department_id来标识部门</item>
    /// <item>open_department_id：以open_department_id来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    [HttpGet("/open-apis/mail/v1/mailgroups/{mailgroup_id}/permission_members/{permission_member_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.GetMailV1MailgroupsByMailgroupIdPermissionMembersByPermissionMemberIdResponseDto>> GetMailV1MailgroupsByMailgroupIdPermissionMembersByPermissionMemberIdAsync(
        [PathQuery] string mailgroup_id,
        [PathQuery] string permission_member_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【邮箱】添加公共邮箱成员</para>
    /// <para>接口ID：6954915601883103235</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/public-mailbox/public_mailbox-member/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>向公共邮箱添加单个成员。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:public_mailbox</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="public_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>公共邮箱唯一标识或公共邮箱地址</para>
    /// <para>示例值：xxxxxxxxxxxxxxx 或 test_public_mailbox@xxx.xx</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/mail/v1/public_mailboxes/{public_mailbox_id}/members")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.PostMailV1PublicMailboxesByPublicMailboxIdMembersResponseDto>> PostMailV1PublicMailboxesByPublicMailboxIdMembersAsync(
        [PathQuery] string public_mailbox_id,
        [JsonContent] Mail.PostMailV1PublicMailboxesByPublicMailboxIdMembersBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【邮箱】查询指定公共邮箱</para>
    /// <para>接口ID：6954915601883119619</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/public-mailbox/public_mailbox/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取公共邮箱信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:public_mailbox</item>
    /// <item>mail:public_mailbox:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>mail:public_mailbox.public_mailbox_geo</item>
    /// </list></para>
    /// </summary>
    /// <param name="public_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>公共邮箱唯一标识或公共邮箱地址</para>
    /// <para>示例值：xxxxxxxxxxxxxxx 或 test_public_mailbox@xxx.xx</para>
    /// </param>
    [HttpGet("/open-apis/mail/v1/public_mailboxes/{public_mailbox_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.GetMailV1PublicMailboxesByPublicMailboxIdResponseDto>> GetMailV1PublicMailboxesByPublicMailboxIdAsync(
        [PathQuery] string public_mailbox_id);

    /// <summary>
    /// <para>【邮箱】修改公共邮箱部分信息</para>
    /// <para>接口ID：6954915601883136003</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/public-mailbox/public_mailbox/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新公共邮箱部分字段，没有填写的字段不会被更新。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:public_mailbox</item>
    /// </list></para>
    /// </summary>
    /// <param name="public_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>公共邮箱唯一标识或公共邮箱地址</para>
    /// <para>示例值：xxxxxxxxxxxxxxx 或 test_public_mailbox@xxx.xx</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/mail/v1/public_mailboxes/{public_mailbox_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.PatchMailV1PublicMailboxesByPublicMailboxIdResponseDto>> PatchMailV1PublicMailboxesByPublicMailboxIdAsync(
        [PathQuery] string public_mailbox_id,
        [JsonContent] Mail.PatchMailV1PublicMailboxesByPublicMailboxIdBodyDto dto);

    /// <summary>
    /// <para>【云文档】删除回复</para>
    /// <para>接口ID：6955017385137717249</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/CommentAPI/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除云文档中的某条回复。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:doc</item>
    /// <item>docs:doc:readonly</item>
    /// <item>docs:document.comment:delete</item>
    /// <item>docs:document.comment:write_only</item>
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文档 Token</para>
    /// <para>示例值：doxbcdl03Vsxhm7Qmnj110abcef</para>
    /// </param>
    /// <param name="comment_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>评论 ID</para>
    /// <para>示例值：6916106822734578184</para>
    /// </param>
    /// <param name="reply_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>回复 ID</para>
    /// <para>示例值：6916106822734594568</para>
    /// </param>
    /// <param name="file_type">
    /// <para>必填：是</para>
    /// <para>云文档类型</para>
    /// <para>示例值：doc</para>
    /// <list type="bullet">
    /// <item>doc：旧版文档，已不推荐使用</item>
    /// <item>docx：新版文档</item>
    /// <item>sheet：表格</item>
    /// <item>file：文件</item>
    /// <item>slides：幻灯片</item>
    /// </list>
    /// </param>
    [HttpDelete("/open-apis/drive/v1/files/{file_token}/comments/{comment_id}/replies/{reply_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteDriveV1FilesByFileTokenCommentsByCommentIdRepliesByReplyIdAsync(
        [PathQuery] string file_token,
        [PathQuery] string comment_id,
        [PathQuery] string reply_id,
        [PathQuery] string file_type);

    /// <summary>
    /// <para>【云文档】更新回复的内容</para>
    /// <para>接口ID：6955017385137733633</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/CommentAPI/update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新云文档中的某条回复的内容。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:doc</item>
    /// <item>docs:doc:readonly</item>
    /// <item>docs:document.comment:update</item>
    /// <item>docs:document.comment:write_only</item>
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文档 Token</para>
    /// <para>示例值：doxbcdl03Vsxhm7Qmnj110abcef</para>
    /// </param>
    /// <param name="comment_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>评论 ID</para>
    /// <para>示例值：6916106822734578184</para>
    /// </param>
    /// <param name="reply_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>回复 ID</para>
    /// <para>示例值：6916106822734594568</para>
    /// </param>
    /// <param name="file_type">
    /// <para>必填：是</para>
    /// <para>云文档类型</para>
    /// <para>示例值：doc</para>
    /// <list type="bullet">
    /// <item>doc：旧版文档，已不推荐使用</item>
    /// <item>docx：新版文档</item>
    /// <item>sheet：表格</item>
    /// <item>file：文件</item>
    /// <item>slides：幻灯片</item>
    /// </list>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/drive/v1/files/{file_token}/comments/{comment_id}/replies/{reply_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PutDriveV1FilesByFileTokenCommentsByCommentIdRepliesByReplyIdAsync(
        [PathQuery] string file_token,
        [PathQuery] string comment_id,
        [PathQuery] string reply_id,
        [PathQuery] string file_type,
        [JsonContent] Ccm.PutDriveV1FilesByFileTokenCommentsByCommentIdRepliesByReplyIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】添加全文评论</para>
    /// <para>接口ID：6955017385137750017</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/CommentAPI/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>在文档中添加一条全局评论，不支持局部评论。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:doc</item>
    /// <item>docs:doc:readonly</item>
    /// <item>docs:document.comment:create</item>
    /// <item>docs:document.comment:write_only</item>
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文档 Token</para>
    /// <para>可以通过浏览器该文档的 URL 栏上直接获取文档 Token 。</para>
    /// <para>示例值：XIHSdYSI7oMEU1xrsnxc8fabcef</para>
    /// </param>
    /// <param name="file_type">
    /// <para>必填：是</para>
    /// <para>云文档类型</para>
    /// <para>示例值：doc</para>
    /// <list type="bullet">
    /// <item>doc：旧版文档，已不推荐使用</item>
    /// <item>docx：新版文档</item>
    /// </list>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/drive/v1/files/{file_token}/comments")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostDriveV1FilesByFileTokenCommentsResponseDto>> PostDriveV1FilesByFileTokenCommentsAsync(
        [PathQuery] string file_token,
        [PathQuery] string file_type,
        [JsonContent] Ccm.PostDriveV1FilesByFileTokenCommentsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】解决/恢复评论</para>
    /// <para>接口ID：6955017385137766401</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/CommentAPI/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>解决或恢复云文档中的评论。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:doc</item>
    /// <item>docs:doc:readonly</item>
    /// <item>docs:document.comment:update</item>
    /// <item>docs:document.comment:write_only</item>
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文档token</para>
    /// <para>示例值：doccnGp4UK1UskrOEJwBXd3****</para>
    /// </param>
    /// <param name="comment_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>评论ID</para>
    /// <para>示例值：6916106822734578184</para>
    /// </param>
    /// <param name="file_type">
    /// <para>必填：是</para>
    /// <para>云文档类型</para>
    /// <para>示例值：doc</para>
    /// <list type="bullet">
    /// <item>doc：旧版文档，已不推荐使用</item>
    /// <item>docx：新版文档</item>
    /// <item>sheet：表格</item>
    /// <item>file：文件</item>
    /// <item>slides：幻灯片</item>
    /// </list>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/drive/v1/files/{file_token}/comments/{comment_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PatchDriveV1FilesByFileTokenCommentsByCommentIdAsync(
        [PathQuery] string file_token,
        [PathQuery] string comment_id,
        [PathQuery] string file_type,
        [JsonContent] Ccm.PatchDriveV1FilesByFileTokenCommentsByCommentIdBodyDto dto);

    /// <summary>
    /// <para>【云文档】获取全文评论</para>
    /// <para>接口ID：6955017385137782785</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/CommentAPI/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取云文档中的某条全文评论，不支持局部评论。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:doc</item>
    /// <item>docs:doc:readonly</item>
    /// <item>docs:document.comment:read</item>
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文档 Token</para>
    /// <para>示例值：doccnHh7U87HOFpii5u5G*****</para>
    /// </param>
    /// <param name="comment_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>评论 ID</para>
    /// <para>示例值：6916106822734578184</para>
    /// </param>
    /// <param name="file_type">
    /// <para>必填：是</para>
    /// <para>云文档类型</para>
    /// <para>示例值：doc</para>
    /// <list type="bullet">
    /// <item>doc：旧版文档，已不推荐使用</item>
    /// <item>sheet：表格</item>
    /// <item>file：文件</item>
    /// <item>docx：新版文档</item>
    /// </list>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/drive/v1/files/{file_token}/comments/{comment_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDriveV1FilesByFileTokenCommentsByCommentIdResponseDto>> GetDriveV1FilesByFileTokenCommentsByCommentIdAsync(
        [PathQuery] string file_token,
        [PathQuery] string comment_id,
        [PathQuery] string file_type,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】获取云文档所有评论</para>
    /// <para>接口ID：6955017385137799169</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/CommentAPI/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于根据云文档 Token 分页获取文档所有评论信息，包括评论和回复 ID、回复的内容、评论人和回复人的用户 ID 等。该接口支持返回全局评论以及局部评论（可通过 is_whole 字段区分）。默认每页返回 50 个评论。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:doc</item>
    /// <item>docs:doc:readonly</item>
    /// <item>docs:document.comment:read</item>
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>云文档的 token。获取方式参考 [如何获取云文档相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)。</para>
    /// <para>示例值：XIHSdYSI7oMEU1xrsnxc8fabcef</para>
    /// </param>
    /// <param name="file_type">
    /// <para>必填：是</para>
    /// <para>云文档类型</para>
    /// <para>示例值：doc</para>
    /// <list type="bullet">
    /// <item>doc：旧版文档类型，已不推荐使用</item>
    /// <item>docx：新版文档类型</item>
    /// <item>sheet：电子表格类型</item>
    /// <item>file：文件类型</item>
    /// <item>slides：幻灯片</item>
    /// </list>
    /// </param>
    /// <param name="is_whole">
    /// <para>必填：否</para>
    /// <para>是否全文评论</para>
    /// <para>示例值：false</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="is_solved">
    /// <para>必填：否</para>
    /// <para>是否已解决（可选）</para>
    /// <para>示例值：false</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：7153511712153412356</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，默认每页返回 50 个评论</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/drive/v1/files/{file_token}/comments")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDriveV1FilesByFileTokenCommentsResponseDto>> GetDriveV1FilesByFileTokenCommentsAsync(
        [PathQuery] string file_token,
        [PathQuery] string file_type,
        [PathQuery] bool? is_whole = null,
        [PathQuery] bool? is_solved = null,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【服务台】查询全部客服技能</para>
    /// <para>接口ID：6955768425688285187</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/helpdesk-v1/agent-function/agent_skill/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取全部客服技能。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>helpdesk:all:readonly</item>
    /// </list></para>
    /// </summary>
    [HttpGet("/open-apis/helpdesk/v1/agent_skills")]
    System.Threading.Tasks.Task<FeishuResponse<Helpdesk.GetHelpdeskV1AgentSkillsResponseDto>> GetHelpdeskV1AgentSkillsAsync();

    /// <summary>
    /// <para>【服务台】获取客服技能列表</para>
    /// <para>接口ID：6955768425688317955</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/helpdesk-v1/agent-function/agent_skill_rule/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取全部客服技能。仅支持自建应用。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>helpdesk:all:readonly</item>
    /// </list></para>
    /// </summary>
    [HttpGet("/open-apis/helpdesk/v1/agent_skill_rules")]
    System.Threading.Tasks.Task<FeishuResponse<Helpdesk.GetHelpdeskV1AgentSkillRulesResponseDto>> GetHelpdeskV1AgentSkillRulesAsync();

    /// <summary>
    /// <para>【服务台】查询全部客服工作日程</para>
    /// <para>接口ID：6955768425688350723</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/helpdesk-v1/agent-function/agent-schedules/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取所有客服信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>helpdesk:all:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="status">
    /// <para>必填：是</para>
    /// <para>筛选条件</para>
    /// <para>- 1：online客服</para>
    /// <para>- 2：offline(手动)客服</para>
    /// <para>- 3：off duty(下班)客服</para>
    /// <para>- 4：移除客服</para>
    /// <para>在 GET 请求中传入多个值的格式为 `status=1&amp;status=2`。</para>
    /// <para>示例值：status=1&amp;status=2</para>
    /// </param>
    [HttpGet("/open-apis/helpdesk/v1/agent_schedules")]
    System.Threading.Tasks.Task<FeishuResponse<Helpdesk.GetHelpdeskV1AgentSchedulesResponseDto>> GetHelpdeskV1AgentSchedulesAsync(
        [PathQuery] int[] status);

    /// <summary>
    /// <para>【服务台】获取服务台自定义字段</para>
    /// <para>接口ID：6955768425688383491</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/helpdesk-v1/ticket-management/ticket/customized_fields</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取服务台自定义字段详情。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>helpdesk:all:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="visible_only">
    /// <para>必填：否</para>
    /// <para>visible only</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/helpdesk/v1/customized_fields")]
    System.Threading.Tasks.Task<FeishuResponse<Helpdesk.GetHelpdeskV1CustomizedFieldsResponseDto>> GetHelpdeskV1CustomizedFieldsAsync(
        [PathQuery] bool? visible_only = null);

    /// <summary>
    /// <para>【服务台】获取客服邮箱</para>
    /// <para>接口ID：6955768425688399875</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/helpdesk-v1/agent-function/agent/agent_email</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取客服邮箱地址。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>helpdesk:all:readonly</item>
    /// </list></para>
    /// </summary>
    [HttpGet("/open-apis/helpdesk/v1/agent_emails")]
    System.Threading.Tasks.Task<FeishuResponse<Helpdesk.GetHelpdeskV1AgentEmailsResponseDto>> GetHelpdeskV1AgentEmailsAsync();

    /// <summary>
    /// <para>【服务台】查询指定客服工作日程</para>
    /// <para>接口ID：6955768425688465411</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/helpdesk-v1/agent-function/agent-schedules/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取客服信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>helpdesk:all:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="agent_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>客服 id</para>
    /// <para>示例值：客服 id</para>
    /// </param>
    [HttpGet("/open-apis/helpdesk/v1/agents/{agent_id}/schedules")]
    System.Threading.Tasks.Task<FeishuResponse<Helpdesk.GetHelpdeskV1AgentsByAgentIdSchedulesResponseDto>> GetHelpdeskV1AgentsByAgentIdSchedulesAsync(
        [PathQuery] string agent_id);

    /// <summary>
    /// <para>【服务台】查询指定客服技能</para>
    /// <para>接口ID：6955768425688481795</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/helpdesk-v1/agent-function/agent_skill/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取客服技能。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>helpdesk:all:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="agent_skill_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>agent skill id</para>
    /// <para>示例值：6941215891786825756</para>
    /// </param>
    [HttpGet("/open-apis/helpdesk/v1/agent_skills/{agent_skill_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Helpdesk.GetHelpdeskV1AgentSkillsByAgentSkillIdResponseDto>> GetHelpdeskV1AgentSkillsByAgentSkillIdAsync(
        [PathQuery] string agent_skill_id);

    /// <summary>
    /// <para>【服务台】获取知识库图像</para>
    /// <para>接口ID：6955768699895578626</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/helpdesk-v1/faq-management/faq/faq_image</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取知识库图像。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>helpdesk:all:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>知识库ID</para>
    /// <para>示例值：12345</para>
    /// </param>
    /// <param name="image_key">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>图像key</para>
    /// <para>示例值：img_b07ffac0-19c1-48a3-afca-599f8ea825fj</para>
    /// </param>
    /// <returns>返回文件二进制流</returns>
    [HttpGet("/open-apis/helpdesk/v1/faqs/{id}/image/{image_key}")]
    System.Threading.Tasks.Task<HttpResponseMessage> GetHelpdeskV1FaqsByIdImageByImageKeyAsync(
        [PathQuery] string id,
        [PathQuery] string image_key);

    /// <summary>
    /// <para>【服务台】获取工单内图像</para>
    /// <para>接口ID：6955768699895611394</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/helpdesk-v1/ticket-management/ticket/ticket_image</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取服务台工单消息图象。仅支持自建应用。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>helpdesk:all:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="ticket_id">
    /// <para>必填：是</para>
    /// <para>工单ID</para>
    /// <para>示例值：12345</para>
    /// </param>
    /// <param name="msg_id">
    /// <para>必填：是</para>
    /// <para>消息ID</para>
    /// <para>[查询消息ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket-message/list)</para>
    /// <para>示例值：12345</para>
    /// </param>
    /// <param name="index">
    /// <para>必填：否</para>
    /// <para>index，当消息类型为post时，需指定图片index，index从0开始。当消息类型为img时，无需index</para>
    /// <para>示例值：0</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <returns>返回文件二进制流</returns>
    [HttpGet("/open-apis/helpdesk/v1/ticket_images")]
    System.Threading.Tasks.Task<HttpResponseMessage> GetHelpdeskV1TicketImagesAsync(
        [PathQuery] string ticket_id,
        [PathQuery] string msg_id,
        [PathQuery] int? index = null);

    /// <summary>
    /// <para>【服务台】获取全部知识库详情</para>
    /// <para>接口ID：6955768699895693314</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/helpdesk-v1/faq-management/faq/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取服务台知识库详情。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>helpdesk:all:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="category_id">
    /// <para>必填：否</para>
    /// <para>知识库分类ID</para>
    /// <para>示例值：6856395522433908739</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="status">
    /// <para>必填：否</para>
    /// <para>搜索条件: 知识库状态 1:在线 0:删除，可恢复 2：删除，不可恢复</para>
    /// <para>示例值：1</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="search">
    /// <para>必填：否</para>
    /// <para>搜索条件: 关键词，匹配问题标题，问题关键字，用户姓名</para>
    /// <para>示例值：点餐</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6856395634652479491</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    [HttpGet("/open-apis/helpdesk/v1/faqs")]
    System.Threading.Tasks.Task<FeishuResponse<Helpdesk.GetHelpdeskV1FaqsResponseDto>> GetHelpdeskV1FaqsAsync(
        [PathQuery] string? category_id = null,
        [PathQuery] string? status = null,
        [PathQuery] string? search = null,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【服务台】创建服务台对话</para>
    /// <para>接口ID：6955768699895726082</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/helpdesk-v1/ticket-management/ticket/start_service</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于创建服务台对话。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>helpdesk:helpdesk:access</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/helpdesk/v1/start_service")]
    System.Threading.Tasks.Task<FeishuResponse<Helpdesk.PostHelpdeskV1StartServiceResponseDto>> PostHelpdeskV1StartServiceAsync(
        [JsonContent] Helpdesk.PostHelpdeskV1StartServiceBodyDto dto);

    /// <summary>
    /// <para>【服务台】发送工单消息</para>
    /// <para>接口ID：6955768699895758850</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/helpdesk-v1/ticket-management/ticket-message/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于发送工单消息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>helpdesk:all</item>
    /// </list></para>
    /// </summary>
    /// <param name="ticket_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工单ID</para>
    /// <para>示例值：6948728206392295444</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/helpdesk/v1/tickets/{ticket_id}/messages")]
    System.Threading.Tasks.Task<FeishuResponse<Helpdesk.PostHelpdeskV1TicketsByTicketIdMessagesResponseDto>> PostHelpdeskV1TicketsByTicketIdMessagesAsync(
        [PathQuery] string ticket_id,
        [JsonContent] Helpdesk.PostHelpdeskV1TicketsByTicketIdMessagesBodyDto dto);

    /// <summary>
    /// <para>【服务台】搜索知识库</para>
    /// <para>接口ID：6955768699895808002</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/helpdesk-v1/faq-management/faq/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于搜索服务台知识库。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>helpdesk:all:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="query">
    /// <para>必填：是</para>
    /// <para>搜索query</para>
    /// <para>query内容如果不是英文，包含中文空格等有两种编码策略：1. url编码 2. base64编码，同时加上base64=true参数</para>
    /// <para>示例值：wifi</para>
    /// </param>
    /// <param name="base64">
    /// <para>必填：否</para>
    /// <para>是否转换为base64,输入true表示是，不填写表示否</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6936004780707807251</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    [HttpGet("/open-apis/helpdesk/v1/faqs/search")]
    System.Threading.Tasks.Task<FeishuResponse<Helpdesk.GetHelpdeskV1FaqsSearchResponseDto>> GetHelpdeskV1FaqsSearchAsync(
        [PathQuery] string query,
        [PathQuery] string? base64 = null,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【服务台】获取工单消息详情</para>
    /// <para>接口ID：6955768699895840770</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/helpdesk-v1/ticket-management/ticket-message/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取服务台工单消息详情。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>helpdesk:all:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="ticket_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工单ID</para>
    /// <para>示例值：6948728206392295444</para>
    /// </param>
    /// <param name="time_start">
    /// <para>必填：否</para>
    /// <para>起始时间</para>
    /// <para>示例值：1617960686</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="time_end">
    /// <para>必填：否</para>
    /// <para>结束时间</para>
    /// <para>示例值：1617960687</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page">
    /// <para>必填：否</para>
    /// <para>页数ID</para>
    /// <para>示例值：1</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>消息数量，最大200，默认20</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    [HttpGet("/open-apis/helpdesk/v1/tickets/{ticket_id}/messages")]
    System.Threading.Tasks.Task<FeishuResponse<Helpdesk.GetHelpdeskV1TicketsByTicketIdMessagesResponseDto>> GetHelpdeskV1TicketsByTicketIdMessagesAsync(
        [PathQuery] string ticket_id,
        [PathQuery] int? time_start = null,
        [PathQuery] int? time_end = null,
        [PathQuery] int? page = null,
        [PathQuery] int? page_size = 10);

    /// <summary>
    /// <para>【服务台】获取指定工单自定义字段</para>
    /// <para>接口ID：6955768699895857154</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/helpdesk-v1/ticket-management/ticket_customized_field/get-ticket-customized-field</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取工单自定义字段详情。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>helpdesk:all:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="ticket_customized_field_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工单自定义字段ID</para>
    /// <para>**示例值**："6948728206392295444"</para>
    /// </param>
    [HttpGet("/open-apis/helpdesk/v1/ticket_customized_fields/{ticket_customized_field_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Helpdesk.Spec.GetHelpdeskV1TicketCustomizedFieldsByTicketCustomizedFieldIdResponseDto>> GetHelpdeskV1TicketCustomizedFieldsByTicketCustomizedFieldIdAsync(
        [PathQuery] string ticket_customized_field_id);

    /// <summary>
    /// <para>【服务台】订阅服务台事件</para>
    /// <para>接口ID：6955768699895873538</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/helpdesk-v1/event/subscribe</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>本接口用于订阅服务台事件。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>helpdesk:all:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/helpdesk/v1/events/subscribe")]
    System.Threading.Tasks.Task<FeishuResponse> PostHelpdeskV1EventsSubscribeAsync(
        [JsonContent] Helpdesk.PostHelpdeskV1EventsSubscribeBodyDto dto);

    /// <summary>
    /// <para>【服务台】获取全部知识库分类</para>
    /// <para>接口ID：6955768699895889922</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/helpdesk-v1/faq-management/category/list-categories</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取服务台知识库所有分类。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item></item>
    /// </list></para>
    /// </summary>
    /// <param name="lang">
    /// <para>必填：否</para>
    /// <para>知识库分类语言</para>
    /// <para>**示例值**："zh_cn"</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="order_by">
    /// <para>必填：否</para>
    /// <para>排序键。1: 根据知识库分类更新时间排序</para>
    /// <para>**示例值**：1</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="asc">
    /// <para>必填：否</para>
    /// <para>顺序。true: 正序；false：反序</para>
    /// <para>**示例值**：true</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/helpdesk/v1/categories")]
    System.Threading.Tasks.Task<FeishuResponse<Helpdesk.Spec.GetHelpdeskV1CategoriesResponseDto>> GetHelpdeskV1CategoriesAsync(
        [PathQuery] string? lang = null,
        [PathQuery] int? order_by = null,
        [PathQuery] bool? asc = null);

    /// <summary>
    /// <para>【服务台】获取指定知识库详情</para>
    /// <para>接口ID：6955768699895906306</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/helpdesk-v1/faq-management/faq/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取服务台知识库详情。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>helpdesk:all:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>知识库ID</para>
    /// <para>示例值：6856395634652479491</para>
    /// </param>
    [HttpGet("/open-apis/helpdesk/v1/faqs/{id}")]
    System.Threading.Tasks.Task<FeishuResponse<Helpdesk.GetHelpdeskV1FaqsByIdResponseDto>> GetHelpdeskV1FaqsByIdAsync(
        [PathQuery] string id);

    /// <summary>
    /// <para>【服务台】获取全部工单自定义字段</para>
    /// <para>接口ID：6955768699895955458</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/helpdesk-v1/ticket-management/ticket_customized_field/list-ticket-customized-fields</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取全部工单自定义字段。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>helpdesk:all:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>**示例值**："6948728206392295444"</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>**示例值**：10；默认为20</para>
    /// <para>**数据校验规则**：</para>
    /// <para>- 最大值：`100`</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpGet("/open-apis/helpdesk/v1/ticket_customized_fields")]
    System.Threading.Tasks.Task<FeishuResponse<Helpdesk.Spec.GetHelpdeskV1TicketCustomizedFieldsResponseDto>> GetHelpdeskV1TicketCustomizedFieldsAsync(
        [JsonContent] Helpdesk.Spec.GetHelpdeskV1TicketCustomizedFieldsBodyDto dto,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10);

    /// <summary>
    /// <para>【服务台】回复用户在工单里的提问</para>
    /// <para>接口ID：6955768699895988226</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/helpdesk-v1/ticket-management/ticket/answer_user_query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于回复用户提问结果至工单，需要工单仍处于进行中且未接入人工状态。仅支持自建应用。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>helpdesk:all</item>
    /// </list></para>
    /// </summary>
    /// <param name="ticket_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工单ID</para>
    /// <para>示例值：6945345902185807891</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/helpdesk/v1/tickets/{ticket_id}/answer_user_query")]
    System.Threading.Tasks.Task<FeishuResponse> PostHelpdeskV1TicketsByTicketIdAnswerUserQueryAsync(
        [PathQuery] string ticket_id,
        [JsonContent] Helpdesk.PostHelpdeskV1TicketsByTicketIdAnswerUserQueryBodyDto dto);

    /// <summary>
    /// <para>【服务台】获取知识库分类</para>
    /// <para>接口ID：6955768699896020994</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/helpdesk-v1/faq-management/category/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取知识库分类。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>helpdesk:all:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>知识库分类ID</para>
    /// <para>示例值：6948728206392295444</para>
    /// </param>
    [HttpGet("/open-apis/helpdesk/v1/categories/{id}")]
    System.Threading.Tasks.Task<FeishuResponse<Helpdesk.GetHelpdeskV1CategoriesByIdResponseDto>> GetHelpdeskV1CategoriesByIdAsync(
        [PathQuery] string id);

    /// <summary>
    /// <para>【服务台】取消订阅服务台事件</para>
    /// <para>接口ID：6955768699896053762</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/helpdesk-v1/event/unsubscribe</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>本接口用于取消订阅服务台事件。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>helpdesk:all:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/helpdesk/v1/events/unsubscribe")]
    System.Threading.Tasks.Task<FeishuResponse> PostHelpdeskV1EventsUnsubscribeAsync(
        [JsonContent] Helpdesk.PostHelpdeskV1EventsUnsubscribeBodyDto dto);

    /// <summary>
    /// <para>【服务台】查询指定工单详情</para>
    /// <para>接口ID：6955768699896070146</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/helpdesk-v1/ticket-management/ticket/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取单个服务台工单详情。仅支持自建应用。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>helpdesk:all:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="ticket_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工单 ID。可通过[查询全部工单详情](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/list)获取</para>
    /// <para>示例值：123456</para>
    /// </param>
    [HttpGet("/open-apis/helpdesk/v1/tickets/{ticket_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Helpdesk.GetHelpdeskV1TicketsByTicketIdResponseDto>> GetHelpdeskV1TicketsByTicketIdAsync(
        [PathQuery] string ticket_id);

    /// <summary>
    /// <para>【服务台】查询全部工单详情</para>
    /// <para>接口ID：6955768699896086530</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/helpdesk-v1/ticket-management/ticket/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取全部工单详情。仅支持自建应用。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>helpdesk:all:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="ticket_id">
    /// <para>必填：否</para>
    /// <para>搜索条件：工单ID</para>
    /// <para>示例值：123456</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="agent_id">
    /// <para>必填：否</para>
    /// <para>搜索条件: 客服id</para>
    /// <para>示例值：ou_b5de90429xxx</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="closed_by_id">
    /// <para>必填：否</para>
    /// <para>搜索条件: 关单客服id</para>
    /// <para>示例值：ou_b5de90429xxx</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="type">
    /// <para>必填：否</para>
    /// <para>搜索条件: 工单类型 1:bot 2:人工</para>
    /// <para>示例值：1</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="channel">
    /// <para>必填：否</para>
    /// <para>搜索条件: 工单渠道</para>
    /// <para>示例值：0</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="solved">
    /// <para>必填：否</para>
    /// <para>搜索条件: 工单是否解决 1:没解决 2:已解决</para>
    /// <para>示例值：1</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="score">
    /// <para>必填：否</para>
    /// <para>搜索条件: 工单评分</para>
    /// <para>示例值：1</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="status_list">
    /// <para>必填：否</para>
    /// <para>搜索条件: 工单状态列表</para>
    /// <para>示例值：1</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="guest_name">
    /// <para>必填：否</para>
    /// <para>搜索条件: 用户名称</para>
    /// <para>示例值：abc</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="guest_id">
    /// <para>必填：否</para>
    /// <para>搜索条件: 用户id</para>
    /// <para>示例值：ou_b5de90429xxx</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="tags">
    /// <para>必填：否</para>
    /// <para>搜索条件: 用户标签列表</para>
    /// <para>示例值：备注</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page">
    /// <para>必填：否</para>
    /// <para>页数, 从1开始, 默认为1</para>
    /// <para>示例值：1</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>当前页大小，最大为200， 默认为20。分页查询最多累计返回一万条数据，超过一万条请更改查询条件，推荐通过时间查询。</para>
    /// <para>示例值：20</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="create_time_start">
    /// <para>必填：否</para>
    /// <para>搜索条件: 工单创建起始时间 ms (也需要填上create_time_end)，相当于&gt;=create_time_start</para>
    /// <para>示例值：1616920429000</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="create_time_end">
    /// <para>必填：否</para>
    /// <para>搜索条件: 工单创建结束时间 ms (也需要填上create_time_start)，相当于&lt;=create_time_end</para>
    /// <para>示例值：1616920429000</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="update_time_start">
    /// <para>必填：否</para>
    /// <para>搜索条件: 工单修改起始时间 ms (也需要填上update_time_end)</para>
    /// <para>示例值：1616920429000</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="update_time_end">
    /// <para>必填：否</para>
    /// <para>搜索条件: 工单修改结束时间 ms(也需要填上update_time_start)</para>
    /// <para>示例值：1616920429000</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/helpdesk/v1/tickets")]
    System.Threading.Tasks.Task<FeishuResponse<Helpdesk.GetHelpdeskV1TicketsResponseDto>> GetHelpdeskV1TicketsAsync(
        [PathQuery] string? ticket_id = null,
        [PathQuery] string? agent_id = null,
        [PathQuery] string? closed_by_id = null,
        [PathQuery] int? type = null,
        [PathQuery] int? channel = null,
        [PathQuery] int? solved = null,
        [PathQuery] int? score = null,
        [PathQuery] int[]? status_list = null,
        [PathQuery] string? guest_name = null,
        [PathQuery] string? guest_id = null,
        [PathQuery] string[]? tags = null,
        [PathQuery] int? page = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] int? create_time_start = null,
        [PathQuery] int? create_time_end = null,
        [PathQuery] int? update_time_start = null,
        [PathQuery] int? update_time_end = null);

    /// <summary>
    /// <para>【招聘】通过投递 ID 获取入职信息</para>
    /// <para>接口ID：6959374328975867906</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/onboard/get_by_application</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过投递 ID 获取员工入职信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:employee</item>
    /// <item>hire:employee:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="application_id">
    /// <para>必填：是</para>
    /// <para>投递ID，可通过[获取投递列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/list)接口获取</para>
    /// <para>示例值：7379910335417927975</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>指定查询结果中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门资源介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)。</para>
    /// <para>示例值："department_id"</para>
    /// <list type="bullet">
    /// <item>open_department_id：由系统自动生成的部门 ID， ID前缀固定为 `od-`，在租户内全局唯一。</item>
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内，department_id 具有唯一性。</item>
    /// <item>people_admin_department_id：以 people_admin_department_id 来标识部门，该 ID 类型即将下线，不推荐使用</item>
    /// </list>
    /// <para>默认值：people_admin_department_id</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值："people_admin_job_level_id"</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，通过[获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_level_id</para>
    /// </param>
    /// <param name="job_family_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「序列 ID」的类型</para>
    /// <para>示例值："people_admin_job_category_id"</para>
    /// <list type="bullet">
    /// <item>people_admin_job_category_id：「人力系统管理后台」适用的序列 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_family_id：「飞书管理后台」适用的序列 ID，通过[获取租户序列列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_family/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_category_id</para>
    /// </param>
    /// <param name="employee_type_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「人员类型 ID」的类型</para>
    /// <para>示例值："people_admin_employee_type_id"</para>
    /// <list type="bullet">
    /// <item>people_admin_employee_type_id：「人力系统管理后台」适用的人员类型 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>employee_type_enum_id：「飞书管理后台」适用的人员类型 ID，通过[查询人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_employee_type_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/employees/get_by_application")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1EmployeesGetByApplicationResponseDto>> GetHireV1EmployeesGetByApplicationAsync(
        [PathQuery] string application_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "people_admin_department_id",
        [PathQuery] string? job_level_id_type = "people_admin_job_level_id",
        [PathQuery] string? job_family_id_type = "people_admin_job_category_id",
        [PathQuery] string? employee_type_id_type = "people_admin_employee_type_id");

    /// <summary>
    /// <para>【招聘】通过员工 ID 获取入职信息</para>
    /// <para>接口ID：6959374328975884290</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/onboard/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过员工 ID 获取入职信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:employee</item>
    /// <item>hire:employee:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>员工ID，可通过[通过投递 ID 获取入职信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/employee/get_by_application)接口获取</para>
    /// <para>示例值：7379910335417927975</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>指定查询结果中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门资源介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)。</para>
    /// <para>示例值："department_id"</para>
    /// <list type="bullet">
    /// <item>open_department_id：由系统自动生成的部门 ID， ID前缀固定为 `od-`，在租户内全局唯一。</item>
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内，department_id 具有唯一性。</item>
    /// <item>people_admin_department_id：以 people_admin_department_id 来标识部门，该 ID 类型即将下线，不推荐使用</item>
    /// </list>
    /// <para>默认值：people_admin_department_id</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值："people_admin_job_level_id"</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，通过[获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_level_id</para>
    /// </param>
    /// <param name="job_family_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「序列 ID」的类型</para>
    /// <para>示例值："people_admin_job_category_id"</para>
    /// <list type="bullet">
    /// <item>people_admin_job_category_id：「人力系统管理后台」适用的序列 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_family_id：「飞书管理后台」适用的序列 ID，通过[获取租户序列列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_family/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_category_id</para>
    /// </param>
    /// <param name="employee_type_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「人员类型 ID」的类型</para>
    /// <para>示例值："people_admin_employee_type_id"</para>
    /// <list type="bullet">
    /// <item>people_admin_employee_type_id：「人力系统管理后台」适用的人员类型 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>employee_type_enum_id：「飞书管理后台」适用的人员类型 ID，通过[查询人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_employee_type_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/employees/{employee_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1EmployeesByEmployeeIdResponseDto>> GetHireV1EmployeesByEmployeeIdAsync(
        [PathQuery] string employee_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "people_admin_department_id",
        [PathQuery] string? job_level_id_type = "people_admin_job_level_id",
        [PathQuery] string? job_family_id_type = "people_admin_job_category_id",
        [PathQuery] string? employee_type_id_type = "people_admin_employee_type_id");

    /// <summary>
    /// <para>【招聘】更新员工状态</para>
    /// <para>接口ID：6959374328975900674</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/onboard/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据员工 ID 更新员工招聘系统内的转正、离职状态。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:employee</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>员工ID，请参考：[通过投递 ID 获取入职信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/employee/get_by_application)</para>
    /// <para>示例值：6891613503971461384</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>指定查询结果中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门资源介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)。</para>
    /// <para>示例值：department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门 由系统自动生成的部门 ID，ID 前缀固定为 `od-`，在租户内全局唯一。</item>
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// <item>people_admin_department_id：以 people_admin_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：people_admin_department_id</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值：6942778198054125570</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，通过 [获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list) 接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_level_id</para>
    /// </param>
    /// <param name="job_family_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「序列 ID」的类型</para>
    /// <para>示例值：6942778198054125571</para>
    /// <list type="bullet">
    /// <item>people_admin_job_category_id：「人力系统管理后台」适用的序列 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_family_id：「飞书管理后台」适用的序列 ID，通过 [获取租户序列列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_family/list) 接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_category_id</para>
    /// </param>
    /// <param name="employee_type_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「人员类型 ID」的类型</para>
    /// <para>示例值：1</para>
    /// <list type="bullet">
    /// <item>people_admin_employee_type_id：「人力系统管理后台」适用的人员类型 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>employee_type_enum_id：「飞书管理后台」适用的人员类型 ID，通过 [查询人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_employee_type_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/hire/v1/employees/{employee_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PatchHireV1EmployeesByEmployeeIdResponseDto>> PatchHireV1EmployeesByEmployeeIdAsync(
        [PathQuery] string employee_id,
        [JsonContent] Hire.PatchHireV1EmployeesByEmployeeIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "people_admin_department_id",
        [PathQuery] string? job_level_id_type = "people_admin_job_level_id",
        [PathQuery] string? job_family_id_type = "people_admin_job_category_id",
        [PathQuery] string? employee_type_id_type = "people_admin_employee_type_id");

    /// <summary>
    /// <para>【多维表格】新增字段</para>
    /// <para>接口ID：6960166873968427011</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table-field/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>在多维表格数据表中新增一个字段。</para>
    /// <para>## 前提条件</para>
    /// <para>调用此接口前，请确保当前调用身份（tenant_access_token 或 user_access_token）已有多维表格的编辑等文档权限，否则接口将返回 HTTP 403 或 400 状态码。了解更多，参考[如何为应用或用户开通文档权限](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#16c6475a)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:field:create</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="table_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格数据表的唯一标识。获取方式：</para>
    /// <para>- 你可通过多维表格 URL 获取 `table_id`，下图高亮部分即为当前数据表的 `table_id`</para>
    /// <para>- 也可通过[列出数据表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list)接口获取 `table_id`</para>
    /// <para>![](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/18741fe2a0d3cafafaf9949b263bb57d_yD1wkOrSju.png?height=746&amp;lazyload=true&amp;maxWidth=700&amp;width=2976)</para>
    /// <para>示例值：tblsRc9GRRXKqhvW</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>格式为标准的 uuidv4，操作的唯一标识，用于幂等的进行更新操作。此值为空表示将发起一次新的请求，此值非空表示幂等的进行更新操作。</para>
    /// <para>示例值：fe599b60-450f-46ff-b2ef-9f6675625b97</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/bitable/v1/apps/{app_token}/tables/{table_id}/fields")]
    System.Threading.Tasks.Task<FeishuResponse<Base.PostBitableV1AppsByAppTokenTablesByTableIdFieldsResponseDto>> PostBitableV1AppsByAppTokenTablesByTableIdFieldsAsync(
        [PathQuery] string app_token,
        [PathQuery] string table_id,
        [JsonContent] Base.PostBitableV1AppsByAppTokenTablesByTableIdFieldsBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【多维表格】删除一个数据表</para>
    /// <para>接口ID：6960166873968443395</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除一个数据表，如果多维表格中只剩最后一张数据表，则不允许被删除。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:table:delete</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="table_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格数据表的唯一标识。获取方式：</para>
    /// <para>- 你可通过多维表格 URL 获取 `table_id`，下图高亮部分即为当前数据表的 `table_id`</para>
    /// <para>- 也可通过[列出数据表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list)接口获取 `table_id`</para>
    /// <para>![](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/18741fe2a0d3cafafaf9949b263bb57d_yD1wkOrSju.png?height=746&amp;lazyload=true&amp;maxWidth=700&amp;width=2976)</para>
    /// <para>示例值：tblsRc9GRRXKqhvW</para>
    /// </param>
    [HttpDelete("/open-apis/bitable/v1/apps/{app_token}/tables/{table_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteBitableV1AppsByAppTokenTablesByTableIdAsync(
        [PathQuery] string app_token,
        [PathQuery] string table_id);

    /// <summary>
    /// <para>【多维表格】删除多个数据表</para>
    /// <para>接口ID：6960166873968459779</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table/batch_delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除多个数据表。如果多维表格中只剩最后一张数据表，则不允许被删除。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:table:delete</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/bitable/v1/apps/{app_token}/tables/batch_delete")]
    System.Threading.Tasks.Task<FeishuResponse> PostBitableV1AppsByAppTokenTablesBatchDeleteAsync(
        [PathQuery] string app_token,
        [JsonContent] Base.PostBitableV1AppsByAppTokenTablesBatchDeleteBodyDto dto);

    /// <summary>
    /// <para>【多维表格】列出数据表</para>
    /// <para>接口ID：6960166873968476163</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>列出多维表格中的所有数据表，包括其 ID、版本号和名称。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:table:read</item>
    /// <item>bitable:app</item>
    /// <item>bitable:app:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：tblsRc9GRRXKqhvW</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    [HttpGet("/open-apis/bitable/v1/apps/{app_token}/tables")]
    System.Threading.Tasks.Task<FeishuResponse<Base.GetBitableV1AppsByAppTokenTablesResponseDto>> GetBitableV1AppsByAppTokenTablesAsync(
        [PathQuery] string app_token,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【多维表格】列出字段</para>
    /// <para>接口ID：6960166873968492547</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table-field/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取多维表格数据表中的的所有字段。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:field:read</item>
    /// <item>bitable:app</item>
    /// <item>bitable:app:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="table_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格数据表的唯一标识。获取方式：</para>
    /// <para>- 你可通过多维表格 URL 获取 `table_id`，下图高亮部分即为当前数据表的 `table_id`</para>
    /// <para>- 也可通过[列出数据表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list)接口获取 `table_id`</para>
    /// <para>![](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/18741fe2a0d3cafafaf9949b263bb57d_yD1wkOrSju.png?height=746&amp;lazyload=true&amp;maxWidth=700&amp;width=2976)</para>
    /// <para>示例值：tblsRc9GRRXKqhvW</para>
    /// </param>
    /// <param name="view_id">
    /// <para>必填：否</para>
    /// <para>多维表格中视图的唯一标识。获取方式：</para>
    /// <para>- 在多维表格的 URL 地址栏中，`view_id` 是下图中高亮部分：</para>
    /// <para>![view_id.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/140668632c97e0095832219001d17c54_DJMgVH9x2S.png?height=748&amp;lazyload=true&amp;width=2998)</para>
    /// <para>- 通过[列出视图](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/list)接口获取。暂时无法获取到嵌入到云文档中的多维表格的 `view_id`。</para>
    /// <para>**注意**：</para>
    /// <para>当 `filter` 参数 或 `sort` 参数不为空时，请求视为对数据表中的全部数据做条件过滤，指定的 `view_id` 会被忽略。</para>
    /// <para>示例值：vewOVMEXPF</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="text_field_as_array">
    /// <para>必填：否</para>
    /// <para>控制字段描述 `description` 数据的返回格式，默认为 false。true 表示 `description` 将以数组形式返回，如：</para>
    /// <para>```json</para>
    /// <para>{</para>
    /// <para>"description": [</para>
    /// <para>{</para>
    /// <para>"text": "字段的描述",</para>
    /// <para>"type": "text"</para>
    /// <para>}</para>
    /// <para>]</para>
    /// <para>}</para>
    /// <para>```</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：fldwJ4YrtB</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    [HttpGet("/open-apis/bitable/v1/apps/{app_token}/tables/{table_id}/fields")]
    System.Threading.Tasks.Task<FeishuResponse<Base.GetBitableV1AppsByAppTokenTablesByTableIdFieldsResponseDto>> GetBitableV1AppsByAppTokenTablesByTableIdFieldsAsync(
        [PathQuery] string app_token,
        [PathQuery] string table_id,
        [PathQuery] string? view_id = null,
        [PathQuery] bool? text_field_as_array = null,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【多维表格】更新字段</para>
    /// <para>接口ID：6960166873968508931</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table-field/update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>在多维表格数据表中更新一个字段。更新字段时为全量更新，property 等字段会被完全覆盖。</para>
    /// <para>## 前提条件</para>
    /// <para>调用此接口前，请确保当前调用身份（tenant_access_token 或 user_access_token）已有多维表格的编辑等文档权限，否则接口将返回 HTTP 403 或 400 状态码。了解更多，参考[如何为应用或用户开通文档权限](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#16c6475a)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:field:update</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="table_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格数据表的唯一标识。获取方式：</para>
    /// <para>- 你可通过多维表格 URL 获取 `table_id`，下图高亮部分即为当前数据表的 `table_id`</para>
    /// <para>- 也可通过[列出数据表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list)接口获取 `table_id`</para>
    /// <para>![](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/18741fe2a0d3cafafaf9949b263bb57d_yD1wkOrSju.png?height=746&amp;lazyload=true&amp;maxWidth=700&amp;width=2976)</para>
    /// <para>示例值：tblsRc9GRRXKqhvW</para>
    /// </param>
    /// <param name="field_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>数据表中一个字段的唯一标识。通过[列出字段](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/list)接口获取。</para>
    /// <para>示例值：fldPTb0U2y</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/bitable/v1/apps/{app_token}/tables/{table_id}/fields/{field_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Base.PutBitableV1AppsByAppTokenTablesByTableIdFieldsByFieldIdResponseDto>> PutBitableV1AppsByAppTokenTablesByTableIdFieldsByFieldIdAsync(
        [PathQuery] string app_token,
        [PathQuery] string table_id,
        [PathQuery] string field_id,
        [JsonContent] Base.PutBitableV1AppsByAppTokenTablesByTableIdFieldsByFieldIdBodyDto dto);

    /// <summary>
    /// <para>【多维表格】删除字段</para>
    /// <para>接口ID：6960166873968525315</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table-field/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除多维表格数据表中的一个字段。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:field:delete</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="table_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格数据表的唯一标识。获取方式：</para>
    /// <para>- 你可通过多维表格 URL 获取 `table_id`，下图高亮部分即为当前数据表的 `table_id`</para>
    /// <para>- 也可通过[列出数据表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list)接口获取 `table_id`</para>
    /// <para>![](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/18741fe2a0d3cafafaf9949b263bb57d_yD1wkOrSju.png?height=746&amp;lazyload=true&amp;maxWidth=700&amp;width=2976)</para>
    /// <para>示例值：tblsRc9GRRXKqhvW</para>
    /// </param>
    /// <param name="field_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>数据表中一个字段的唯一标识。通过[列出字段](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/list)接口获取。</para>
    /// <para>示例值：fldPTb0U2y</para>
    /// </param>
    [HttpDelete("/open-apis/bitable/v1/apps/{app_token}/tables/{table_id}/fields/{field_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Base.DeleteBitableV1AppsByAppTokenTablesByTableIdFieldsByFieldIdResponseDto>> DeleteBitableV1AppsByAppTokenTablesByTableIdFieldsByFieldIdAsync(
        [PathQuery] string app_token,
        [PathQuery] string table_id,
        [PathQuery] string field_id);

    /// <summary>
    /// <para>【多维表格】新增一个数据表</para>
    /// <para>接口ID：6960166873968541699</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>新增一个数据表，默认仅包含索引字段，也可以指定更多字段。最多支持新增 100 个数据表。</para>
    /// <para>## 前提条件</para>
    /// <para>调用此接口前，请确保当前调用身份（tenant_access_token 或 user_access_token）已有多维表格的编辑等文档权限，否则接口将返回 HTTP 403 或 400 状态码。了解更多，参考[如何为应用或用户开通文档权限](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#16c6475a)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:table:create</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 app_token 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 app_token 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 obj_type 的值为 bitable 时，obj_token 字段的值才是多维表格的 app_token。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/bitable/v1/apps/{app_token}/tables")]
    System.Threading.Tasks.Task<FeishuResponse<Base.PostBitableV1AppsByAppTokenTablesResponseDto>> PostBitableV1AppsByAppTokenTablesAsync(
        [PathQuery] string app_token,
        [JsonContent] Base.PostBitableV1AppsByAppTokenTablesBodyDto dto);

    /// <summary>
    /// <para>【多维表格】新增多个数据表</para>
    /// <para>接口ID：6960166873968558083</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table/batch_create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>新增多个数据表，仅可指定数据表名称。最多支持新增 100 个数据表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:table:create</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 app_token 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 app_token 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 obj_type 的值为 bitable 时，obj_token 字段的值才是多维表格的 app_token。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/bitable/v1/apps/{app_token}/tables/batch_create")]
    System.Threading.Tasks.Task<FeishuResponse<Base.PostBitableV1AppsByAppTokenTablesBatchCreateResponseDto>> PostBitableV1AppsByAppTokenTablesBatchCreateAsync(
        [PathQuery] string app_token,
        [JsonContent] Base.PostBitableV1AppsByAppTokenTablesBatchCreateBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【多维表格】获取多维表格元数据</para>
    /// <para>接口ID：6960166873968574467</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取指定多维表格的元数据信息，包括多维表格名称、多维表格版本号、多维表格是否开启高级权限等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:app:read</item>
    /// <item>bitable:app</item>
    /// <item>bitable:app:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    [HttpGet("/open-apis/bitable/v1/apps/{app_token}")]
    System.Threading.Tasks.Task<FeishuResponse<Base.GetBitableV1AppsByAppTokenResponseDto>> GetBitableV1AppsByAppTokenAsync(
        [PathQuery] string app_token);

    /// <summary>
    /// <para>【视频会议】获取会议详情</para>
    /// <para>接口ID：6960861158128926723</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/meeting/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取一个会议的详细数据。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:meeting:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="meeting_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>会议ID（视频会议的唯一标识，视频会议开始后才会产生）</para>
    /// <para>示例值：6911188411932033028</para>
    /// </param>
    /// <param name="with_participants">
    /// <para>必填：否</para>
    /// <para>是否需要参会人列表</para>
    /// <para>示例值：false</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="with_meeting_ability">
    /// <para>必填：否</para>
    /// <para>是否需要会中使用能力统计（仅限tenant_access_token）</para>
    /// <para>示例值：false</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/vc/v1/meetings/{meeting_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.GetVcV1MeetingsByMeetingIdResponseDto>> GetVcV1MeetingsByMeetingIdAsync(
        [PathQuery] string meeting_id,
        [PathQuery] bool? with_participants = null,
        [PathQuery] bool? with_meeting_ability = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】预约会议</para>
    /// <para>接口ID：6960861158129008643</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/reserve/apply</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>创建一个会议预约。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:reserve</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/vc/v1/reserves/apply")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.PostVcV1ReservesApplyResponseDto>> PostVcV1ReservesApplyAsync(
        [JsonContent] Vc.PostVcV1ReservesApplyBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】删除预约</para>
    /// <para>接口ID：6960861158129041411</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/reserve/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除一个预约。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:reserve</item>
    /// </list></para>
    /// </summary>
    /// <param name="reserve_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>预约ID（预约的唯一标识）</para>
    /// <para>示例值：6911188411932033028</para>
    /// </param>
    [HttpDelete("/open-apis/vc/v1/reserves/{reserve_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteVcV1ReservesByReserveIdAsync(
        [PathQuery] string reserve_id);

    /// <summary>
    /// <para>【视频会议】获取录制文件</para>
    /// <para>接口ID：6960861158593101828</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/meeting-recording/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取一个会议的录制文件。</para>
    /// <para>## 注意事项</para>
    /// <para>- 会议结束后并且收到了[录制完成](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/events/recording_ready)的事件方可获取录制文件。</para>
    /// <para>- 请求头 Authorization 参数不同 Token 说明：</para>
    /// <para>- 使用 user_access_token 时，只有会议归属人有权限获取录制文件。会议归属人是指[预约会议](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve/apply)时，请求参数传入的归属人（owner_id）。</para>
    /// <para>- 使用 tenant_access_token 时，可获取租户范围下的录制文件。</para>
    /// <para>- 录制时间太短（小于 5s）有可能无法生成录制文件。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:record:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="meeting_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>会议ID（视频会议的唯一标识，视频会议开始后才会产生）</para>
    /// <para>示例值：6911188411932033028</para>
    /// </param>
    [HttpGet("/open-apis/vc/v1/meetings/{meeting_id}/recording")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.GetVcV1MeetingsByMeetingIdRecordingResponseDto>> GetVcV1MeetingsByMeetingIdRecordingAsync(
        [PathQuery] string meeting_id);

    /// <summary>
    /// <para>【OKR】获取 OKR 周期列表</para>
    /// <para>接口ID：6961663213280706561</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/okr-v1/period/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取 OKR 周期列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>okr:okr</item>
    /// <item>okr:okr:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：xaasdasdax</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，默认10</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    [HttpGet("/open-apis/okr/v1/periods")]
    System.Threading.Tasks.Task<FeishuResponse<Okr.GetOkrV1PeriodsResponseDto>> GetOkrV1PeriodsAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10);

    /// <summary>
    /// <para>【OKR】批量获取 OKR</para>
    /// <para>接口ID：6961663213280722945</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/okr-v1/okr/batch_get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据 OKR id 批量获取 OKR。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>okr:okr</item>
    /// <item>okr:okr:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="okr_ids">
    /// <para>必填：是</para>
    /// <para>OKR ID 列表，最多10个</para>
    /// <para>示例值：7043693679567028244</para>
    /// </param>
    /// <param name="lang">
    /// <para>必填：否</para>
    /// <para>请求OKR的语言版本（比如@的人名），lang=en_us/zh_cn，请求 Query中</para>
    /// <para>示例值：zh_cn</para>
    /// <para>默认值：zh_cn</para>
    /// </param>
    [HttpGet("/open-apis/okr/v1/okrs/batch_get")]
    System.Threading.Tasks.Task<FeishuResponse<Okr.GetOkrV1OkrsBatchGetResponseDto>> GetOkrV1OkrsBatchGetAsync(
        [PathQuery] string[] okr_ids,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? lang = "zh_cn");

    /// <summary>
    /// <para>【OKR】获取用户的 OKR 列表</para>
    /// <para>接口ID：6961663213280739329</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/okr-v1/okr/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据用户的 id 获取 OKR 列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>okr:okr</item>
    /// <item>okr:okr:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>目标用户id</para>
    /// <para>示例值：ou-asdasdasdasdasd</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="offset">
    /// <para>必填：是</para>
    /// <para>请求列表的偏移（对应响应体的 okr_list 字段），offset&gt;=0</para>
    /// <para>示例值：0</para>
    /// </param>
    /// <param name="limit">
    /// <para>必填：是</para>
    /// <para>列表长度，0-10</para>
    /// <para>示例值：5</para>
    /// </param>
    /// <param name="lang">
    /// <para>必填：否</para>
    /// <para>请求OKR的语言版本（比如@的人名），lang=en_us/zh_cn</para>
    /// <para>示例值：zh_cn</para>
    /// <para>默认值：zh_cn</para>
    /// </param>
    /// <param name="period_ids">
    /// <para>必填：否</para>
    /// <para>period_id列表，最多10个</para>
    /// <para>示例值：["6951461264858777132"]</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/okr/v1/users/{user_id}/okrs")]
    System.Threading.Tasks.Task<FeishuResponse<Okr.GetOkrV1UsersByUserIdOkrsResponseDto>> GetOkrV1UsersByUserIdOkrsAsync(
        [PathQuery] string user_id,
        [PathQuery] string offset,
        [PathQuery] string limit,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? lang = "zh_cn",
        [PathQuery] string[]? period_ids = null);

    /// <summary>
    /// <para>【招聘】获取职位信息</para>
    /// <para>接口ID：6963910685080289282</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/job/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据职位 ID 获取职位信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:job:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>职位 ID，请求Path中</para>
    /// <para>示例值：6001</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>部门ID类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：开放平台部门ID</item>
    /// <item>department_id：内部部门ID</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值：6942778198054125570</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，通过[「获取租户职级列表」](https://open.feishu.cn/document/server-docs/contact-v3/job_level/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_level_id</para>
    /// </param>
    /// <param name="job_family_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「序列 ID」的类型</para>
    /// <para>示例值：6942778198054125571</para>
    /// <list type="bullet">
    /// <item>people_admin_job_category_id：「人力系统管理后台」适用的序列 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_family_id：「飞书管理后台」适用的序列 ID，通过[「获取租户序列列表」](https://open.feishu.cn/document/server-docs/contact-v3/job_family/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_category_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/jobs/{job_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1JobsByJobIdResponseDto>> GetHireV1JobsByJobIdAsync(
        [PathQuery] string job_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? job_level_id_type = "people_admin_job_level_id",
        [PathQuery] string? job_family_id_type = "people_admin_job_category_id");

    /// <summary>
    /// <para>【招聘】获取职位上的招聘人员信息</para>
    /// <para>接口ID：6963910685080305666</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/job/get-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据职位 ID 获取职位上的招聘人员信息，如招聘负责人、用人经理。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:job:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>职位 ID</para>
    /// <para>示例值：1618209327096</para>
    /// </param>
    /// <param name="manager_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>此处传入职位 ID</para>
    /// <para>示例值：1618209327096</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以 people_admin_id 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/jobs/{job_id}/managers/{manager_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1JobsByJobIdManagersByManagerIdResponseDto>> GetHireV1JobsByJobIdManagersByManagerIdAsync(
        [PathQuery] string job_id,
        [PathQuery] string manager_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】获取简历来源列表</para>
    /// <para>接口ID：6964264269274578946</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/resume_source/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取简历来源列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:talent</item>
    /// <item>hire:talent:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>**默认值**：1000</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值："6794694704606185741"</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/resume_sources")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1ResumeSourcesResponseDto>> GetHireV1ResumeSourcesAsync(
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【招聘】获取内推信息</para>
    /// <para>接口ID：6964264269274595330</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/referral/get_by_application</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据投递 ID 获取内推信息，包含内推人信息、内推创建时间等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:referral</item>
    /// <item>hire:referral:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="application_id">
    /// <para>必填：是</para>
    /// <para>投递 ID，可通过[获取投递列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/list)获取</para>
    /// <para>示例值：6134134355464633</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/referrals/get_by_application")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1ReferralsGetByApplicationResponseDto>> GetHireV1ReferralsGetByApplicationAsync(
        [PathQuery] string application_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】获取人才信息</para>
    /// <para>接口ID：6964264269274611714</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/talent/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据人才 ID 获取人才信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:talent</item>
    /// <item>hire:talent:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="talent_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>人才ID，可通过[获取人才列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent/list)接口获取</para>
    /// <para>示例值：6891560630172518670</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以 people_admin_id 来识别用户</item>
    /// </list>
    /// <para>默认值：people_admin_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/talents/{talent_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1TalentsByTalentIdResponseDto>> GetHireV1TalentsByTalentIdAsync(
        [PathQuery] string talent_id,
        [PathQuery] string? user_id_type = "people_admin_id");

    /// <summary>
    /// <para>【招聘】操作候选人入职</para>
    /// <para>接口ID：6964286393804800028</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/onboard/transfer_onboard</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据投递 ID 操作候选人入职并创建员工，后续可通过 [通过员工 ID 获取入职信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/employee/get) 接口获取入职信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:application</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="application_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>投递ID，可通过接口 [获取投递列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/list) 获取</para>
    /// <para>示例值：7073372582620416300</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>指定查询结果中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门资源介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)。</para>
    /// <para>示例值：department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门 由系统自动生成的部门 ID，ID 前缀固定为 `od-`，在租户内全局唯一。</item>
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// <item>people_admin_department_id：以 people_admin_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：people_admin_department_id</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值：job_level_id</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，通过[「获取租户职级列表」](https://open.feishu.cn/document/server-docs/contact-v3/job_level/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_level_id</para>
    /// </param>
    /// <param name="job_family_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「序列 ID」的类型</para>
    /// <para>示例值：job_family_id</para>
    /// <list type="bullet">
    /// <item>people_admin_job_category_id：「人力系统管理后台」适用的序列 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_family_id：「飞书管理后台」适用的序列 ID，通过[「获取租户序列列表」](https://open.feishu.cn/document/server-docs/contact-v3/job_family/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_category_id</para>
    /// </param>
    /// <param name="employee_type_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「人员类型 ID」的类型</para>
    /// <para>示例值：employee_type_enum_id</para>
    /// <list type="bullet">
    /// <item>people_admin_employee_type_id：「人力系统管理后台」适用的人员类型 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>employee_type_enum_id：「飞书管理后台」适用的人员类型 ID，通过[「查询人员类型」](https://open.feishu.cn/document/server-docs/contact-v3/employee_type_enum/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_employee_type_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/applications/{application_id}/transfer_onboard")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1ApplicationsByApplicationIdTransferOnboardResponseDto>> PostHireV1ApplicationsByApplicationIdTransferOnboardAsync(
        [PathQuery] string application_id,
        [JsonContent] Hire.PostHireV1ApplicationsByApplicationIdTransferOnboardBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "people_admin_department_id",
        [PathQuery] string? job_level_id_type = "people_admin_job_level_id",
        [PathQuery] string? job_family_id_type = "people_admin_job_category_id",
        [PathQuery] string? employee_type_id_type = "people_admin_employee_type_id");

    /// <summary>
    /// <para>【招聘】创建投递</para>
    /// <para>接口ID：6964286393804816412</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/application/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>为人才在特定职位上创建投递。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:application</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/applications")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1ApplicationsResponseDto>> PostHireV1ApplicationsAsync(
        [JsonContent] Hire.PostHireV1ApplicationsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】终止投递</para>
    /// <para>接口ID：6964286393804832796</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/application/terminate</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据投递 ID 修改投递状态为「已终止」。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:application</item>
    /// </list></para>
    /// </summary>
    /// <param name="application_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>投递ID，可通过[获取投递列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/list)接口获取</para>
    /// <para>示例值：12312312312</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/applications/{application_id}/terminate")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1ApplicationsByApplicationIdTerminateAsync(
        [PathQuery] string application_id,
        [JsonContent] Hire.PostHireV1ApplicationsByApplicationIdTerminateBodyDto dto);

    /// <summary>
    /// <para>【招聘】获取投递信息</para>
    /// <para>接口ID：6964286393804849180</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/application/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据投递 ID 获取单个投递信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:application</item>
    /// <item>hire:application:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="application_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>投递 ID，可通过[获取投递列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/list)获取</para>
    /// <para>示例值：6949805467799537964</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="options">
    /// <para>必填：否</para>
    /// <para>请求控制参数，用于控制接口响应逻辑。如需一次查询多个用户ID，可通过将同一参数名多次传递，并且每次传递不同的参数值。例如：https://{url}?options={option1}&amp;options={option2}。</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/applications/{application_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1ApplicationsByApplicationIdResponseDto>> GetHireV1ApplicationsByApplicationIdAsync(
        [PathQuery] string application_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string[]? options = null);

    /// <summary>
    /// <para>【招聘】获取投递列表</para>
    /// <para>接口ID：6964286393804865564</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/application/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取投递列表信息。可根据「招聘流程 ID」、「招聘阶段 ID」、「人才 ID」、「职位 ID」、「投递活跃状态」以及「投递更新时间」进行条件筛选。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:application</item>
    /// <item>hire:application:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="process_id">
    /// <para>必填：否</para>
    /// <para>招聘流程 ID，可通过[获取招聘流程信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job_process/list)接口中的「流程 ID」获取</para>
    /// <para>示例值：6960663240925956554</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="stage_id">
    /// <para>必填：否</para>
    /// <para>招聘阶段 ID，可通过[获取招聘流程信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job_process/list)接口每个流程下的「阶段列表」获取</para>
    /// <para>示例值：614218419274131</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="talent_id">
    /// <para>必填：否</para>
    /// <para>人才 ID，可通过[获取人才列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent/list)接口获取</para>
    /// <para>示例值：6891560630172518670</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="active_status">
    /// <para>必填：否</para>
    /// <para>投递活跃状态，不传该参数则默认为“全部”</para>
    /// <para>**可选值有**：</para>
    /// <para>- `1`：活跃投递</para>
    /// <para>- `2`：非活跃投递</para>
    /// <para>- `3`：全部</para>
    /// <para>示例值：1</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="job_id">
    /// <para>必填：否</para>
    /// <para>职位 ID，可通过[获取职位列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/list)接口获取</para>
    /// <para>示例值：7334134355464633</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="lock_status">
    /// <para>必填：否</para>
    /// <para>锁定状态，无默认值，不传该参数则不对锁定状态进行筛选</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>**最大值**：200</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="update_start_time">
    /// <para>必填：否</para>
    /// <para>最早更新时间，毫秒时间戳</para>
    /// <para>示例值：1618500278663</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="update_end_time">
    /// <para>必填：否</para>
    /// <para>最晚更新时间，毫秒时间戳</para>
    /// <para>示例值：1618500278663</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/applications")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1ApplicationsResponseDto>> GetHireV1ApplicationsAsync(
        [PathQuery] string? process_id = null,
        [PathQuery] string? stage_id = null,
        [PathQuery] string? talent_id = null,
        [PathQuery] string? active_status = null,
        [PathQuery] string? job_id = null,
        [PathQuery] int[]? lock_status = null,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? update_start_time = null,
        [PathQuery] string? update_end_time = null);

    /// <summary>
    /// <para>【招聘】获取 Offer 申请表详细信息</para>
    /// <para>接口ID：6964286393804881948</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/hire_internal/offer/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据 Offer 申请表 ID，获取 Offer 申请表的详细信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item></item>
    /// </list></para>
    /// </summary>
    /// <param name="offer_schema_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>offer申请表的ID *必需属性</para>
    /// <para>**示例值**："1231231231231"</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/offer_schemas/{offer_schema_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.Spec.GetHireV1OfferSchemasByOfferSchemaIdResponseDto>> GetHireV1OfferSchemasByOfferSchemaIdAsync(
        [PathQuery] string offer_schema_id);

    /// <summary>
    /// <para>【招聘】获取附件信息</para>
    /// <para>接口ID：6964286393804898332</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/attachment/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据附件 ID 和附件类型获取招聘系统中附件的信息，比如附件名称、附件创建时间、附件下载地址等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:attachment</item>
    /// <item>hire:attachment:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="attachment_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>附件 ID，获取方式如下：</para>
    /// <para>- 简历附件 ID/作品附件 ID：通过[获取人才信息 V1](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent/get)接口获取</para>
    /// <para>- 通用附件 ID：通过[创建附件](https://open.feishu.cn/document/ukTMukTMukTM/uIDN1YjLyQTN24iM0UjN/create_attachment)、[获取 Offer 详情](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer/get)、[获取 Offer 信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/offer)接口获取</para>
    /// <para>示例值：6960663240925956555</para>
    /// </param>
    /// <param name="type">
    /// <para>必填：否</para>
    /// <para>附件类型</para>
    /// <para>示例值：1</para>
    /// <list type="bullet">
    /// <item>1：简历附件，人才上的简历附件。</item>
    /// <item>2：作品附件，人才上的作品附件。</item>
    /// <item>3：通用附件，通过[创建附件](https://open.feishu.cn/document/ukTMukTMukTM/uIDN1YjLyQTN24iM0UjN/create_attachment)、[获取 Offer 详情](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer/get)、[获取 Offer 信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/offer)接口获取。</item>
    /// </list>
    /// <para>默认值：1</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/attachments/{attachment_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1AttachmentsByAttachmentIdResponseDto>> GetHireV1AttachmentsByAttachmentIdAsync(
        [PathQuery] string attachment_id,
        [PathQuery] int? type = 1);

    /// <summary>
    /// <para>【招聘】获取 Offer 信息</para>
    /// <para>接口ID：6964286393804914716</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/offer/offer</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据投递 ID 获取 Offer 信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:application</item>
    /// <item>hire:application:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="application_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>投递ID，可通过[获取投递列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/list)获取</para>
    /// <para>示例值：6949805467799537964</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型。</para>
    /// <para>示例值："open_department_id"</para>
    /// <list type="bullet">
    /// <item>open_department_id：【飞书】用来在具体某个应用中标识一个部门，同一个department_id 在不同应用中的 open_department_id 相同</item>
    /// <item>department_id：【飞书】用来标识租户内一个唯一的部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值："people_admin_job_level_id"</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，通过[获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_level_id</para>
    /// </param>
    /// <param name="job_family_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「序列 ID」的类型</para>
    /// <para>示例值："people_admin_job_category_id"</para>
    /// <list type="bullet">
    /// <item>people_admin_job_category_id：「人力系统管理后台」适用的序列 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_family_id：「飞书管理后台」适用的序列 ID，通过[获取租户序列列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_family/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_category_id</para>
    /// </param>
    /// <param name="employee_type_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「人员类型 ID」的类型</para>
    /// <para>示例值："people_admin_employee_type_id"</para>
    /// <list type="bullet">
    /// <item>people_admin_employee_type_id：「人力系统管理后台」适用的人员类型 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>employee_type_enum_id：「飞书管理后台」适用的人员类型 ID，通过[查询人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_employee_type_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/applications/{application_id}/offer")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1ApplicationsByApplicationIdOfferResponseDto>> GetHireV1ApplicationsByApplicationIdOfferAsync(
        [PathQuery] string application_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? job_level_id_type = "people_admin_job_level_id",
        [PathQuery] string? job_family_id_type = "people_admin_job_category_id",
        [PathQuery] string? employee_type_id_type = "people_admin_employee_type_id");

    /// <summary>
    /// <para>【招聘】获取面试记录列表</para>
    /// <para>接口ID：6964286393804931100</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/hire_internal/application-interview/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据投递 ID 获取面试记录列表</para>
    /// <para>权限要求：<list type="bullet">
    /// <item></item>
    /// <item></item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item></item>
    /// </list></para>
    /// </summary>
    /// <param name="application_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>投递ID</para>
    /// <para>**示例值**："6949805467799537964"</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，不能超过 50</para>
    /// <para>**示例值**：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>**示例值**："xx"</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>**示例值**："open_id"</para>
    /// <para>**可选值有**：</para>
    /// <para>- `open_id`：用户的 open id</para>
    /// <para>- `union_id`：用户的 union id</para>
    /// <para>- `user_id`：用户的 user id</para>
    /// <para>**默认值**：`open_id`</para>
    /// <para>**当值为 `user_id`，字段权限要求**：</para>
    /// <para>-  : </para>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/applications/{application_id}/interviews")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.Spec.GetHireV1ApplicationsByApplicationIdInterviewsResponseDto>> GetHireV1ApplicationsByApplicationIdInterviewsAsync(
        [PathQuery] string application_id,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】获取招聘流程信息</para>
    /// <para>接口ID：6964286393804947484</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/job_process/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取全部招聘流程信息。如「流程名称」、「流程类型」及流程下的「阶段名称」、「阶段类型」等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:job_process:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>**默认值**：10</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：7342029494511126794</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/job_processes")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1JobProcessesResponseDto>> GetHireV1JobProcessesAsync(
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【招聘】获取附件 PDF 格式下载链接</para>
    /// <para>接口ID：6964631863168647171</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/attachment/preview</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据人才简历附件 ID 获取该简历附件对应的 PDF 文件的下载地址。</para>
    /// <para>## 注意事项</para>
    /// <para>- 本接口仅支持转换人才简历类型的附件，不支持作品附件和通用附件。</para>
    /// <para>- 飞书招聘系统支持将文件后缀名为 `.doc`、`.docx`、`.ppt`、`.pptx` 和 `.txt`的人才简历附件转换为 PDF 格式。若转换 PDF 失败，该接口会返回附件原文件的下载地址。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:attachment</item>
    /// </list></para>
    /// </summary>
    /// <param name="attachment_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>附件 ID，可通过[获取人才信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent/get)接口返回数据中获取人才简历附件 ID。</para>
    /// <para>示例值：64352523512563462</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/attachments/{attachment_id}/preview")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1AttachmentsByAttachmentIdPreviewResponseDto>> GetHireV1AttachmentsByAttachmentIdPreviewAsync(
        [PathQuery] string attachment_id);

    /// <summary>
    /// <para>【招聘】设置猎头保护期</para>
    /// <para>接口ID：6965472560995041282</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/agency/protect</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>设置指定人才的猎头保护期，当「飞书招聘」内置的保护期功能不满足需求时，客户可通过此接口自定义人才的保护期。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:agency</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/agencies/protect")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1AgenciesProtectAsync(
        [JsonContent] Hire.PostHireV1AgenciesProtectBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】获取猎头供应商信息</para>
    /// <para>接口ID：6965472560995057666</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/agency/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据猎头供应商 ID 获取有合作关系的猎头供应商信息，包含猎头供应商ID、名称、联系人等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:agency</item>
    /// <item>hire:agency:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="agency_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>猎头供应商ID</para>
    /// <para>示例值：6898173495386147079</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/agencies/{agency_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1AgenciesByAgencyIdResponseDto>> GetHireV1AgenciesByAgencyIdAsync(
        [PathQuery] string agency_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】查询猎头供应商信息</para>
    /// <para>接口ID：6965472560995074050</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/agency/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据猎头供应商名称查询有合作关系的猎头供应商信息，包含猎头供应商ID、名称、联系人等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:agency</item>
    /// <item>hire:agency:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="name">
    /// <para>必填：是</para>
    /// <para>猎头供应商名称，精准匹配查询(区分大小写)</para>
    /// <para>示例值：超越猎头公司</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/agencies/query")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1AgenciesQueryResponseDto>> GetHireV1AgenciesQueryAsync(
        [PathQuery] string name,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】获取筛选</para>
    /// <para>接口ID：6966945328390651906</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet-sheet-filter/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取电子表格中工作表的详细筛选信息，包括筛选的应用范围、筛选条件、被筛选条件过滤掉的行。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    /// <param name="sheet_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工作表 ID，通过[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query) 获取。</para>
    /// <para>示例值：8fe9d6</para>
    /// </param>
    [HttpGet("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}/sheets/{sheet_id}/filter")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterResponseDto>> GetSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterAsync(
        [PathQuery] string spreadsheet_token,
        [PathQuery] string sheet_id);

    /// <summary>
    /// <para>【云文档】创建筛选</para>
    /// <para>接口ID：6966945328390668290</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet-sheet-filter/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>在电子表格工作表的指定范围内，设置筛选条件，创建筛选。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    /// <param name="sheet_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工作表 ID，通过[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query) 获取。</para>
    /// <para>示例值：8fe9d6</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}/sheets/{sheet_id}/filter")]
    System.Threading.Tasks.Task<FeishuResponse> PostSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterAsync(
        [PathQuery] string spreadsheet_token,
        [PathQuery] string sheet_id,
        [JsonContent] Ccm.PostSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterBodyDto dto);

    /// <summary>
    /// <para>【云文档】更新筛选</para>
    /// <para>接口ID：6966945328390684674</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet-sheet-filter/update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>在电子表格工作表筛选范围中，更新指定列的筛选条件。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    /// <param name="sheet_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工作表 ID，通过[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query) 获取。</para>
    /// <para>示例值：8fe9d6</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}/sheets/{sheet_id}/filter")]
    System.Threading.Tasks.Task<FeishuResponse> PutSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterAsync(
        [PathQuery] string spreadsheet_token,
        [PathQuery] string sheet_id,
        [JsonContent] Ccm.PutSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterBodyDto dto);

    /// <summary>
    /// <para>【云文档】删除筛选</para>
    /// <para>接口ID：6966945328390701058</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet-sheet-filter/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除电子表格中指定工作表的所有筛选。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    /// <param name="sheet_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工作表 ID，通过[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query) 获取。</para>
    /// <para>示例值：8fe9d6</para>
    /// </param>
    [HttpDelete("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}/sheets/{sheet_id}/filter")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterAsync(
        [PathQuery] string spreadsheet_token,
        [PathQuery] string sheet_id);

    /// <summary>
    /// <para>【审批】审批任务加签</para>
    /// <para>接口ID：6968270299335606273</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/task/approval-task-addsign</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对于单个审批任务进行加签操作。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/approval/v4/instances/add_sign")]
    System.Threading.Tasks.Task<FeishuResponse> PostApprovalV4InstancesAddSignAsync(
        [JsonContent] Approval.Spec.PostApprovalV4InstancesAddSignBodyDto dto);

    /// <summary>
    /// <para>【汇报】查询任务</para>
    /// <para>接口ID：6969187588792369180</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/report-v1/task/query</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>查询任务。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>report:task:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/report/v1/tasks/query")]
    System.Threading.Tasks.Task<FeishuResponse<Report.PostReportV1TasksQueryResponseDto>> PostReportV1TasksQueryAsync(
        [JsonContent] Report.PostReportV1TasksQueryBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【汇报】查询规则</para>
    /// <para>接口ID：6969187588792385564</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/report-v1/rule/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询规则。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>report:rule:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="rule_name">
    /// <para>必填：是</para>
    /// <para>规则名称</para>
    /// <para>示例值：工作月报</para>
    /// </param>
    /// <param name="include_deleted">
    /// <para>必填：否</para>
    /// <para>是否包括已删除，默认未删除</para>
    /// <para>示例值：0</para>
    /// <list type="bullet">
    /// <item>0：不包括已删除</item>
    /// <item>1：包括已删除</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/report/v1/rules/query")]
    System.Threading.Tasks.Task<FeishuResponse<Report.GetReportV1RulesQueryResponseDto>> GetReportV1RulesQueryAsync(
        [PathQuery] string rule_name,
        [PathQuery] int? include_deleted = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】移动行列</para>
    /// <para>接口ID：6969403095454416924</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/sheet-rowcol/move_dimension</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于移动行或列。行或列被移动到目标位置后，原本在目标位置的行列会对应右移或下移。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    /// <param name="sheet_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工作表的 ID。调用[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query)获取 ID</para>
    /// <para>示例值：2jm6f6</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}/sheets/{sheet_id}/move_dimension")]
    System.Threading.Tasks.Task<FeishuResponse> PostSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdMoveDimensionAsync(
        [PathQuery] string spreadsheet_token,
        [PathQuery] string sheet_id,
        [JsonContent] Ccm.PostSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdMoveDimensionBodyDto dto);

    /// <summary>
    /// <para>【云文档】创建电子表格</para>
    /// <para>接口ID：6969763153149476865</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>在云空间指定目录下创建电子表格。可自定义表格标题。不支持带内容创建表格。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:create</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/sheets/v3/spreadsheets")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostSheetsV3SpreadsheetsResponseDto>> PostSheetsV3SpreadsheetsAsync(
        [JsonContent] Ccm.PostSheetsV3SpreadsheetsBodyDto dto);

    /// <summary>
    /// <para>【云文档】更新筛选条件</para>
    /// <para>接口ID：6970504825797541891</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet-sheet-filter_view/spreadsheet-sheet-filter_view-condition/update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新筛选视图指定列的筛选条件，包括筛选的类型、比较类型、筛选参数等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    /// <param name="sheet_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工作表 ID，通过[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query) 获取。</para>
    /// <para>示例值：8fe9d6</para>
    /// </param>
    /// <param name="filter_view_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>筛选视图 ID。通过[查询筛选视图](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/query)获取。</para>
    /// <para>示例值：pH9hbVcCXA</para>
    /// </param>
    /// <param name="condition_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要更新的筛选视图的列的索引，用字母表示</para>
    /// <para>示例值：E</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}/sheets/{sheet_id}/filter_views/{filter_view_id}/conditions/{condition_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PutSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterViewsByFilterViewIdConditionsByConditionIdResponseDto>> PutSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterViewsByFilterViewIdConditionsByConditionIdAsync(
        [PathQuery] string spreadsheet_token,
        [PathQuery] string sheet_id,
        [PathQuery] string filter_view_id,
        [PathQuery] string condition_id,
        [JsonContent] Ccm.PutSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterViewsByFilterViewIdConditionsByConditionIdBodyDto dto);

    /// <summary>
    /// <para>【云文档】获取筛选视图</para>
    /// <para>接口ID：6970504825797558275</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet-sheet-filter_view/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取指定筛选视图的信息，包括 ID、名称和筛选范围。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    /// <param name="sheet_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工作表 ID，通过[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query) 获取。</para>
    /// <para>示例值：8fe9d6</para>
    /// </param>
    /// <param name="filter_view_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>筛选视图 ID。通过[查询筛选视图](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/query)获取。</para>
    /// <para>示例值：pH9hbVcCXA</para>
    /// </param>
    [HttpGet("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}/sheets/{sheet_id}/filter_views/{filter_view_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterViewsByFilterViewIdResponseDto>> GetSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterViewsByFilterViewIdAsync(
        [PathQuery] string spreadsheet_token,
        [PathQuery] string sheet_id,
        [PathQuery] string filter_view_id);

    /// <summary>
    /// <para>【云文档】查询筛选视图</para>
    /// <para>接口ID：6970504825797574659</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet-sheet-filter_view/query</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>查询电子表格指定工作表的所有筛选视图及其基本信息，包括视图 ID、视图名称和筛选范围。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    /// <param name="sheet_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工作表 ID，通过[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query) 获取。</para>
    /// <para>示例值：8fe9d6</para>
    /// </param>
    [HttpGet("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}/sheets/{sheet_id}/filter_views/query")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterViewsQueryResponseDto>> GetSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterViewsQueryAsync(
        [PathQuery] string spreadsheet_token,
        [PathQuery] string sheet_id);

    /// <summary>
    /// <para>【云文档】更新筛选视图</para>
    /// <para>接口ID：6970504825797591043</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet-sheet-filter_view/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新筛选视图的名称或筛选范围。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    /// <param name="sheet_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工作表 ID，通过[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query) 获取。</para>
    /// <para>示例值：8fe9d6</para>
    /// </param>
    /// <param name="filter_view_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>筛选视图 ID。通过[查询筛选视图](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/query)获取。</para>
    /// <para>示例值：pH9hbVcCXA</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}/sheets/{sheet_id}/filter_views/{filter_view_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PatchSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterViewsByFilterViewIdResponseDto>> PatchSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterViewsByFilterViewIdAsync(
        [PathQuery] string spreadsheet_token,
        [PathQuery] string sheet_id,
        [PathQuery] string filter_view_id,
        [JsonContent] Ccm.PatchSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterViewsByFilterViewIdBodyDto dto);

    /// <summary>
    /// <para>【云文档】查询筛选条件</para>
    /// <para>接口ID：6970504825797607427</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet-sheet-filter_view/spreadsheet-sheet-filter_view-condition/query</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>查询指定筛选视图的所有筛选条件，包括筛选的类型、比较类型、筛选参数等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    /// <param name="sheet_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工作表 ID，通过[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query) 获取。</para>
    /// <para>示例值：8fe9d6</para>
    /// </param>
    /// <param name="filter_view_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>筛选视图 ID。通过[查询筛选视图](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/query)获取。</para>
    /// <para>示例值：pH9hbVcCXA</para>
    /// </param>
    [HttpGet("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}/sheets/{sheet_id}/filter_views/{filter_view_id}/conditions/query")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterViewsByFilterViewIdConditionsQueryResponseDto>> GetSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterViewsByFilterViewIdConditionsQueryAsync(
        [PathQuery] string spreadsheet_token,
        [PathQuery] string sheet_id,
        [PathQuery] string filter_view_id);

    /// <summary>
    /// <para>【云文档】获取筛选条件</para>
    /// <para>接口ID：6970504825797623811</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet-sheet-filter_view/spreadsheet-sheet-filter_view-condition/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取筛选视图某列的筛选条件，包括筛选的类型、比较类型、筛选参数等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    /// <param name="sheet_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工作表 ID，通过[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query) 获取。</para>
    /// <para>示例值：8fe9d6</para>
    /// </param>
    /// <param name="filter_view_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>筛选视图 ID。通过[查询筛选视图](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/query)获取。</para>
    /// <para>示例值：pH9hbVcCXA</para>
    /// </param>
    /// <param name="condition_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要查询的筛选视图的列</para>
    /// <para>示例值：E</para>
    /// </param>
    [HttpGet("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}/sheets/{sheet_id}/filter_views/{filter_view_id}/conditions/{condition_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterViewsByFilterViewIdConditionsByConditionIdResponseDto>> GetSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterViewsByFilterViewIdConditionsByConditionIdAsync(
        [PathQuery] string spreadsheet_token,
        [PathQuery] string sheet_id,
        [PathQuery] string filter_view_id,
        [PathQuery] string condition_id);

    /// <summary>
    /// <para>【云文档】删除筛选条件</para>
    /// <para>接口ID：6970504825797640195</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet-sheet-filter_view/spreadsheet-sheet-filter_view-condition/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除筛选视图指定列的所有筛选条件。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    /// <param name="sheet_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工作表 ID，通过[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query) 获取。</para>
    /// <para>示例值：8fe9d6</para>
    /// </param>
    /// <param name="filter_view_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>筛选视图 ID。通过[查询筛选视图](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/query)获取。</para>
    /// <para>示例值：pH9hbVcCXA</para>
    /// </param>
    /// <param name="condition_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要删除所有筛选条件的列，用字母表示。</para>
    /// <para>示例值：E</para>
    /// </param>
    [HttpDelete("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}/sheets/{sheet_id}/filter_views/{filter_view_id}/conditions/{condition_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterViewsByFilterViewIdConditionsByConditionIdAsync(
        [PathQuery] string spreadsheet_token,
        [PathQuery] string sheet_id,
        [PathQuery] string filter_view_id,
        [PathQuery] string condition_id);

    /// <summary>
    /// <para>【云文档】创建筛选视图</para>
    /// <para>接口ID：6970504825797672963</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet-sheet-filter_view/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>指定电子表格工作表的筛选范围，创建一个筛选视图。</para>
    /// <para>## 使用限制</para>
    /// <para>单个工作表中的筛选视图数量不得超过 150 个。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    /// <param name="sheet_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工作表 ID，通过[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query) 获取。</para>
    /// <para>示例值：8fe9d6</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}/sheets/{sheet_id}/filter_views")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterViewsResponseDto>> PostSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterViewsAsync(
        [PathQuery] string spreadsheet_token,
        [PathQuery] string sheet_id,
        [JsonContent] Ccm.PostSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterViewsBodyDto dto);

    /// <summary>
    /// <para>【云文档】删除筛选视图</para>
    /// <para>接口ID：6970504825797689347</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet-sheet-filter_view/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除指定筛选视图。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    /// <param name="sheet_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工作表 ID，通过[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query) 获取。</para>
    /// <para>示例值：8fe9d6</para>
    /// </param>
    /// <param name="filter_view_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>筛选视图 ID。通过[查询筛选视图](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/query)获取。</para>
    /// <para>示例值：pH9hbVcCXA</para>
    /// </param>
    [HttpDelete("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}/sheets/{sheet_id}/filter_views/{filter_view_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterViewsByFilterViewIdAsync(
        [PathQuery] string spreadsheet_token,
        [PathQuery] string sheet_id,
        [PathQuery] string filter_view_id);

    /// <summary>
    /// <para>【云文档】创建筛选条件</para>
    /// <para>接口ID：6970504825797705731</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet-sheet-filter_view/spreadsheet-sheet-filter_view-condition/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>在筛选视图的指定列创建筛选条件，包括筛选的类型、比较类型、筛选参数等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    /// <param name="sheet_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工作表 ID，通过[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query) 获取。</para>
    /// <para>示例值：8fe9d6</para>
    /// </param>
    /// <param name="filter_view_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>筛选视图 ID。通过[查询筛选视图](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/query)获取。</para>
    /// <para>示例值：pH9hbVcCXA</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}/sheets/{sheet_id}/filter_views/{filter_view_id}/conditions")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterViewsByFilterViewIdConditionsResponseDto>> PostSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterViewsByFilterViewIdConditionsAsync(
        [PathQuery] string spreadsheet_token,
        [PathQuery] string sheet_id,
        [PathQuery] string filter_view_id,
        [JsonContent] Ccm.PostSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFilterViewsByFilterViewIdConditionsBodyDto dto);

    /// <summary>
    /// <para>【云文档】创建浮动图片</para>
    /// <para>接口ID：6976178542817230851</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet-sheet-float_image/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>在电子表格工作表的指定位置创建一张浮动图片。</para>
    /// <para>## 前提条件</para>
    /// <para>你已调用[上传素材](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_all)或[分片上传素材](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_prepare)上传图片至表格并获取了图片的 `file_token`，作为本接口中图片的 `float_image_token`。</para>
    /// <para>## 使用限制</para>
    /// <para>- 图片大小不得超过 20 MB。</para>
    /// <para>- 单个电子表格最多支持放置 4,000 张不同 token 的图片，即表格内不重复的图片（包括浮动图片和单元格图片）总数不超过 4,000 张。将相同 token 的图片多次放置在表格的不同位置，数量上仅算一张图片。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:write_only</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    /// <param name="sheet_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格工作表的 ID。调用[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query)获取 ID。</para>
    /// <para>示例值：0beg12</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}/sheets/{sheet_id}/float_images")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFloatImagesResponseDto>> PostSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFloatImagesAsync(
        [PathQuery] string spreadsheet_token,
        [PathQuery] string sheet_id,
        [JsonContent] Ccm.PostSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFloatImagesBodyDto dto);

    /// <summary>
    /// <para>【云文档】获取浮动图片</para>
    /// <para>接口ID：6976178542817247235</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet-sheet-float_image/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取电子表格工作表内指定浮动图片的参数信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:read</item>
    /// <item>sheets:spreadsheet:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    /// <param name="sheet_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格工作表的 ID。调用[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query)获取 ID。</para>
    /// <para>示例值：0beg12</para>
    /// </param>
    /// <param name="float_image_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工作表内浮动图片的唯一标识。通过[查询浮动图片](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/query)接口获取。</para>
    /// <para>示例值：ye06SS14ph</para>
    /// </param>
    [HttpGet("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}/sheets/{sheet_id}/float_images/{float_image_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFloatImagesByFloatImageIdResponseDto>> GetSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFloatImagesByFloatImageIdAsync(
        [PathQuery] string spreadsheet_token,
        [PathQuery] string sheet_id,
        [PathQuery] string float_image_id);

    /// <summary>
    /// <para>【云文档】查询浮动图片</para>
    /// <para>接口ID：6976178542817263619</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet-sheet-float_image/query</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取电子表格工作表内所有的浮动图片的参数信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:read</item>
    /// <item>sheets:spreadsheet:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    /// <param name="sheet_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格工作表的 ID。调用[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query)获取 ID。</para>
    /// <para>示例值：0beg12</para>
    /// </param>
    [HttpGet("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}/sheets/{sheet_id}/float_images/query")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFloatImagesQueryResponseDto>> GetSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFloatImagesQueryAsync(
        [PathQuery] string spreadsheet_token,
        [PathQuery] string sheet_id);

    /// <summary>
    /// <para>【云文档】更新浮动图片</para>
    /// <para>接口ID：6976178542817280003</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet-sheet-float_image/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新已有的浮动图片位置和宽高。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:write_only</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    /// <param name="sheet_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格工作表的 ID。调用[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query)获取 ID。</para>
    /// <para>示例值：0beg12</para>
    /// </param>
    /// <param name="float_image_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工作表内浮动图片的唯一标识。通过[查询浮动图片](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/query)接口获取。</para>
    /// <para>示例值：ye06SS14ph</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}/sheets/{sheet_id}/float_images/{float_image_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PatchSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFloatImagesByFloatImageIdResponseDto>> PatchSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFloatImagesByFloatImageIdAsync(
        [PathQuery] string spreadsheet_token,
        [PathQuery] string sheet_id,
        [PathQuery] string float_image_id,
        [JsonContent] Ccm.PatchSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFloatImagesByFloatImageIdBodyDto dto);

    /// <summary>
    /// <para>【云文档】删除浮动图片</para>
    /// <para>接口ID：6976178542817296387</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet-sheet-float_image/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除电子表格工作表内指定的浮动图片。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:write_only</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    /// <param name="sheet_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格工作表的 ID。调用[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query)获取 ID。</para>
    /// <para>示例值：0beg12</para>
    /// </param>
    /// <param name="float_image_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工作表内浮动图片的唯一标识。通过[查询浮动图片](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/query)接口获取。</para>
    /// <para>示例值：ye06SS14ph</para>
    /// </param>
    [HttpDelete("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}/sheets/{sheet_id}/float_images/{float_image_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFloatImagesByFloatImageIdAsync(
        [PathQuery] string spreadsheet_token,
        [PathQuery] string sheet_id,
        [PathQuery] string float_image_id);

    /// <summary>
    /// <para>【多维表格】列出视图</para>
    /// <para>接口ID：6978670625209597954</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table-view/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取多维表格数据表中的所有视图。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:view:read</item>
    /// <item>bitable:app</item>
    /// <item>bitable:app:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="table_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格数据表的唯一标识。获取方式：</para>
    /// <para>- 你可通过多维表格 URL 获取 `table_id`，下图高亮部分即为当前数据表的 `table_id`</para>
    /// <para>- 也可通过[列出数据表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list)接口获取 `table_id`</para>
    /// <para>![](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/18741fe2a0d3cafafaf9949b263bb57d_yD1wkOrSju.png?height=746&amp;lazyload=true&amp;maxWidth=700&amp;width=2976)</para>
    /// <para>示例值：tblsRc9GRRXKqhvW</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：vewTpR1urY</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/bitable/v1/apps/{app_token}/tables/{table_id}/views")]
    System.Threading.Tasks.Task<FeishuResponse<Base.GetBitableV1AppsByAppTokenTablesByTableIdViewsResponseDto>> GetBitableV1AppsByAppTokenTablesByTableIdViewsAsync(
        [PathQuery] string app_token,
        [PathQuery] string table_id,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【多维表格】新增视图</para>
    /// <para>接口ID：6978670625209614338</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table-view/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>在多维表格数据表中新增一个视图，可指定视图类型，包括表格视图、看板视图、画册视图、甘特视图和表单视图。</para>
    /// <para>## 使用限制</para>
    /// <para>视图最大支持数量为 200，包括公共视图、锁定视图和个人视图。因此个人在多维表格中看到的视图数量可能仅是部分视图。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:view:write_only</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="table_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格数据表的唯一标识。获取方式：</para>
    /// <para>- 你可通过多维表格 URL 获取 `table_id`，下图高亮部分即为当前数据表的 `table_id`</para>
    /// <para>- 也可通过[列出数据表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list)接口获取 `table_id`</para>
    /// <para>![](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/18741fe2a0d3cafafaf9949b263bb57d_yD1wkOrSju.png?height=746&amp;lazyload=true&amp;maxWidth=700&amp;width=2976)</para>
    /// <para>示例值：tblsRc9GRRXKqhvW</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/bitable/v1/apps/{app_token}/tables/{table_id}/views")]
    System.Threading.Tasks.Task<FeishuResponse<Base.PostBitableV1AppsByAppTokenTablesByTableIdViewsResponseDto>> PostBitableV1AppsByAppTokenTablesByTableIdViewsAsync(
        [PathQuery] string app_token,
        [PathQuery] string table_id,
        [JsonContent] Base.PostBitableV1AppsByAppTokenTablesByTableIdViewsBodyDto dto);

    /// <summary>
    /// <para>【多维表格】删除视图</para>
    /// <para>接口ID：6978670625209630722</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table-view/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除多维表格数据表中的指定视图。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:view:write_only</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="table_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格数据表的唯一标识。获取方式：</para>
    /// <para>- 你可通过多维表格 URL 获取 `table_id`，下图高亮部分即为当前数据表的 `table_id`</para>
    /// <para>- 也可通过[列出数据表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list)接口获取 `table_id`</para>
    /// <para>![](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/18741fe2a0d3cafafaf9949b263bb57d_yD1wkOrSju.png?height=746&amp;lazyload=true&amp;maxWidth=700&amp;width=2976)</para>
    /// <para>示例值：tblsRc9GRRXKqhvW</para>
    /// </param>
    /// <param name="view_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格中视图的唯一标识。获取方式：</para>
    /// <para>- 在多维表格的 URL 地址栏中，`view_id` 是下图中高亮部分：</para>
    /// <para>![view_id.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/140668632c97e0095832219001d17c54_DJMgVH9x2S.png?height=748&amp;lazyload=true&amp;width=2998)</para>
    /// <para>- 通过[列出视图](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/list)接口获取。暂时无法获取到嵌入到云文档中的多维表格的 `view_id`。</para>
    /// <para>**注意**：</para>
    /// <para>当 `filter` 参数 或 `sort` 参数不为空时，请求视为对数据表中的全部数据做条件过滤，指定的 `view_id` 会被忽略。</para>
    /// <para>示例值：vewTpR1urY</para>
    /// </param>
    [HttpDelete("/open-apis/bitable/v1/apps/{app_token}/tables/{table_id}/views/{view_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteBitableV1AppsByAppTokenTablesByTableIdViewsByViewIdAsync(
        [PathQuery] string app_token,
        [PathQuery] string table_id,
        [PathQuery] string view_id);

    /// <summary>
    /// <para>【云文档】删除Sheet</para>
    /// <para>接口ID：6979502797244153859</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/docs/drive/file/delete-sheet</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>为了更好地提升该接口的安全性，我们对其进行了升级，请尽快迁移至 [新版本&gt;&gt;](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/delete)</para>
    /// <para>该接口用于根据 spreadsheetToken 删除对应的 sheet 文档。</para>
    /// <para>文档只能被文档所有者删除，文档被删除后将会放到回收站里</para>
    /// <para>该接口不支持并发调用，且调用频率上限为5QPS</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheetToken">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>spreadsheet 的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction)</para>
    /// </param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/delete")]
    [HttpDelete("/open-apis/drive/explorer/v2/file/spreadsheets/{spreadsheetToken}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.DeleteDriveExplorerV2FileSpreadsheetsBySpreadsheetTokenResponseDto>> DeleteDriveExplorerV2FileSpreadsheetsBySpreadsheetTokenAsync(
        [PathQuery] string spreadsheetToken);

    /// <summary>
    /// <para>【云文档】获取我的空间（root folder）元数据</para>
    /// <para>接口ID：6979502797244170243</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/folder/get-root-folder-meta</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于获取用户“我的空间”（root folder）的元数据，包括文件夹的 token、ID 和文件夹所有者的 ID。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:drive.metadata:readonly</item>
    /// </list></para>
    /// </summary>
    [HttpGet("/open-apis/drive/explorer/v2/root_folder/meta")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.Spec.GetDriveExplorerV2RootFolderMetaResponseDto>> GetDriveExplorerV2RootFolderMetaAsync();

    /// <summary>
    /// <para>【云文档】分片上传文件-完成上传</para>
    /// <para>接口ID：6979562676003766300</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/upload/multipart-upload-file-/upload_finish</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用[上传分片](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_part)接口将分片全部上传完毕后，你需调用本接口触发完成上传。否则将上传失败。了解完整的上传文件流程，参考[上传文件概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/multipart-upload-file-/introduction)。</para>
    /// <para>## 使用限制</para>
    /// <para>该接口不支持并发调用，且调用频率上限为 5 QPS，10000 次/天。否则会返回 1061045 错误码，可通过稍后重试解决。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:file</item>
    /// <item>drive:file:upload</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/drive/v1/files/upload_finish")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostDriveV1FilesUploadFinishResponseDto>> PostDriveV1FilesUploadFinishAsync(
        [JsonContent] Ccm.PostDriveV1FilesUploadFinishBodyDto dto);

    /// <summary>
    /// <para>【云文档】分片上传文件-预上传</para>
    /// <para>接口ID：6979562676003815452</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/upload/multipart-upload-file-/upload_prepare</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>发送初始化请求，以获取上传事务 ID 和分片策略，为[上传分片](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_part)做准备。平台固定以 4MB 的大小对文件进行分片。了解完整的上传文件流程，参考[上传文件概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/multipart-upload-file-/introduction)。</para>
    /// <para>## 注意事项</para>
    /// <para>上传事务 ID 和上传进度在 24 小时内有效。请及时保存和恢复上传。</para>
    /// <para>## 使用限制</para>
    /// <para>- 该接口不支持并发调用，且调用频率上限为 5 QPS，10000 次/天。否则会返回 1061045 错误码，可通过稍后重试解决。</para>
    /// <para>- 上传文件的大小限制因飞书版本而异，详情参考[文件上传、在线预览的大小及格式要求](https://www.feishu.cn/hc/zh-CN/articles/360049067549-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E5%9C%A8%E7%BA%BF%E9%A2%84%E8%A7%88%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%8F%8A%E6%A0%BC%E5%BC%8F%E8%A6%81%E6%B1%82)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:file</item>
    /// <item>drive:file:upload</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/drive/v1/files/upload_prepare")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostDriveV1FilesUploadPrepareResponseDto>> PostDriveV1FilesUploadPrepareAsync(
        [JsonContent] Ccm.PostDriveV1FilesUploadPrepareBodyDto dto);

    /// <summary>
    /// <para>【云文档】上传素材</para>
    /// <para>接口ID：6979562676003831836</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/media/upload_all</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>将文件、图片、视频等素材上传到指定云文档中。素材将显示在对应云文档中，在云空间中不会显示。</para>
    /// <para>## 使用限制</para>
    /// <para>- 素材大小不得超过 20 MB。要上传大于 20 MB 的文件，你需使用分片上传素材相关接口。详情参考[素材概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/introduction)。</para>
    /// <para>- 该接口调用频率上限为 5 QPS，10000 次/天。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>bitable:app</item>
    /// <item>docs:doc</item>
    /// <item>docs:document.media:upload</item>
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>文件的二进制内容</para>
    /// </param>
    [HttpPost("/open-apis/drive/v1/medias/upload_all")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostDriveV1MediasUploadAllResponseDto>> PostDriveV1MediasUploadAllAsync(
        [FormDataContent] Ccm.PostDriveV1MediasUploadAllBodyDto dto,
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【云文档】分片上传素材-预上传</para>
    /// <para>接口ID：6979562676003848220</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/media/multipart-upload-media/upload_prepare</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>发送初始化请求，以获取上传事务 ID 和分片策略，为[上传素材分片](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_part)做准备。平台固定以 4MB 的大小对素材进行分片。了解完整的分片上传素材流程，参考[素材概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/introduction)。</para>
    /// <para>## 注意事项</para>
    /// <para>上传事务 ID 和上传进度在 24 小时内有效。请及时保存和恢复上传。</para>
    /// <para>## 使用限制</para>
    /// <para>该接口调用频率上限为 5 QPS，10000 次/天。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>bitable:app</item>
    /// <item>docs:doc</item>
    /// <item>docs:document.media:upload</item>
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/drive/v1/medias/upload_prepare")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostDriveV1MediasUploadPrepareResponseDto>> PostDriveV1MediasUploadPrepareAsync(
        [JsonContent] Ccm.PostDriveV1MediasUploadPrepareBodyDto dto);

    /// <summary>
    /// <para>【云文档】上传文件</para>
    /// <para>接口ID：6979562676003864604</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/upload/upload_all</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>将指定文件上传至云空间指定目录中。</para>
    /// <para>## 使用限制</para>
    /// <para>- 文件大小不得超过 20 MB，且不可上传空文件。要上传大于 20 MB 的文件，你需使用分片上传文件相关接口。详情参考[上传文件概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/multipart-upload-file-/introduction)。</para>
    /// <para>- 该接口调用频率上限为 5 QPS，10000 次/天。否则会返回 1061045 错误码，可通过稍后重试解决。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:file</item>
    /// <item>drive:file:upload</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>文件的二进制内容</para>
    /// </param>
    [HttpPost("/open-apis/drive/v1/files/upload_all")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostDriveV1FilesUploadAllResponseDto>> PostDriveV1FilesUploadAllAsync(
        [FormDataContent] Ccm.PostDriveV1FilesUploadAllBodyDto dto,
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【云文档】分片上传素材-完成上传</para>
    /// <para>接口ID：6979562676003880988</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/media/multipart-upload-media/upload_finish</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用[上传分片](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_part)接口将分片全部上传完毕后，你需调用本接口触发完成上传。了解完整的分片上传素材流程，参考[素材概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/introduction)。</para>
    /// <para>## 使用限制</para>
    /// <para>该接口调用频率上限为 5 QPS，10000 次/天。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>bitable:app</item>
    /// <item>docs:doc</item>
    /// <item>docs:document.media:upload</item>
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/drive/v1/medias/upload_finish")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostDriveV1MediasUploadFinishResponseDto>> PostDriveV1MediasUploadFinishAsync(
        [JsonContent] Ccm.PostDriveV1MediasUploadFinishBodyDto dto);

    /// <summary>
    /// <para>【云文档】获取素材临时下载链接</para>
    /// <para>接口ID：6979562676003897372</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/media/batch_get_tmp_download_url</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于获取云文档中素材的临时下载链接。链接的有效期为 24 小时，过期失效。</para>
    /// <para>## 前提条件</para>
    /// <para>调用此接口之前，你需确保应用已拥有素材的下载权限。否则接口将返回 403 的 HTTP 状态码。参考[云空间常见问题](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/faq)第 3 点了解如何分享素材的下载权限给应用。更多云文档接口权限问题，参考[云文档常见问题](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)。</para>
    /// <para>## 注意事项</para>
    /// <para>本接口仅支持下载云文档而非云空间中的资源文件。如要下载云空间中的资源文件，需调用[下载文件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/download)接口。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>bitable:app</item>
    /// <item>bitable:app:readonly</item>
    /// <item>docs:doc</item>
    /// <item>docs:doc:readonly</item>
    /// <item>docs:document.media:download</item>
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_tokens">
    /// <para>必填：是</para>
    /// <para>素材文件的 token。获取方式如下所示：</para>
    /// <para>* 新版文档：通过[获取文档所有块](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block/list)接口获取指定文件块（File Block）或图片块（Image Block）的 token，即为素材 token。</para>
    /// <para>* 电子表格：通过[读取多个范围](https://open.feishu.cn/document/ukTMukTMukTM/ukTMzUjL5EzM14SOxMTN)接口获取指定附件的</para>
    /// <para>`fileToken`，即为素材的 token。</para>
    /// <para>* 多维表格：通过[列出记录](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/list)接口获取指定附件的 `file_token`，即为素材的 token。</para>
    /// <para>如需一次获取多个素材的下载链接，可多次传递本参数及素材的 token 值，格式如下：</para>
    /// <para>`https://{url}?file_tokens={token1}&amp;file_tokens={token2}`</para>
    /// <para>其中：</para>
    /// <para>- `file_tokens` 是参数名，可以多次传递</para>
    /// <para>- `token1` 和 `token2` 为素材的实际 token 值</para>
    /// <para>- 一次最多可传递 5 个素材的 token，但在 API 调试台仅支持传一个 token</para>
    /// <para>示例值：boxcnrHpsg1QDqXAAAyachabcef</para>
    /// </param>
    /// <param name="extra">
    /// <para>必填：否</para>
    /// <para>拓展信息，如拥有高级权限的多维表格在下载素材时，需要添加额外的扩展信息作为 URL 查询参数鉴权。详情参考[extra 参数说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/introduction)。未正确填写该参数的接口将返回 403 的 HTTP 状态码。</para>
    /// <para>示例值：请参考 [extra 参数说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/introduction)</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/drive/v1/medias/batch_get_tmp_download_url")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDriveV1MediasBatchGetTmpDownloadUrlResponseDto>> GetDriveV1MediasBatchGetTmpDownloadUrlAsync(
        [PathQuery] string[] file_tokens,
        [PathQuery] string? extra = null);

    /// <summary>
    /// <para>【云文档】下载素材</para>
    /// <para>接口ID：6979562676003913756</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/media/download</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>下载各类云文档中的素材，例如电子表格中的图片。该接口支持通过在请求头添加`Range` 参数分片下载素材。</para>
    /// <para>## 前提条件</para>
    /// <para>调用此接口之前，你需确保应用已拥有素材的下载权限。否则接口将返回 403 的 HTTP 状态码。参考[云空间常见问题](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/faq)第 3 点了解如何分享素材的下载权限给应用。更多云文档接口权限问题，参考[云文档常见问题](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)。</para>
    /// <para>## 注意事项</para>
    /// <para>本接口仅支持下载云文档而非云空间中的资源文件。如要下载云空间中的资源文件，需调用[下载文件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/download)接口。</para>
    /// <para>## 使用限制</para>
    /// <para>该接口调用频率上限为 5 QPS，10000 次/天。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>bitable:app</item>
    /// <item>bitable:app:readonly</item>
    /// <item>docs:doc</item>
    /// <item>docs:doc:readonly</item>
    /// <item>docs:document.media:download</item>
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="range">
    /// <para>通过指定 HTTP 请求头的Range来下载素材的部分内容，单位是byte，即字节。</para>
    /// <para>Range格式为Range: bytes=start-end，例如Range: bytes=0-1024，表示下载第 0 个字节到第 1024 个字节之间的数据。</para>
    /// </param>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>素材文件的 token。获取方式如下所示：</para>
    /// <para>* 新版文档：通过[获取文档所有块](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block/list)接口获取指定文件块（File Block）或图片块（Image Block）的 token，即为素材的 token。</para>
    /// <para>* 电子表格：通过[读取多个范围](https://open.feishu.cn/document/ukTMukTMukTM/ukTMzUjL5EzM14SOxMTN)接口获取指定附件的</para>
    /// <para>`fileToken` 参数，即为素材的 token。</para>
    /// <para>* 多维表格：通过[查询记录](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/search)接口获取指定附件的 `file_token`，即为素材的 token。</para>
    /// <para>示例值：boxcnrHpsg1QDqXAAAyachabcef</para>
    /// </param>
    /// <param name="extra">
    /// <para>必填：否</para>
    /// <para>拥有高级权限的多维表格在下载素材时，需要添加额外的扩展信息作为 URL 查询参数鉴权。详情参考[素材概述-extra 参数说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/introduction)。</para>
    /// <para>示例值：无</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <returns>返回文件二进制流</returns>
    [HttpGet("/open-apis/drive/v1/medias/{file_token}/download")]
    System.Threading.Tasks.Task<HttpResponseMessage> GetDriveV1MediasByFileTokenDownloadAsync(
        [PathQuery] string file_token,
        [Header][AliasAs("Range")] string? range = null,
        [PathQuery] string? extra = null);

    /// <summary>
    /// <para>【云文档】分片上传文件-上传分片</para>
    /// <para>接口ID：6979562676003930140</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/upload/multipart-upload-file-/upload_part</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据 [预上传](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_prepare)接口返回的上传事务 ID 和分片策略上传对应的文件分片。上传完成后，你需调用[分片上传文件（完成上传）](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_finish)触发完成上传。了解完整的上传文件流程，参考[分片上传文件概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/multipart-upload-file-/introduction)。</para>
    /// <para>## 使用限制</para>
    /// <para>该接口不支持并发调用，且调用频率上限为 5 QPS，10000 次/天。否则会返回 1061045 错误码，可通过稍后重试解决。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:file</item>
    /// <item>drive:file:upload</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>文件分片的二进制内容</para>
    /// </param>
    [HttpPost("/open-apis/drive/v1/files/upload_part")]
    System.Threading.Tasks.Task<FeishuResponse> PostDriveV1FilesUploadPartAsync(
        [FormDataContent] Ccm.PostDriveV1FilesUploadPartBodyDto dto,
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【云文档】下载文件</para>
    /// <para>接口ID：6979562676003946524</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/download/download</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>下载云空间中的文件，如 PDF 文件。不包含飞书文档、电子表格以及多维表格等在线文档。该接口支持通过在请求头添加 `Range` 参数分片下载部分文件。</para>
    /// <para>## 前提条件</para>
    /// <para>调用此接口之前，你需确保应用已拥有文件的下载权限。否则接口将返回 403 的 HTTP 状态码。参考[云空间常见问题](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/faq)第五点了解如何分享文件的下载权限给应用。更多云文档接口权限问题，参考[云文档常见问题](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)。</para>
    /// <para>## 注意事项</para>
    /// <para>本接口仅支持下载云空间中的资源文件。要下载云文档中的素材（如图片、附件等），需调用[下载素材](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/download)接口。</para>
    /// <para>## 使用限制</para>
    /// <para>该接口调用频率上限为 5 QPS，10000 次/天。否则会返回 1061045 错误码，可通过稍后重试解决。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>drive:file</item>
    /// <item>drive:file:download</item>
    /// <item>drive:file:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="range">
    /// <para>通过指定 HTTP 请求头的Range来下载素材的部分内容，单位是byte，即字节。</para>
    /// <para>Range格式为Range: bytes=start-end，例如Range: bytes=0-1024，表示下载第 0 个字节到第 1024 个字节之间的数据。</para>
    /// </param>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文件的 token，获取方式见[文件概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/file-overview)。</para>
    /// <para>示例值：boxcnabCdefgabcef</para>
    /// </param>
    /// <returns>返回文件二进制流</returns>
    [HttpGet("/open-apis/drive/v1/files/{file_token}/download")]
    System.Threading.Tasks.Task<HttpResponseMessage> GetDriveV1FilesByFileTokenDownloadAsync(
        [PathQuery] string file_token,
        [Header][AliasAs("Range")] string? range = null);

    /// <summary>
    /// <para>【云文档】分片上传素材-上传分片</para>
    /// <para>接口ID：6979562676003979292</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/media/multipart-upload-media/upload_part</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据 [预上传](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_prepare)接口返回的上传事务 ID 和分片策略上传对应的素材分片。上传完成后，你可调用 [分片上传素材（完成上传）](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_finish)触发完成上传。</para>
    /// <para>## 使用限制</para>
    /// <para>该接口调用频率上限为 5 QPS，10000 次/天。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>bitable:app</item>
    /// <item>docs:doc</item>
    /// <item>docs:document.media:upload</item>
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>素材文件分片的二进制内容</para>
    /// </param>
    [HttpPost("/open-apis/drive/v1/medias/upload_part")]
    System.Threading.Tasks.Task<FeishuResponse> PostDriveV1MediasUploadPartAsync(
        [FormDataContent] Ccm.PostDriveV1MediasUploadPartBodyDto dto,
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【智能门禁】修改用户部分信息</para>
    /// <para>接口ID：6979790924691963906</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/acs-v1/user/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>飞书智能门禁在人脸识别成功后会有韦根信号输出，输出用户的卡号。</para>
    /// <para>对于使用韦根协议的门禁系统，企业可使用该接口录入用户卡号。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>acs:users</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户 ID</para>
    /// <para>**示例值**："ou_7dab8a3d3cdcc9da365777c7ad535d62"</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>**示例值**："open_id"</para>
    /// <para>**可选值有**：</para>
    /// <para>open_id:标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid),union_id:标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id),user_id:标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</para>
    /// <para>**默认值**：`open_id`</para>
    /// <para>**当值为 `user_id`，字段权限要求**：</para>
    /// <para>- contact:user.employee_id:readonly : 获取用户 user ID</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](/ssl</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](/ssl</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](/ssl</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/acs/v1/users/{user_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PatchAcsV1UsersByUserIdAsync(
        [PathQuery] string user_id,
        [JsonContent] Acs.Spec.PatchAcsV1UsersByUserIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【智能门禁】获取门禁设备列表</para>
    /// <para>接口ID：6979790924691980290</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/acs-v1/device/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>使用该接口获取租户内所有门禁设备。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>acs:devices:readonly</item>
    /// </list></para>
    /// </summary>
    [HttpGet("/open-apis/acs/v1/devices")]
    System.Threading.Tasks.Task<FeishuResponse<Acs.Spec.GetAcsV1DevicesResponseDto>> GetAcsV1DevicesAsync();

    /// <summary>
    /// <para>【智能门禁】获取门禁记录列表</para>
    /// <para>接口ID：6979790924691996674</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/acs-v1/access_record/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>用户在门禁考勤机上成功开门或打卡后，智能门禁应用都会生成一条门禁记录。</para>
    /// <para>该接口返回满足查询参数的识别记录。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>acs:access_record:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>**示例值**：100</para>
    /// <para>**默认值**：`100`</para>
    /// <para>**数据校验规则**：</para>
    /// <para>- 最大值：`500`</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>**示例值**："AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw="</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="from">
    /// <para>必填：是</para>
    /// <para>记录开始时间，单位秒</para>
    /// <para>**示例值**：1624520521</para>
    /// </param>
    /// <param name="to">
    /// <para>必填：是</para>
    /// <para>记录结束时间，单位秒</para>
    /// <para>时间跨度不能超过30天</para>
    /// <para>**示例值**：1624520521</para>
    /// </param>
    /// <param name="device_id">
    /// <para>必填：否</para>
    /// <para>门禁设备 ID</para>
    /// <para>**示例值**："7091146989218002577"</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>**示例值**："open_id"</para>
    /// <para>**可选值有**：</para>
    /// <para>open_id:标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid),union_id:标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id),user_id:标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</para>
    /// <para>**默认值**：`open_id`</para>
    /// <para>**当值为 `user_id`，字段权限要求**：</para>
    /// <para>- contact:user.employee_id:readonly : 获取用户 user ID</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](/ssl</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](/ssl</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](/ssl</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/acs/v1/access_records")]
    System.Threading.Tasks.Task<FeishuResponse<Acs.Spec.GetAcsV1AccessRecordsResponseDto>> GetAcsV1AccessRecordsAsync(
        [PathQuery] int from,
        [PathQuery] int to,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? device_id = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【智能门禁】下载开门时的人脸识别图片</para>
    /// <para>接口ID：6979790924692029442</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/acs-v1/access_record/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>用户在门禁考勤机上成功开门或打卡后，智能门禁应用都会生成一条门禁记录，对于使用人脸识别方式进行开门的识别记录，还会有抓拍图。</para>
    /// <para>可以用该接口下载开门时的人脸识别照片。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>acs:users</item>
    /// </list></para>
    /// </summary>
    /// <param name="access_record_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>门禁访问记录 ID</para>
    /// <para>**示例值**："6939433228970082591"</para>
    /// </param>
    /// <returns>返回文件二进制流</returns>
    [HttpGet("/open-apis/acs/v1/access_records/{access_record_id}/access_photo")]
    System.Threading.Tasks.Task<HttpResponseMessage> GetAcsV1AccessRecordsByAccessRecordIdAccessPhotoAsync(
        [PathQuery] string access_record_id);

    /// <summary>
    /// <para>【云文档】查找单元格</para>
    /// <para>接口ID：6982374372208590850</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/data-operation/find</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>在指定范围内查找符合查找条件的单元格。</para>
    /// <para>## 注意事项</para>
    /// <para>请求参数 `range` 所指定的范围不可大于实际数据区域，否则将报错。例如，当工作表只有 200 行、而 `range` 参数的范围为 1 到 201 行时，接口将返回 1310202 错误码。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    /// <param name="sheet_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工作表的 ID，获取方式见[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query)。</para>
    /// <para>示例值：PNIfrm</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}/sheets/{sheet_id}/find")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFindResponseDto>> PostSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFindAsync(
        [PathQuery] string spreadsheet_token,
        [PathQuery] string sheet_id,
        [JsonContent] Ccm.PostSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdFindBodyDto dto);

    /// <summary>
    /// <para>【云文档】替换单元格</para>
    /// <para>接口ID：6982374372208607234</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/data-operation/replace</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>在指定范围内，查找并替换符合查找条件的单元格。</para>
    /// <para>## 使用限制</para>
    /// <para>单次最多可替换 5,000 个单元格。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    /// <param name="sheet_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工作表的 ID，获取方式见[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query)。</para>
    /// <para>示例值：PNIfrm</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}/sheets/{sheet_id}/replace")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdReplaceResponseDto>> PostSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdReplaceAsync(
        [PathQuery] string spreadsheet_token,
        [PathQuery] string sheet_id,
        [JsonContent] Ccm.PostSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdReplaceBodyDto dto);

    /// <summary>
    /// <para>【通讯录】更新人员类型</para>
    /// <para>接口ID：6985055606752460828</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/employee_type_enum/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口更新指定的自定义人员类型信息。</para>
    /// <para>## 注意事项</para>
    /// <para>仅支持更新自定义的人员类型。默认包含的正式、实习、外包、劳务、顾问五个选项不支持更新。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact</item>
    /// </list></para>
    /// </summary>
    /// <param name="enum_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>自定义人员类型的选项 ID。你可以在新建人员类型时从返回值中获取，你也可以调用[查询人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list)接口，获取选项的 ID。</para>
    /// <para>示例值：exGeIjow7zIqWMy+ONkFxA==</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/contact/v3/employee_type_enums/{enum_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.PutContactV3EmployeeTypeEnumsByEnumIdResponseDto>> PutContactV3EmployeeTypeEnumsByEnumIdAsync(
        [PathQuery] string enum_id,
        [JsonContent] Contact.PutContactV3EmployeeTypeEnumsByEnumIdBodyDto dto);

    /// <summary>
    /// <para>【通讯录】删除人员类型</para>
    /// <para>接口ID：6985055606752477212</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/employee_type_enum/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口删除指定的自定义人员类型。</para>
    /// <para>## 注意事项</para>
    /// <para>仅支持删除自定义的人员类型。默认包含的正式、实习、外包、劳务、顾问五个选项不支持删除。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact</item>
    /// </list></para>
    /// </summary>
    /// <param name="enum_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>自定义人员类型的选项 ID。你可以在新建人员类型时从返回值中获取，你也可以调用[查询人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list)接口，获取选项的 ID。</para>
    /// <para>示例值：exGeIjow7zIqWMy+ONkFxA==</para>
    /// </param>
    [HttpDelete("/open-apis/contact/v3/employee_type_enums/{enum_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteContactV3EmployeeTypeEnumsByEnumIdAsync(
        [PathQuery] string enum_id);

    /// <summary>
    /// <para>【通讯录】查询人员类型</para>
    /// <para>接口ID：6985055606752559132</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/employee_type_enum/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口查询当前租户下所有的人员类型信息，包括选项 ID、类型、编号以及内容等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:contact.base:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：3</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，用于限制一次请求返回的条目数。</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/employee_type_enums")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3EmployeeTypeEnumsResponseDto>> GetContactV3EmployeeTypeEnumsAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【通讯录】新增人员类型</para>
    /// <para>接口ID：6985055606752575516</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/employee_type_enum/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口新增一个自定义的人员类型。人员类型是用户属性之一，用于灵活标记用户的身份类型。</para>
    /// <para>## 使用限制</para>
    /// <para>自定义的人员类型数量上限为 255，其中创建后又删除的自定义人员类型也会计入数量限制内。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/contact/v3/employee_type_enums")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.PostContactV3EmployeeTypeEnumsResponseDto>> PostContactV3EmployeeTypeEnumsAsync(
        [JsonContent] Contact.PostContactV3EmployeeTypeEnumsBodyDto dto);

    /// <summary>
    /// <para>【任务】获取关注人列表</para>
    /// <para>接口ID：6985127383322165250</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/task-v1/task-follower/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于查询任务关注人列表，支持分页，最大值为50。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task</item>
    /// <item>task:task:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务 ID</para>
    /// <para>**示例值**："0d38e26e-190a-49e9-93a2-35067763ed1f"</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>**示例值**：10</para>
    /// <para>**数据校验规则**：</para>
    /// <para>- 最大值：`50`</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>**示例值**："「上次返回的page_token」"</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>**示例值**："open_id"</para>
    /// <para>**可选值有**：</para>
    /// <para>open_id:标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid),union_id:标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id),user_id:标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</para>
    /// <para>**默认值**：`open_id`</para>
    /// <para>**当值为 `user_id`，字段权限要求**：</para>
    /// <para>- contact:user.employee_id:readonly : 获取用户 user ID</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](/ssl</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](/ssl</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](/ssl</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/task/v1/tasks/{task_id}/followers")]
    System.Threading.Tasks.Task<FeishuResponse<Task.Spec.GetTaskV1TasksByTaskIdFollowersResponseDto>> GetTaskV1TasksByTaskIdFollowersAsync(
        [PathQuery] string task_id,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】新增关注人</para>
    /// <para>接口ID：6985127383322181634</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/task-v1/task-follower/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于新增任务关注人。可以一次性添加多位关注人。关注人ID要使用表示用户的ID。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务 ID</para>
    /// <para>示例值：83912691-2e43-47fc-94a4-d512e03984fa</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v1/tasks/{task_id}/followers")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV1TasksByTaskIdFollowersResponseDto>> PostTaskV1TasksByTaskIdFollowersAsync(
        [PathQuery] string task_id,
        [JsonContent] Task.PostTaskV1TasksByTaskIdFollowersBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】新增执行者</para>
    /// <para>接口ID：6985127383322198018</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/task-v1/task-collaborator/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于新增任务执行者，一次性可以添加多个执行者。</para>
    /// <para>只有任务的创建者和执行者才能添加执行者，关注人无权限添加。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务 ID，可通过[创建任务](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/create)时响应体中的id字段获取</para>
    /// <para>示例值：83912691-2e43-47fc-94a4-d512e03984fa</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v1/tasks/{task_id}/collaborators")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV1TasksByTaskIdCollaboratorsResponseDto>> PostTaskV1TasksByTaskIdCollaboratorsAsync(
        [PathQuery] string task_id,
        [JsonContent] Task.PostTaskV1TasksByTaskIdCollaboratorsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】删除提醒时间</para>
    /// <para>接口ID：6985127383322214402</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/task-v1/task-reminder/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除提醒时间，返回结果状态。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务 ID</para>
    /// <para>示例值：83912691-2e43-47fc-94a4-d512e03984fa</para>
    /// </param>
    /// <param name="reminder_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务提醒时间设置的 ID（即 reminder.id）</para>
    /// <para>示例值：1</para>
    /// </param>
    [HttpDelete("/open-apis/task/v1/tasks/{task_id}/reminders/{reminder_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteTaskV1TasksByTaskIdRemindersByReminderIdAsync(
        [PathQuery] string task_id,
        [PathQuery] string reminder_id);

    /// <summary>
    /// <para>【任务】获取执行者列表</para>
    /// <para>接口ID：6985127383322230786</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/task-v1/task-collaborator/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于查询任务执行者列表，支持分页，最大值为50。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task</item>
    /// <item>task:task:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务 ID</para>
    /// <para>示例值：0d38e26e-190a-49e9-93a2-35067763ed1f</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：50</para>
    /// <para>默认值：50</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：「上次返回的page_token」</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/task/v1/tasks/{task_id}/collaborators")]
    System.Threading.Tasks.Task<FeishuResponse<Task.GetTaskV1TasksByTaskIdCollaboratorsResponseDto>> GetTaskV1TasksByTaskIdCollaboratorsAsync(
        [PathQuery] string task_id,
        [PathQuery] int? page_size = 50,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】取消完成任务</para>
    /// <para>接口ID：6985127383322247170</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/task-v1/task/uncomplete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于取消任务的已完成状态。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务 ID</para>
    /// <para>示例值：bb54ab99-d360-434f-bcaa-a4cc4c05840e</para>
    /// </param>
    [HttpPost("/open-apis/task/v1/tasks/{task_id}/uncomplete")]
    System.Threading.Tasks.Task<FeishuResponse> PostTaskV1TasksByTaskIdUncompleteAsync(
        [PathQuery] string task_id);

    /// <summary>
    /// <para>【任务】查询指定任务</para>
    /// <para>接口ID：6985127383322263554</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/task-v1/task/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于获取任务详情，包括任务标题、描述、时间、来源等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task</item>
    /// <item>task:task:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务 ID</para>
    /// <para>示例值：83912691-2e43-47fc-94a4-d512e03984fa</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/task/v1/tasks/{task_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Task.GetTaskV1TasksByTaskIdResponseDto>> GetTaskV1TasksByTaskIdAsync(
        [PathQuery] string task_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】删除任务</para>
    /// <para>接口ID：6985127383322279938</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/task-v1/task/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于删除任务。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务 ID</para>
    /// <para>示例值：83912691-2e43-47fc-94a4-d512e03984fa</para>
    /// </param>
    [HttpDelete("/open-apis/task/v1/tasks/{task_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteTaskV1TasksByTaskIdAsync(
        [PathQuery] string task_id);

    /// <summary>
    /// <para>【任务】创建任务</para>
    /// <para>接口ID：6985127383322296322</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/task-v1/task/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口可以创建一个任务，支持填写任务的基本信息，包括任务的标题，描述及协作者等。</para>
    /// <para>在此基础上，创建任务时可以设置截止时间和重复规则，将任务设置为定期执行的重复任务。通过添加协作者，则可以让其他用户协同完成该任务。</para>
    /// <para>此外，接口也提供了一些支持自定义内容的字段，调用方可以实现定制化效果，如完成任务后跳转到指定结束界面。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v1/tasks")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV1TasksResponseDto>> PostTaskV1TasksAsync(
        [JsonContent] Task.PostTaskV1TasksBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】新增提醒时间</para>
    /// <para>接口ID：6985127383322312706</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/task-v1/task-reminder/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于创建任务的提醒时间。提醒时间在截止时间基础上做偏移，但是偏移后的结果不能早于当前时间。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务 ID</para>
    /// <para>示例值：83912691-2e43-47fc-94a4-d512e03984fa</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v1/tasks/{task_id}/reminders")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV1TasksByTaskIdRemindersResponseDto>> PostTaskV1TasksByTaskIdRemindersAsync(
        [PathQuery] string task_id,
        [JsonContent] Task.PostTaskV1TasksByTaskIdRemindersBodyDto dto);

    /// <summary>
    /// <para>【任务】完成任务</para>
    /// <para>接口ID：6985127383322329090</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/task-v1/task/complete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于将任务状态修改为“已完成”。</para>
    /// <para>完成任务是指整个任务全部完成，而不支持执行者分别完成任务，执行成功后，任务对所有关联用户都变为完成状态。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务 ID，可通过[创建任务](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/create)时响应体中的id字段获取</para>
    /// <para>示例值：bb54ab99-d360-434f-bcaa-a4cc4c05840e</para>
    /// </param>
    [HttpPost("/open-apis/task/v1/tasks/{task_id}/complete")]
    System.Threading.Tasks.Task<FeishuResponse> PostTaskV1TasksByTaskIdCompleteAsync(
        [PathQuery] string task_id);

    /// <summary>
    /// <para>【任务】删除指定关注人</para>
    /// <para>接口ID：6985127383322345474</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/task-v1/task-follower/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于删除任务关注人。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务 ID</para>
    /// <para>示例值：83912691-2e43-47fc-94a4-d512e03984fa</para>
    /// </param>
    /// <param name="follower_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务关注人 ID（Open ID或User ID，由user_id_type指定）</para>
    /// <para>示例值：ou_87e1a581b36ecc4862cbfbce473f346a</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpDelete("/open-apis/task/v1/tasks/{task_id}/followers/{follower_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteTaskV1TasksByTaskIdFollowersByFollowerIdAsync(
        [PathQuery] string task_id,
        [PathQuery] string follower_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】删除指定执行者</para>
    /// <para>接口ID：6985127383322361858</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/task-v1/task-collaborator/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于删除任务执行者。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务 ID</para>
    /// <para>示例值：83912691-2e43-47fc-94a4-d512e03984fa</para>
    /// </param>
    /// <param name="collaborator_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务执行者 ID（Open ID或User ID，由user_id_type指定）</para>
    /// <para>示例值：ou_99e1a581b36ecc4862cbfbce123f346a</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpDelete("/open-apis/task/v1/tasks/{task_id}/collaborators/{collaborator_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteTaskV1TasksByTaskIdCollaboratorsByCollaboratorIdAsync(
        [PathQuery] string task_id,
        [PathQuery] string collaborator_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】更新任务</para>
    /// <para>接口ID：6985127383322378242</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/task-v1/task/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于修改任务的标题、描述、时间、来源等相关信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务 ID</para>
    /// <para>示例值：83912691-2e43-47fc-94a4-d512e03984fa</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/task/v1/tasks/{task_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PatchTaskV1TasksByTaskIdResponseDto>> PatchTaskV1TasksByTaskIdAsync(
        [PathQuery] string task_id,
        [JsonContent] Task.PatchTaskV1TasksByTaskIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】查询提醒时间列表</para>
    /// <para>接口ID：6985127383322394626</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/task-v1/task-reminder/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>返回提醒时间列表，支持分页，最大值为50。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task</item>
    /// <item>task:task:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务 ID</para>
    /// <para>示例值：0d38e26e-190a-49e9-93a2-35067763ed1f</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：50</para>
    /// <para>默认值：50</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：「填写上次返回的page_token」</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/task/v1/tasks/{task_id}/reminders")]
    System.Threading.Tasks.Task<FeishuResponse<Task.GetTaskV1TasksByTaskIdRemindersResponseDto>> GetTaskV1TasksByTaskIdRemindersAsync(
        [PathQuery] string task_id,
        [PathQuery] int? page_size = 50,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【通讯录】获取企业自定义用户字段</para>
    /// <para>接口ID：6986108081861476354</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/custom_attr/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口查询当前企业内自定义用户字段的配置信息。</para>
    /// <para>## 使用限制</para>
    /// <para>- 仅当企业管理员在[管理后台](https://feishu.cn/admin/index) &gt; **组织架构** &gt; **字段管理** 页面添加了自定义用户字段，并且在 **API 调用设置** 中开启了 **允许开放平台通讯录 API 调用** 开关，当前接口才会获取到自定义用户字段数据。</para>
    /// <para>- 仅可获取字段来源为 **通用信息** 的自定义用户字段数据。如果字段来源为 **人事**，则无法通过该接口查询到对应的数据。</para>
    /// <para>- 仅可获取字段归属为 **成员** 的自定义字段数据。如果字段归属为 **部门**，则无法通过该接口查询到对应的数据。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:contact.base:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，用于限制一次请求所返回的数据条目数。</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：AQD9/Rn9eij9Pm39ED40/RYU5lvOM4s6zgbeeNNaWd%2BVKwAsoreeRWk0J2noGvJy</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/custom_attrs")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3CustomAttrsResponseDto>> GetContactV3CustomAttrsAsync(
        [PathQuery] int? page_size = 20,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【审批】查询用户的任务列表</para>
    /// <para>接口ID：6986936689592549378</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/approval-search/query</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据用户和任务分组查询任务列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>**示例值**：100</para>
    /// <para>**默认值**：`100`</para>
    /// <para>**数据校验规则**：</para>
    /// <para>- 最大值：`200`</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>**示例值**："1"</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id">
    /// <para>必填：是</para>
    /// <para>需要查询的 User ID</para>
    /// <para>**示例值**："example_user_id"</para>
    /// </param>
    /// <param name="topic">
    /// <para>必填：是</para>
    /// <para>需要查询的任务分组主题，如「待办」、「已办」等</para>
    /// <para>**示例值**："1"</para>
    /// <para>**可选值有**：</para>
    /// <para>1:待办审批,2:已办审批,3:已发起审批,17:未读知会,18:已读知会</para>
    /// <list type="bullet">
    /// <item>1：待办审批</item>
    /// <item>2：已办审批</item>
    /// <item>3：已发起审批</item>
    /// <item>17：未读知会</item>
    /// <item>18：已读知会</item>
    /// </list>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>**示例值**："open_id"</para>
    /// <para>**可选值有**：</para>
    /// <para>open_id:标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid),union_id:标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id),user_id:标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</para>
    /// <para>**默认值**：`open_id`</para>
    /// <para>**当值为 `user_id`，字段权限要求**：</para>
    /// <para>- contact:user.employee_id:readonly : 获取用户 user ID</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](/ssl</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](/ssl</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](/ssl</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/approval/v4/tasks/query")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.Spec.GetApprovalV4TasksQueryResponseDto>> GetApprovalV4TasksQueryAsync(
        [PathQuery] string user_id,
        [PathQuery] string topic,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】增加协作者权限</para>
    /// <para>接口ID：6987581166854635521</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/permission/permission-member/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于根据云文档的 token 给用户增加文档的权限。</para>
    /// <para>## 注意事项</para>
    /// <para>- 调用该接口需要调用身份有该云文档添加协作者的权限。添加协作者的权限可通过云文档设置中的「谁可以查看、添加、移除协作者」等选项进行控制。</para>
    /// <para>- 调用该接口时，需要调用身份与被授权对象满足 **可见性** ，例如：</para>
    /// <para>- 添加用户协作者：需要调用身份与被授权对象为联系人或同组织内可搜索，且互相未屏蔽。</para>
    /// <para>- 添加群协作者：需要调用身份在群内。要使用 `tenant_access_token` 身份添加群协作者，则需要将该应用作为机器人添加至群组中，使应用对群可见。</para>
    /// <para>- 添加部门协作者：需要调用身份对部门可见。由于应用对企业内的组织架构都不可见，所以暂不支持通过 `tenant_access_token` 添加部门协作者。</para>
    /// <para>- 目前不支持将应用直接添加到文件夹作为协作者（添加成功后实际仍然没有权限）。如果希望给应用授予文件夹的权限，请将应用作为群机器人添加到群组内，然后授予该群组可管理权限。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>bitable:app</item>
    /// <item>bitable:bitable</item>
    /// <item>docs:doc</item>
    /// <item>docs:permission.member:create</item>
    /// <item>drive:drive</item>
    /// <item>drive:file</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>wiki:wiki</item>
    /// </list></para>
    /// </summary>
    /// <param name="token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>云文档的 token，需要与 type 参数指定的云文档类型相匹配。可参考[如何获取云文档资源相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)。</para>
    /// <para>示例值：doccnBKgoMyY5OMbUG6FioTXuBe</para>
    /// </param>
    /// <param name="type">
    /// <para>必填：是</para>
    /// <para>云文档类型，需要与云文档的 token 相匹配</para>
    /// <para>示例值：doc</para>
    /// <list type="bullet">
    /// <item>doc：文档</item>
    /// <item>sheet：电子表格</item>
    /// <item>file：云空间文件</item>
    /// <item>wiki：知识库节点</item>
    /// <item>bitable：多维表格</item>
    /// <item>docx：新版文档</item>
    /// <item>folder：文件夹。使用 &lt;md-tag mode="inline" type="token-tenant"&gt;tenant_access_token&lt;/md-tag&gt; 调用时，需确保文件夹所有者为应用或应用拥有文件夹的可管理权限，你需要将应用作为群机器人添加至群内，然后授予该群组可管理权限。</item>
    /// <item>mindnote：思维笔记</item>
    /// <item>minutes：妙记</item>
    /// <item>slides：幻灯片</item>
    /// </list>
    /// </param>
    /// <param name="need_notification">
    /// <para>必填：否</para>
    /// <para>添加权限后是否通知对方。仅当使用 &lt;md-tag mode="inline" type="token-user"&gt;user_access_token&lt;/md-tag&gt; 调用时有效</para>
    /// <para>示例值：false</para>
    /// <para>默认值：false</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/drive/v1/permissions/{token}/members")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostDriveV1PermissionsByTokenMembersResponseDto>> PostDriveV1PermissionsByTokenMembersAsync(
        [PathQuery] string token,
        [PathQuery] string type,
        [JsonContent] Ccm.PostDriveV1PermissionsByTokenMembersBodyDto dto,
        [PathQuery] bool? need_notification = false);

    /// <summary>
    /// <para>【云文档】更新云文档权限设置</para>
    /// <para>接口ID：6987581166854651905</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/permission/permission-public/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于根据 filetoken 更新云文档的权限设置。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>bitable:bitable</item>
    /// <item>docs:doc</item>
    /// <item>docs:permission.setting:write_only</item>
    /// <item>drive:drive</item>
    /// <item>drive:file</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>wiki:wiki</item>
    /// </list></para>
    /// </summary>
    /// <param name="token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文件的 token，获取方式见 [如何获取云文档资源相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)</para>
    /// <para>示例值：doccnBKgoMyY5OMbUG6FioTXuBe</para>
    /// </param>
    /// <param name="type">
    /// <para>必填：是</para>
    /// <para>文件类型，需要与文件的 token 相匹配</para>
    /// <para>示例值：doc</para>
    /// <list type="bullet">
    /// <item>doc：文档</item>
    /// <item>sheet：电子表格</item>
    /// <item>file：云空间文件</item>
    /// <item>wiki：知识库节点</item>
    /// <item>bitable：多维表格</item>
    /// <item>docx：新版文档</item>
    /// <item>mindnote：思维笔记</item>
    /// <item>minutes：妙记</item>
    /// <item>slides：幻灯片</item>
    /// </list>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/drive/v1/permissions/{token}/public")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PatchDriveV1PermissionsByTokenPublicResponseDto>> PatchDriveV1PermissionsByTokenPublicAsync(
        [PathQuery] string token,
        [PathQuery] string type,
        [JsonContent] Ccm.PatchDriveV1PermissionsByTokenPublicBodyDto dto);

    /// <summary>
    /// <para>【云文档】查询导入任务结果</para>
    /// <para>接口ID：6987581325629931521</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/import_task/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据[创建导入任务](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/create)返回的导入任务 ID（ticket）轮询导入结果。了解完整的导入文件步骤，参考[导入文件概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/import-user-guide)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:document:import</item>
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="ticket">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>导入任务 ID。调用[创建导入任务](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/create) 获取</para>
    /// <para>示例值：7369583175086912356</para>
    /// </param>
    [HttpGet("/open-apis/drive/v1/import_tasks/{ticket}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDriveV1ImportTasksByTicketResponseDto>> GetDriveV1ImportTasksByTicketAsync(
        [PathQuery] string ticket);

    /// <summary>
    /// <para>【云文档】创建导入任务</para>
    /// <para>接口ID：6987581325629947905</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/import_task/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于创建导入文件的任务，并返回导入任务 ID。导入文件指将本地文件如 Word、TXT、Markdown、Excel 等格式的文件导入为某种格式的飞书在线云文档。该接口为异步接口，需要继续调用[查询导入任务结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/get)接口获取导入结果。了解完整的导入文件步骤，参考[导入文件概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/import-user-guide)。</para>
    /// <para>## 前提条件</para>
    /// <para>创建导入任务前，你需先调用[上传素材](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_all)或[上传文件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_all)接口获取源文件的 token。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:document:import</item>
    /// <item>drive:drive</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/drive/v1/import_tasks")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostDriveV1ImportTasksResponseDto>> PostDriveV1ImportTasksAsync(
        [JsonContent] Ccm.PostDriveV1ImportTasksBodyDto dto);

    /// <summary>
    /// <para>【智能门禁】获取单个用户信息</para>
    /// <para>接口ID：6987691292973875201</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/acs-v1/user/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取智能门禁中单个用户的信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>acs:users</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户 ID</para>
    /// <para>**示例值**："ou_7dab8a3d3cdcc9da365777c7ad535d62"</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>**示例值**："open_id"</para>
    /// <para>**可选值有**：</para>
    /// <para>open_id:标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid),union_id:标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id),user_id:标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</para>
    /// <para>**默认值**：`open_id`</para>
    /// <para>**当值为 `user_id`，字段权限要求**：</para>
    /// <para>- contact:user.employee_id:readonly : 获取用户 user ID</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](/ssl</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](/ssl</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](/ssl</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/acs/v1/users/{user_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Acs.Spec.GetAcsV1UsersByUserIdResponseDto>> GetAcsV1UsersByUserIdAsync(
        [PathQuery] string user_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【智能门禁】获取用户列表</para>
    /// <para>接口ID：6987691292973891585</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/acs-v1/user/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>使用该接口获取智能门禁中所有用户信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>acs:users</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>**示例值**：10</para>
    /// <para>**数据校验规则**：</para>
    /// <para>- 最大值：`50`</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>**示例值**："10"</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>**示例值**："open_id"</para>
    /// <para>**可选值有**：</para>
    /// <para>open_id:标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid),union_id:标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id),user_id:标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</para>
    /// <para>**默认值**：`open_id`</para>
    /// <para>**当值为 `user_id`，字段权限要求**：</para>
    /// <para>- contact:user.employee_id:readonly : 获取用户 user ID</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](/ssl</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](/ssl</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](/ssl</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/acs/v1/users")]
    System.Threading.Tasks.Task<FeishuResponse<Acs.Spec.GetAcsV1UsersResponseDto>> GetAcsV1UsersAsync(
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【智能门禁】上传人脸图片</para>
    /// <para>接口ID：6987691292973924353</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/acs-v1/user/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>用户需要录入人脸图片才可以使用门禁考勤机。使用该 API 上传门禁用户的人脸图片。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>acs:users</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户 ID</para>
    /// <para>**示例值**："ou_7dab8a3d3cdcc9da365777c7ad535d62"</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>**示例值**："open_id"</para>
    /// <para>**可选值有**：</para>
    /// <para>open_id:标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid),union_id:标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id),user_id:标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</para>
    /// <para>**默认值**：`open_id`</para>
    /// <para>**当值为 `user_id`，字段权限要求**：</para>
    /// <para>- contact:user.employee_id:readonly : 获取用户 user ID</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](/ssl</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](/ssl</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](/ssl</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    /// <param name="files">
    /// <para>必填：是</para>
    /// <para>人脸图片内容</para>
    /// <para>**示例值**：jpg图片</para>
    /// </param>
    [HttpPut("/open-apis/acs/v1/users/{user_id}/face")]
    System.Threading.Tasks.Task<FeishuResponse> PutAcsV1UsersByUserIdFaceAsync(
        [PathQuery] string user_id,
        [FormDataContent] Acs.Spec.PutAcsV1UsersByUserIdFaceBodyDto dto,
        [FormDataContent] FormDataFile files,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【智能门禁】下载人脸图片</para>
    /// <para>接口ID：6987691292973940737</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/acs-v1/user/get-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对于已经录入人脸图片的用户，可以使用该接口下载用户人脸图片。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>acs:users</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户 ID</para>
    /// <para>**示例值**："ou_7dab8a3d3cdcc9da365777c7ad535d62"</para>
    /// </param>
    /// <param name="is_cropped">
    /// <para>必填：否</para>
    /// <para>裁剪图</para>
    /// <para>**示例值**：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>**示例值**："open_id"</para>
    /// <para>**可选值有**：</para>
    /// <para>open_id:标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid),union_id:标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id),user_id:标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</para>
    /// <para>**默认值**：`open_id`</para>
    /// <para>**当值为 `user_id`，字段权限要求**：</para>
    /// <para>- contact:user.employee_id:readonly : 获取用户 user ID</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](/ssl</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](/ssl</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](/ssl</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <returns>返回文件二进制流</returns>
    [HttpGet("/open-apis/acs/v1/users/{user_id}/face")]
    System.Threading.Tasks.Task<HttpResponseMessage> GetAcsV1UsersByUserIdFaceAsync(
        [PathQuery] string user_id,
        [PathQuery] bool? is_cropped = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】转移投递阶段</para>
    /// <para>接口ID：6989078472837136387</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/application/transfer_stage</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据投递 ID 和投递阶段 ID 转移投递阶段。</para>
    /// <para>## 注意事项</para>
    /// <para>- 当目标转移阶段或当前投递阶段为「已入职」阶段时，无法转移。</para>
    /// <para>- 候选人被锁定在其它投递时，无法转移。</para>
    /// <para>- 若「飞书招聘」-「设置」-「Offer 设置」-「Offer 审批设置」开启了「所有职位都必须进行 Offer 审批」，且当前投递没有审批完成的 Offer，则无法转移到「待入职」阶段。</para>
    /// <para>- 若「飞书招聘」-「设置」-「候选人流程管理」-「招聘流程管控规则设置」中设置了管控规则，则不满足管控规则的转移操作将无法转移。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:application</item>
    /// </list></para>
    /// </summary>
    /// <param name="application_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>投递 ID，可通过[获取投递列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/list)接口获取</para>
    /// <para>示例值：6960663240925956401</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/applications/{application_id}/transfer_stage")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1ApplicationsByApplicationIdTransferStageAsync(
        [PathQuery] string application_id,
        [JsonContent] Hire.PostHireV1ApplicationsByApplicationIdTransferStageBodyDto dto);

    /// <summary>
    /// <para>【招聘】取消候选人入职</para>
    /// <para>接口ID：6989078472837152771</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/onboard/cancel_onboard</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>取消待入职状态的候选人入职。</para>
    /// <para>## 注意事项</para>
    /// <para>- 本接口适用于对待入职阶段的候选人取消入职。对于已入职的候选人，取消入职请使用[更新入职状态](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/employee/patch)</para>
    /// <para>对候选人进行离职操作。</para>
    /// <para>- 对于集成了飞书人事的租户，候选人在飞书人事创建待入职记录后，只能在飞书人事取消入职，不可使用本接口取消入职。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:application</item>
    /// </list></para>
    /// </summary>
    /// <param name="application_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>投递 ID，如何获取投递 ID 请参考[获取投递列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/list)</para>
    /// <para>示例值：1111111111</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/applications/{application_id}/cancel_onboard")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1ApplicationsByApplicationIdCancelOnboardAsync(
        [PathQuery] string application_id,
        [JsonContent] Hire.PostHireV1ApplicationsByApplicationIdCancelOnboardBodyDto dto);

    /// <summary>
    /// <para>【招聘】更新招聘需求</para>
    /// <para>接口ID：6989078472837169155</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/job_requirement/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新指定招聘需求的信息，包含招聘需求的名称、状态、需求人数等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:job_requirement</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_requirement_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>招聘需求ID，可通过[获取招聘需求列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job_requirement/list)获取</para>
    /// <para>示例值：6949805467799537964</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>指定查询结果中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)。</para>
    /// <para>示例值：department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 od-，在租户内全局唯一。</item>
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值：job_level_id</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，可通过[获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list)获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_level_id</para>
    /// </param>
    /// <param name="job_family_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「序列 ID」的类型</para>
    /// <para>示例值：job_family_id</para>
    /// <list type="bullet">
    /// <item>people_admin_job_category_id：「人力系统管理后台」适用的序列 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_family_id：「飞书管理后台」适用的序列 ID，可通过[获取租户序列列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_family/list)获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_category_id</para>
    /// </param>
    /// <param name="employee_type_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「人员类型 ID」的类型</para>
    /// <para>示例值：employee_type_enum_id</para>
    /// <list type="bullet">
    /// <item>people_admin_employee_type_id：「人力系统管理后台」适用的人员类型 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>employee_type_enum_id：「飞书管理后台」适用的人员类型 ID，可通过[查询人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list)获取</item>
    /// </list>
    /// <para>默认值：people_admin_employee_type_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/hire/v1/job_requirements/{job_requirement_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PutHireV1JobRequirementsByJobRequirementIdAsync(
        [PathQuery] string job_requirement_id,
        [JsonContent] Hire.PutHireV1JobRequirementsByJobRequirementIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? job_level_id_type = "people_admin_job_level_id",
        [PathQuery] string? job_family_id_type = "people_admin_job_category_id",
        [PathQuery] string? employee_type_id_type = "people_admin_employee_type_id");

    /// <summary>
    /// <para>【招聘】获取人才字段</para>
    /// <para>接口ID：6989078472837185539</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/talent/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取全部人才字段详细信息，包含字段名称、字段描述、字段类型、启用状态等信息。</para>
    /// <para>## 概念说明</para>
    /// <para>在「飞书招聘」-「设置」-「候选人字段管理」中，人才中的字段按照模块进行组织，一个模块下可以包含多个字段，对应人才字段类型中`模块`类型，如下图所示。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:talent</item>
    /// <item>hire:talent:readonly</item>
    /// </list></para>
    /// </summary>
    [HttpGet("/open-apis/hire/v1/talent_objects/query")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1TalentObjectsQueryResponseDto>> GetHireV1TalentObjectsQueryAsync();

    /// <summary>
    /// <para>【招聘】删除招聘需求</para>
    /// <para>接口ID：6989078472837201923</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/job_requirement/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除指定的招聘需求，请注意：若该招聘需求已经关联到职位上，则需先接触关联后，才能删除招聘需求。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:job_requirement</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_requirement_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>招聘需求ID，可通过[获取招聘需求列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job_requirement/list)获取</para>
    /// <para>示例值：6949805467799537964</para>
    /// </param>
    [HttpDelete("/open-apis/hire/v1/job_requirements/{job_requirement_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteHireV1JobRequirementsByJobRequirementIdAsync(
        [PathQuery] string job_requirement_id);

    /// <summary>
    /// <para>【招聘】获取招聘需求列表</para>
    /// <para>接口ID：6989078472837218307</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/job_requirement/list-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取招聘需求列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:job_requirement</item>
    /// <item>hire:job_requirement:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：1231231987</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，最大值100</para>
    /// <para>示例值：20</para>
    /// <para>默认值：1</para>
    /// </param>
    /// <param name="job_id">
    /// <para>必填：否</para>
    /// <para>职位ID，详情请参考：[获取职位列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/list)</para>
    /// <para>示例值：6001</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="create_time_begin">
    /// <para>必填：否</para>
    /// <para>起始创建时间，传入毫秒级时间戳</para>
    /// <para>示例值：1658980233000</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="create_time_end">
    /// <para>必填：否</para>
    /// <para>截止创建时间，传入毫秒级时间戳</para>
    /// <para>示例值：1658980233000</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="update_time_begin">
    /// <para>必填：否</para>
    /// <para>起始更新时间，传入毫秒级时间戳</para>
    /// <para>示例值：1658980233000</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="update_time_end">
    /// <para>必填：否</para>
    /// <para>截止更新时间，传入毫秒级时间戳</para>
    /// <para>示例值：1658980233000</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>指定查询结果中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)。</para>
    /// <para>示例值："open_department_id"</para>
    /// <list type="bullet">
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 od-，在租户内全局唯一。</item>
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值："people_admin_job_level_id"</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，通过[获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_level_id</para>
    /// </param>
    /// <param name="job_family_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「序列 ID」的类型</para>
    /// <para>示例值："people_admin_job_category_id"</para>
    /// <list type="bullet">
    /// <item>people_admin_job_category_id：「人力系统管理后台」适用的序列 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_family_id：「飞书管理后台」适用的序列 ID，通过[获取租户序列列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_family/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_category_id</para>
    /// </param>
    /// <param name="employee_type_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「人员类型 ID」的类型</para>
    /// <para>示例值："employee_type_enum_id"</para>
    /// <list type="bullet">
    /// <item>people_admin_employee_type_id：「人力系统管理后台」适用的人员类型 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>employee_type_enum_id：「飞书管理后台」适用的人员类型 ID，通过[查询人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_employee_type_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/job_requirements")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1JobRequirementsResponseDto>> GetHireV1JobRequirementsAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 1,
        [PathQuery] string? job_id = null,
        [PathQuery] string? create_time_begin = null,
        [PathQuery] string? create_time_end = null,
        [PathQuery] string? update_time_begin = null,
        [PathQuery] string? update_time_end = null,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? job_level_id_type = "people_admin_job_level_id",
        [PathQuery] string? job_family_id_type = "people_admin_job_category_id",
        [PathQuery] string? employee_type_id_type = "people_admin_employee_type_id");

    /// <summary>
    /// <para>【招聘】获取招聘需求模板列表</para>
    /// <para>接口ID：6989078472837234691</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/job_requirement/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取招聘需求模板列表，包含需求模板ID，以及模板里的字段定义等。招聘需求模板可参考「飞书招聘」-「设置」-「招聘需求字段管理」。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:job_requirement</item>
    /// <item>hire:job_requirement:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1NTUyMjM2NzIsImlkIjpudWxsfQ</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>**最大值**：`100`</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/job_requirement_schemas")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1JobRequirementSchemasResponseDto>> GetHireV1JobRequirementSchemasAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10);

    /// <summary>
    /// <para>【招聘】获取职位模板</para>
    /// <para>接口ID：6989078472837251075</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/job/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取社招、校招职位模板中的职位字段，返回结果包括系统默认字段和自定义字段。招聘管理员可在「飞书招聘」-「设置」-「职位管理」-「职位字段管理」中修改职位模板。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:job:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE3MjQ2NTQ0OTc2OTd9</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>**默认值**：10</para>
    /// <para>**数据校验规则**：</para>
    /// <para>* 最大值：100</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="scenario">
    /// <para>必填：否</para>
    /// <para>职位模板类型</para>
    /// <para>示例值：1</para>
    /// <list type="bullet">
    /// <item>1：社招</item>
    /// <item>2：校招</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/job_schemas")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1JobSchemasResponseDto>> GetHireV1JobSchemasAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] int? scenario = null);

    /// <summary>
    /// <para>【招聘】获取面试信息</para>
    /// <para>接口ID：6989078472837267459</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/interview/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取面试信息。可通过「投递 ID」、「面试 ID」以及「面试开始时间」进行条件筛选，筛选条件不能同时为空。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:interview</item>
    /// <item>hire:interview:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJiaXpfdGltZSI6MTcxMDAzNjAwMDAwMCwiaWQiOiI3MzQzMDI3OTMyODE4NjcxOTE2In0</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="application_id">
    /// <para>必填：否</para>
    /// <para>投递 ID，可通过[获取投递列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/list)接口获取（不允许 application_id、interview_id、start_time、end_time 同时为空）</para>
    /// <para>示例值：6134134355464633</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="interview_id">
    /// <para>必填：否</para>
    /// <para>面试 ID（不允许 application_id、interview_id、start_time、end_time 同时为空）</para>
    /// <para>示例值：6888217964693309704</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="start_time">
    /// <para>必填：否</para>
    /// <para>面试最早开始时间，毫秒时间戳，必须大于 0（不允许 application_id、interview_id、start_time、end_time 同时为空）</para>
    /// <para>示例值：1609489908000</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="end_time">
    /// <para>必填：否</para>
    /// <para>面试最晚开始时间，毫秒时间戳，必须大于 0（不允许 application_id、interview_id、start_time、end_time 同时为空）</para>
    /// <para>示例值：1610489908000</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值：people_admin_hob_level_id</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，通过[获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list) 接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_level_id</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/interviews")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1InterviewsResponseDto>> GetHireV1InterviewsAsync(
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? application_id = null,
        [PathQuery] string? interview_id = null,
        [PathQuery] string? start_time = null,
        [PathQuery] string? end_time = null,
        [PathQuery] string? job_level_id_type = "people_admin_job_level_id",
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】创建招聘需求</para>
    /// <para>接口ID：6989078472837283843</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/job_requirement/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建招聘需求，可指定招聘需求部门、招聘人数、需求描述等，具体可参考「飞书招聘」-「设置」-「招聘需求字段管理」，或者参考[获取招聘需求模板](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job_requirement_schema/list)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:job_requirement</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>指定查询结果中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 od-，在租户内全局唯一。</item>
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值：job_level_id</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，可通过[获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list)获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_level_id</para>
    /// </param>
    /// <param name="job_family_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「序列 ID」的类型</para>
    /// <para>示例值：job_family_id</para>
    /// <list type="bullet">
    /// <item>people_admin_job_category_id：「人力系统管理后台」适用的序列 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_family_id：「飞书管理后台」适用的序列 ID，可通过[获取租户序列列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_family/list)获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_category_id</para>
    /// </param>
    /// <param name="employee_type_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「人员类型 ID」的类型</para>
    /// <para>示例值：employee_type_enum_id</para>
    /// <list type="bullet">
    /// <item>people_admin_employee_type_id：「人力系统管理后台」适用的人员类型 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>employee_type_enum_id：「飞书管理后台」适用的人员类型 ID，可通过[查询人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list)获取</item>
    /// </list>
    /// <para>默认值：people_admin_employee_type_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/job_requirements")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1JobRequirementsResponseDto>> PostHireV1JobRequirementsAsync(
        [JsonContent] Hire.PostHireV1JobRequirementsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? job_level_id_type = "people_admin_job_level_id",
        [PathQuery] string? job_family_id_type = "people_admin_job_category_id",
        [PathQuery] string? employee_type_id_type = "people_admin_employee_type_id");

    /// <summary>
    /// <para>【招聘】获取面试评价详细信息</para>
    /// <para>接口ID：6989078472837316611</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/interview/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取面试评价详细信息，如面试结论、面试得分和面试官等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:interview</item>
    /// <item>hire:interview:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="interview_record_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>面试评价 ID，可通过[获取面试信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/interview/list)接口获取</para>
    /// <para>示例值：1618209327096</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/interview_records/{interview_record_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1InterviewRecordsByInterviewRecordIdResponseDto>> GetHireV1InterviewRecordsByInterviewRecordIdAsync(
        [PathQuery] string interview_record_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【应用信息】获取应用信息</para>
    /// <para>接口ID：6989432329400238081</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/application-v6/application/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据app_id获取应用的基础信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:app.info:readonly</item>
    /// <item>application:application:self_manage</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用的 app_id，需要查询其他应用信息时，必须申请[获取应用信息](https://open.feishu.cn/document/ukTMukTMukTM/uQjN3QjL0YzN04CN2cDN)权限，仅查询本应用信息时，可填入 "me" 或者应用自身 app_id</para>
    /// <para>示例值：cli_9b445f5258795107</para>
    /// </param>
    /// <param name="lang">
    /// <para>必填：是</para>
    /// <para>指定获取应用在该语言下的信息</para>
    /// <para>示例值：zh_cn</para>
    /// <list type="bullet">
    /// <item>zh_cn：中文</item>
    /// <item>en_us：英文</item>
    /// <item>ja_jp：日文</item>
    /// </list>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/application/v6/applications/{app_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Application.GetApplicationV6ApplicationsByAppIdResponseDto>> GetApplicationV6ApplicationsByAppIdAsync(
        [PathQuery] string app_id,
        [PathQuery] string lang,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【应用信息】查看待审核的应用列表</para>
    /// <para>接口ID：6989432329400254465</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/application-v6/application/underauditlist</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查看本企业下所有待审核的自建应用列表</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:app.info:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="lang">
    /// <para>必填：是</para>
    /// <para>指定返回的语言</para>
    /// <para>示例值：zh_cn</para>
    /// <list type="bullet">
    /// <item>zh_cn：中文</item>
    /// <item>en_us：英文</item>
    /// <item>ja_jp：日文</item>
    /// </list>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：new-e3c5a0627cdf0c2e057da7257b90376a</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/application/v6/applications/underauditlist")]
    System.Threading.Tasks.Task<FeishuResponse<Application.GetApplicationV6ApplicationsUnderauditlistResponseDto>> GetApplicationV6ApplicationsUnderauditlistAsync(
        [PathQuery] string lang,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【应用信息】更新应用分组信息</para>
    /// <para>接口ID：6989432329400270849</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/application-v6/application/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新应用的分组信息（分组会影响应用在工作台中的分类情况，请谨慎更新）</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>application:application</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用的 id</para>
    /// <para>示例值：cli_9b445f5258795107</para>
    /// </param>
    /// <param name="lang">
    /// <para>必填：是</para>
    /// <para>指定返回的语言</para>
    /// <para>示例值：zh_cn</para>
    /// <list type="bullet">
    /// <item>zh_cn：中文</item>
    /// <item>en_us：英文</item>
    /// <item>ja_jp：日文</item>
    /// </list>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/application/v6/applications/{app_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PatchApplicationV6ApplicationsByAppIdAsync(
        [PathQuery] string app_id,
        [PathQuery] string lang,
        [JsonContent] Application.PatchApplicationV6ApplicationsByAppIdBodyDto dto);

    /// <summary>
    /// <para>【应用信息】获取应用版本信息</para>
    /// <para>接口ID：6989432329400287233</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/application-v6/application/get-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据应用 ID 和应用版本 ID 来获取同租户下的应用版本的信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>application:application:self_manage</item>
    /// <item>application:application.app_version:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用的 app_id，需要查询其他应用版本信息时，必须申请[获取应用版本信息](https://open.feishu.cn/document/ukTMukTMukTM/uQjN3QjL0YzN04CN2cDN)权限，仅查询本应用版本信息时，可填入 "me" 或者应用自身 app_id</para>
    /// <para>示例值：cli_9f3ca975326b501b</para>
    /// </param>
    /// <param name="version_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>唯一标识应用版本的 ID</para>
    /// <para>示例值：oav_d317f090b7258ad0372aa53963cda70d</para>
    /// </param>
    /// <param name="lang">
    /// <para>必填：是</para>
    /// <para>应用信息的语言版本</para>
    /// <para>示例值：zh_cn</para>
    /// <list type="bullet">
    /// <item>zh_cn：中文</item>
    /// <item>en_us：英文</item>
    /// <item>ja_jp：日文</item>
    /// </list>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/application/v6/applications/{app_id}/app_versions/{version_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Application.GetApplicationV6ApplicationsByAppIdAppVersionsByVersionIdResponseDto>> GetApplicationV6ApplicationsByAppIdAppVersionsByVersionIdAsync(
        [PathQuery] string app_id,
        [PathQuery] string version_id,
        [PathQuery] string lang,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【应用信息】更新应用审核状态</para>
    /// <para>接口ID：6989432329400303617</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/application-v6/application/patch-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过接口来更新应用版本的审核结果：通过后应用可以直接上架；拒绝后则开发者可以看到拒绝理由，并在修改后再次申请发布。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>application:application.app_version</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用 id</para>
    /// <para>示例值：cli_9f3ca975326b501b</para>
    /// </param>
    /// <param name="version_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>唯一标识应用版本的 ID</para>
    /// <para>示例值：oav_d317f090b7258ad0372aa53963cda70d</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：是</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="operator_id">
    /// <para>必填：是</para>
    /// <para>操作者的 open_id</para>
    /// <para>示例值：ou_4065981088f8ef67a504ba8bd6b24d85</para>
    /// </param>
    /// <param name="reject_reason">
    /// <para>必填：否</para>
    /// <para>当修改版本状态为被驳回时，这一项必填</para>
    /// <para>示例值：拒绝理由</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/application/v6/applications/{app_id}/app_versions/{version_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PatchApplicationV6ApplicationsByAppIdAppVersionsByVersionIdAsync(
        [PathQuery] string app_id,
        [PathQuery] string version_id,
        [PathQuery] string operator_id,
        [JsonContent] Application.PatchApplicationV6ApplicationsByAppIdAppVersionsByVersionIdBodyDto dto,
        [PathQuery] string user_id_type = "open_id",
        [PathQuery] string? reject_reason = null);

    /// <summary>
    /// <para>【云文档】获取文件统计信息</para>
    /// <para>接口ID：6989584844481544196</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/file/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>此接口用于获取各类文件的流量统计信息和互动信息，包括阅读人数、阅读次数和点赞数。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>drive:drive.metadata:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文件 token。了解如何获取文件 token，参考[文件概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/file-overview)。</para>
    /// <para>示例值：doccnfYZzTlvXqZIGTdAHKabcef</para>
    /// </param>
    /// <param name="file_type">
    /// <para>必填：是</para>
    /// <para>文件类型</para>
    /// <para>示例值：doc</para>
    /// <list type="bullet">
    /// <item>doc：旧版文档</item>
    /// <item>sheet：电子表格</item>
    /// <item>mindnote：思维笔记</item>
    /// <item>bitable：多维表格</item>
    /// <item>wiki：知识库文档</item>
    /// <item>file：文件</item>
    /// <item>docx：新版文档</item>
    /// </list>
    /// </param>
    [HttpGet("/open-apis/drive/v1/files/{file_token}/statistics")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDriveV1FilesByFileTokenStatisticsResponseDto>> GetDriveV1FilesByFileTokenStatisticsAsync(
        [PathQuery] string file_token,
        [PathQuery] string file_type);

    /// <summary>
    /// <para>【日历】创建日程</para>
    /// <para>接口ID：6990540948577599491</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/calendar-event/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口以当前身份（应用或用户）在指定日历上创建一个日程。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar.event:create</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="calendar_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日历 ID。</para>
    /// <para>创建共享日历时会返回日历 ID。你也可以调用以下接口获取某一日历的 ID。</para>
    /// <para>- [查询主日历信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/primary)</para>
    /// <para>- [查询日历列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/list)</para>
    /// <para>- [搜索日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/search)</para>
    /// <para>示例值：feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn</para>
    /// </param>
    /// <param name="idempotency_key">
    /// <para>必填：否</para>
    /// <para>创建日程的幂等 key，该 key 在应用和日历维度下唯一，用于避免重复创建资源。建议按照示例值的格式进行取值。</para>
    /// <para>示例值：25fdf41b-8c80-2ce1-e94c-de8b5e7aa7e6</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/calendar/v4/calendars/{calendar_id}/events")]
    System.Threading.Tasks.Task<FeishuResponse<Calendar.PostCalendarV4CalendarsByCalendarIdEventsResponseDto>> PostCalendarV4CalendarsByCalendarIdEventsAsync(
        [PathQuery] string calendar_id,
        [JsonContent] Calendar.PostCalendarV4CalendarsByCalendarIdEventsBodyDto dto,
        [PathQuery] string? idempotency_key = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【消息与群组】获取消息表情回复</para>
    /// <para>接口ID：6990603997012279298</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/message-reaction/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取指定消息内的表情回复列表，支持仅获取特定类型的表情回复。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 调用当前接口的机器人或者用户，需要在待查询的消息所属的会话内。</para>
    /// <para>## 使用限制</para>
    /// <para>已被撤回的消息无法获取表情回复列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message:readonly</item>
    /// <item>im:message.reactions:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="message_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待查询的消息ID。ID 获取方式：</para>
    /// <para>- 调用[发送消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create)接口后，从响应结果的 `message_id` 参数获取。</para>
    /// <para>- 监听[接收消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/events/receive)事件，当触发该事件后可以从事件体内获取消息的 `message_id`。</para>
    /// <para>- 调用[获取会话历史消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/list)接口，从响应结果的 `message_id` 参数获取。</para>
    /// <para>示例值：om_8964d1b4*********2b31383276113</para>
    /// </param>
    /// <param name="reaction_type">
    /// <para>必填：否</para>
    /// <para>待查询的表情类型，支持的枚举值参考[表情文案说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-reaction/emojis-introduce)中的 emoji_type 值。</para>
    /// <para>**注意**：该参数为可选参数，不传入该参数时将查询消息内所有的表情回复。</para>
    /// <para>示例值：LAUGH</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：YhljsPiGfUgnVAg9urvRFd-BvSqRL20wMZNAWfa9xXkud6UKCybPuUgQ1vM26dj6</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，用于限制一次请求返回的数据条目数。</para>
    /// <para>**默认值**：20</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/im/v1/messages/{message_id}/reactions")]
    System.Threading.Tasks.Task<FeishuResponse<Im.GetImV1MessagesByMessageIdReactionsResponseDto>> GetImV1MessagesByMessageIdReactionsAsync(
        [PathQuery] string message_id,
        [PathQuery] string? reaction_type = null,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【消息与群组】删除消息表情回复</para>
    /// <para>接口ID：6990603997012295682</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/message-reaction/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除指定消息的某一表情回复。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 调用当前接口的机器人或者用户，需要在待删除表情回复的消息所属的会话内。</para>
    /// <para>## 使用限制</para>
    /// <para>- 已被撤回的消息无法添加表情回复。</para>
    /// <para>- 调用当前接口的机器人或者用户，只能删除由自己添加的表情回复，且需要保证该表情回复真实存在于消息中。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message</item>
    /// <item>im:message.reactions:write_only</item>
    /// </list></para>
    /// </summary>
    /// <param name="message_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待删除表情回复的消息 ID。ID 获取方式：</para>
    /// <para>- 调用[发送消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create)接口后，从响应结果的 `message_id` 参数获取。</para>
    /// <para>- 监听[接收消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/events/receive)事件，当触发该事件后可以从事件体内获取消息的 `message_id`。</para>
    /// <para>- 调用[获取会话历史消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/list)接口，从响应结果的 `message_id` 参数获取。</para>
    /// <para>示例值：om_8964d1b4*********2b31383276113</para>
    /// </param>
    /// <param name="reaction_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待删除的表情回复 ID，该 ID 获取方式：</para>
    /// <para>- 调用[添加消息表情回复](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-reaction/create)接口添加表情回复后，在返回结果中获取。</para>
    /// <para>- 调用[获取消息表情回复](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-reaction/list)接口，获取某一表情回复的 ID。</para>
    /// <para>示例值：ZCaCIjUBVVWSrm5L-3ZTw*************sNa8dHVplEzzSfJVUVLMLcS_</para>
    /// </param>
    [HttpDelete("/open-apis/im/v1/messages/{message_id}/reactions/{reaction_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Im.DeleteImV1MessagesByMessageIdReactionsByReactionIdResponseDto>> DeleteImV1MessagesByMessageIdReactionsByReactionIdAsync(
        [PathQuery] string message_id,
        [PathQuery] string reaction_id);

    /// <summary>
    /// <para>【消息与群组】添加消息表情回复</para>
    /// <para>接口ID：6990603997012312066</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/message-reaction/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>给指定消息添加指定类型的表情回复。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 调用当前接口的机器人或者用户，需要在待添加表情回复的消息所属的会话内。</para>
    /// <para>## 使用限制</para>
    /// <para>- 已被撤回的消息无法添加表情回复。</para>
    /// <para>- [系统消息（system）](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/im-v1/message/create_json#e159cb73)无法添加表情回复。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message</item>
    /// <item>im:message.reactions:write_only</item>
    /// </list></para>
    /// </summary>
    /// <param name="message_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待添加表情回复的消息 ID。ID 获取方式：</para>
    /// <para>- 调用[发送消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create)接口后，从响应结果的 `message_id` 参数获取。</para>
    /// <para>- 监听[接收消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/events/receive)事件，当触发该事件后可以从事件体内获取消息的 `message_id`。</para>
    /// <para>- 调用[获取会话历史消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/list)接口，从响应结果的 `message_id` 参数获取。</para>
    /// <para>示例值：om_a8f2294b************a1a38afaac9d</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/im/v1/messages/{message_id}/reactions")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PostImV1MessagesByMessageIdReactionsResponseDto>> PostImV1MessagesByMessageIdReactionsAsync(
        [PathQuery] string message_id,
        [JsonContent] Im.PostImV1MessagesByMessageIdReactionsBodyDto dto);

    /// <summary>
    /// <para>【招聘】新建招聘官网用户</para>
    /// <para>接口ID：6990661791098634243</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/website/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>注册指定招聘官网的用户，注册完成后，可通过[根据简历附件创建招聘官网投递任务](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/website-delivery/create_by_attachment)创建官网投递任务，或通过[新建招聘官网投递](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/website-delivery/create_by_resume)创建官网投递</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:site</item>
    /// </list></para>
    /// </summary>
    /// <param name="website_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>官网 ID，可通过[获取招聘官网列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/website/list)获取</para>
    /// <para>示例值：1618209327096</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/websites/{website_id}/site_users")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1WebsitesByWebsiteIdSiteUsersResponseDto>> PostHireV1WebsitesByWebsiteIdSiteUsersAsync(
        [PathQuery] string website_id,
        [JsonContent] Hire.PostHireV1WebsitesByWebsiteIdSiteUsersBodyDto dto);

    /// <summary>
    /// <para>【招聘】获取招聘官网下职位广告详情</para>
    /// <para>接口ID：6990661791098650627</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/website/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取招聘官网下的职位广告详情，包含职位广告 ID、名称、关联职位 ID、关联职位编码等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:site_job_post:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="website_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>官网 ID，可通过[获取招聘官网列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/website/list)获取</para>
    /// <para>示例值：7047318856652261676</para>
    /// </param>
    /// <param name="job_post_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>职位广告 ID，可通过[获取招聘官网下的职位广告列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/website-job_post/list)或[搜索招聘官网下的职位广告列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/website-job_post/search)获取</para>
    /// <para>示例值：7392894182636144946</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>指定查询结果中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门资源介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)。</para>
    /// <para>示例值：department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：由系统自动生成的部门 ID， ID前缀固定为 `od-`，在租户内全局唯一。</item>
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内，department_id 具有唯一性。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值：job_level_id</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，通过[「获取租户职级列表」](https://open.feishu.cn/document/server-docs/contact-v3/job_level/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_level_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/websites/{website_id}/job_posts/{job_post_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1WebsitesByWebsiteIdJobPostsByJobPostIdResponseDto>> GetHireV1WebsitesByWebsiteIdJobPostsByJobPostIdAsync(
        [PathQuery] string website_id,
        [PathQuery] string job_post_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? job_level_id_type = "people_admin_job_level_id");

    /// <summary>
    /// <para>【招聘】获取招聘官网下的职位广告列表</para>
    /// <para>接口ID：6990661791098667011</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/website/list-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取招聘官网下的职位信息列表。</para>
    /// <para>## 注意事项</para>
    /// <para>该接口暂不支持获取自定义数据。你可使用「获取招聘官网下职位广告详情」接口获取。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:site_job_post:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="website_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>官网 ID，通过[「获取招聘官网列表」](https://open.larkoffice.com/document/server-docs/hire-v1/get-candidates/website/list)接口获得</para>
    /// <para>示例值：7368811146881042700</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE2Mjc1NTUyMjM2NzIsImlkIjpudWxsfQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>每页获取记录数量，最大10，不传则默认值为10</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>指定查询结果中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)。</para>
    /// <para>示例值："department_id"</para>
    /// <list type="bullet">
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 od-，在租户内全局唯一。</item>
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值："people_admin_job_level_id"</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，通过[获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_level_id</para>
    /// </param>
    /// <param name="update_start_time">
    /// <para>必填：否</para>
    /// <para>最早更新时间，毫秒级时间戳</para>
    /// <para>示例值：1618500278663</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="update_end_time">
    /// <para>必填：否</para>
    /// <para>最晚更新时间，毫秒级时间戳</para>
    /// <para>示例值：1618500278663</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="create_start_time">
    /// <para>必填：否</para>
    /// <para>最早创建时间，毫秒级时间戳</para>
    /// <para>示例值：1618500278663</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="create_end_time">
    /// <para>必填：否</para>
    /// <para>最晚创建时间，毫秒级时间戳</para>
    /// <para>示例值：1618500278663</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/websites/{website_id}/job_posts")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1WebsitesByWebsiteIdJobPostsResponseDto>> GetHireV1WebsitesByWebsiteIdJobPostsAsync(
        [PathQuery] string website_id,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? job_level_id_type = "people_admin_job_level_id",
        [PathQuery] string? update_start_time = null,
        [PathQuery] string? update_end_time = null,
        [PathQuery] string? create_start_time = null,
        [PathQuery] string? create_end_time = null);

    /// <summary>
    /// <para>【招聘】获取地址列表</para>
    /// <para>接口ID：6990661791098683395</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/location/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取地址列表，可查询到的信息包括地址与地点信息，可应用在职位地点、面试地点、人才意向工作城市等场景。</para>
    /// <para>## 名词解释</para>
    /// <para>地点和地址的描述如下：</para>
    /// <para>- 地点：行政区域划分，如 「中国大陆」、「四川省」、「成都市」、「高新区」</para>
    /// <para>- 地址：具体地理位置，包括职位地址、面试地址、门店地址，如：「中国四川省成都市成华区熊猫大道 1375 号」</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:location:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE2Mjc1NTUyMjM2NzIsImlkIjpudWxsfQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>每页获取记录数量</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="usage">
    /// <para>必填：是</para>
    /// <para>地址类型</para>
    /// <para>示例值：interview_location</para>
    /// <list type="bullet">
    /// <item>position_location：职位地址</item>
    /// <item>interview_location：面试地址</item>
    /// <item>store_location：门店地址。当前仅支持未接入飞书人事的租户使用</item>
    /// </list>
    /// </param>
    [HttpGet("/open-apis/hire/v1/locations")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1LocationsResponseDto>> GetHireV1LocationsAsync(
        [PathQuery] string usage,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10);

    /// <summary>
    /// <para>【招聘】获取招聘官网列表</para>
    /// <para>接口ID：6990661791098699779</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/website/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取招聘官网列表，返回信息包括官网名称、官网ID、招聘渠道ID等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:site</item>
    /// <item>hire:site:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE2Mjc1NTUyMjM2NzIsImlkIjpudWxsfQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>每页获取记录数量</para>
    /// <para>**默认值** : 10</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/websites")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1WebsitesResponseDto>> GetHireV1WebsitesAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10);

    /// <summary>
    /// <para>【招聘】新建招聘官网投递</para>
    /// <para>接口ID：6990661791098716163</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/website/create_by_resume</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>新建招聘官网投递。</para>
    /// <para>## 注意事项</para>
    /// <para>- 请求参数中邮箱/电话等字段请在「飞书招聘」-「设置」-「招聘官网设置」-「申请表」中确认是否必填。</para>
    /// <para>- 请求参数中的时间字段 (start_time/end_time 等)，时间格式为毫秒时间戳，类型均为 bigint。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:site_application</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="website_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>官网 ID，可通过[获取招聘官网列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/website/list)获取</para>
    /// <para>示例值：1618209327096</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/websites/{website_id}/deliveries/create_by_resume")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1WebsitesByWebsiteIdDeliveriesCreateByResumeResponseDto>> PostHireV1WebsitesByWebsiteIdDeliveriesCreateByResumeAsync(
        [PathQuery] string website_id,
        [JsonContent] Hire.PostHireV1WebsitesByWebsiteIdDeliveriesCreateByResumeBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】创建外部面试</para>
    /// <para>接口ID：6992822583076339715</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/import-external-system-information/create-3</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建外部面试，可用于导入来自其他系统的面试信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:external_application</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/external_interviews")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1ExternalInterviewsResponseDto>> PostHireV1ExternalInterviewsAsync(
        [JsonContent] Hire.PostHireV1ExternalInterviewsBodyDto dto);

    /// <summary>
    /// <para>【招聘】创建外部面评</para>
    /// <para>接口ID：6992822583076356099</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/import-external-system-information/create-4</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>导入来自其他系统的面评信息，创建为外部面评。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:external_application</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/external_interview_assessments")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1ExternalInterviewAssessmentsResponseDto>> PostHireV1ExternalInterviewAssessmentsAsync(
        [JsonContent] Hire.PostHireV1ExternalInterviewAssessmentsBodyDto dto);

    /// <summary>
    /// <para>【招聘】创建外部背调</para>
    /// <para>接口ID：6992822583076372483</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/import-external-system-information/create-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建外部背调，可用于导入来自其他系统的背调信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:external_application</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/external_background_checks")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1ExternalBackgroundChecksResponseDto>> PostHireV1ExternalBackgroundChecksAsync(
        [JsonContent] Hire.PostHireV1ExternalBackgroundChecksBodyDto dto);

    /// <summary>
    /// <para>【招聘】创建外部投递</para>
    /// <para>接口ID：6992822583076388867</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/import-external-system-information/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建外部投递，可用于导入来自其他系统的投递信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:external_application</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/external_applications")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1ExternalApplicationsResponseDto>> PostHireV1ExternalApplicationsAsync(
        [JsonContent] Hire.PostHireV1ExternalApplicationsBodyDto dto);

    /// <summary>
    /// <para>【招聘】更新 e-HR 导入任务结果</para>
    /// <para>接口ID：6992933256561426436</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/onboard/patch-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>在处理完[导入 e-HR](</para>
    /// <para>https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/event/import-ehr)事件后，可调用该接口，更新 e-HR 导入任务结果。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:ehr_import</item>
    /// </list></para>
    /// </summary>
    /// <param name="ehr_import_task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>导入任务 ID，任务 ID 来源于导入 e-HR 事件中的 task_id，详情参考[导入 e-HR](</para>
    /// <para>https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/event/import-ehr)</para>
    /// <para>示例值：6914551145542568199</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/hire/v1/ehr_import_tasks/{ehr_import_task_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PatchHireV1EhrImportTasksByEhrImportTaskIdAsync(
        [PathQuery] string ehr_import_task_id,
        [JsonContent] Hire.PatchHireV1EhrImportTasksByEhrImportTaskIdBodyDto dto);

    /// <summary>
    /// <para>【邮箱】获取邮件组所有别名</para>
    /// <para>接口ID：6993152083270172673</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/mail-group/mailgroup-alias/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取邮件组所有别名。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:mailgroup</item>
    /// <item>mail:mailgroup:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="mailgroup_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>邮件组id或邮件组邮箱地址</para>
    /// <para>示例值：xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx</para>
    /// </param>
    [HttpGet("/open-apis/mail/v1/mailgroups/{mailgroup_id}/aliases")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.GetMailV1MailgroupsByMailgroupIdAliasesResponseDto>> GetMailV1MailgroupsByMailgroupIdAliasesAsync(
        [PathQuery] string mailgroup_id);

    /// <summary>
    /// <para>【邮箱】创建公共邮箱别名</para>
    /// <para>接口ID：6993201646486470658</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/public-mailbox/public_mailbox-alias/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建公共邮箱别名。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:public_mailbox</item>
    /// </list></para>
    /// </summary>
    /// <param name="public_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>公共邮箱id或公共邮箱地址</para>
    /// <para>示例值：xxxxxx 或 xxx@xx.xxx</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/mail/v1/public_mailboxes/{public_mailbox_id}/aliases")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.PostMailV1PublicMailboxesByPublicMailboxIdAliasesResponseDto>> PostMailV1PublicMailboxesByPublicMailboxIdAliasesAsync(
        [PathQuery] string public_mailbox_id,
        [JsonContent] Mail.PostMailV1PublicMailboxesByPublicMailboxIdAliasesBodyDto dto);

    /// <summary>
    /// <para>【邮箱】查询公共邮箱的所有别名</para>
    /// <para>接口ID：6993201646486487042</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/public-mailbox/public_mailbox-alias/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取所有公共邮箱别名。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:public_mailbox</item>
    /// <item>mail:public_mailbox:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="public_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>公共邮箱id或公共邮箱邮件地址</para>
    /// <para>示例值：xxxxxx 或 xxx@xx.xxx</para>
    /// </param>
    [HttpGet("/open-apis/mail/v1/public_mailboxes/{public_mailbox_id}/aliases")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.GetMailV1PublicMailboxesByPublicMailboxIdAliasesResponseDto>> GetMailV1PublicMailboxesByPublicMailboxIdAliasesAsync(
        [PathQuery] string public_mailbox_id);

    /// <summary>
    /// <para>【邮箱】创建邮件组别名</para>
    /// <para>接口ID：6993201646486536194</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/mail-group/mailgroup-alias/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建邮件组别名。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:mailgroup</item>
    /// </list></para>
    /// </summary>
    /// <param name="mailgroup_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>邮件组id或邮件组邮箱地址</para>
    /// <para>示例值：xxxxxx 或者 xxx@xx.xxx</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/mail/v1/mailgroups/{mailgroup_id}/aliases")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.PostMailV1MailgroupsByMailgroupIdAliasesResponseDto>> PostMailV1MailgroupsByMailgroupIdAliasesAsync(
        [PathQuery] string mailgroup_id,
        [JsonContent] Mail.PostMailV1MailgroupsByMailgroupIdAliasesBodyDto dto);

    /// <summary>
    /// <para>【邮箱】删除邮件组别名</para>
    /// <para>接口ID：6993201646486552578</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/mail-group/mailgroup-alias/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除邮件组别名。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:mailgroup</item>
    /// </list></para>
    /// </summary>
    /// <param name="mailgroup_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>邮件组id或邮件组邮箱地址</para>
    /// <para>示例值：xxxxxx 或 test_group@xx.xxx</para>
    /// </param>
    /// <param name="alias_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>邮件组别名邮箱地址</para>
    /// <para>示例值：xxx@xx.xxx</para>
    /// </param>
    [HttpDelete("/open-apis/mail/v1/mailgroups/{mailgroup_id}/aliases/{alias_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteMailV1MailgroupsByMailgroupIdAliasesByAliasIdAsync(
        [PathQuery] string mailgroup_id,
        [PathQuery] string alias_id);

    /// <summary>
    /// <para>【邮箱】删除公共邮箱别名</para>
    /// <para>接口ID：6993201646486585346</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/public-mailbox/public_mailbox-alias/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除公共邮箱别名。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:public_mailbox</item>
    /// </list></para>
    /// </summary>
    /// <param name="public_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>公共邮箱id或公共邮箱地址</para>
    /// <para>示例值：xxxxxx 或 xxx@xx.xxx</para>
    /// </param>
    /// <param name="alias_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>公共邮箱别名</para>
    /// <para>示例值：xxx@xx.xxx</para>
    /// </param>
    [HttpDelete("/open-apis/mail/v1/public_mailboxes/{public_mailbox_id}/aliases/{alias_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteMailV1PublicMailboxesByPublicMailboxIdAliasesByAliasIdAsync(
        [PathQuery] string public_mailbox_id,
        [PathQuery] string alias_id);

    /// <summary>
    /// <para>【汇报】移除规则看板</para>
    /// <para>接口ID：6993276991760056323</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/report-v1/rule-view/remove</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>移除规则看板</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>report:report</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="rule_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>汇报规则ID</para>
    /// <para>示例值：6894419345318182122</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/report/v1/rules/{rule_id}/views/remove")]
    System.Threading.Tasks.Task<FeishuResponse> PostReportV1RulesByRuleIdViewsRemoveAsync(
        [PathQuery] string rule_id,
        [JsonContent] Report.PostReportV1RulesByRuleIdViewsRemoveBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【消息与群组】指定群管理员</para>
    /// <para>接口ID：6995085510524698625</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat-member/add_managers</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>指定群组，将群内指定的用户或者机器人设置为群管理员。</para>
    /// <para>## 前提条件</para>
    /// <para>应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>## 使用限制</para>
    /// <para>仅群组内的群主可以指定群管理员。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat.managers:write_only</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>**注意**：仅支持群模式为 **群组（group）**、**话题（topic）** 的群组 ID。你可以调用[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)接口，在返回结果中查看 `chat_mode` 参数取值是否为 `group`、`topic`。</para>
    /// <para>示例值：oc_a0553eda9014c201e6969b478895c230</para>
    /// </param>
    /// <param name="member_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>app_id：飞书开放平台应用的唯一标识。在创建应用时，由系统自动生成，用户不能自行修改。[了解更多：如何获取应用的 App ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-app-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/im/v1/chats/{chat_id}/managers/add_managers")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PostImV1ChatsByChatIdManagersAddManagersResponseDto>> PostImV1ChatsByChatIdManagersAddManagersAsync(
        [PathQuery] string chat_id,
        [JsonContent] Im.PostImV1ChatsByChatIdManagersAddManagersBodyDto dto,
        [PathQuery] string? member_id_type = "open_id");

    /// <summary>
    /// <para>【消息与群组】删除群管理员</para>
    /// <para>接口ID：6995085510524715009</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat-member/delete_managers</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>指定群组，删除群组内指定的管理员，包括用户类型的管理员和机器人类型的管理员。</para>
    /// <para>## 前提条件</para>
    /// <para>应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>## 使用限制</para>
    /// <para>仅群组内的群主可以删除群管理员。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat.managers:write_only</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>**注意**：仅支持群模式为 **群组（group）**、**话题（topic）** 的群组 ID。你可以调用[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)接口，在返回结果中查看 `chat_mode` 参数取值是否为 `group`、`topic`。</para>
    /// <para>示例值：oc_a0553eda9014c201e6969b478895c230</para>
    /// </param>
    /// <param name="member_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>app_id：飞书开放平台应用的唯一标识。在创建应用时，由系统自动生成，用户不能自行修改。[了解更多：如何获取应用的 App ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-app-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/im/v1/chats/{chat_id}/managers/delete_managers")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PostImV1ChatsByChatIdManagersDeleteManagersResponseDto>> PostImV1ChatsByChatIdManagersDeleteManagersAsync(
        [PathQuery] string chat_id,
        [JsonContent] Im.PostImV1ChatsByChatIdManagersDeleteManagersBodyDto dto,
        [PathQuery] string? member_id_type = "open_id");

    /// <summary>
    /// <para>【应用信息】获取应用使用概览</para>
    /// <para>接口ID：6995148762798178332</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/application-v6/app-usage/overview</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查看应用在某一天/某一周/某一个月的使用数据，可以查看租户整体对应用的使用情况，也可以分部门查看。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>application:application.app_usage_stats.overview:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>目标应用 ID</para>
    /// <para>示例值：cli_9f115af860f7901b</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>调用中使用的部门ID的类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：以自定义department_id来标识部门</item>
    /// <item>open_department_id：以open_department_id来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/application/v6/applications/{app_id}/app_usage/overview")]
    System.Threading.Tasks.Task<FeishuResponse<Application.PostApplicationV6ApplicationsByAppIdAppUsageOverviewResponseDto>> PostApplicationV6ApplicationsByAppIdAppUsageOverviewAsync(
        [PathQuery] string app_id,
        [JsonContent] Application.PostApplicationV6ApplicationsByAppIdAppUsageOverviewBodyDto dto,
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【审批】预览审批流程</para>
    /// <para>接口ID：6995509710095695876</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/instance/approval-preview</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>在[创建审批实例](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/create)之前，可调用本接口预览审批流程数据。在[创建审批实例](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/create)之后，可调用本接口预览某一审批节点的后续流程数据。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>**示例值**：open_id</para>
    /// <para>**可选值有**：</para>
    /// <para>open_id:标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid),union_id:标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id),user_id:标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</para>
    /// <para>**默认值**：`open_id`</para>
    /// <para>**当值为 `user_id`，字段权限要求**：</para>
    /// <para>- contact:user.employee_id:readonly : 获取用户 user ID</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](/ssl</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](/ssl</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](/ssl</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/approval/v4/instances/preview")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.Spec.PostApprovalV4InstancesPreviewResponseDto>> PostApprovalV4InstancesPreviewAsync(
        [JsonContent] Approval.Spec.PostApprovalV4InstancesPreviewBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】移除参会人</para>
    /// <para>接口ID：6997003722790633474</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/meeting/kickout</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>将参会人从会议中移除。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:meeting</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="meeting_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>会议ID</para>
    /// <para>示例值：6911188411932033028</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/vc/v1/meetings/{meeting_id}/kickout")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.PostVcV1MeetingsByMeetingIdKickoutResponseDto>> PostVcV1MeetingsByMeetingIdKickoutAsync(
        [PathQuery] string meeting_id,
        [JsonContent] Vc.PostVcV1MeetingsByMeetingIdKickoutBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】移除协作者权限</para>
    /// <para>接口ID：6998069547745214492</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/permission/permission-member/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于根据文件的 token 移除文档协作者的权限。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>bitable:app</item>
    /// <item>bitable:bitable</item>
    /// <item>docs:doc</item>
    /// <item>docs:permission.member:delete</item>
    /// <item>drive:drive</item>
    /// <item>drive:file</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>wiki:wiki</item>
    /// </list></para>
    /// </summary>
    /// <param name="token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文件的 token，获取方式见 [如何获取云文档资源相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)</para>
    /// <para>示例值：doccnBKgoMyY5OMbUG6FioTXuBe</para>
    /// </param>
    /// <param name="member_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>协作者 ID，与协作者 ID 类型需要对应</para>
    /// <para>示例值：ou_7dab8a3d3cdcc9da365777c7ad535d62</para>
    /// </param>
    /// <param name="type">
    /// <para>必填：是</para>
    /// <para>文件类型，需要与文件的 token 相匹配</para>
    /// <para>示例值：doc</para>
    /// <list type="bullet">
    /// <item>doc：文档</item>
    /// <item>sheet：电子表格</item>
    /// <item>file：云空间文件</item>
    /// <item>wiki：知识库节点</item>
    /// <item>bitable：多维表格</item>
    /// <item>docx：新版文档</item>
    /// <item>folder：文件夹</item>
    /// <item>mindnote：思维笔记</item>
    /// <item>minutes：妙记</item>
    /// <item>slides：幻灯片</item>
    /// </list>
    /// </param>
    /// <param name="member_type">
    /// <para>必填：是</para>
    /// <para>协作者 ID 类型，与协作者 ID 需要对应</para>
    /// <para>示例值：openid</para>
    /// <list type="bullet">
    /// <item>email：邮箱地址</item>
    /// <item>openid：开放平台 ID</item>
    /// <item>openchat：开放平台群组 ID</item>
    /// <item>opendepartmentid：开放平台部门 ID</item>
    /// <item>userid：用户自定义 ID</item>
    /// <item>unionid：开放平台 UnionID</item>
    /// <item>groupid：自定义用户组 ID</item>
    /// <item>wikispaceid：知识空间 ID - **注意**：仅知识库文档支持该参数，当需要操作知识库文档里的「知识库成员」类型协作者时传该参数</item>
    /// </list>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpDelete("/open-apis/drive/v1/permissions/{token}/members/{member_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteDriveV1PermissionsByTokenMembersByMemberIdAsync(
        [PathQuery] string token,
        [PathQuery] string member_id,
        [PathQuery] string type,
        [PathQuery] string member_type,
        [JsonContent] Ccm.DeleteDriveV1PermissionsByTokenMembersByMemberIdBodyDto dto);

    /// <summary>
    /// <para>【云文档】更新协作者权限</para>
    /// <para>接口ID：6998069547745230876</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/permission/permission-member/update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于根据文件的 token 更新文档协作者的权限。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>bitable:app</item>
    /// <item>bitable:bitable</item>
    /// <item>docs:doc</item>
    /// <item>docs:permission.member:update</item>
    /// <item>drive:drive</item>
    /// <item>drive:file</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>wiki:wiki</item>
    /// </list></para>
    /// </summary>
    /// <param name="token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文件的 token，获取方式见 [如何获取云文档资源相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)</para>
    /// <para>示例值：doccnBKgoMyY5OMbUG6FioTXuBe</para>
    /// </param>
    /// <param name="member_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>协作者 ID，与协作者 ID 类型需要对应</para>
    /// <para>示例值：ou_7dab8a3d3cdcc9da365777c7ad535d62</para>
    /// </param>
    /// <param name="need_notification">
    /// <para>必填：否</para>
    /// <para>更新权限后是否通知对方</para>
    /// <para>**注意：** 使用`tenant_access_token`访问不支持该参数</para>
    /// <para>示例值：false</para>
    /// <para>默认值：false</para>
    /// </param>
    /// <param name="type">
    /// <para>必填：是</para>
    /// <para>文件类型，需要与文件的 token 相匹配</para>
    /// <para>示例值：doc</para>
    /// <list type="bullet">
    /// <item>doc：文档</item>
    /// <item>sheet：电子表格</item>
    /// <item>file：云空间文件</item>
    /// <item>wiki：知识库节点</item>
    /// <item>bitable：多维表格</item>
    /// <item>docx：新版文档</item>
    /// <item>mindnote：思维笔记</item>
    /// <item>minutes：妙记</item>
    /// <item>slides：幻灯片</item>
    /// </list>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/drive/v1/permissions/{token}/members/{member_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PutDriveV1PermissionsByTokenMembersByMemberIdResponseDto>> PutDriveV1PermissionsByTokenMembersByMemberIdAsync(
        [PathQuery] string token,
        [PathQuery] string member_id,
        [PathQuery] string type,
        [JsonContent] Ccm.PutDriveV1PermissionsByTokenMembersByMemberIdBodyDto dto,
        [PathQuery] bool? need_notification = false);

    /// <summary>
    /// <para>【任务】更新评论</para>
    /// <para>接口ID：6999599891686227970</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/task-v1/task-comment/update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于更新评论内容。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:comment</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务ID</para>
    /// <para>示例值：83912691-2e43-47fc-94a4-d512e03984fa</para>
    /// </param>
    /// <param name="comment_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>评论 ID</para>
    /// <para>示例值：6937231762296684564</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/task/v1/tasks/{task_id}/comments/{comment_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PutTaskV1TasksByTaskIdCommentsByCommentIdResponseDto>> PutTaskV1TasksByTaskIdCommentsByCommentIdAsync(
        [PathQuery] string task_id,
        [PathQuery] string comment_id,
        [JsonContent] Task.PutTaskV1TasksByTaskIdCommentsByCommentIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】获取评论详情</para>
    /// <para>接口ID：6999599891686244354</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/task-v1/task-comment/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于通过评论ID获取评论详情。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:comment</item>
    /// <item>task:comment:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务ID</para>
    /// <para>示例值：83912691-2e43-47fc-94a4-d512e03984fa</para>
    /// </param>
    /// <param name="comment_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>评论ID</para>
    /// <para>示例值：6937231762296684564</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/task/v1/tasks/{task_id}/comments/{comment_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Task.GetTaskV1TasksByTaskIdCommentsByCommentIdResponseDto>> GetTaskV1TasksByTaskIdCommentsByCommentIdAsync(
        [PathQuery] string task_id,
        [PathQuery] string comment_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】创建评论</para>
    /// <para>接口ID：6999599891686293506</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/task-v1/task-comment/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于创建和回复任务的评论。当parent_id字段为0时，为创建评论；当parent_id不为0时，为回复某条评论。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:comment</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务 ID</para>
    /// <para>示例值：83912691-2e43-47fc-94a4-d512e03984fa</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v1/tasks/{task_id}/comments")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV1TasksByTaskIdCommentsResponseDto>> PostTaskV1TasksByTaskIdCommentsAsync(
        [PathQuery] string task_id,
        [JsonContent] Task.PostTaskV1TasksByTaskIdCommentsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】删除评论</para>
    /// <para>接口ID：6999599891686309890</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/task-v1/task-comment/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于通过评论ID删除评论。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:comment</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务ID</para>
    /// <para>示例值：83912691-2e43-47fc-94a4-d512e03984fa</para>
    /// </param>
    /// <param name="comment_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>评论ID</para>
    /// <para>示例值：6937231762296684564</para>
    /// </param>
    [HttpDelete("/open-apis/task/v1/tasks/{task_id}/comments/{comment_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteTaskV1TasksByTaskIdCommentsByCommentIdAsync(
        [PathQuery] string task_id,
        [PathQuery] string comment_id);

    /// <summary>
    /// <para>【绩效】获取绩效结果</para>
    /// <para>接口ID：7000193886257725441</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/performance-v1/query</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取被评估人在指定周期、指定项目中各个环节的评估结果信息，包含绩效所在的周期、项目、评估项、评估模版以及各环节评估数据等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>performance:performance</item>
    /// <item>performance:performance:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以 people_admin_id 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/performance/v1/review_datas/query")]
    System.Threading.Tasks.Task<FeishuResponse<Performance.PostPerformanceV1ReviewDatasQueryResponseDto>> PostPerformanceV1ReviewDatasQueryAsync(
        [JsonContent] Performance.PostPerformanceV1ReviewDatasQueryBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】获取职位列表</para>
    /// <para>接口ID：7001051759612919811</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/job/list-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取职位列表，仅支持获取默认字段信息，获取详细信息可调用[获取职位信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/get)接口。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:job:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="update_start_time">
    /// <para>必填：否</para>
    /// <para>最早更新时间，毫秒时间戳</para>
    /// <para>示例值：1618500278663</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="update_end_time">
    /// <para>必填：否</para>
    /// <para>最晚更新时间，毫秒时间戳</para>
    /// <para>示例值：1618500278663</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE2Mjc1NTUyMjM2NzIsImlkIjpudWxsfQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>指定查询结果中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门资源介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)。</para>
    /// <para>示例值：department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 od-，在租户内全局唯一。</item>
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值：people_admin_job_level_id</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，可通过[获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_level_id</para>
    /// </param>
    /// <param name="job_family_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「序列 ID」的类型</para>
    /// <para>示例值：people_admin_job_category_id</para>
    /// <list type="bullet">
    /// <item>people_admin_job_category_id：「人力系统管理后台」适用的序列 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_family_id：「飞书管理后台」适用的序列 ID，通过[「获取租户序列列表」](https://open.feishu.cn/document/server-docs/contact-v3/job_family/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_category_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/jobs")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1JobsResponseDto>> GetHireV1JobsAsync(
        [PathQuery] string? update_start_time = null,
        [PathQuery] string? update_end_time = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? job_level_id_type = "people_admin_job_level_id",
        [PathQuery] string? job_family_id_type = "people_admin_job_category_id");

    /// <summary>
    /// <para>【招聘】获取人才列表</para>
    /// <para>接口ID：7001051759612936195</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/talent/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量获取人才摘要信息，包括人才 ID、人才基信息、教育经历、工作经历等。若需要获取人才详细信息请使用[获取人才详情](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/hire-v2/talent/get)接口。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:talent</item>
    /// <item>hire:talent:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="keyword">
    /// <para>必填：否</para>
    /// <para>搜索关键词，支持布尔语言（使用 and、or、not 连接关键词）</para>
    /// <para>示例值：张三 and 产品经理</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="update_start_time">
    /// <para>必填：否</para>
    /// <para>最早更新时间，毫秒时间戳</para>
    /// <para>示例值：1618500278663</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="update_end_time">
    /// <para>必填：否</para>
    /// <para>最晚更新时间，毫秒时间戳</para>
    /// <para>示例值：1618500278663</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="sort_by">
    /// <para>必填：否</para>
    /// <para>排序规则</para>
    /// <para>示例值：1</para>
    /// <list type="bullet">
    /// <item>1：按更新日期降序</item>
    /// <item>2：按相关度降序</item>
    /// <item>3：按投递时间降序</item>
    /// <item>4：按入库时间降序</item>
    /// </list>
    /// <para>默认值：1</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE2Mjc1NTUyMjM2NzIsImlkIjpudWxsfQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以 people_admin_id 来识别用户</item>
    /// </list>
    /// <para>默认值：people_admin_id</para>
    /// </param>
    /// <param name="query_option">
    /// <para>必填：否</para>
    /// <para>请求控制参数</para>
    /// <para>示例值：ignore_empty_error</para>
    /// <list type="bullet">
    /// <item>ignore_empty_error：忽略结果为空时的报错</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/talents")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1TalentsResponseDto>> GetHireV1TalentsAsync(
        [PathQuery] string? keyword = null,
        [PathQuery] string? update_start_time = null,
        [PathQuery] string? update_end_time = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] int? sort_by = 1,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "people_admin_id",
        [PathQuery] string? query_option = null);

    /// <summary>
    /// <para>【招聘】获取项目列表</para>
    /// <para>接口ID：7002055120885202947</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/subject/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取项目列表（概念上一批集体启动和管理的职位可以定义为一个项目，例如 「2012 秋招项目」）。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:subject:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：1231231987</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小, 不能超过 200</para>
    /// <para>示例值：100</para>
    /// <para>默认值：1</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/subjects")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1SubjectsResponseDto>> GetHireV1SubjectsAsync(
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 1);

    /// <summary>
    /// <para>【招聘】获取 Offer 申请表列表</para>
    /// <para>接口ID：7002055120885219331</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/offer-settings/offer_application_form/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取 Offer 申请表列表，可获取的信息包括申请表名称、创建时间等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:offer_schema:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：1231231987</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，**无效参数，请忽略**</para>
    /// <para>示例值：100</para>
    /// <para>默认值：1</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/offer_application_forms")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1OfferApplicationFormsResponseDto>> GetHireV1OfferApplicationFormsAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 1);

    /// <summary>
    /// <para>【通讯录】更新用户组</para>
    /// <para>接口ID：7008085931593007107</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/group/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口更新指定用户组的名称或描述。</para>
    /// <para>## 注意事项</para>
    /// <para>- 应用的通讯录权限范围需要符合以下任一设置，才可以成功调用本接口。了解应用通讯录权限范围，可参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>- 通讯录权限范围设置为 **全部员工**。</para>
    /// <para>- 由企业管理员在管理后台设置应用可见范围内包含当前待更新的用户组，然后应用的通讯录权限范围设置为 **与应用的可用范围一致**。</para>
    /// <para>- API 方式暂不支持更新动态用户组。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:group</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="group_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户组 ID。</para>
    /// <para>用户组 ID 可在创建用户组时从返回值中获取，你也可以调用[查询用户组列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/simplelist)接口，获取用户组的 ID。</para>
    /// <para>示例值：g187131</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 `od-`，在租户内全局唯一。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/contact/v3/group/{group_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PatchContactV3GroupByGroupIdAsync(
        [PathQuery] string group_id,
        [JsonContent] Contact.PatchContactV3GroupByGroupIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【通讯录】查询指定用户组</para>
    /// <para>接口ID：7008085931593023491</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/group/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口通过用户组 ID 查询指定用户组的基本信息，包括用户组名称、成员数量和类型等。</para>
    /// <para>## 注意事项</para>
    /// <para>- 应用的通讯录权限范围需要符合以下任一设置，才可以成功调用本接口。了解应用通讯录权限范围，可参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>- 通讯录权限范围设置为 **全部员工**。</para>
    /// <para>- 由企业管理员在管理后台设置应用可见范围内包含当前待查询的用户组，然后应用的通讯录权限范围设置为 **与应用的可用范围一致**。</para>
    /// <para>- 支持查询普通用户组和动态用户组。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:group:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="group_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户组 ID。</para>
    /// <para>用户组 ID 可在创建用户组时从返回值中获取，你也可以调用[查询用户组列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/simplelist)接口，获取用户组的 ID。</para>
    /// <para>示例值：g193821</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 `od-`，在租户内全局唯一。</item>
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/group/{group_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3GroupByGroupIdResponseDto>> GetContactV3GroupByGroupIdAsync(
        [PathQuery] string group_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【通讯录】查询用户组列表</para>
    /// <para>接口ID：7008085931593039875</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/group/simplelist</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口查询当前租户下的用户组列表，列表内包含用户组的 ID、名字、成员数量和类型等信息。</para>
    /// <para>## 注意事项</para>
    /// <para>- 如果应用的通讯录权限范围设置为 **全部员工**，则通过本接口可查询到租户内所有用户组的信息，否则，仅会查询到应用通讯录权限范围内的用户组信息。了解应用通讯录权限范围，可参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>- 支持查询到普通用户组和动态用户组的信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:group:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，用于限制一次请求所返回的数据条目数。</para>
    /// <para>示例值：50</para>
    /// <para>默认值：50</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="type">
    /// <para>必填：否</para>
    /// <para>用户组类型。</para>
    /// <para>示例值：1</para>
    /// <list type="bullet">
    /// <item>1：普通用户组</item>
    /// <item>2：动态用户组</item>
    /// </list>
    /// <para>默认值：1</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/group/simplelist")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3GroupSimplelistResponseDto>> GetContactV3GroupSimplelistAsync(
        [PathQuery] int? page_size = 50,
        [PathQuery] string? page_token = null,
        [PathQuery] int? type = 1);

    /// <summary>
    /// <para>【通讯录】添加用户组成员</para>
    /// <para>接口ID：7008085931593056259</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/group-member/add</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口向指定的普通用户组内添加成员。</para>
    /// <para>## 注意事项</para>
    /// <para>- 目前仅支持添加用户类型的成员，暂不支持添加部门类型的成员。</para>
    /// <para>- 如果应用的通讯录权限范围是 **全部员工**，则可以将当前租户内的任何用户添加到任何用户组当中。如果应用的通讯录权限范围不是 **全部员工**，则所要添加的用户以及对应的用户组，均需要在应用的通讯录权限范围内。了解通讯录权限范围，可参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>## 使用限制</para>
    /// <para>单租户内单个普通用户组的成员数量上限为 100,000，但需要注意，单租户内所有普通用户组的成员数量总和不能超过当前租户成员数量的 10 倍。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:group</item>
    /// </list></para>
    /// </summary>
    /// <param name="group_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户组 ID。</para>
    /// <para>用户组 ID 可在创建用户组时从返回值中获取，你也可以调用[查询用户组列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/simplelist)接口，获取用户组的 ID。</para>
    /// <para>示例值：g281721</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/contact/v3/group/{group_id}/member/add")]
    System.Threading.Tasks.Task<FeishuResponse> PostContactV3GroupByGroupIdMemberAddAsync(
        [PathQuery] string group_id,
        [JsonContent] Contact.PostContactV3GroupByGroupIdMemberAddBodyDto dto);

    /// <summary>
    /// <para>【通讯录】查询用户组成员列表</para>
    /// <para>接口ID：7008085931593072643</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/group-member/simplelist</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口查询指定用户组内的成员列表，列表内主要包括成员 ID 信息。</para>
    /// <para>## 注意事项</para>
    /// <para>- 本接口支持查询普通用户组和动态用户组的成员信息。</para>
    /// <para>- 本接口支持查询用户组内的用户类型成员或部门类型成员。一次请求中只能查询用户类型成员或者部门类型成员，不支持查询所有类型的用户组成员。</para>
    /// <para>- 如果应用的通讯录权限范围是 **全部员工**，则可以查询当前租户下任何用户组成员列表。如果应用的通讯录权限范围不是 **全部员工**，则仅可查询通讯录权限范围内的用户组成员列表。了解通讯录权限范围，可参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:group:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="group_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户组 ID。</para>
    /// <para>用户组 ID 可在创建用户组时从返回值中获取，你也可以调用[查询用户组列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/simplelist)接口，获取用户组的 ID。</para>
    /// <para>示例值：g128187</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，用于限制一次请求返回的最大条目数。</para>
    /// <para>示例值：50</para>
    /// <para>默认值：50</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="member_id_type">
    /// <para>必填：否</para>
    /// <para>用户组成员 ID 类型。</para>
    /// <para>- 当 `member_type` 取值为 `user`时，该参数表示用户 ID 类型，包括 open_id、union_id、user_id。</para>
    /// <para>- 当 `member_type` 取值为 `department`时，该参数表示部门 ID 类型，包括 department_id、open_department_id。</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：当 `member_type` 取值为 `user`时，表示用户的 open_id。 当 `member_type` 取值为 `department`时，表示部门的 open_department_id。</item>
    /// <item>union_id：当 `member_type` 取值为 `user`时，表示用户的 union_id。</item>
    /// <item>user_id：当 `member_type` 取值为 `user`时，表示用户的 user_id。</item>
    /// <item>department_id：当 `member_type` 取值为 `department`时，表示部门的 department_id。</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="member_type">
    /// <para>必填：否</para>
    /// <para>用户组成员类型。</para>
    /// <para>示例值：user</para>
    /// <list type="bullet">
    /// <item>user：用户，表示仅查询用户组内的用户类型成员。</item>
    /// <item>department：部门，表示仅查询用户组内的部门类型成员。</item>
    /// </list>
    /// <para>默认值：user</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/group/{group_id}/member/simplelist")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3GroupByGroupIdMemberSimplelistResponseDto>> GetContactV3GroupByGroupIdMemberSimplelistAsync(
        [PathQuery] string group_id,
        [PathQuery] int? page_size = 50,
        [PathQuery] string? page_token = null,
        [PathQuery] string? member_id_type = "open_id",
        [PathQuery] string? member_type = "user");

    /// <summary>
    /// <para>【通讯录】创建用户组</para>
    /// <para>接口ID：7008085931593089027</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/group/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口创建一个用户组。用户组是飞书通讯录中基础实体之一，在用户组内可添加用户或部门资源。各类业务权限管控可以与用户组关联，从而实现高效便捷的成员权限管控。</para>
    /// <para>## 注意事项</para>
    /// <para>- 应用的通讯录权限范围必须为全部员工，否则会调用失败。了解应用通讯录权限范围，可参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>- 暂不支持通过该接口创建动态用户组。如需创建动态用户组参考[动态用户组](https://www.feishu.cn/hc/zh-CN/articles/360049067874)。</para>
    /// <para>## 使用限制</para>
    /// <para>单租户内用户组总数上限为 500（包含普通用户组和动态用户组）。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:group</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 `od-`，在租户内全局唯一。</item>
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/contact/v3/group")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.PostContactV3GroupResponseDto>> PostContactV3GroupAsync(
        [JsonContent] Contact.PostContactV3GroupBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【通讯录】删除用户组</para>
    /// <para>接口ID：7008085931593105411</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/group/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口删除指定用户组。</para>
    /// <para>## 注意事项</para>
    /// <para>- 应用的通讯录权限范围必须为全部员工，否则会调用失败。了解应用通讯录权限范围，可参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>- API 方式暂不支持删除动态用户组。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:group</item>
    /// </list></para>
    /// </summary>
    /// <param name="group_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需删除的用户组 ID。</para>
    /// <para>用户组 ID 可在创建用户组时从返回值中获取，你也可以调用[查询用户组列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/simplelist)接口，获取用户组的 ID。</para>
    /// <para>示例值：g1837191</para>
    /// </param>
    [HttpDelete("/open-apis/contact/v3/group/{group_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteContactV3GroupByGroupIdAsync(
        [PathQuery] string group_id);

    /// <summary>
    /// <para>【通讯录】移除用户组成员</para>
    /// <para>接口ID：7008085931593138179</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/group-member/remove</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口移除指定普通用户组内的某一成员。</para>
    /// <para>## 注意事项</para>
    /// <para>- 目前仅支持移除用户类型的成员，暂不支持移除部门类型的成员。</para>
    /// <para>- 如果应用的通讯录权限范围是 **全部员工**，则可以将当前租户内的任何用户移除任何用户组。如果应用的通讯录权限范围不是 **全部员工**，则所要移除的用户以及对应的用户组，均需要在应用的通讯录权限范围内。了解通讯录权限范围，可参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:group</item>
    /// </list></para>
    /// </summary>
    /// <param name="group_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户组 ID。</para>
    /// <para>用户组 ID 可在创建用户组时从返回值中获取，你也可以调用[查询用户组列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/simplelist)接口，获取用户组的 ID。</para>
    /// <para>示例值：g198123</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/contact/v3/group/{group_id}/member/remove")]
    System.Threading.Tasks.Task<FeishuResponse> PostContactV3GroupByGroupIdMemberRemoveAsync(
        [PathQuery] string group_id,
        [JsonContent] Contact.PostContactV3GroupByGroupIdMemberRemoveBodyDto dto);

    /// <summary>
    /// <para>【招聘】新建职位</para>
    /// <para>接口ID：7012986483075481601</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/job/combined_create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建一个新的职位。</para>
    /// <para>## 注意事项</para>
    /// <para>- 调用此接口前，需先打开「飞书招聘」-「设置」-「职位管理」-「职位设置」-「通过API同步职位开关」开关。</para>
    /// <para>- 字段是否必填，将以「飞书招聘」-「设置」-「职位管理」-「职位字段管理」中的设置为准。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:job</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>指定查询结果中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门资源介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：由系统自动生成的部门 ID， ID前缀固定为 `od-`，在租户内全局唯一。</item>
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内，department_id 具有唯一性。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值：people_admin_job_level_id</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，通过[获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_level_id</para>
    /// </param>
    /// <param name="job_family_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「序列 ID」的类型</para>
    /// <para>示例值：job_family_id</para>
    /// <list type="bullet">
    /// <item>people_admin_job_category_id：「人力系统管理后台」适用的序列 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_family_id：「飞书管理后台」适用的序列 ID，通过[获取租户序列列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_family/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_category_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/jobs/combined_create")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1JobsCombinedCreateResponseDto>> PostHireV1JobsCombinedCreateAsync(
        [JsonContent] Hire.PostHireV1JobsCombinedCreateBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? job_level_id_type = "people_admin_job_level_id",
        [PathQuery] string? job_family_id_type = "people_admin_job_category_id");

    /// <summary>
    /// <para>【招聘】更新职位</para>
    /// <para>接口ID：7012986483075497985</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/job/combined_update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新职位信息。</para>
    /// <para>## 注意事项</para>
    /// <para>- 调用此接口前，需先打开「飞书招聘」-「设置」-「职位管理」-「职位设置」-「通过API同步职位开关」开关。</para>
    /// <para>- 该接口为全量更新，若字段没有填充值，则原有值将会被清空。</para>
    /// <para>- 字段是否必填，将以「飞书招聘」-「设置」-「职位管理」-「职位字段管理」中的设置为准。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:job</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>职位 ID，可通过 [获取职位列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/list) 接口获取</para>
    /// <para>示例值：6960663240925956660</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>指定查询结果中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门资源介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：由系统自动生成的部门 ID， ID前缀固定为 `od-`，在租户内全局唯一。</item>
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内，department_id 具有唯一性。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值：people_admin_job_level_id</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，可通过 [获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list) 接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_level_id</para>
    /// </param>
    /// <param name="job_family_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「序列 ID」的类型</para>
    /// <para>示例值：people_admin_job_category_id</para>
    /// <list type="bullet">
    /// <item>people_admin_job_category_id：「人力系统管理后台」适用的序列 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_family_id：「飞书管理后台」适用的序列 ID，可通过 [获取租户序列列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_family/list) 接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_category_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/jobs/{job_id}/combined_update")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1JobsByJobIdCombinedUpdateResponseDto>> PostHireV1JobsByJobIdCombinedUpdateAsync(
        [PathQuery] string job_id,
        [JsonContent] Hire.PostHireV1JobsByJobIdCombinedUpdateBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? job_level_id_type = "people_admin_job_level_id",
        [PathQuery] string? job_family_id_type = "people_admin_job_category_id");

    /// <summary>
    /// <para>【招聘】关闭职位</para>
    /// <para>接口ID：7012986483075514369</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/job/close</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>关闭职位后，职位所有的职位广告将同步从官网、内推、猎头渠道下线。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:job</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>职位 ID，可通过[获取职位列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/list)接口获取</para>
    /// <para>示例值：6960663240925956555</para>
    /// </param>
    [HttpPost("/open-apis/hire/v1/jobs/{job_id}/close")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1JobsByJobIdCloseAsync(
        [PathQuery] string job_id);

    /// <summary>
    /// <para>【招聘】重启职位</para>
    /// <para>接口ID：7012986483075530753</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/job/open</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对于已关闭的职位，可通过本接口重启职位。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:job</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>职位 ID，可通过[获取职位列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/list)获取</para>
    /// <para>示例值：6960663240925956555</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/jobs/{job_id}/open")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1JobsByJobIdOpenAsync(
        [PathQuery] string job_id,
        [JsonContent] Hire.PostHireV1JobsByJobIdOpenBodyDto dto);

    /// <summary>
    /// <para>【招聘】发布职位广告</para>
    /// <para>接口ID：7012986483075547137</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/job/publish</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>支持把职位广告发布上线至招聘官网、内推平台。</para>
    /// <para>## 注意事项</para>
    /// <para>调用此接口前，需先打开「飞书招聘」-「设置」-「职位管理」-「职位设置」-「通过 API 同步职位开关」开关。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:advertisement</item>
    /// </list></para>
    /// </summary>
    /// <param name="advertisement_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>职位广告 ID，可由[新建职位](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/combined_create)接口创建职位后返回获取。</para>
    /// <para>示例值：6960663240925956660</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/advertisements/{advertisement_id}/publish")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1AdvertisementsByAdvertisementIdPublishAsync(
        [PathQuery] string advertisement_id,
        [JsonContent] Hire.PostHireV1AdvertisementsByAdvertisementIdPublishBodyDto dto);

    /// <summary>
    /// <para>【招聘】更新职位设置</para>
    /// <para>接口ID：7012986483075563521</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/job/update_config</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新职位设置，包括面试评价表、Offer 申请表等。</para>
    /// <para>## 注意事项</para>
    /// <para>调用此接口前，需先打开「飞书招聘」-「设置」-「职位管理」-「职位设置」-「通过 API 同步职位开关」开关。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:job</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>职位 ID，可通过[获取职位列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/list)接口获取</para>
    /// <para>示例值：6960663240925956660</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/jobs/{job_id}/update_config")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1JobsByJobIdUpdateConfigResponseDto>> PostHireV1JobsByJobIdUpdateConfigAsync(
        [PathQuery] string job_id,
        [JsonContent] Hire.PostHireV1JobsByJobIdUpdateConfigBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】获取与会议号关联的会议列表</para>
    /// <para>接口ID：7013251669786116097</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/meeting/list_by_no</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取指定时间范围（90天内)会议号关联的会议简要信息列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:meeting:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="meeting_no">
    /// <para>必填：是</para>
    /// <para>9位会议号</para>
    /// <para>示例值：123456789</para>
    /// </param>
    /// <param name="start_time">
    /// <para>必填：是</para>
    /// <para>查询开始时间（unix时间，单位sec）</para>
    /// <para>示例值：1608888867</para>
    /// </param>
    /// <param name="end_time">
    /// <para>必填：是</para>
    /// <para>查询结束时间（unix时间，单位sec）</para>
    /// <para>示例值：1608888867</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：5</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    [HttpGet("/open-apis/vc/v1/meetings/list_by_no")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.GetVcV1MeetingsListByNoResponseDto>> GetVcV1MeetingsListByNoAsync(
        [PathQuery] string meeting_no,
        [PathQuery] string start_time,
        [PathQuery] string end_time,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【词典】创建草稿</para>
    /// <para>接口ID：7016992864837271580</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/baike-v1/draft/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>草稿并非词条，而是指通过 API 发起创建新词条或更新现有词条的申请。</para>
    /// <para>词典管理员审核通过后，草稿将变为新的词条或覆盖已有词条。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity</item>
    /// <item>baike:entity:exempt_review</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/lingo-v1/draft/create")]
    [HttpPost("/open-apis/baike/v1/drafts")]
    System.Threading.Tasks.Task<FeishuResponse<Baike.PostBaikeV1DraftsResponseDto>> PostBaikeV1DraftsAsync(
        [JsonContent] Baike.PostBaikeV1DraftsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【词典】更新草稿</para>
    /// <para>接口ID：7016992864837287964</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/baike-v1/draft/update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据 draft_id 更新草稿内容，已审批的草稿无法编辑。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity</item>
    /// <item>baike:entity:exempt_review</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="draft_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>草稿 ID</para>
    /// <para>示例值：5347</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/lingo-v1/draft/update")]
    [HttpPut("/open-apis/baike/v1/drafts/{draft_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Baike.PutBaikeV1DraftsByDraftIdResponseDto>> PutBaikeV1DraftsByDraftIdAsync(
        [PathQuery] string draft_id,
        [JsonContent] Baike.PutBaikeV1DraftsByDraftIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【词典】获取词条详情</para>
    /// <para>接口ID：7016992864837304348</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/baike-v1/entity/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>通过词条 id 拉取对应的词条详情信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity</item>
    /// <item>baike:entity:exempt_review</item>
    /// <item>baike:entity:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="entity_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>词条 ID</para>
    /// <para>示例值：enterprise_515879</para>
    /// </param>
    /// <param name="provider">
    /// <para>必填：否</para>
    /// <para>外部系统</para>
    /// <para>示例值：星云</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="outer_id">
    /// <para>必填：否</para>
    /// <para>词条在外部系统中对应的唯一 ID</para>
    /// <para>示例值：12345</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/lingo-v1/entity/get")]
    [HttpGet("/open-apis/baike/v1/entities/{entity_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Baike.GetBaikeV1EntitiesByEntityIdResponseDto>> GetBaikeV1EntitiesByEntityIdAsync(
        [PathQuery] string entity_id,
        [PathQuery] string? provider = null,
        [PathQuery] string? outer_id = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【词典】获取词条列表</para>
    /// <para>接口ID：7016992864837320732</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/baike-v1/entity/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>分页拉取词条列表数据，支持拉取租户内的全部词条。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity</item>
    /// <item>baike:entity:exempt_review</item>
    /// <item>baike:entity:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：20</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：b152fa6e6f62a291019a04c3a93f365f8ac641910506ff15ff4cad6534e087cb4ed8fa2c</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="provider">
    /// <para>必填：否</para>
    /// <para>相关外部系统【可用来过滤词条数据】</para>
    /// <para>示例值：星云</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/lingo-v1/entity/list")]
    [HttpGet("/open-apis/baike/v1/entities")]
    System.Threading.Tasks.Task<FeishuResponse<Baike.GetBaikeV1EntitiesResponseDto>> GetBaikeV1EntitiesAsync(
        [PathQuery] int? page_size = 20,
        [PathQuery] string? page_token = null,
        [PathQuery] string? provider = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【词典】精准搜索词条</para>
    /// <para>接口ID：7016992864837337116</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/baike-v1/entity/match</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>将关键词与词条名、别名精准匹配，并返回对应的 词条 ID。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity</item>
    /// <item>baike:entity:exempt_review</item>
    /// <item>baike:entity:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/lingo-v1/entity/match")]
    [HttpPost("/open-apis/baike/v1/entities/match")]
    System.Threading.Tasks.Task<FeishuResponse<Baike.PostBaikeV1EntitiesMatchResponseDto>> PostBaikeV1EntitiesMatchAsync(
        [JsonContent] Baike.PostBaikeV1EntitiesMatchBodyDto dto);

    /// <summary>
    /// <para>【词典】模糊搜索词条</para>
    /// <para>接口ID：7016992864837353500</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/baike-v1/entity/search</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>传入关键词，与词条名、别名、释义等信息进行模糊匹配，返回搜到的词条信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity</item>
    /// <item>baike:entity:exempt_review</item>
    /// <item>baike:entity:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：b152fa6e6f62a291019a04c3a93f365f8ac641910506ff15ff4cad6534e087cb4ed8fa2c</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：b152fa6e6f62a291019a04c3a93f365f8ac641910506ff15ff4cad6534e087cb4ed8fa2c</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/lingo-v1/entity/search")]
    [HttpPost("/open-apis/baike/v1/entities/search")]
    System.Threading.Tasks.Task<FeishuResponse<Baike.PostBaikeV1EntitiesSearchResponseDto>> PostBaikeV1EntitiesSearchAsync(
        [JsonContent] Baike.PostBaikeV1EntitiesSearchBodyDto dto,
        [PathQuery] int? page_size = 20,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【词典】词条高亮</para>
    /// <para>接口ID：7016992864837369884</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/baike-v1/entity/highlight</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>传入一句话，智能识别句中对应的词条，并返回词条位置和 entity_id，可在外部系统中快速实现词条智能高亮。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity</item>
    /// <item>baike:entity:exempt_review</item>
    /// <item>baike:entity:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/lingo-v1/entity/highlight")]
    [HttpPost("/open-apis/baike/v1/entities/highlight")]
    System.Threading.Tasks.Task<FeishuResponse<Baike.PostBaikeV1EntitiesHighlightResponseDto>> PostBaikeV1EntitiesHighlightAsync(
        [JsonContent] Baike.PostBaikeV1EntitiesHighlightBodyDto dto);

    /// <summary>
    /// <para>【飞书人事】删除个人信息</para>
    /// <para>接口ID：7017694651621834756</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/employee/person/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除人员的个人信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:person:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="person_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要删除的Person ID</para>
    /// <para>示例值：654637829201</para>
    /// </param>
    [HttpDelete("/open-apis/corehr/v1/persons/{person_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCorehrV1PersonsByPersonIdAsync(
        [PathQuery] string person_id);

    /// <summary>
    /// <para>【飞书人事】批量查询工时制度</para>
    /// <para>接口ID：7017694651621851140</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/working_hours_type/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量查询工时制度。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.preset_data:read</item>
    /// <item>corehr:common_data.preset_data:write</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：1231231987</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>- 格式：整数</para>
    /// <para>- 范围：（0, 2000）</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/working_hours_types")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1WorkingHoursTypesResponseDto>> GetCorehrV1WorkingHoursTypesAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int page_size = 10);

    /// <summary>
    /// <para>【飞书人事】查询单个公司</para>
    /// <para>接口ID：7017694651621867524</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/organization-management/company/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据 ID 查询单个公司。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:company:read</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="company_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要查询的公司ID。ID获取方式：</para>
    /// <para>- 调用[【创建公司】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/create)[【批量查询公司】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/list)等接口可以返回部门ID</para>
    /// <para>示例值：151515</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/companies/{company_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1CompaniesByCompanyIdResponseDto>> GetCorehrV1CompaniesByCompanyIdAsync(
        [PathQuery] string company_id);

    /// <summary>
    /// <para>【飞书人事】查询单个合同</para>
    /// <para>接口ID：7017694651621883908</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/contract/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于根据合同 ID 查询单个合同详细信息，包括合同开始日期、结束日期、公司主体等信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="contract_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>合同ID，该ID可以通过[【批量查询合同】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/contract/list)接口获取</para>
    /// <para>示例值：7091849027838838316</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/contracts/{contract_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1ContractsByContractIdResponseDto>> GetCorehrV1ContractsByContractIdAsync(
        [PathQuery] string contract_id);

    /// <summary>
    /// <para>【飞书人事】删除人员类型</para>
    /// <para>接口ID：7017694651621900292</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/employee_type/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除人员类型。删除之后查询接口不能获取到已删除的数据。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.preset_data:write</item>
    /// <item>corehr:corehr</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_type_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要删除的人员类型ID</para>
    /// <para>- 可通过[批量查询人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employee_type/list)获取</para>
    /// <para>示例值：434343434</para>
    /// </param>
    [HttpDelete("/open-apis/corehr/v1/employee_types/{employee_type_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCorehrV1EmployeeTypesByEmployeeTypeIdAsync(
        [PathQuery] string employee_type_id);

    /// <summary>
    /// <para>【飞书人事】查询单个职级</para>
    /// <para>接口ID：7017694651621916676</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/job-management/job_level/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口支持通过职级id 查询单个职级详情信息，包括职级包含的名称、描述、启用状态等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// <item>corehr:job_level:read</item>
    /// <item>corehr:job_level:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_level_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>职级ID。ID获取方式：</para>
    /// <para>- 调用[【新建职级】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_level/create)[【查询租户的职级信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_level/list)等接口可以返回职级ID</para>
    /// <para>示例值：1515</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/job_levels/{job_level_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1JobLevelsByJobLevelIdResponseDto>> GetCorehrV1JobLevelsByJobLevelIdAsync(
        [PathQuery] string job_level_id);

    /// <summary>
    /// <para>【飞书人事】删除序列</para>
    /// <para>接口ID：7017694651621965828</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/job-management/job_family/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口支持通过序列ID删除单个序列信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:job_family:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_family_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要删除的序列 ID。ID获取方式：</para>
    /// <para>- 调用[【新建序列】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_family/create)[【查询租户的序列信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_family/list)等接口可以返回序列ID</para>
    /// <para>示例值：5425424525</para>
    /// </param>
    [HttpDelete("/open-apis/corehr/v1/job_families/{job_family_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCorehrV1JobFamiliesByJobFamilyIdAsync(
        [PathQuery] string job_family_id);

    /// <summary>
    /// <para>【飞书人事】查询单个职务</para>
    /// <para>接口ID：7017694651621998596</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/job-management/job/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口支持通过职务id批量查询当天的职务详情信息，包括职务包含的名称、描述、启用状态等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// <item>corehr:job:read</item>
    /// <item>corehr:job:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>职务 ID</para>
    /// <para>示例值：151515</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/jobs/{job_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1JobsByJobIdResponseDto>> GetCorehrV1JobsByJobIdAsync(
        [PathQuery] string job_id);

    /// <summary>
    /// <para>【飞书人事】查询单个任职信息</para>
    /// <para>接口ID：7017694651622014980</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/employee/job_data/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据 ID 查询当前生效的主任职记录。所有主任职记录中只有一条记录版本当前生效</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:employment.position:read</item>
    /// <item>corehr:employment.position:write</item>
    /// <item>corehr:job_data.compensation_type:read</item>
    /// <item>corehr:job_data.job_data_reason:read</item>
    /// <item>corehr:job_data.service_company:read</item>
    /// <item>corehr:job_data.work_shift:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_data_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任职信息 ID，可通过[【创建任职信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/create)、[【批量查询员工任职信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/employees-job_data/batch_get)等接口获取</para>
    /// <para>示例值：151515</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：people_corehr_department_id</para>
    /// </param>
    [Obsolete("历史版本")]
    [HttpGet("/open-apis/corehr/v1/job_datas/{job_data_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1JobDatasByJobDataIdResponseDto>> GetCorehrV1JobDatasByJobDataIdAsync(
        [PathQuery] string job_data_id,
        [PathQuery] string? user_id_type = "people_corehr_id",
        [PathQuery] string? department_id_type = "people_corehr_department_id");

    /// <summary>
    /// <para>【飞书人事】删除任职信息</para>
    /// <para>接口ID：7017694651622031364</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/employee/job_data/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除人员的任职信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:job_data:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_data_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要删除的任职信息 ID</para>
    /// <para>- 通过[【批量查询员工任职】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/employees-job_data/batch_get)可以获得</para>
    /// <para>示例值：467642764726472</para>
    /// </param>
    /// <param name="version_id">
    /// <para>必填：否</para>
    /// <para>需要删除的任职记录版本 ID</para>
    /// <para>- 通过[【批量查询员工任职】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/employees-job_data/batch_get)可以获得</para>
    /// <para>- 不支持第一条版本：任职原因为 onboarding、add_additional_job 的任职（兼职）记录</para>
    /// <para>示例值：1616161616</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpDelete("/open-apis/corehr/v1/job_datas/{job_data_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCorehrV1JobDatasByJobDataIdAsync(
        [PathQuery] string job_data_id,
        [PathQuery] string? version_id = null);

    /// <summary>
    /// <para>【飞书人事】创建任职信息</para>
    /// <para>接口ID：7017694651622047748</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/employee/job_data/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>在系统中第一次创建员工任职数据，通常在员工入职或者做数据批量导入的时候使用，【任职原因】只支持填写“onboarding”。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:job_data:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:employment.pathway:read</item>
    /// <item>corehr:employment.pathway:write</item>
    /// <item>corehr:job_data.compensation_type:read</item>
    /// <item>corehr:job_data.service_company:read</item>
    /// <item>corehr:job_data.work_shift:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>操作的唯一标识，用于幂等的进行更新操作，格式为标准的 UUIDV4。此值为空表示将发起一次新的请求，此值非空表示幂等的进行更新操作。</para>
    /// <para>示例值："fe599b60-450f-46ff-b2ef-9f6675625b97"</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：【飞书】用来在具体某个应用中标识一个部门，同一个 department_id 在不同应用中的 open_department_id 相同。</item>
    /// <item>department_id：【飞书】用来标识租户内一个唯一的部门。</item>
    /// <item>people_corehr_department_id：【飞书人事】用来标识「飞书人事」中的部门。</item>
    /// </list>
    /// <para>默认值：people_corehr_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/job_datas")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1JobDatasResponseDto>> PostCorehrV1JobDatasAsync(
        [JsonContent] FeishuPeople.PostCorehrV1JobDatasBodyDto dto,
        [PathQuery] string? client_token = null,
        [PathQuery] string? user_id_type = "people_corehr_id",
        [PathQuery] string? department_id_type = "people_corehr_department_id");

    /// <summary>
    /// <para>【飞书人事】查询单个个人信息</para>
    /// <para>接口ID：7017694651622064132</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/employee/person/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据 ID 查询单个人员的个人信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// <item>corehr:person:read</item>
    /// <item>corehr:person:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="person_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>Person ID</para>
    /// <para>示例值：1616161616</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>people_employee_id：以people_employee_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/persons/{person_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1PersonsByPersonIdResponseDto>> GetCorehrV1PersonsByPersonIdAsync(
        [PathQuery] string person_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事】批量查询人员类型</para>
    /// <para>接口ID：7017694651622080516</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/employee_type/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量查询人员类型。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.preset_data:read</item>
    /// <item>corehr:common_data.preset_data:write</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：1231231987</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>- 格式：整数</para>
    /// <para>- 范围：（0, 2000）</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/employee_types")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1EmployeeTypesResponseDto>> GetCorehrV1EmployeeTypesAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int page_size = 10);

    /// <summary>
    /// <para>【飞书人事】删除待入职（不推荐）</para>
    /// <para>接口ID：7017694651622096900</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/pre_hire/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除待入职人员接口，本接口直接删除待入职数据，不会判断入职流程，推荐使用新接口进行删除[【删除待入职】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/pre_hire/delete)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:pre_hire:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="pre_hire_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要删除的待入职人员信息ID</para>
    /// <para>示例值：76534545454</para>
    /// </param>
    [HttpDelete("/open-apis/corehr/v1/pre_hires/{pre_hire_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCorehrV1PreHiresByPreHireIdAsync(
        [PathQuery] string pre_hire_id);

    /// <summary>
    /// <para>【飞书人事】查询单个地点</para>
    /// <para>接口ID：7017694651622113284</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/organization-management/location/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于根据地点 ID查询地点信息，信息包含地点名称、描述、地点用途、工时制度、区域设置、时区以及关联的地址信息等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// <item>corehr:locations:read</item>
    /// <item>corehr:locations:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="location_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>地点维护管理员在 飞书人事系统，组织管理模块维护的地点记录 ID。ID获取方式：</para>
    /// <para>- 调用[【创建地点】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/create)[【批量分页查询地点】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/list)等接口可以返回地点ID</para>
    /// <para>示例值：1215</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/locations/{location_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1LocationsByLocationIdResponseDto>> GetCorehrV1LocationsByLocationIdAsync(
        [PathQuery] string location_id);

    /// <summary>
    /// <para>【飞书人事】批量查询序列</para>
    /// <para>接口ID：7017694651622146052</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/job-management/job_family/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口支持获取租户下的所有序列信息。序列数量过多时，可以通过多次循环调用该接口获取所有序列详情信息，包括序列编码、名称等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// <item>corehr:job_family:read</item>
    /// <item>corehr:job_family:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：1231231987</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大值支持传100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/job_families")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1JobFamiliesResponseDto>> GetCorehrV1JobFamiliesAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int page_size = 10);

    /// <summary>
    /// <para>【飞书人事】批量查询职级</para>
    /// <para>接口ID：7017694651622162436</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/job-management/job_level/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口支持获取租户下的所有职级信息。职级数量过多时，可以通过多次循环调用该接口获取所有职级详情信息，包括职级数值、编码、名称等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// <item>corehr:job_level:read</item>
    /// <item>corehr:job_level:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：1231231987</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大支持传100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/job_levels")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1JobLevelsResponseDto>> GetCorehrV1JobLevelsAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int page_size = 10);

    /// <summary>
    /// <para>【飞书人事】查询单个国家证件类型</para>
    /// <para>接口ID：7017694651622178820</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/national_id_type/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据 ID 查询单个国家证件类型。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.preset_data:read</item>
    /// <item>corehr:common_data.preset_data:write</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="national_id_type_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>证件类型 ID</para>
    /// <para>示例值：121515</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/national_id_types/{national_id_type_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1NationalIdTypesByNationalIdTypeIdResponseDto>> GetCorehrV1NationalIdTypesByNationalIdTypeIdAsync(
        [PathQuery] string national_id_type_id);

    /// <summary>
    /// <para>【飞书人事】创建个人信息</para>
    /// <para>接口ID：7017707615190827011</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/employee/person/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建人员的个人信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:person:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/persons")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1PersonsResponseDto>> PostCorehrV1PersonsAsync(
        [JsonContent] FeishuPeople.PostCorehrV1PersonsBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事】查询单个人员类型</para>
    /// <para>接口ID：7017707615190843395</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/employee_type/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据 ID 查询单个人员类型。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.preset_data:read</item>
    /// <item>corehr:common_data.preset_data:write</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_type_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>雇员类型ID</para>
    /// <para>- 可通过[批量查询人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employee_type/list)获取</para>
    /// <para>示例值：1</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/employee_types/{employee_type_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1EmployeeTypesByEmployeeTypeIdResponseDto>> GetCorehrV1EmployeeTypesByEmployeeTypeIdAsync(
        [PathQuery] string employee_type_id);

    /// <summary>
    /// <para>【飞书人事】删除合同</para>
    /// <para>接口ID：7017707615190859779</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/contract/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过本接口可以删除合同数据，删除后即无法查询到。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// </list></para>
    /// </summary>
    /// <param name="contract_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要删除的合同 ID，该ID可以通过[【批量查询合同】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/contract/list)接口获取</para>
    /// <para>示例值：7091849027838838316</para>
    /// </param>
    [HttpDelete("/open-apis/corehr/v1/contracts/{contract_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCorehrV1ContractsByContractIdAsync(
        [PathQuery] string contract_id);

    /// <summary>
    /// <para>【飞书人事】新建合同</para>
    /// <para>接口ID：7017707615190876163</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/contract/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过本接口可以为员工创建一份新合同</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>自定义值，根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：22ff85f7-5938-4579-9b57-d52cfeb05d52</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/contracts")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1ContractsResponseDto>> PostCorehrV1ContractsAsync(
        [JsonContent] FeishuPeople.PostCorehrV1ContractsBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事】创建人员类型</para>
    /// <para>接口ID：7017707615190892547</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/employee_type/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建人员类型。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.preset_data:write</item>
    /// <item>corehr:corehr</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/employee_types")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1EmployeeTypesResponseDto>> PostCorehrV1EmployeeTypesAsync(
        [JsonContent] FeishuPeople.PostCorehrV1EmployeeTypesBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事】查询单个工时制度</para>
    /// <para>接口ID：7017707615190908931</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/working_hours_type/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据 ID 查询单个工时制度。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.preset_data:read</item>
    /// <item>corehr:common_data.preset_data:write</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="working_hours_type_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工时制度 ID</para>
    /// <para>- 可通过[批量查询工时制度](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/working_hours_type/list)获取</para>
    /// <para>示例值：1212</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/working_hours_types/{working_hours_type_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1WorkingHoursTypesByWorkingHoursTypeIdResponseDto>> GetCorehrV1WorkingHoursTypesByWorkingHoursTypeIdAsync(
        [PathQuery] string working_hours_type_id);

    /// <summary>
    /// <para>【飞书人事】创建序列</para>
    /// <para>接口ID：7017707615190925315</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/job-management/job_family/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>可以通过该接口创建单个序列信息，同时该接口会针对该接口的内容做校验。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:job_family:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/job_families")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1JobFamiliesResponseDto>> PostCorehrV1JobFamiliesAsync(
        [JsonContent] FeishuPeople.PostCorehrV1JobFamiliesBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事】批量查询任职信息</para>
    /// <para>接口ID：7017707615190941699</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/employee/job_data/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量查询员工的任职信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// <item>corehr:job_data:read</item>
    /// <item>corehr:job_data:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:employment.position:read</item>
    /// <item>corehr:employment.position:write</item>
    /// <item>corehr:job_data.compensation_type:read</item>
    /// <item>corehr:job_data.job_data_reason:read</item>
    /// <item>corehr:job_data.service_company:read</item>
    /// <item>corehr:job_data.work_shift:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6994718879515739656</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="employment_id">
    /// <para>必填：否</para>
    /// <para>雇佣 ID，可通过[【搜索员工信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/employee/search)获取</para>
    /// <para>- 应与 user_id_type 类型一致</para>
    /// <para>示例值：7072306364927985196</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="job_data_id_list">
    /// <para>必填：否</para>
    /// <para>任职信息 ID 列表</para>
    /// <para>- 默认查询全部任职信息</para>
    /// <para>示例值：["6919733291281024526", "6919733291281024527"]</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="department_id">
    /// <para>必填：否</para>
    /// <para>部门 ID</para>
    /// <para>- 应与 department_id_type 类型一致</para>
    /// <para>- 默认为空</para>
    /// <para>示例值：6887868781834536462</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="job_id">
    /// <para>必填：否</para>
    /// <para>职务 ID</para>
    /// <para>- 默认为空</para>
    /// <para>示例值：6893014062142064135</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="get_all_version">
    /// <para>必填：否</para>
    /// <para>是否获取所有版本的任职记录</para>
    /// <para>- true 为获取员工所有版本的任职记录</para>
    /// <para>- false 为仅获取当前生效的任职记录</para>
    /// <para>- 默认为 false</para>
    /// <para>示例值：false</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：people_corehr_department_id</para>
    /// </param>
    [Obsolete("历史版本")]
    [HttpGet("/open-apis/corehr/v1/job_datas")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1JobDatasResponseDto>> GetCorehrV1JobDatasAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int page_size = 10,
        [PathQuery] string? employment_id = null,
        [PathQuery] string[]? job_data_id_list = null,
        [PathQuery] string? department_id = null,
        [PathQuery] string? job_id = null,
        [PathQuery] bool? get_all_version = null,
        [PathQuery] string? user_id_type = "people_corehr_id",
        [PathQuery] string? department_id_type = "people_corehr_department_id");

    /// <summary>
    /// <para>【飞书人事】批量查询待入职信息</para>
    /// <para>接口ID：7017707615190958083</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/pre_hire/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>可通过本接口批量查询待入职人员信息，本接口不再推荐使用（个人信息相关数据不完整），请使用[查询待入职](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/pre_hire/query)接口获取更完整信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// <item>corehr:pre_hire:read</item>
    /// <item>corehr:pre_hire:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：1231231987</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大值100，最小值 1</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="pre_hire_ids">
    /// <para>必填：否</para>
    /// <para>待入职ID列表，可通过[搜索待入职](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/pre_hire/search)接口获取</para>
    /// <para>示例值：7110120266637772332</para>
    /// <para>默认值：null</para>
    /// </param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/pre_hire/query")]
    [HttpGet("/open-apis/corehr/v1/pre_hires")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1PreHiresResponseDto>> GetCorehrV1PreHiresAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int page_size = 10,
        [PathQuery] string[]? pre_hire_ids = null);

    /// <summary>
    /// <para>【飞书人事】查询单个部门</para>
    /// <para>接口ID：7017707615190974467</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/organization-management/department/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口支持通过部门id批量查询当天的部门详情信息，包括部门包含的名称、描述、启用状态等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="department_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>部门ID。ID获取方式：</para>
    /// <para>- 调用[【创建部门】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/department/create)[【搜索部门】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/department/search)等接口可以返回部门ID</para>
    /// <para>- 也可以通过[【事件】创建部门](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/department/events/created)[【事件】更新部门](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/department/events/updated) 获取部门ID信息</para>
    /// <para>示例值：45456564</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：people_corehr_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：people_corehr_department_id</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/departments/{department_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1DepartmentsByDepartmentIdResponseDto>> GetCorehrV1DepartmentsByDepartmentIdAsync(
        [PathQuery] string department_id,
        [PathQuery] string? user_id_type = "people_corehr_id",
        [PathQuery] string? department_id_type = "people_corehr_department_id");

    /// <summary>
    /// <para>【飞书人事】批量分页查询地点信息</para>
    /// <para>接口ID：7017707615190990851</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/organization-management/location/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于批量查询地点信息，信息包含地点名称、描述、地点用途、工时制度、区域设置、时区以及关联的地址信息等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// <item>corehr:locations:read</item>
    /// <item>corehr:locations:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：1231231987</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大支持100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/locations")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1LocationsResponseDto>> GetCorehrV1LocationsAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int page_size = 10);

    /// <summary>
    /// <para>【飞书人事】查询单个序列</para>
    /// <para>接口ID：7017707615191007235</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/job-management/job_family/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口支持通过序列ID查询单个序列详情信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// <item>corehr:job_family:read</item>
    /// <item>corehr:job_family:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_family_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>序列ID。ID获取方式：</para>
    /// <para>- 调用[【新建序列】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_family/create)[【查询租户的序列信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_family/list)等接口可以返回序列ID</para>
    /// <para>示例值：1554548</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/job_families/{job_family_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1JobFamiliesByJobFamilyIdResponseDto>> GetCorehrV1JobFamiliesByJobFamilyIdAsync(
        [PathQuery] string job_family_id);

    /// <summary>
    /// <para>【飞书人事】批量查询职务</para>
    /// <para>接口ID：7017707615191023619</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/job-management/job/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量查询职务。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// <item>corehr:job:read</item>
    /// <item>corehr:job:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：1231231987</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="name">
    /// <para>必填：否</para>
    /// <para>名称</para>
    /// <para>示例值：keyword</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="query_language">
    /// <para>必填：否</para>
    /// <para>语言</para>
    /// <para>示例值：zh</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/jobs")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1JobsResponseDto>> GetCorehrV1JobsAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int page_size = 10,
        [PathQuery] string? name = null,
        [PathQuery] string? query_language = null);

    /// <summary>
    /// <para>【飞书人事】创建职务</para>
    /// <para>接口ID：7017707615191040003</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/job-management/job/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>可以通过该接口新建职务信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:job:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/jobs")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1JobsResponseDto>> PostCorehrV1JobsAsync(
        [JsonContent] FeishuPeople.PostCorehrV1JobsBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事】批量查询部门</para>
    /// <para>接口ID：7017707615191056387</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/organization-management/department/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量查询部门信息，包括部门基本信息、自定义字段信息等</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值："6966234786251671053"</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="department_id_list">
    /// <para>必填：否</para>
    /// <para>部门ID列表</para>
    /// <para>示例值：["6966234786251671053"]</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="name_list">
    /// <para>必填：否</para>
    /// <para>部门名称列表，需精确匹配</para>
    /// <para>示例值：["校验部门"]</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：people_corehr_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：people_corehr_department_id</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/departments")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1DepartmentsResponseDto>> GetCorehrV1DepartmentsAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int page_size = 10,
        [PathQuery] string[]? department_id_list = null,
        [PathQuery] string[]? name_list = null,
        [PathQuery] string? user_id_type = "people_corehr_id",
        [PathQuery] string? department_id_type = "people_corehr_department_id");

    /// <summary>
    /// <para>【飞书人事】查询单个待入职信息</para>
    /// <para>接口ID：7017707615191089155</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/pre_hire/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据 ID 查询单个待入职人员，本接口不再推荐使用（个人信息相关数据不完整），请使用[查询待入职](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/pre_hire/query)接口获取更完整信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// <item>corehr:pre_hire:read</item>
    /// <item>corehr:pre_hire:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="pre_hire_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待入职ID，可从[搜索待入职人员信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/pre_hire/search)接口获取</para>
    /// <para>示例值：121215</para>
    /// </param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/pre_hire/query")]
    [HttpGet("/open-apis/corehr/v1/pre_hires/{pre_hire_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1PreHiresByPreHireIdResponseDto>> GetCorehrV1PreHiresByPreHireIdAsync(
        [PathQuery] string pre_hire_id);

    /// <summary>
    /// <para>【飞书人事】批量查询公司</para>
    /// <para>接口ID：7017707615191105539</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/organization-management/company/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>分页查询公司，可分页遍历全量公司数据。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:company:read</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：1231231987</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/companies")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1CompaniesResponseDto>> GetCorehrV1CompaniesAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int page_size = 10);

    /// <summary>
    /// <para>【飞书人事】批量查询合同</para>
    /// <para>接口ID：7017707615191121923</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/contract/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过接口可以批量查询合同列表信息，目前暂不支持其他筛选条件且一次查询最多支持50条数据。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：10</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小；范围：0～50</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/contracts")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1ContractsResponseDto>> GetCorehrV1ContractsAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int page_size = 10);

    /// <summary>
    /// <para>【飞书人事】删除职级</para>
    /// <para>接口ID：7017707615191138307</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/job-management/job_level/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>可以通过该接口通过职级ID删除一个职级对象。</para>
    /// <para>- 删除对象时请确认有无在职员工、待入职单据、职务等关联此对象，如有会导致删除失败。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:job_level:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_level_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要删除的职级 ID。ID获取方式：</para>
    /// <para>- 调用[【新建职级】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_level/create)[【查询租户的职级信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_level/list)等接口可以返回职级ID</para>
    /// <para>示例值：5423452542</para>
    /// </param>
    [HttpDelete("/open-apis/corehr/v1/job_levels/{job_level_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCorehrV1JobLevelsByJobLevelIdAsync(
        [PathQuery] string job_level_id);

    /// <summary>
    /// <para>【飞书人事】新建职级</para>
    /// <para>接口ID：7017707615191154691</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/job-management/job_level/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>使用指定信息创建职级信息，每次调用支持创建1个职级对象，接口内会做相关规则校验。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:job_level:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/job_levels")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1JobLevelsResponseDto>> PostCorehrV1JobLevelsAsync(
        [JsonContent] FeishuPeople.PostCorehrV1JobLevelsBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事】批量查询国家证件类型</para>
    /// <para>接口ID：7017707615191171075</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/national_id_type/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量查询国家证件类型。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.preset_data:read</item>
    /// <item>corehr:common_data.preset_data:write</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：1231231987</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="identification_type">
    /// <para>必填：否</para>
    /// <para>证件类型</para>
    /// <para>示例值：regular_passport</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="code">
    /// <para>必填：否</para>
    /// <para>证件类型编码</para>
    /// <para>示例值：MYS-ID</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="country_region_id">
    /// <para>必填：否</para>
    /// <para>国家地区ID</para>
    /// <para>示例值：6862995749043439111</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/national_id_types")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1NationalIdTypesResponseDto>> GetCorehrV1NationalIdTypesAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int page_size = 10,
        [PathQuery] string? identification_type = null,
        [PathQuery] string? code = null,
        [PathQuery] string? country_region_id = null);

    /// <summary>
    /// <para>【飞书人事】删除职务</para>
    /// <para>接口ID：7017707615191203843</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/job-management/job/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>你可以通过该接口删除一个职务信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:job:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要删除的职务 ID。ID获取方式：</para>
    /// <para>- 调用[【创建职务】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job/create)[【批量查询职务】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/job/list)等可以返回职务ID</para>
    /// <para>- 也可以通过[【事件】创建职务](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job/events/created) [【事件】更新职务](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job/events/updated) 获取ID</para>
    /// <para>示例值：67163716371</para>
    /// </param>
    [HttpDelete("/open-apis/corehr/v1/jobs/{job_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCorehrV1JobsByJobIdAsync(
        [PathQuery] string job_id);

    /// <summary>
    /// <para>【邮箱】从回收站删除用户邮箱地址</para>
    /// <para>接口ID：7018723423930269698</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/user_mailbox-alias/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口会永久删除用户邮箱地址。可用于删除位于邮箱回收站中的用户邮箱地址，一旦删除，将无法恢复。该接口支持邮件的转移，可以将被释放邮箱的邮件转移到另外一个可以使用的邮箱中。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:user_mailbox</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要释放的邮箱地址</para>
    /// <para>示例值：111111@abc.com</para>
    /// </param>
    /// <param name="transfer_mailbox">
    /// <para>必填：否</para>
    /// <para>用于接受转移的邮箱地址</para>
    /// <para>示例值：888888@abc.com</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpDelete("/open-apis/mail/v1/user_mailboxes/{user_mailbox_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteMailV1UserMailboxesByUserMailboxIdAsync(
        [PathQuery] string user_mailbox_id,
        [PathQuery] string? transfer_mailbox = null);

    /// <summary>
    /// <para>【邮箱】永久删除公共邮箱</para>
    /// <para>接口ID：7018723423930286082</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/public-mailbox/public_mailbox/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口会永久删除公共邮箱地址。可用于释放邮箱回收站的公共邮箱地址，一旦删除，该邮箱地址将无法恢复。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:public_mailbox</item>
    /// </list></para>
    /// </summary>
    /// <param name="public_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要释放的公共邮箱地址</para>
    /// <para>示例值：xxxxxx@abc.com</para>
    /// </param>
    [HttpDelete("/open-apis/mail/v1/public_mailboxes/{public_mailbox_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteMailV1PublicMailboxesByPublicMailboxIdAsync(
        [PathQuery] string public_mailbox_id);

    /// <summary>
    /// <para>【招聘】获取职能分类列表</para>
    /// <para>接口ID：7021031370929012739</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/job/list-3</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据page_token与page_size对职能分类进行游标分页查询，可查询到的信息包括：职能分类ID、职能分类中英文名、启用状态，可应用于职位基础信息绑定等场景</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:job:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小, 不能超过 50, 默认10</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE2Mjc1NTUyMjM2NzIsImlkIjpudWxsfQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/job_functions")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1JobFunctionsResponseDto>> GetHireV1JobFunctionsAsync(
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【招聘】搜索招聘官网下的职位广告列表</para>
    /// <para>接口ID：7021042393814450179</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/website/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>搜索招聘官网下的职位列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:site_job_post:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="website_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>官网 ID，可通过[获取招聘官网列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/website/list)获取</para>
    /// <para>示例值：7098921721789513756</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE2Mjc1NTUyMjM2NzIsImlkIjpudWxsfQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>每页获取记录数量，最大10，不传则默认值为10</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>指定查询结果中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)。</para>
    /// <para>示例值："department_id"</para>
    /// <list type="bullet">
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 od-，在租户内全局唯一。</item>
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值："job_level_id_type"</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，通过[获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_level_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/websites/{website_id}/job_posts/search")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1WebsitesByWebsiteIdJobPostsSearchResponseDto>> PostHireV1WebsitesByWebsiteIdJobPostsSearchAsync(
        [PathQuery] string website_id,
        [JsonContent] Hire.PostHireV1WebsitesByWebsiteIdJobPostsSearchBodyDto dto,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? job_level_id_type = "people_admin_job_level_id");

    /// <summary>
    /// <para>【飞书人事】更新人员类型</para>
    /// <para>接口ID：7021731966426415107</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/employee_type/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新人员类型。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.preset_data:write</item>
    /// <item>corehr:corehr</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_type_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>雇员类型 ID</para>
    /// <para>- 可通过[批量查询人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employee_type/list)获取</para>
    /// <para>示例值：6969828847931885087</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/corehr/v1/employee_types/{employee_type_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PatchCorehrV1EmployeeTypesByEmployeeTypeIdResponseDto>> PatchCorehrV1EmployeeTypesByEmployeeTypeIdAsync(
        [PathQuery] string employee_type_id,
        [JsonContent] FeishuPeople.PatchCorehrV1EmployeeTypesByEmployeeTypeIdBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事】更新个人信息</para>
    /// <para>接口ID：7021733135817670660</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/employee/person/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新个人信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// </list></para>
    /// </summary>
    /// <param name="person_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>person的ID</para>
    /// <para>示例值：6969828847931885087</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/corehr/v1/persons/{person_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PatchCorehrV1PersonsByPersonIdResponseDto>> PatchCorehrV1PersonsByPersonIdAsync(
        [PathQuery] string person_id,
        [JsonContent] FeishuPeople.PatchCorehrV1PersonsByPersonIdBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【消息与群组】查询批量消息推送和阅读人数</para>
    /// <para>接口ID：7021850211959275548</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/batch_message/read_user</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>[批量发送消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)后，可通过该接口查询消息推送的总人数以及消息已读人数。</para>
    /// <para>## 前提条件</para>
    /// <para>应用需要启用[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>## 注意事项</para>
    /// <para>- 只能查询 30 天内，通过[批量发送消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)接口发送的消息。</para>
    /// <para>- 该接口返回的数据为查询时刻的快照数据。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message:send_multi_depts</item>
    /// <item>im:message:send_multi_users</item>
    /// </list></para>
    /// </summary>
    /// <param name="batch_message_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待查询的批量消息任务 ID，该 ID 为[批量发送消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)接口返回值中的 `message_id` 字段，用于标识一次批量发送消息请求。</para>
    /// <para>示例值：bm_dc13264520392913993dd051dba21dcf</para>
    /// </param>
    [HttpGet("/open-apis/im/v1/batch_messages/{batch_message_id}/read_user")]
    System.Threading.Tasks.Task<FeishuResponse<Im.GetImV1BatchMessagesByBatchMessageIdReadUserResponseDto>> GetImV1BatchMessagesByBatchMessageIdReadUserAsync(
        [PathQuery] string batch_message_id);

    /// <summary>
    /// <para>【消息与群组】批量撤回消息</para>
    /// <para>接口ID：7021850211959291932</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/batch_message/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于撤回通过[批量发送消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)接口发送的消息。</para>
    /// <para>## 前提条件</para>
    /// <para>应用需要启用[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>## 使用限制</para>
    /// <para>- 仅支持撤回通过[批量发送消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)接口发送的消息。如果你需要撤回单条消息，请使用[撤回消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/delete)接口。</para>
    /// <para>- 不支持撤回时间较久的消息。撤回的消息需要符合由企业管理员设置的撤回时限。详情了解[管理员设置撤回和编辑消息权限](https://www.feishu.cn/hc/zh-CN/articles/325339752183)。</para>
    /// <para>- 该接口为异步接口，会有一定延迟。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message:send_multi_depts</item>
    /// <item>im:message:send_multi_users</item>
    /// </list></para>
    /// </summary>
    /// <param name="batch_message_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待撤回的批量消息任务 ID，该 ID 为[批量发送消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)接口返回值中的`message_id`字段，用于标识一次批量发送消息请求。</para>
    /// <para>示例值：bm-dc13264520392913993dd051dba21dcf</para>
    /// </param>
    [HttpDelete("/open-apis/im/v1/batch_messages/{batch_message_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteImV1BatchMessagesByBatchMessageIdAsync(
        [PathQuery] string batch_message_id);

    /// <summary>
    /// <para>【云文档】获取知识空间子节点列表</para>
    /// <para>接口ID：7023947709203791876</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/wiki-v2/space-node/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>此接口用于分页获取Wiki节点的子节点列表。</para>
    /// <para>此接口为分页接口。由于权限过滤，可能返回列表为空，但分页标记（has_more）为true，可以继续分页请求。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>wiki:node:retrieve</item>
    /// <item>wiki:wiki</item>
    /// <item>wiki:wiki:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="space_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>知识空间id</para>
    /// <para>示例值：6946843325487906839</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6946843325487456878</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="parent_node_token">
    /// <para>必填：否</para>
    /// <para>父节点token</para>
    /// <para>示例值：wikcnKQ1k3p******8Vabce</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/wiki/v2/spaces/{space_id}/nodes")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetWikiV2SpacesBySpaceIdNodesResponseDto>> GetWikiV2SpacesBySpaceIdNodesAsync(
        [PathQuery] string space_id,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? parent_node_token = null);

    /// <summary>
    /// <para>【云文档】移动云空间文档至知识空间</para>
    /// <para>接口ID：7023947709203808260</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/wiki-v2/task/move_docs_to_wiki</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口允许移动云空间文档至知识空间，并挂载在指定位置</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>wiki:node:move</item>
    /// <item>wiki:wiki</item>
    /// </list></para>
    /// </summary>
    /// <param name="space_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>知识库id</para>
    /// <para>示例值：1565676577122621</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/wiki/v2/spaces/{space_id}/nodes/move_docs_to_wiki")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostWikiV2SpacesBySpaceIdNodesMoveDocsToWikiResponseDto>> PostWikiV2SpacesBySpaceIdNodesMoveDocsToWikiAsync(
        [PathQuery] string space_id,
        [JsonContent] Ccm.PostWikiV2SpacesBySpaceIdNodesMoveDocsToWikiBodyDto dto);

    /// <summary>
    /// <para>【云文档】更新知识空间设置</para>
    /// <para>接口ID：7023947709203824644</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/wiki-v2/space-setting/update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据space_id更新知识空间公共设置</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>wiki:setting:write_only</item>
    /// <item>wiki:wiki</item>
    /// </list></para>
    /// </summary>
    /// <param name="space_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>知识空间id</para>
    /// <para>示例值：1565676577122621</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/wiki/v2/spaces/{space_id}/setting")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PutWikiV2SpacesBySpaceIdSettingResponseDto>> PutWikiV2SpacesBySpaceIdSettingAsync(
        [PathQuery] string space_id,
        [JsonContent] Ccm.PutWikiV2SpacesBySpaceIdSettingBodyDto dto);

    /// <summary>
    /// <para>【云文档】获取知识空间列表</para>
    /// <para>接口ID：7023947709203841028</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/wiki-v2/space/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>此接口用于获取有权限访问的知识空间列表。</para>
    /// <para>## 注意事项</para>
    /// <para>- 使用 tenant access token 调用时，请确认应用或机器人拥有部分知识空间的访问权限，否则返回列表为空。参阅[如何将应用添加为知识库管理员（成员）](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/wiki-qa#b5da330b)。</para>
    /// <para>- 此接口为分页接口。由于权限过滤，可能返回列表为空，但当分页标记（has_more）为 true 时，可以继续分页请求。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>wiki:space:retrieve</item>
    /// <item>wiki:wiki</item>
    /// <item>wiki:wiki:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：1565676577122621</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="lang">
    /// <para>必填：否</para>
    /// <para>当查询个人文档库时，指定返回的文档库名称展示语言。</para>
    /// <para>示例值：zh</para>
    /// <list type="bullet">
    /// <item>zh：简体中文</item>
    /// <item>id：印尼语</item>
    /// <item>de：德语</item>
    /// <item>en：英语</item>
    /// <item>es：西班牙语</item>
    /// <item>fr：法语</item>
    /// <item>it：意大利语</item>
    /// <item>pt：葡萄牙语</item>
    /// <item>vi：越南语</item>
    /// <item>ru：俄语</item>
    /// <item>hi：印地语</item>
    /// <item>th：泰语</item>
    /// <item>ko：韩语</item>
    /// <item>ja：日语</item>
    /// <item>zh-HK：繁体中文（中国香港）</item>
    /// <item>zh-TW：繁体中文（中国台湾）</item>
    /// </list>
    /// <para>默认值：en</para>
    /// </param>
    [HttpGet("/open-apis/wiki/v2/spaces")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetWikiV2SpacesResponseDto>> GetWikiV2SpacesAsync(
        [PathQuery] int? page_size = 20,
        [PathQuery] string? page_token = null,
        [PathQuery] string? lang = "en");

    /// <summary>
    /// <para>【云文档】获取知识空间信息</para>
    /// <para>接口ID：7023947709203857412</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/wiki-v2/space/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>此接口用于根据知识空间 ID 查询知识空间的信息，包括空间的类型、可见性、分享状态等。</para>
    /// <para>## 前提条件</para>
    /// <para>调用此接口前，请确保应用或用户为知识空间的成员或管理员。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>wiki:space:read</item>
    /// <item>wiki:wiki</item>
    /// <item>wiki:wiki:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="space_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>知识空间 ID。可通过以下两种方式获取。了解更多，参考[知识库概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-overview)。</para>
    /// <para>- 调用 [获取知识空间列表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/list)获取</para>
    /// <para>- 如果你是知识库管理员，可以进入知识库设置页面，复制地址栏的数字部分：https://sample.feishu.cn/wiki/settings/==6870403571079249922==</para>
    /// <para>示例值：6870403571079249922</para>
    /// </param>
    /// <param name="lang">
    /// <para>必填：否</para>
    /// <para>当查询个人文档库时，指定返回的文档库名称展示语言。</para>
    /// <para>示例值：zh</para>
    /// <list type="bullet">
    /// <item>zh：简体中文</item>
    /// <item>id：印尼语</item>
    /// <item>de：德语</item>
    /// <item>en：英语</item>
    /// <item>es：西班牙语</item>
    /// <item>fr：法语</item>
    /// <item>it：意大利语</item>
    /// <item>pt：葡萄牙语</item>
    /// <item>vi：越南语</item>
    /// <item>ru：俄语</item>
    /// <item>hi：印地语</item>
    /// <item>th：泰语</item>
    /// <item>ko：韩语</item>
    /// <item>ja：日语</item>
    /// <item>zh-HK：繁体中文（中国香港）</item>
    /// <item>zh-TW：繁体中文（中国台湾）</item>
    /// </list>
    /// <para>默认值：en</para>
    /// </param>
    [HttpGet("/open-apis/wiki/v2/spaces/{space_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetWikiV2SpacesBySpaceIdResponseDto>> GetWikiV2SpacesBySpaceIdAsync(
        [PathQuery] string space_id,
        [PathQuery] string? lang = "en");

    /// <summary>
    /// <para>【云文档】创建知识空间节点</para>
    /// <para>接口ID：7023947709203873796</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/wiki-v2/space-node/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>此接口用于在知识节点里创建[节点](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-overview)到指定位置。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>wiki:node:create</item>
    /// <item>wiki:wiki</item>
    /// </list></para>
    /// </summary>
    /// <param name="space_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>知识空间id</para>
    /// <para>[获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-overview)</para>
    /// <para>示例值：6704147935988285963</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/wiki/v2/spaces/{space_id}/nodes")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostWikiV2SpacesBySpaceIdNodesResponseDto>> PostWikiV2SpacesBySpaceIdNodesAsync(
        [PathQuery] string space_id,
        [JsonContent] Ccm.PostWikiV2SpacesBySpaceIdNodesBodyDto dto);

    /// <summary>
    /// <para>【云文档】添加知识空间成员</para>
    /// <para>接口ID：7023947709203906564</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/wiki-v2/space-member/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>添加知识空间成员或管理员。</para>
    /// <para>## 前提条件</para>
    /// <para>调用此接口前，请确保调用身份对应的应用或用户为知识空间的管理员。</para>
    /// <para>## 注意事项</para>
    /// <para>- 使用 tenant access token 身份操作时，无法使用部门 ID (opendepartmentid) 添加知识空间成员。</para>
    /// <para>- 公开知识空间（即 visibility [可见性](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-overview)为 public 的空间）对租户所有用户可见，因此不支持再添加成员，但可以添加管理员。</para>
    /// <para>- 个人知识空间 （即 type [类型](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-overview)为 person 的空间）为个人管理的知识空间，不支持添加其他管理员（包括应用/机器人）。但可以添加成员。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>wiki:member:create</item>
    /// <item>wiki:wiki</item>
    /// </list></para>
    /// </summary>
    /// <param name="space_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>知识空间 ID。可通过以下两种方式获取。了解更多，参考[知识库概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-overview)。</para>
    /// <para>- 调用 [获取知识空间列表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/list)获取</para>
    /// <para>- 如果你是知识库管理员，可以进入知识库设置页面，复制地址栏的数字部分：https://sample.feishu.cn/wiki/settings/==6870403571079249922==</para>
    /// <para>示例值：1565676577122621</para>
    /// </param>
    /// <param name="need_notification">
    /// <para>必填：否</para>
    /// <para>添加权限后是否通知对方</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/wiki/v2/spaces/{space_id}/members")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostWikiV2SpacesBySpaceIdMembersResponseDto>> PostWikiV2SpacesBySpaceIdMembersAsync(
        [PathQuery] string space_id,
        [JsonContent] Ccm.PostWikiV2SpacesBySpaceIdMembersBodyDto dto,
        [PathQuery] bool? need_notification = null);

    /// <summary>
    /// <para>【云文档】获取知识空间节点信息</para>
    /// <para>接口ID：7023947709203939332</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/wiki-v2/space-node/get_node</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取知识空间节点信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>wiki:node:read</item>
    /// <item>wiki:wiki</item>
    /// <item>wiki:wiki:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="token">
    /// <para>必填：是</para>
    /// <para>知识库节点或对应云文档的实际 token。</para>
    /// <para>- 知识库节点 token：如果 URL 链接中 token 前为 wiki，该 token 为知识库的节点 token。</para>
    /// <para>- 云文档实际 token：如果 URL 链接中 token 前为 docx、base、sheets 等非 wiki 类型，则说明该 token 是当前云文档的实际 token。</para>
    /// <para>了解更多，请参考[文档常见问题-如何获取云文档资源相关 token（id）](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)。</para>
    /// <para>**注意**：</para>
    /// <para>使用云文档 token 查询时，需要对 obj_type 参数传入文档对应的类型。</para>
    /// <para>示例值：wikcnKQ1k3p******8Vabcef</para>
    /// </param>
    /// <param name="obj_type">
    /// <para>必填：否</para>
    /// <para>文档类型。不传时默认以 wiki 类型查询。</para>
    /// <para>示例值：docx</para>
    /// <list type="bullet">
    /// <item>doc：旧版文档</item>
    /// <item>docx：新版文档</item>
    /// <item>sheet：表格</item>
    /// <item>mindnote：思维导图</item>
    /// <item>bitable：多维表格</item>
    /// <item>file：文件</item>
    /// <item>slides：幻灯片</item>
    /// <item>wiki：知识库节点</item>
    /// </list>
    /// <para>默认值：wiki</para>
    /// </param>
    [HttpGet("/open-apis/wiki/v2/spaces/get_node")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetWikiV2SpacesGetNodeResponseDto>> GetWikiV2SpacesGetNodeAsync(
        [PathQuery] string token,
        [PathQuery] string? obj_type = "wiki");

    /// <summary>
    /// <para>【通讯录】创建单位</para>
    /// <para>接口ID：7023995901275242499</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/unit/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口创建一个单位。</para>
    /// <para>## 前提条件</para>
    /// <para>单位属于付费功能，企业需要开通对应的飞书版本才可以使用。了解更多，可参见[单位管理](https://www.feishu.cn/hc/zh-CN/articles/333548009177)。</para>
    /// <para>## 使用限制</para>
    /// <para>单租户内单位总数上限为 1,000。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:unit</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/contact/v3/unit")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.PostContactV3UnitResponseDto>> PostContactV3UnitAsync(
        [JsonContent] Contact.PostContactV3UnitBodyDto dto);

    /// <summary>
    /// <para>【通讯录】修改单位信息</para>
    /// <para>接口ID：7023995901275258883</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/unit/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口修改指定单位的名字。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:unit</item>
    /// </list></para>
    /// </summary>
    /// <param name="unit_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>单位 ID。</para>
    /// <para>当你在创建单位时，可以在返回结果中获取单位 ID。你也可以调用[获取单位列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/list)接口，获取单位 ID。</para>
    /// <para>示例值：BU121</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/contact/v3/unit/{unit_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PatchContactV3UnitByUnitIdAsync(
        [PathQuery] string unit_id,
        [JsonContent] Contact.PatchContactV3UnitByUnitIdBodyDto dto);

    /// <summary>
    /// <para>【通讯录】删除单位</para>
    /// <para>接口ID：7023995901275275267</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/unit/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口删除指定单位。</para>
    /// <para>## 注意事项</para>
    /// <para>如果单位类型被其他业务应用，则不允许直接删除单位。例如，在配置成员的组织架构可见范围时，通过单位类型设置了可见范围，那么该单位类型对应的单位就无法直接删除。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:unit</item>
    /// </list></para>
    /// </summary>
    /// <param name="unit_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>单位 ID。</para>
    /// <para>当你在创建单位时，可以在返回结果中获取单位 ID。你也可以调用[获取单位列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/list)接口，获取单位 ID。</para>
    /// <para>示例值：BU121</para>
    /// </param>
    [HttpDelete("/open-apis/contact/v3/unit/{unit_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteContactV3UnitByUnitIdAsync(
        [PathQuery] string unit_id);

    /// <summary>
    /// <para>【通讯录】获取单位信息</para>
    /// <para>接口ID：7023995901275291651</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/unit/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口获取指定单位的信息，包括单位 ID、名字、类型。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:unit:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="unit_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>单位 ID。</para>
    /// <para>当你在创建单位时，可以在返回结果中获取单位 ID。你也可以调用[获取单位列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/list)接口，获取单位 ID。</para>
    /// <para>示例值：BU121</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/unit/{unit_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3UnitByUnitIdResponseDto>> GetContactV3UnitByUnitIdAsync(
        [PathQuery] string unit_id);

    /// <summary>
    /// <para>【通讯录】获取单位列表</para>
    /// <para>接口ID：7023995901275308035</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/unit/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口获取当前租户内的单位列表。列表内主要包含各单位的 ID、名字、类型信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:unit:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，用于限制一次请求所返回的数据条目数。</para>
    /// <para>示例值：50</para>
    /// <para>默认值：50</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw=</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/unit")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3UnitResponseDto>> GetContactV3UnitAsync(
        [PathQuery] int? page_size = 50,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【通讯录】建立部门与单位的绑定关系</para>
    /// <para>接口ID：7023995901275324419</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/unit/bind_department</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口建立部门与单位的绑定关系。一个部门同时只能绑定一个单位。</para>
    /// <para>## 注意事项</para>
    /// <para>操作的部门需要在应用的通讯录权限范围内。了解通讯录权限范围，可参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>## 使用限制</para>
    /// <para>- 单个单位可关联的部门数量上限为 1,000。</para>
    /// <para>- 同一个部门只能关联一个单位。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:unit</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/contact/v3/unit/bind_department")]
    System.Threading.Tasks.Task<FeishuResponse> PostContactV3UnitBindDepartmentAsync(
        [JsonContent] Contact.PostContactV3UnitBindDepartmentBodyDto dto);

    /// <summary>
    /// <para>【通讯录】解除部门与单位的绑定关系</para>
    /// <para>接口ID：7023995901275340803</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/unit/unbind_department</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口解除部门与单位的绑定关系。</para>
    /// <para>## 注意事项</para>
    /// <para>操作的部门需要在应用的通讯录权限范围内。了解通讯录权限范围，可参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:unit</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/contact/v3/unit/unbind_department")]
    System.Threading.Tasks.Task<FeishuResponse> PostContactV3UnitUnbindDepartmentAsync(
        [JsonContent] Contact.PostContactV3UnitUnbindDepartmentBodyDto dto);

    /// <summary>
    /// <para>【通讯录】获取单位绑定的部门列表</para>
    /// <para>接口ID：7023995901275357187</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/unit/list_department</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口获取指定单位绑定的部门列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:unit:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="unit_id">
    /// <para>必填：是</para>
    /// <para>单位 ID。</para>
    /// <para>当你在创建单位时，可以在返回结果中获取单位 ID。你也可以调用[获取单位列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/list)接口，获取单位 ID。</para>
    /// <para>示例值：BU121</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 `od-`，在租户内全局唯一。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，用于限制一次请求所返回的数据条目数。</para>
    /// <para>示例值：50</para>
    /// <para>默认值：50</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/unit/list_department")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3UnitListDepartmentResponseDto>> GetContactV3UnitListDepartmentAsync(
        [PathQuery] string unit_id,
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 50);

    /// <summary>
    /// <para>【飞书人事】更新部门</para>
    /// <para>接口ID：7025920930581921795</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/organization-management/department/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新部门信息，包括基础信息、自定义字段信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:department:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="department_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要更新的部门ID，同部门实体在CoreHR内部的唯一键</para>
    /// <para>示例值：6969828847121885087</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：people_corehr_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：people_corehr_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/corehr/v1/departments/{department_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PatchCorehrV1DepartmentsByDepartmentIdResponseDto>> PatchCorehrV1DepartmentsByDepartmentIdAsync(
        [PathQuery] string department_id,
        [JsonContent] FeishuPeople.PatchCorehrV1DepartmentsByDepartmentIdBodyDto dto,
        [PathQuery] string? client_token = null,
        [PathQuery] string? user_id_type = "people_corehr_id",
        [PathQuery] string? department_id_type = "people_corehr_department_id");

    /// <summary>
    /// <para>【通讯录】通过手机号或邮箱获取用户 ID</para>
    /// <para>接口ID：7026591401610526724</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/user/batch_get_id</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口通过手机号或邮箱获取一个或多个用户的 ID （包括 user_id、open_id、union_id）与状态信息。</para>
    /// <para>## 注意事项</para>
    /// <para>请求后不返回用户 ID 的可能原因：</para>
    /// <para>- 请求头 Authorization 传入的 tenant_access_token 有误。例如，tenant_access_token 对应的应用与实际所需应用不一致。</para>
    /// <para>- 输入的手机号或者邮箱不存在。</para>
    /// <para>- 应用未开通 **获取用户 user ID** API 权限。</para>
    /// <para>- 应用无权限查看用户信息。你需要在应用详情页为应用配置数据权限，具体说明参见[配置应用数据权限](https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/configure-app-data-permissions)。</para>
    /// <para>- 使用企业邮箱查询将无法返回用户 ID，必须使用用户的邮箱地址。</para>
    /// <para>- 所查询的用户已离职，如果请求参数 include_resigned 取值为 false，则不会返回离职用户 ID。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:user.id:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>contact:user.employee:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：user_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/contact/v3/users/batch_get_id")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.PostContactV3UsersBatchGetIdResponseDto>> PostContactV3UsersBatchGetIdAsync(
        [JsonContent] Contact.PostContactV3UsersBatchGetIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【通讯录】获取通讯录授权范围</para>
    /// <para>接口ID：7026591401610543108</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/scope/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口获取当前应用被授权可访问的通讯录范围，包括可访问的部门列表、用户列表和用户组列表。</para>
    /// <para>## 注意事项</para>
    /// <para>- 当应用通讯录权限范围为全部成员时，该接口将返回根部门下的一级部门列表和直属用户列表，以及租户下所有用户组列表。</para>
    /// <para>- 当应用通讯录权限范围不为全部成员时，则只返回在通讯录权限范围内的部门列表（不包含部门内的子部门以及用户）、用户列表或用户组列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:contact.base:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：user_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>指定查询结果中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。</para>
    /// <para>示例值：department_id</para>
    /// <list type="bullet">
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 `od-`，在租户内全局唯一。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，用于设置一次调用的返回值列表长度。</para>
    /// <para>**注意**：分页查询时，返回的所有资源列表长度之和不会大于 page_size 值，列表内的资源返回顺序为：先返回 user_ids、然后返回 department_ids、最后返回 group_ids。</para>
    /// <para>示例值：50</para>
    /// <para>默认值：50</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/scopes")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3ScopesResponseDto>> GetContactV3ScopesAsync(
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 50);

    /// <summary>
    /// <para>【云文档】删除文件或文件夹</para>
    /// <para>接口ID：7029475705897828354</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/file/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除用户在云空间内的文件或者文件夹。文件或文件夹被删除后，会进入回收站中。</para>
    /// <para>## 前提条件</para>
    /// <para>要删除文件，需要确保应用或用户具有以下两种权限之一：</para>
    /// <para>- 该应用或用户是文件所有者并且具有该文件所在父文件夹的编辑权限。</para>
    /// <para>- 该应用或用户并非文件所有者，但是该文件所在父文件夹的所有者或者拥有该父文件夹的所有权限（full access）。</para>
    /// <para>## 使用限制</para>
    /// <para>该接口不支持并发调用，且调用频率上限为 5 QPS，10000 次/天。否则会返回 1061045 错误码，可通过稍后重试解决。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>space:document:delete</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要删除的文件或文件夹 token。</para>
    /// <para>了解如何获取文件 token，参考[文件概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/file-overview)。</para>
    /// <para>了解如何获取文件夹 token，参考[文件夹概述](https://open.feishu.cn/document/ukTMukTMukTM/ugTNzUjL4UzM14CO1MTN/folder-overview)。</para>
    /// <para>示例值：boxcnrHpsg1QDqXAAAyachabcef</para>
    /// </param>
    /// <param name="type">
    /// <para>必填：是</para>
    /// <para>被删除文件的类型</para>
    /// <para>示例值：file</para>
    /// <list type="bullet">
    /// <item>file：文件类型</item>
    /// <item>docx：新版文档类型</item>
    /// <item>bitable：多维表格类型</item>
    /// <item>folder：文件夹类型</item>
    /// <item>doc：文档类型</item>
    /// <item>sheet：电子表格类型</item>
    /// <item>mindnote：思维笔记类型</item>
    /// <item>shortcut：快捷方式类型</item>
    /// <item>slides：幻灯片</item>
    /// </list>
    /// </param>
    [HttpDelete("/open-apis/drive/v1/files/{file_token}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.DeleteDriveV1FilesByFileTokenResponseDto>> DeleteDriveV1FilesByFileTokenAsync(
        [PathQuery] string file_token,
        [PathQuery] string type);

    /// <summary>
    /// <para>【通讯录】获取部门直属用户列表</para>
    /// <para>接口ID：7033365649318789148</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/user/find_by_department</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口获取指定部门直属的用户信息列表。用户信息包括用户 ID、名称、邮箱、手机号以及状态等信息。</para>
    /// <para>## 注意事项</para>
    /// <para>- 使用用户身份（user_access_token）调用该接口时，接口将根据该用户的组织架构可见范围进行过滤，仅返回组织架构可见范围内的用户数据。</para>
    /// <para>- 使用应用身份（tenant_access_token）调用该接口时，接口将根据应用的通讯录权限范围进行过滤。 如果请求的部门 ID 为 0（即根部门），则接口会校验应用是否具有全员的通讯录权限；如果请求的是非 0 的部门 ID，则会校验应用是否具有该部门的通讯录权限。无权限时，接口会返回无权限的报错信息；有权限则返回对应部门下的直属用户列表。</para>
    /// <para>- 使用应用身份（tenant_access_token）调用本接口时，响应结果中不会返回部门路径字段（department_path）。如需获取部门路径字段值，请为应用申请 **获取成员所在部门路径（contact:user.department_path:readonly）** API 权限，并使用用户身份（user_access_token）调用接口。</para>
    /// <para>关于用户组织架构可见范围和通讯录权限范围的更多信息，可参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:contact.base:readonly</item>
    /// <item>contact:department.organize:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:user.base:readonly</item>
    /// <item>contact:user.department_path:readonly</item>
    /// <item>contact:user.department:readonly</item>
    /// <item>contact:user.dotted_line_leader_info.read</item>
    /// <item>contact:user.email:readonly</item>
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>contact:user.employee_number:read</item>
    /// <item>contact:user.employee:readonly</item>
    /// <item>contact:user.gender:readonly</item>
    /// <item>contact:user.job_family:readonly</item>
    /// <item>contact:user.job_level:readonly</item>
    /// <item>contact:user.phone:readonly</item>
    /// <item>contact:user.user_geo</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 `od-`，在租户内全局唯一。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="department_id">
    /// <para>必填：是</para>
    /// <para>部门 ID，ID 类型与 department_id_type 的取值保持一致。</para>
    /// <para>**说明**：</para>
    /// <para>- 根部门的部门 ID 为 0。</para>
    /// <para>- 你可以调用[搜索部门](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/search)接口，通过部门名称关键词获取对应的部门 ID。</para>
    /// <para>示例值：od-xxxxxxxxxxxxx</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，即本次请求所返回的用户信息列表内的最大条目数。</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw=</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/users/find_by_department")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3UsersFindByDepartmentResponseDto>> GetContactV3UsersFindByDepartmentAsync(
        [PathQuery] string department_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【通讯录】获取子部门列表</para>
    /// <para>接口ID：7033365649318805532</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/department/children</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口查询指定部门下的子部门列表，列表内包含部门的名称、ID、父部门、负责人以及状态等信息。</para>
    /// <para>## 注意事项</para>
    /// <para>- 当你使用应用身份（tenant_access_token）调用本接口时，应用的通讯录权限范围内需要包含当前被查询的部门。如果需要查询根部门（部门 ID 为 0）下的子部门列表，则应用的通讯录权限范围需设置为 **全部成员**。了解权限范围参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>- 当你使用用户身份（user_access_token）调用本接口时需要注意：</para>
    /// <para>- 确保该用户身份拥有待查询部门的可见性，用户的组织架构可见范围需要由企业管理员在[管理后台](https://feishu.cn/admin/index) &gt; **安全** &gt; **成员权限** &gt; **组织架构可见范围** 内调整。</para>
    /// <para>- 请求时如果开启了递归获取子部门（fetch_child 取值为 true），则用户可查询到的部门数量上限为 1000 个。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:contact.base:readonly</item>
    /// <item>contact:department.organize:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:department.base:readonly</item>
    /// <item>contact:department.hrbp:readonly</item>
    /// <item>contact:department.organize:readonly</item>
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="department_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>部门 ID。</para>
    /// <para>**说明：**</para>
    /// <para>- ID 类型需要与查询参数 department_id_type 的取值保持一致。</para>
    /// <para>- 当你在创建部门时，可从返回结果中获取到部门 ID 信息，你也可以调用[搜索部门](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/search)接口，获取所需的部门 ID。</para>
    /// <para>- 根部门的部门 ID 为 0。</para>
    /// <para>示例值：D096</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 `od-`，在租户内全局唯一。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="fetch_child">
    /// <para>必填：否</para>
    /// <para>是否递归获取子部门。取值为 true 时，接口会递归查询当前部门下所有层级的子部门信息。</para>
    /// <para>**可选值有：**</para>
    /// <para>- true：是</para>
    /// <para>- false（默认值）：否</para>
    /// <para>示例值：false</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，用于限制一次请求所返回的数据条目数。</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：AQD9/Rn9eij9Pm39ED40/RD/cIFmu77WxpxPB/2oHfQLZ+G8JG6tK7+ZnHiT7COhD2hMSICh/eBl7cpzU6JEC3J7COKNe4jrQ8ExwBCR</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/departments/{department_id}/children")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3DepartmentsByDepartmentIdChildrenResponseDto>> GetContactV3DepartmentsByDepartmentIdChildrenAsync(
        [PathQuery] string department_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] bool? fetch_child = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【招聘】添加笔试结果</para>
    /// <para>接口ID：7033979950131118084</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/exam/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据投递 ID 添加该投递下的笔试结果。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:exam</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/exams")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1ExamsResponseDto>> PostHireV1ExamsAsync(
        [JsonContent] Hire.PostHireV1ExamsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】更新人才</para>
    /// <para>接口ID：7034053347989487644</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/talent/combined_update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>用于在企业内更新一个人才。支持自定义字段数据，可配合[获取人才字段](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent_object/query)</para>
    /// <para>接口获取自定义字段信息使用。</para>
    /// <para>## 注意事项</para>
    /// <para>请求参数中邮箱/电话字段请在「飞书招聘」-「设置」-「候选人信息管理」-「标准简历设置」中确认是否必填。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:talent</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/talents/combined_update")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1TalentsCombinedUpdateResponseDto>> PostHireV1TalentsCombinedUpdateAsync(
        [JsonContent] Hire.PostHireV1TalentsCombinedUpdateBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】创建人才</para>
    /// <para>接口ID：7034053377010991105</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/talent/combined_create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>用于在企业内创建一个人才。支持自定义字段数据，可配合[获取人才字段](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent_object/query)</para>
    /// <para>接口获取自定义字段信息使用。</para>
    /// <para>## 注意事项</para>
    /// <para>请求参数中邮箱/电话字段请在「飞书招聘」-「设置」-「候选人信息管理」-「标准简历设置」中确认是否必填。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:talent</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/talents/combined_create")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1TalentsCombinedCreateResponseDto>> PostHireV1TalentsCombinedCreateAsync(
        [JsonContent] Hire.PostHireV1TalentsCombinedCreateBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【邮箱】创建用户邮箱别名</para>
    /// <para>接口ID：7034854712587763714</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/user_mailbox-alias/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建用户邮箱别名。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:user_mailbox</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户邮箱地址</para>
    /// <para>示例值：user@xxx.xx</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/mail/v1/user_mailboxes/{user_mailbox_id}/aliases")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.PostMailV1UserMailboxesByUserMailboxIdAliasesResponseDto>> PostMailV1UserMailboxesByUserMailboxIdAliasesAsync(
        [PathQuery] string user_mailbox_id,
        [JsonContent] Mail.PostMailV1UserMailboxesByUserMailboxIdAliasesBodyDto dto);

    /// <summary>
    /// <para>【邮箱】获取用户邮箱所有别名</para>
    /// <para>接口ID：7034854712587780098</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/user_mailbox-alias/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取用户邮箱所有别名。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:user_mailbox</item>
    /// <item>mail:user_mailbox:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户邮箱地址</para>
    /// <para>示例值：user@xxx.xx</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：xxx</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    [HttpGet("/open-apis/mail/v1/user_mailboxes/{user_mailbox_id}/aliases")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.GetMailV1UserMailboxesByUserMailboxIdAliasesResponseDto>> GetMailV1UserMailboxesByUserMailboxIdAliasesAsync(
        [PathQuery] string user_mailbox_id,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【邮箱】删除用户邮箱别名</para>
    /// <para>接口ID：7034854712587796482</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/user_mailbox-alias/delete-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除用户邮箱别名。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:user_mailbox</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户邮箱地址</para>
    /// <para>示例值：user@xxx.xx</para>
    /// </param>
    /// <param name="alias_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>别名邮箱地址</para>
    /// <para>示例值：user_alias@xxx.xx</para>
    /// </param>
    [HttpDelete("/open-apis/mail/v1/user_mailboxes/{user_mailbox_id}/aliases/{alias_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteMailV1UserMailboxesByUserMailboxIdAliasesByAliasIdAsync(
        [PathQuery] string user_mailbox_id,
        [PathQuery] string alias_id);

    /// <summary>
    /// <para>【服务台】服务台机器人向工单绑定的群内发送消息</para>
    /// <para>接口ID：7036209421748764675</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/helpdesk-v1/ticket-management/ticket-message/create-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过服务台机器人给指定用户的服务台专属群或私聊发送消息，支持文本、富文本、卡片、图片。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>helpdesk:all</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/helpdesk/v1/message")]
    System.Threading.Tasks.Task<FeishuResponse<Helpdesk.PostHelpdeskV1MessageResponseDto>> PostHelpdeskV1MessageAsync(
        [JsonContent] Helpdesk.PostHelpdeskV1MessageBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】获取 Offer 详情</para>
    /// <para>接口ID：7036562575123873793</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/offer/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据 Offer ID 获取 Offer 详细信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:offer</item>
    /// <item>hire:offer:low_sensitive_info:readonly</item>
    /// <item>hire:offer:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>hire:offer</item>
    /// <item>hire:offer:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="offer_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>Offer ID，可通过[获取 Offer 列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer/list)获取</para>
    /// <para>示例值：6791698585114741000</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以 people_admin_id 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型。</para>
    /// <para>示例值："department_id"</para>
    /// <list type="bullet">
    /// <item>open_department_id：【飞书】用来在具体某个应用中标识一个部门，同一个department_id 在不同应用中的 open_department_id 相同</item>
    /// <item>department_id：【飞书】用来标识租户内一个唯一的部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值："job_level_id"</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，通过[获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_level_id</para>
    /// </param>
    /// <param name="job_family_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「序列 ID」的类型</para>
    /// <para>示例值："people_admin_job_category_id"</para>
    /// <list type="bullet">
    /// <item>people_admin_job_category_id：「人力系统管理后台」适用的序列 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_family_id：「飞书管理后台」适用的序列 ID，通过[获取租户序列列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_family/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_category_id</para>
    /// </param>
    /// <param name="employee_type_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「人员类型 ID」的类型</para>
    /// <para>示例值："people_admin_employee_type_id"</para>
    /// <list type="bullet">
    /// <item>people_admin_employee_type_id：「人力系统管理后台」适用的人员类型 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>employee_type_enum_id：「飞书管理后台」适用的人员类型 ID，通过[查询人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_employee_type_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/offers/{offer_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1OffersByOfferIdResponseDto>> GetHireV1OffersByOfferIdAsync(
        [PathQuery] string offer_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? job_level_id_type = "people_admin_job_level_id",
        [PathQuery] string? job_family_id_type = "people_admin_job_category_id",
        [PathQuery] string? employee_type_id_type = "people_admin_employee_type_id");

    /// <summary>
    /// <para>【应用信息】获取多部门应用使用概览</para>
    /// <para>接口ID：7036626399368937500</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/application-v6/app-usage/department_overview</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查看应用在某一天/某一周/某一个月的使用数据，可以根据部门做多层子部门的筛选</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>application:application.app_usage_stats.overview:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>目标应用 ID</para>
    /// <para>示例值：cli_9f115af860f7901b</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>调用中使用的部门ID的类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：以自定义department_id来标识部门</item>
    /// <item>open_department_id：以open_department_id来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/application/v6/applications/{app_id}/app_usage/department_overview")]
    System.Threading.Tasks.Task<FeishuResponse<Application.PostApplicationV6ApplicationsByAppIdAppUsageDepartmentOverviewResponseDto>> PostApplicationV6ApplicationsByAppIdAppUsageDepartmentOverviewAsync(
        [PathQuery] string app_id,
        [JsonContent] Application.PostApplicationV6ApplicationsByAppIdAppUsageDepartmentOverviewBodyDto dto,
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【应用信息】获取消息推送概览</para>
    /// <para>接口ID：7036626399368953884</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/application-v6/app-usage/message_push_overview</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>目标：查看应用在某一天/某一周/某一个月的机器人消息推送数据，可以根据部门做筛选</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>application:application.app_message_stats.overview:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>目标应用ID，支持自建应用</para>
    /// <para>示例值：cli_9f115af860f7901b</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>调用中使用的部门ID的类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：以自定义department_id来标识部门</item>
    /// <item>open_department_id：以open_department_id来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/application/v6/applications/{app_id}/app_usage/message_push_overview")]
    System.Threading.Tasks.Task<FeishuResponse<Application.PostApplicationV6ApplicationsByAppIdAppUsageMessagePushOverviewResponseDto>> PostApplicationV6ApplicationsByAppIdAppUsageMessagePushOverviewAsync(
        [PathQuery] string app_id,
        [JsonContent] Application.PostApplicationV6ApplicationsByAppIdAppUsageMessagePushOverviewBodyDto dto,
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【招聘】获取终止投递原因</para>
    /// <para>接口ID：7036934321795039234</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/application/list-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取系统中默认的投递终止原因以及用户配置的自定义投递终止原因。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:application</item>
    /// <item>hire:application:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE2Mjc1NTUyMjM2NzIsImlkIjpudWxsfQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>每页获取记录数量，默认值为 10</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/termination_reasons")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1TerminationReasonsResponseDto>> GetHireV1TerminationReasonsAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10);

    /// <summary>
    /// <para>【消息与群组】查询批量消息整体进度</para>
    /// <para>接口ID：7039583318606217220</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/batch_message/get_progress</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>[批量发送消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)或者[批量撤回消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/batch_message/delete)后，可通过该接口查询消息的发送进度和撤回进度。</para>
    /// <para>## 注意事项</para>
    /// <para>- 只能查询 30 天内，通过[批量发送消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)接口发送的消息。</para>
    /// <para>- 该接口返回的数据为查询时刻的快照数据。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message:send_multi_depts</item>
    /// <item>im:message:send_multi_users</item>
    /// </list></para>
    /// </summary>
    /// <param name="batch_message_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待查询的批量消息任务 ID，该 ID 为[批量发送消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)接口返回值中的 `message_id` 字段，用于标识一次批量发送消息请求。</para>
    /// <para>示例值：bm-0b3d5d1b2df7c6d5dbd1abe2c91e2217</para>
    /// </param>
    [HttpGet("/open-apis/im/v1/batch_messages/{batch_message_id}/get_progress")]
    System.Threading.Tasks.Task<FeishuResponse<Im.GetImV1BatchMessagesByBatchMessageIdGetProgressResponseDto>> GetImV1BatchMessagesByBatchMessageIdGetProgressAsync(
        [PathQuery] string batch_message_id);

    /// <summary>
    /// <para>【招聘】获取面试满意度问卷列表</para>
    /// <para>接口ID：7039624673445920771</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/interview/list-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量获取面试满意度问卷信息，包含问卷完成情况、问卷题目及问卷题目作答内容等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:questionnaire</item>
    /// <item>hire:questionnaire:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEsInRpbWVzdGFtcCI6MTcyMzU1OTE4OTg1NCwiaWQiOm51bGx9</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="application_id">
    /// <para>必填：否</para>
    /// <para>投递 ID，用于筛选指定投递下的数据，可通过[获取投递列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/list)接口获取</para>
    /// <para>**注意**：</para>
    /// <para>- 当「飞书招聘」-「设置」-「面试设置」-「面试满意度问卷设置」中，通过邮件向候选人发送问卷时机选择为「面试流程结束后」时，仅可通过该参数进行筛选</para>
    /// <para>- 该参数不可以和 `interview_id` 参数同时填写</para>
    /// <para>示例值：6985833807195212076</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="interview_id">
    /// <para>必填：否</para>
    /// <para>面试 ID，用于筛选指定面试下的数据，可通过[获取面试信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/interview/list)接口或[获取人才面试信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/interview/get_by_talent)接口获取</para>
    /// <para>**注意**：</para>
    /// <para>- 当「飞书招聘」-「设置」-「面试设置」-「面试满意度问卷设置」中，通过邮件向候选人发送问卷时机选择为「每次面试结束后」或者「第一次面试结束后」时，仅可通过该参数进行筛选</para>
    /// <para>- 该参数不可以和 `application_id` 参数同时填写</para>
    /// <para>示例值：7038435261598763308</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="update_start_time">
    /// <para>必填：否</para>
    /// <para>最早更新时间，毫秒时间戳</para>
    /// <para>示例值：1638848468868</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="update_end_time">
    /// <para>必填：否</para>
    /// <para>最晚更新时间，毫秒时间戳</para>
    /// <para>示例值：1638848468869</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/questionnaires")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1QuestionnairesResponseDto>> GetHireV1QuestionnairesAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20,
        [PathQuery] string? application_id = null,
        [PathQuery] string? interview_id = null,
        [PathQuery] string? update_start_time = null,
        [PathQuery] string? update_end_time = null);

    /// <summary>
    /// <para>【云文档】获取任务结果</para>
    /// <para>接口ID：7041549010980634626</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/wiki-v2/task/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该方法用于获取wiki异步任务的结果</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>wiki:space:read</item>
    /// <item>wiki:wiki</item>
    /// <item>wiki:wiki:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务id</para>
    /// <para>示例值：7037044037068177428-075c9481e6a0007c1df689dfbe5b55a08b6b06f7</para>
    /// </param>
    /// <param name="task_type">
    /// <para>必填：是</para>
    /// <para>任务类型</para>
    /// <para>示例值：move</para>
    /// <list type="bullet">
    /// <item>move：[移动云空间文档至知识空间](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-node/move_docs_to_wiki)任务</item>
    /// </list>
    /// </param>
    [HttpGet("/open-apis/wiki/v2/tasks/{task_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetWikiV2TasksByTaskIdResponseDto>> GetWikiV2TasksByTaskIdAsync(
        [PathQuery] string task_id,
        [PathQuery] string task_type);

    /// <summary>
    /// <para>【云文档】删除知识空间成员</para>
    /// <para>接口ID：7041549010980651010</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/wiki-v2/space-member/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>此接口用于删除知识空间成员或管理员。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>wiki:member:update</item>
    /// <item>wiki:wiki</item>
    /// </list></para>
    /// </summary>
    /// <param name="space_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>知识空间id</para>
    /// <para>示例值：7008061636015554580</para>
    /// </param>
    /// <param name="member_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>成员id，值的类型由请求体的 member_type 参数决定</para>
    /// <para>示例值：g64fb7g7</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpDelete("/open-apis/wiki/v2/spaces/{space_id}/members/{member_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.DeleteWikiV2SpacesBySpaceIdMembersByMemberIdResponseDto>> DeleteWikiV2SpacesBySpaceIdMembersByMemberIdAsync(
        [PathQuery] string space_id,
        [PathQuery] string member_id,
        [JsonContent] Ccm.DeleteWikiV2SpacesBySpaceIdMembersByMemberIdBodyDto dto);

    /// <summary>
    /// <para>【云文档】移动知识空间节点</para>
    /// <para>接口ID：7041549010980667394</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/wiki-v2/space-node/move</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>此方法用于在Wiki内移动节点，支持跨知识空间移动。如果有子节点，会携带子节点一起移动。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>wiki:node:move</item>
    /// <item>wiki:wiki</item>
    /// <item>wiki:wiki:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="space_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>知识空间id</para>
    /// <para>示例值：7008061636015512345</para>
    /// </param>
    /// <param name="node_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要迁移的节点token</para>
    /// <para>示例值：wikbcd6ydSUyOEzbdlt1BfpA5Yc</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/wiki/v2/spaces/{space_id}/nodes/{node_token}/move")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostWikiV2SpacesBySpaceIdNodesByNodeTokenMoveResponseDto>> PostWikiV2SpacesBySpaceIdNodesByNodeTokenMoveAsync(
        [PathQuery] string space_id,
        [PathQuery] string node_token,
        [JsonContent] Ccm.PostWikiV2SpacesBySpaceIdNodesByNodeTokenMoveBodyDto dto);

    /// <summary>
    /// <para>【消息与群组】更新群置顶</para>
    /// <para>接口ID：7043611687799816193</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat/put_top_notice</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新群组中的群置顶信息，可以将群中的某一条消息，或群公告置顶展示。</para>
    /// <para>## 前提条件</para>
    /// <para>应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>## 使用限制</para>
    /// <para>调用接口的机器人或者用户必须要在群组内，且和该群组属于同一租户。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat.top_notice:write_only</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>示例值：oc_5ad11d72b830411d72b836c20</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/im/v1/chats/{chat_id}/top_notice/put_top_notice")]
    System.Threading.Tasks.Task<FeishuResponse> PostImV1ChatsByChatIdTopNoticePutTopNoticeAsync(
        [PathQuery] string chat_id,
        [JsonContent] Im.PostImV1ChatsByChatIdTopNoticePutTopNoticeBodyDto dto);

    /// <summary>
    /// <para>【消息与群组】撤销群置顶</para>
    /// <para>接口ID：7043624153760759810</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat/delete_top_notice</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>撤销指定群组中的置顶消息或群公告。</para>
    /// <para>## 前提条件</para>
    /// <para>应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>## 使用限制</para>
    /// <para>调用接口的机器人或者用户必须要在群组内，且和该群组属于同一租户。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat.top_notice:write_only</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>示例值：oc_5ad11d72b830411d72b836c20</para>
    /// </param>
    [HttpPost("/open-apis/im/v1/chats/{chat_id}/top_notice/delete_top_notice")]
    System.Threading.Tasks.Task<FeishuResponse> PostImV1ChatsByChatIdTopNoticeDeleteTopNoticeAsync(
        [PathQuery] string chat_id);

    /// <summary>
    /// <para>【任务】查询所有任务</para>
    /// <para>接口ID：7044355281854070812</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/task-v1/task/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>以分页的方式获取任务列表。当使用user_access_token时，获取与该用户身份相关的所有任务。当使用tenant_access_token时，获取以该应用身份通过“创建任务“接口创建的所有任务（并非获取该应用所在租户下所有用户创建的任务）。</para>
    /// <para>本接口支持通过任务创建时间以及任务的完成状态对任务进行过滤。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：MTYzMTg3ODUxNQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="start_create_time">
    /// <para>必填：否</para>
    /// <para>范围查询任务时，查询的起始时间。不填时默认起始时间为第一个任务的创建时间。</para>
    /// <para>示例值：1652323331</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="end_create_time">
    /// <para>必填：否</para>
    /// <para>范围查询任务时，查询的结束时间。不填时默认结束时间为最后一个任务的创建时间。</para>
    /// <para>示例值：1652323335</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="task_completed">
    /// <para>必填：否</para>
    /// <para>可用于查询时过滤任务完成状态。true表示只返回已完成的任务，false表示只返回未完成的任务。不填时表示同时返回两种完成状态的任务。</para>
    /// <para>示例值：false</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/task/v1/tasks")]
    System.Threading.Tasks.Task<FeishuResponse<Task.GetTaskV1TasksResponseDto>> GetTaskV1TasksAsync(
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? start_create_time = null,
        [PathQuery] string? end_create_time = null,
        [PathQuery] bool? task_completed = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】获取用户角色列表</para>
    /// <para>接口ID：7044464966434390044</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/auth/list-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过用户ID、角色ID等筛选条件获取用户角色列表，可获取的信息包括用户ID、角色ID、角色姓名、业务管理范围等</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:auth</item>
    /// <item>hire:auth:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE2Mjc1NTUyMjM2NzIsImlkIjpudWxsfQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>每页获取记录数量</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="user_id">
    /// <para>必填：否</para>
    /// <para>用户 ID，与入参 `user_id_type` 类型一致</para>
    /// <para>示例值：7326856229396906012</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="role_id">
    /// <para>必填：否</para>
    /// <para>角色 ID，可通过接口 [获取角色列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/role/list) 获取</para>
    /// <para>示例值：101</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="update_start_time">
    /// <para>必填：否</para>
    /// <para>最早更新时间，毫秒时间戳</para>
    /// <para>示例值：1618500278663</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="update_end_time">
    /// <para>必填：否</para>
    /// <para>最晚更新时间，毫秒时间戳</para>
    /// <para>示例值：1618500278663</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/user_roles")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1UserRolesResponseDto>> GetHireV1UserRolesAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? user_id = null,
        [PathQuery] string? role_id = null,
        [PathQuery] string? update_start_time = null,
        [PathQuery] string? update_end_time = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】获取角色列表</para>
    /// <para>接口ID：7044465181343449090</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/auth/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据 page_token 与 page_size 对权限角色进行游标分页查询，可查询到的信息包括：权限角色ID、角色名、角色描述。可应用于权限判断等鉴权场景。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:auth</item>
    /// <item>hire:auth:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE2Mjc1NTUyMjM2NzIsImlkIjpudWxsfQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>每页获取记录数量</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/roles")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1RolesResponseDto>> GetHireV1RolesAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10);

    /// <summary>
    /// <para>【招聘】将人才加入指定文件夹</para>
    /// <para>接口ID：7044465232156999708</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/talent/add_to_folder</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据人才 ID 列表将人才加入指定文件夹。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:talent</item>
    /// <item>hire:talent_folder_association</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/talents/add_to_folder")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1TalentsAddToFolderResponseDto>> PostHireV1TalentsAddToFolderAsync(
        [JsonContent] Hire.PostHireV1TalentsAddToFolderBodyDto dto);

    /// <summary>
    /// <para>【考勤打卡】按 ID 查询考勤组</para>
    /// <para>接口ID：7044467124773371905</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/group/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过考勤组 ID 获取考勤组详情。包含基本信息、考勤班次、考勤方式、考勤设置信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:rule</item>
    /// <item>attendance:rule:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="group_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>考勤组 ID，获取方式：1）[创建或修改考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/create) 2）[按名称查询考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/search) 3）[获取打卡结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task/query)</para>
    /// <para>示例值：6919358128597097404</para>
    /// </param>
    /// <param name="employee_type">
    /// <para>必填：是</para>
    /// <para>请求体和响应体中的 user_id 和 creator_id 的员工id类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)</para>
    /// <para>示例值：employee_id</para>
    /// <list type="bullet">
    /// <item>employee_id：员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的用户 ID</item>
    /// <item>employee_no：员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的工号</item>
    /// </list>
    /// </param>
    /// <param name="dept_type">
    /// <para>必填：是</para>
    /// <para>部门 ID 的类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：暂时只支持部门的 openid。具体概念请参考[部门资源介绍](https://open.larkoffice.com/document/server-docs/contact-v3/department/field-overview)中的open_department_id</item>
    /// </list>
    /// </param>
    [HttpGet("/open-apis/attendance/v1/groups/{group_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.GetAttendanceV1GroupsByGroupIdResponseDto>> GetAttendanceV1GroupsByGroupIdAsync(
        [PathQuery] string group_id,
        [PathQuery] string employee_type,
        [PathQuery] string dept_type);

    /// <summary>
    /// <para>【考勤打卡】创建或修改排班表</para>
    /// <para>接口ID：7044467124773388289</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/user_daily_shift/batch_create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>排班表是用来描述考勤组内人员每天按哪个班次进行上班。目前排班表支持按x月y日对一位或多位人员进行排班。当用户的排班数据不存在时会进行创建，当用户的排班数据存在时会按照入参信息进行修改。注意：每人每天只能在一个考勤组中。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:rule</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_type">
    /// <para>必填：是</para>
    /// <para>请求体和响应体中的 user_id 的员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)</para>
    /// <para>示例值：employee_id</para>
    /// <list type="bullet">
    /// <item>employee_id：员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的用户 ID，或者[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)获取的userid。</item>
    /// <item>employee_no：员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的工号</item>
    /// </list>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/attendance/v1/user_daily_shifts/batch_create")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PostAttendanceV1UserDailyShiftsBatchCreateResponseDto>> PostAttendanceV1UserDailyShiftsBatchCreateAsync(
        [PathQuery] string employee_type,
        [JsonContent] Attendance.PostAttendanceV1UserDailyShiftsBatchCreateBodyDto dto);

    /// <summary>
    /// <para>【考勤打卡】修改用户人脸识别信息</para>
    /// <para>接口ID：7044467124773404673</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/user_setting/modify</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>修改授权内员工的用户设置信息，包括人脸照片文件 ID。修改用户人脸识别信息目前只支持 API 方式修改，管理后台已无法修改。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:rule</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_type">
    /// <para>必填：是</para>
    /// <para>请求体中的 user_ids 和响应体中的 user_id 的员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)</para>
    /// <para>示例值：employee_id</para>
    /// <list type="bullet">
    /// <item>employee_id：员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的用户 ID</item>
    /// <item>employee_no：员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的工号</item>
    /// </list>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/attendance/v1/user_settings/modify")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PostAttendanceV1UserSettingsModifyResponseDto>> PostAttendanceV1UserSettingsModifyAsync(
        [PathQuery] string employee_type,
        [JsonContent] Attendance.PostAttendanceV1UserSettingsModifyBodyDto dto);

    /// <summary>
    /// <para>【考勤打卡】查询打卡结果</para>
    /// <para>接口ID：7044467124773421057</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/user_task/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取企业内员工的实际打卡结果，包括：</para>
    /// <para>* 打卡任务列表</para>
    /// <para>* 打卡记录id</para>
    /// <para>* 用户信息</para>
    /// <para>* 考勤组id</para>
    /// <para>* 班次id</para>
    /// <para>* 考勤记录</para>
    /// <para>* 上班记录</para>
    /// <para>* 下班记录</para>
    /// <para>* 上班打卡结果</para>
    /// <para>* 下班打卡结果</para>
    /// <para>* 上班打卡结果补充</para>
    /// <para>* 下班打卡结果补充</para>
    /// <para>* 上班打卡时间</para>
    /// <para>* 下班打卡时间</para>
    /// <para>* 无效用户id列表</para>
    /// <para>* 没有权限用户ID列表</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:task:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_type">
    /// <para>必填：是</para>
    /// <para>员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)</para>
    /// <para>示例值：employee_id</para>
    /// <list type="bullet">
    /// <item>employee_id：员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的用户 ID</item>
    /// <item>employee_no：员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的工号</item>
    /// </list>
    /// </param>
    /// <param name="ignore_invalid_users">
    /// <para>必填：否</para>
    /// <para>是否忽略无效和没有权限的用户，对应employee_type。如果 true，则返回有效用户的信息，并告知无效和没有权限的用户信息；如果 false，且 user_ids 中存在无效或没有权限的用户，则返回错误</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="include_terminated_user">
    /// <para>必填：否</para>
    /// <para>由于新入职员工可以复用已离职员工的 employee_no/employee_id，对应employee_type。如果 true，则返回 employee_no/employee_id 对应的所有在职 + 离职员工的数据；如果 false，则只返回 employee_no/employee_id 对应的在职或最近一个离职员工的数据</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/attendance/v1/user_tasks/query")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PostAttendanceV1UserTasksQueryResponseDto>> PostAttendanceV1UserTasksQueryAsync(
        [PathQuery] string employee_type,
        [JsonContent] Attendance.PostAttendanceV1UserTasksQueryBodyDto dto,
        [PathQuery] bool? ignore_invalid_users = null,
        [PathQuery] bool? include_terminated_user = null);

    /// <summary>
    /// <para>【考勤打卡】导入打卡流水</para>
    /// <para>接口ID：7044467124773437441</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/user_task/batch_create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>导入员工的打卡流水记录。导入后，会根据员工所在的考勤组班次规则，计算最终的打卡状态与结果。可在打卡管理-[打卡记录](https://example.feishu.cn/people/workforce-management/manage/statistics/flow)中查询</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:task</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_type">
    /// <para>必填：是</para>
    /// <para>请求体和响应体中的 user_id 和 creator_id 的员工id类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)</para>
    /// <para>示例值：employee_id</para>
    /// <list type="bullet">
    /// <item>employee_id：员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的用户 ID，或者[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)获取的userid。</item>
    /// <item>employee_no：员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的工号</item>
    /// </list>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/attendance/v1/user_flows/batch_create")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PostAttendanceV1UserFlowsBatchCreateResponseDto>> PostAttendanceV1UserFlowsBatchCreateAsync(
        [PathQuery] string employee_type,
        [JsonContent] Attendance.PostAttendanceV1UserFlowsBatchCreateBodyDto dto);

    /// <summary>
    /// <para>【考勤打卡】获取可补卡时间</para>
    /// <para>接口ID：7044467124773453825</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/user_task_remedy/query_user_allowed_remedys</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取用户某天可以补的第几次上 / 下班卡的时间。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:task:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_type">
    /// <para>必填：是</para>
    /// <para>响应体中的 user_id 的员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)</para>
    /// <para>示例值：employee_id</para>
    /// <list type="bullet">
    /// <item>employee_id：员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的用户 ID</item>
    /// <item>employee_no：员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的工号</item>
    /// </list>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/attendance/v1/user_task_remedys/query_user_allowed_remedys")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PostAttendanceV1UserTaskRemedysQueryUserAllowedRemedysResponseDto>> PostAttendanceV1UserTaskRemedysQueryUserAllowedRemedysAsync(
        [PathQuery] string employee_type,
        [JsonContent] Attendance.PostAttendanceV1UserTaskRemedysQueryUserAllowedRemedysBodyDto dto);

    /// <summary>
    /// <para>【考勤打卡】按 ID 查询班次</para>
    /// <para>接口ID：7044467124773486593</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/shift/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过班次 ID 获取班次详情。对应功能为假勤设置-[班次设置](https://example.feishu.cn/people/workforce-management/setting/group/shifts)班次列表中的具体班次，班次信息可以点击班次名称查看</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:rule</item>
    /// <item>attendance:rule:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="shift_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>班次 ID，获取方式：1）[按名称查询班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/query) 2）[创建班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/create)</para>
    /// <para>示例值：6919358778597097404</para>
    /// </param>
    [HttpGet("/open-apis/attendance/v1/shifts/{shift_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.GetAttendanceV1ShiftsByShiftIdResponseDto>> GetAttendanceV1ShiftsByShiftIdAsync(
        [PathQuery] string shift_id);

    /// <summary>
    /// <para>【考勤打卡】查询打卡流水</para>
    /// <para>接口ID：7044467124773535745</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/user_task/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过打卡记录 ID 获取用户的打卡流水记录。返回信息主要包含：</para>
    /// <para>* 用户id和创建者id</para>
    /// <para>* 记录信息</para>
    /// <para>* 打卡位置信息、时间信息</para>
    /// <para>* 打卡方式信息</para>
    /// <para>* GPS 打卡：location_name（定位地址信息）</para>
    /// <para>* Wi-Fi 打卡：ssid（wifi名称）、bssid（mac地址）</para>
    /// <para>* 考勤机打卡：device_id（考勤机设备id）</para>
    /// <para>对应页面功能打卡管理-[打卡记录](https://example.feishu.cn/people/workforce-management/manage/statistics/flow)</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:task</item>
    /// <item>attendance:task:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_flow_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>打卡流水记录 ID，获取方式：1）[批量查询打卡流水记录](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_flow/query) 2）[获取打卡结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task/query) 3）[导入打卡流水记录](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_flow/batch_create)</para>
    /// <para>示例值：6708236686834352397</para>
    /// </param>
    /// <param name="employee_type">
    /// <para>必填：是</para>
    /// <para>响应体中的 user_id 和 creator_id 的员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)</para>
    /// <para>示例值：employee_id</para>
    /// <list type="bullet">
    /// <item>employee_id：员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的用户 ID</item>
    /// <item>employee_no：员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的工号</item>
    /// </list>
    /// </param>
    [HttpGet("/open-apis/attendance/v1/user_flows/{user_flow_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.GetAttendanceV1UserFlowsByUserFlowIdResponseDto>> GetAttendanceV1UserFlowsByUserFlowIdAsync(
        [PathQuery] string user_flow_id,
        [PathQuery] string employee_type);

    /// <summary>
    /// <para>【考勤打卡】查询排班表</para>
    /// <para>接口ID：7044467124773552129</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/user_daily_shift/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>支持查询多个用户的排班情况，注意此接口返回的是用户维度的排班结果，与页面功能并不对应。可以通过返回结果中的group_id查询考勤组[按 ID 查询考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/get) ，shift_id查询班次[按 ID 查询班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/get) 。查询的时间跨度不能超过 30 天。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:task:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_type">
    /// <para>必填：是</para>
    /// <para>请求体中的 user_ids 和响应体中的 user_id 的员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)</para>
    /// <para>示例值：employee_id</para>
    /// <list type="bullet">
    /// <item>employee_id：员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的用户 ID，或者[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)获取的userid。</item>
    /// <item>employee_no：员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的工号</item>
    /// </list>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/attendance/v1/user_daily_shifts/query")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PostAttendanceV1UserDailyShiftsQueryResponseDto>> PostAttendanceV1UserDailyShiftsQueryAsync(
        [PathQuery] string employee_type,
        [JsonContent] Attendance.PostAttendanceV1UserDailyShiftsQueryBodyDto dto);

    /// <summary>
    /// <para>【考勤打卡】查询统计数据</para>
    /// <para>接口ID：7044467124773568513</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/user_stats_data/query-3</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询日度统计或月度统计的统计数据。字段包含基本信息、考勤组信息、出勤统计、异常统计、请假统计、加班统计、打卡时间、考勤结果和自定义字段。具体报表可在考勤统计-[报表](https://example.feishu.cn/people/workforce-management/manage/statistics/report)中找到</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:task</item>
    /// <item>attendance:task:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_type">
    /// <para>必填：是</para>
    /// <para>请求体中的 user_ids 和响应体中的 user_id 的员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)</para>
    /// <para>示例值：employee_id</para>
    /// <list type="bullet">
    /// <item>employee_id：员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的用户 ID</item>
    /// <item>employee_no：员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的工号</item>
    /// </list>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/attendance/v1/user_stats_datas/query")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PostAttendanceV1UserStatsDatasQueryResponseDto>> PostAttendanceV1UserStatsDatasQueryAsync(
        [PathQuery] string employee_type,
        [JsonContent] Attendance.PostAttendanceV1UserStatsDatasQueryBodyDto dto);

    /// <summary>
    /// <para>【考勤打卡】批量查询用户人脸识别信息</para>
    /// <para>接口ID：7044467124773584897</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/user_setting/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量查询授权内员工的用户设置信息，包括人脸照片文件 ID、人脸照片更新时间。对应页面假勤设置-[人脸识别](https://example.feishu.cn/people/workforce-management/setting/group/security)。根据返回的face_key可以下载人脸信息[下载用户人脸识别照片](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/file/download)</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:rule:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_type">
    /// <para>必填：是</para>
    /// <para>请求体中的 user_ids 和响应体中的 user_id 的员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)</para>
    /// <para>示例值：employee_id</para>
    /// <list type="bullet">
    /// <item>employee_id：员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的用户 ID</item>
    /// <item>employee_no：员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的工号</item>
    /// </list>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpGet("/open-apis/attendance/v1/user_settings/query")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.GetAttendanceV1UserSettingsQueryResponseDto>> GetAttendanceV1UserSettingsQueryAsync(
        [PathQuery] string employee_type,
        [JsonContent] Attendance.GetAttendanceV1UserSettingsQueryBodyDto dto);

    /// <summary>
    /// <para>【考勤打卡】创建班次</para>
    /// <para>接口ID：7044467124773601281</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/shift/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>班次是描述一次考勤任务时间规则的统称，比如一天打多少次卡，每次卡的上下班时间，晚到多长时间算迟到，晚到多长时间算缺卡等。在假勤设置-[班次设置](https://example.feishu.cn/people/workforce-management/setting/group/shifts)中点击班次名称可以进行班次详情查看。如果入参中传入了班次id，那么支持编辑班次的能力</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:rule</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_type">
    /// <para>必填：否</para>
    /// <para>请求体中的 user_ids 和响应体中的 user_id 的员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)</para>
    /// <para>示例值：employee_id</para>
    /// <list type="bullet">
    /// <item>employee_id：员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的用户 ID，或者[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)获取的userid。</item>
    /// <item>employee_no：员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的工号</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/attendance/v1/shifts")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PostAttendanceV1ShiftsResponseDto>> PostAttendanceV1ShiftsAsync(
        [JsonContent] Attendance.PostAttendanceV1ShiftsBodyDto dto,
        [PathQuery] string? employee_type = null);

    /// <summary>
    /// <para>【考勤打卡】批量查询打卡流水</para>
    /// <para>接口ID：7044467124773617665</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/user_task/query-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过用户 ID 获取用户的打卡流水记录。返回信息主要包含：</para>
    /// <para>* 用户id和创建者id</para>
    /// <para>* 记录信息</para>
    /// <para>* 打卡位置信息、时间信息</para>
    /// <para>* 打卡方式信息</para>
    /// <para>* GPS 打卡：location_name（定位地址信息）</para>
    /// <para>* Wi-Fi 打卡：ssid（wifi名称）、bssid（mac地址）</para>
    /// <para>* 考勤机打卡：device_id（考勤机设备id）</para>
    /// <para>对应页面功能打卡管理-[打卡记录](https://example.feishu.cn/people/workforce-management/manage/statistics/flow)</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:task:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_type">
    /// <para>必填：是</para>
    /// <para>请求体中的 user_ids 和响应体中的 user_id 的员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)</para>
    /// <para>示例值：employee_id</para>
    /// <list type="bullet">
    /// <item>employee_id：员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的用户 ID</item>
    /// <item>employee_no：员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的工号</item>
    /// </list>
    /// </param>
    /// <param name="include_terminated_user">
    /// <para>必填：否</para>
    /// <para>由于新入职用户可以复用已离职用户的employee_no/employee_id。如果true，返回employee_no/employee_id对应的所有在职+离职用户数据；如果false，只返回employee_no/employee_id对应的在职或最近一个离职用户数据</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/attendance/v1/user_flows/query")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PostAttendanceV1UserFlowsQueryResponseDto>> PostAttendanceV1UserFlowsQueryAsync(
        [PathQuery] string employee_type,
        [JsonContent] Attendance.PostAttendanceV1UserFlowsQueryBodyDto dto,
        [PathQuery] bool? include_terminated_user = null);

    /// <summary>
    /// <para>【考勤打卡】按名称查询班次</para>
    /// <para>接口ID：7044467124773634049</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/shift/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>飞书人事管理后台中假勤设置-[班次配置](https://example.feishu.cn/people/workforce-management/setting/group/shifts)中的搜索班次名称功能，展示班次名称、打卡规则、弹性班次规则、休息规则等</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:task:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="shift_name">
    /// <para>必填：是</para>
    /// <para>班次名称，支持模糊匹配</para>
    /// <para>示例值：早班</para>
    /// </param>
    [HttpPost("/open-apis/attendance/v1/shifts/query")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PostAttendanceV1ShiftsQueryResponseDto>> PostAttendanceV1ShiftsQueryAsync(
        [PathQuery] string shift_name);

    /// <summary>
    /// <para>【考勤打卡】更新统计设置</para>
    /// <para>接口ID：7044467124773650433</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/user_stats_data/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新开发者定制的日度统计或月度统计的统计报表表头设置信息。报表的表头信息可以在考勤统计-[报表](https://example.feishu.cn/people/workforce-management/manage/statistics/report)中查询到具体的报表信息，此接口专门用于更新表头信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:task</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_stats_view_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户视图 ID，获取方式：1）[查询统计设置](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_stats_view/query)</para>
    /// <para>示例值：TmpZNU5qTTJORFF6T1RnNU5UTTNOakV6TWl0dGIyNTBhQT09</para>
    /// </param>
    /// <param name="employee_type">
    /// <para>必填：是</para>
    /// <para>响应体中的 user_id 的员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)</para>
    /// <para>示例值：employee_id</para>
    /// <list type="bullet">
    /// <item>employee_id：员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的用户 ID</item>
    /// <item>employee_no：员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的工号</item>
    /// </list>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/attendance/v1/user_stats_views/{user_stats_view_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PutAttendanceV1UserStatsViewsByUserStatsViewIdResponseDto>> PutAttendanceV1UserStatsViewsByUserStatsViewIdAsync(
        [PathQuery] string user_stats_view_id,
        [PathQuery] string employee_type,
        [JsonContent] Attendance.PutAttendanceV1UserStatsViewsByUserStatsViewIdBodyDto dto);

    /// <summary>
    /// <para>【考勤打卡】获取补卡记录</para>
    /// <para>接口ID：7044467124773666817</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/user_task_remedy/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>补卡：用户通过审批的方式，在某一次上/下班的打卡时间范围内，补充一条打卡记录，用以修正用户的考勤结果。本接口专用于获取员工的补卡记录（无页面功能对应）</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:task:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_type">
    /// <para>必填：是</para>
    /// <para>请求体中的 user_ids 和响应体中的 user_id 的员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)</para>
    /// <para>示例值：employee_id</para>
    /// <list type="bullet">
    /// <item>employee_id：员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的用户 ID</item>
    /// <item>employee_no：员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的工号</item>
    /// </list>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/attendance/v1/user_task_remedys/query")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PostAttendanceV1UserTaskRemedysQueryResponseDto>> PostAttendanceV1UserTaskRemedysQueryAsync(
        [PathQuery] string employee_type,
        [JsonContent] Attendance.PostAttendanceV1UserTaskRemedysQueryBodyDto dto);

    /// <summary>
    /// <para>【考勤打卡】创建或修改考勤组</para>
    /// <para>接口ID：7044467124773683201</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/group/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>考勤组，是对部门或者员工在某个特定场所及特定时间段内的出勤情况（包括上下班、迟到、早退、病假、婚假、丧假、公休、工作时间、加班情况等）的一种规则设定。</para>
    /// <para>通过设置考勤组，可以从部门、员工两个维度，来设定考勤方式、考勤时间、考勤地点等考勤规则。</para>
    /// <para>对应功能同设置-假勤设置-[考勤组](https://example.feishu.cn/people/workforce-management/setting/group/list)的“新建”功能</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:rule</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_type">
    /// <para>必填：是</para>
    /// <para>响应体中的 user_id 的员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)</para>
    /// <para>示例值：employee_id</para>
    /// <list type="bullet">
    /// <item>employee_id：员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的用户 ID</item>
    /// <item>employee_no：员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的工号</item>
    /// </list>
    /// </param>
    /// <param name="dept_type">
    /// <para>必填：是</para>
    /// <para>部门 ID 的类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：暂时只支持部门的 openid。具体概念请参考[部门资源介绍](https://open.larkoffice.com/document/server-docs/contact-v3/department/field-overview)中的open_department_id</item>
    /// </list>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/attendance/v1/groups")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PostAttendanceV1GroupsResponseDto>> PostAttendanceV1GroupsAsync(
        [PathQuery] string employee_type,
        [PathQuery] string dept_type,
        [JsonContent] Attendance.PostAttendanceV1GroupsBodyDto dto);

    /// <summary>
    /// <para>【考勤打卡】删除考勤组</para>
    /// <para>接口ID：7044467124773699585</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/group/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过考勤组 ID 删除考勤组。对应设置-假勤设置-[考勤组](https://example.feishu.cn/people/workforce-management/setting/group/list)操作列的删除功能</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:rule</item>
    /// </list></para>
    /// </summary>
    /// <param name="group_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>考勤组 ID，获取方式：1）[创建或修改考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/create) 2）[按名称查询考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/search) 3）[获取打卡结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task/query)</para>
    /// <para>示例值：6919358128597097404</para>
    /// </param>
    [HttpDelete("/open-apis/attendance/v1/groups/{group_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteAttendanceV1GroupsByGroupIdAsync(
        [PathQuery] string group_id);

    /// <summary>
    /// <para>【考勤打卡】通知补卡审批发起</para>
    /// <para>接口ID：7044467124773715969</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/user_task_remedy/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对于只使用飞书考勤系统而未使用飞书审批系统的企业，可以通过该接口，将在三方审批系统中发起的补卡审批数据，写入到飞书考勤系统中，状态为审批中。写入后可以由[通知审批状态更新](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/approval_info/process) 进行状态更新</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:task</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_type">
    /// <para>必填：是</para>
    /// <para>响应体中的 user_id 的员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)</para>
    /// <para>示例值：employee_id</para>
    /// <list type="bullet">
    /// <item>employee_id：员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的用户 ID</item>
    /// <item>employee_no：员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的工号</item>
    /// </list>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/attendance/v1/user_task_remedys")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PostAttendanceV1UserTaskRemedysResponseDto>> PostAttendanceV1UserTaskRemedysAsync(
        [PathQuery] string employee_type,
        [JsonContent] Attendance.PostAttendanceV1UserTaskRemedysBodyDto dto);

    /// <summary>
    /// <para>【考勤打卡】下载用户人脸识别照片</para>
    /// <para>接口ID：7044467124773732353</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/user_setting/download</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过文件 ID 下载用户的头像照片文件。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:rule:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文件 ID，可通过[批量查询用户人脸识别信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_setting/query)获取</para>
    /// <para>示例值：xxxxxb306842b1c189bc5212eefxxxxx</para>
    /// </param>
    /// <returns>返回文件二进制流</returns>
    [HttpGet("/open-apis/attendance/v1/files/{file_id}/download")]
    System.Threading.Tasks.Task<HttpResponseMessage> GetAttendanceV1FilesByFileIdDownloadAsync(
        [PathQuery] string file_id);

    /// <summary>
    /// <para>【考勤打卡】上传用户人脸识别照片</para>
    /// <para>接口ID：7044467124773765121</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/user_setting/upload</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>上传用户人脸照片并获取文件 ID，对应小程序端的人脸录入功能</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:rule</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_name">
    /// <para>必填：是</para>
    /// <para>带后缀的文件名</para>
    /// <para>示例值：人脸照片.jpg</para>
    /// </param>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>文件内容</para>
    /// </param>
    [HttpPost("/open-apis/attendance/v1/files/upload")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PostAttendanceV1FilesUploadResponseDto>> PostAttendanceV1FilesUploadAsync(
        [PathQuery] string file_name,
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【考勤打卡】按名称查询考勤组</para>
    /// <para>接口ID：7044467124773781505</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/group/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>按考勤组名称查询考勤组摘要信息。查询条件支持名称精确匹配和模糊匹配两种方式。查询结果按考勤组修改时间 desc 排序，且最大记录数为 10 条。对应页面设置-假勤设置-[考勤组](https://example.feishu.cn/people/workforce-management/setting/group/list)的名称搜索功能</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:rule</item>
    /// <item>attendance:rule:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/attendance/v1/groups/search")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PostAttendanceV1GroupsSearchResponseDto>> PostAttendanceV1GroupsSearchAsync(
        [JsonContent] Attendance.PostAttendanceV1GroupsSearchBodyDto dto);

    /// <summary>
    /// <para>【考勤打卡】删除班次</para>
    /// <para>接口ID：7044467124773797889</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/shift/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过班次 ID 删除班次。对应功能为假勤设置-[班次设置](https://example.feishu.cn/people/workforce-management/setting/group/shifts)班次列表中操作栏的删除按钮。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:rule</item>
    /// </list></para>
    /// </summary>
    /// <param name="shift_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>班次 ID，获取方式：1）[按名称查询班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/query) 2）[创建班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/create)</para>
    /// <para>示例值：6919358778597097404</para>
    /// </param>
    [HttpDelete("/open-apis/attendance/v1/shifts/{shift_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteAttendanceV1ShiftsByShiftIdAsync(
        [PathQuery] string shift_id);

    /// <summary>
    /// <para>【考勤打卡】查询统计表头</para>
    /// <para>接口ID：7044467124773814273</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/user_stats_data/query-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询考勤统计支持的日度统计或月度统计的统计表头。报表的表头信息可以在考勤统计-[报表](https://example.feishu.cn/people/workforce-management/manage/statistics/report)中查询到具体的报表信息，此接口专门用于查询表头数据</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:task</item>
    /// <item>attendance:task:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_type">
    /// <para>必填：是</para>
    /// <para>响应体中的 user_id 的员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)</para>
    /// <para>示例值：employee_id</para>
    /// <list type="bullet">
    /// <item>employee_id：员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的用户 ID</item>
    /// <item>employee_no：员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的工号</item>
    /// </list>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/attendance/v1/user_stats_fields/query")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PostAttendanceV1UserStatsFieldsQueryResponseDto>> PostAttendanceV1UserStatsFieldsQueryAsync(
        [PathQuery] string employee_type,
        [JsonContent] Attendance.PostAttendanceV1UserStatsFieldsQueryBodyDto dto);

    /// <summary>
    /// <para>【考勤打卡】查询统计设置</para>
    /// <para>接口ID：7044467124773830657</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/user_stats_data/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询考勤统计支持的日度统计或月度统计的统计表头。报表的表头信息可以在考勤统计-[报表](https://example.feishu.cn/people/workforce-management/manage/statistics/report)中查询到具体的报表信息，此接口专门用于查询表头数据。注意此接口和[查询统计表头](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_stats_field/query)基本相同，区别点在于在兼容历史统计视图模型（历史统计数据模型可以按用户ID设置，后续统计升级为仅支持租户维度）</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:task</item>
    /// <item>attendance:task:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_type">
    /// <para>必填：是</para>
    /// <para>响应体中的 user_id 的员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)</para>
    /// <para>示例值：employee_id</para>
    /// <list type="bullet">
    /// <item>employee_id：员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的用户 ID</item>
    /// <item>employee_no：员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的工号</item>
    /// </list>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/attendance/v1/user_stats_views/query")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PostAttendanceV1UserStatsViewsQueryResponseDto>> PostAttendanceV1UserStatsViewsQueryAsync(
        [PathQuery] string employee_type,
        [JsonContent] Attendance.PostAttendanceV1UserStatsViewsQueryBodyDto dto);

    /// <summary>
    /// <para>【招聘】创建人才外部信息</para>
    /// <para>接口ID：7045099225022185474</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/import-external-system-information/create-5</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建外部人才，可将已存在人才标记为外部人才，并写入外部系统创建时间。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:talent</item>
    /// </list></para>
    /// </summary>
    /// <param name="talent_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>人才 ID，可通过[获取人才列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent/list)获取</para>
    /// <para>示例值：7043758982146345223</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/talents/{talent_id}/external_info")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1TalentsByTalentIdExternalInfoResponseDto>> PostHireV1TalentsByTalentIdExternalInfoAsync(
        [PathQuery] string talent_id,
        [JsonContent] Hire.PostHireV1TalentsByTalentIdExternalInfoBodyDto dto);

    /// <summary>
    /// <para>【招聘】更新人才外部信息</para>
    /// <para>接口ID：7045100014603550721</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/import-external-system-information/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新人才外部信息，包含外部系统创建时间。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:talent</item>
    /// </list></para>
    /// </summary>
    /// <param name="talent_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>人才 ID，可通过[获取人才列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent/list)接口获取</para>
    /// <para>示例值：7043758982146345223</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/hire/v1/talents/{talent_id}/external_info")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PutHireV1TalentsByTalentIdExternalInfoResponseDto>> PutHireV1TalentsByTalentIdExternalInfoAsync(
        [PathQuery] string talent_id,
        [JsonContent] Hire.PutHireV1TalentsByTalentIdExternalInfoBodyDto dto);

    /// <summary>
    /// <para>【OKR】上传进展记录图片</para>
    /// <para>接口ID：7047048928294174722</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/okr-v1/progress_record/upload</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>上传进展记录图片。成功调用该接口后，你可继续调用[创建 OKR 进展记录](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/progress_record/create)或[更新 OKR 进展记录](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/progress_record/update)，将返回的 `url`参数和`file_token` 参数传入 `imageList` 参数中。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>okr:okr</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    /// <param name="data">
    /// <para>必填：是</para>
    /// <para>图片</para>
    /// </param>
    [HttpPost("/open-apis/okr/v1/images/upload")]
    System.Threading.Tasks.Task<FeishuResponse<Okr.PostOkrV1ImagesUploadResponseDto>> PostOkrV1ImagesUploadAsync(
        [FormDataContent] Okr.PostOkrV1ImagesUploadBodyDto dto,
        [FormDataContent] FormDataFile data);

    /// <summary>
    /// <para>【OKR】创建 OKR 进展记录</para>
    /// <para>接口ID：7047048928294944770</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/okr-v1/progress_record/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>创建 OKR 进展记录。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>okr:okr</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/okr/v1/progress_records")]
    System.Threading.Tasks.Task<FeishuResponse<Okr.PostOkrV1ProgressRecordsResponseDto>> PostOkrV1ProgressRecordsAsync(
        [JsonContent] Okr.PostOkrV1ProgressRecordsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【OKR】更新 OKR 进展记录</para>
    /// <para>接口ID：7047052132604870684</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/okr-v1/progress_record/update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据 OKR 进展记录 ID 更新进展详情。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>okr:okr</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="progress_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待更新的 OKR进展记录 ID</para>
    /// <para>示例值：7041857032248410131</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/okr/v1/progress_records/{progress_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Okr.PutOkrV1ProgressRecordsByProgressIdResponseDto>> PutOkrV1ProgressRecordsByProgressIdAsync(
        [PathQuery] string progress_id,
        [JsonContent] Okr.PutOkrV1ProgressRecordsByProgressIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【OKR】删除 OKR 进展记录</para>
    /// <para>接口ID：7047056455665532929</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/okr-v1/progress_record/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据 ID 删除 OKR 进展记录。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>okr:okr</item>
    /// </list></para>
    /// </summary>
    /// <param name="progress_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待删除的 OKR进展记录 ID</para>
    /// <para>示例值：7041857032248410131</para>
    /// </param>
    [HttpDelete("/open-apis/okr/v1/progress_records/{progress_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteOkrV1ProgressRecordsByProgressIdAsync(
        [PathQuery] string progress_id);

    /// <summary>
    /// <para>【OKR】获取 OKR 进展记录</para>
    /// <para>接口ID：7047056455665926145</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/okr-v1/progress_record/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据 ID 获取 OKR 进展记录详情。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>okr:okr</item>
    /// <item>okr:okr:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="progress_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待查询的 OKR进展记录 ID</para>
    /// <para>示例值：7041857032248410131</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/okr/v1/progress_records/{progress_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Okr.GetOkrV1ProgressRecordsByProgressIdResponseDto>> GetOkrV1ProgressRecordsByProgressIdAsync(
        [PathQuery] string progress_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【多维表格】创建多维表格</para>
    /// <para>接口ID：7047733935745007620</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>在指定文件夹中创建一个多维表格，包含一个空白的数据表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:app:create</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/bitable/v1/apps")]
    System.Threading.Tasks.Task<FeishuResponse<Base.PostBitableV1AppsResponseDto>> PostBitableV1AppsAsync(
        [JsonContent] Base.PostBitableV1AppsBodyDto dto);

    /// <summary>
    /// <para>【招聘】获取背调信息列表</para>
    /// <para>接口ID：7049722392477958145</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/background_check_order/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据投递 ID 或背调更新时间批量获取背调订单信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:background_check_order</item>
    /// <item>hire:background_check_order:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEsInRpbWVzdGFtcCI6MTY0MDc2NTYzMjA4OCwiaWQiOm51bGx9</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="application_id">
    /// <para>必填：否</para>
    /// <para>投递 ID。可通过[获取投递列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/list)接口获取</para>
    /// <para>示例值：6985833807195212076</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="update_start_time">
    /// <para>必填：否</para>
    /// <para>最早更新时间。毫秒时间戳</para>
    /// <para>示例值：1638848468868</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="update_end_time">
    /// <para>必填：否</para>
    /// <para>最晚更新时间。毫秒时间戳</para>
    /// <para>示例值：1638848468869</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/background_check_orders")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1BackgroundCheckOrdersResponseDto>> GetHireV1BackgroundCheckOrdersAsync(
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? application_id = null,
        [PathQuery] string? update_start_time = null,
        [PathQuery] string? update_end_time = null);

    /// <summary>
    /// <para>【日历】查询主日历信息</para>
    /// <para>接口ID：7051880392425439236</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/calendar-v4/calendar/primary</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口获取当前身份（应用或用户）的主日历信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar:read</item>
    /// <item>calendar:calendar:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpPost("/open-apis/calendar/v4/calendars/primary")]
    System.Threading.Tasks.Task<FeishuResponse<Calendar.PostCalendarV4CalendarsPrimaryResponseDto>> PostCalendarV4CalendarsPrimaryAsync(
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】获取 Offer 列表</para>
    /// <para>接口ID：7054010541106921473</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/offer/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据人才 ID 获取 Offer 列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:offer</item>
    /// <item>hire:offer:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：1231231987</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，最大为 200</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="talent_id">
    /// <para>必填：是</para>
    /// <para>人才 ID，如何获取人才 ID 请参考[获取人才列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent/list)</para>
    /// <para>示例值：7096320678581242123</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户，即将下线字段，不建议使用</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="employee_type_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「人员类型 ID」的类型</para>
    /// <para>示例值：`employee_type_enum_id`</para>
    /// <list type="bullet">
    /// <item>people_admin_employee_type_id：「人力系统管理后台」适用的人员类型 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>employee_type_enum_id：「飞书管理后台」适用的人员类型 ID，通过[查询人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list) 接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_employee_type_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/offers")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1OffersResponseDto>> GetHireV1OffersAsync(
        [PathQuery] string talent_id,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? employee_type_id_type = "people_admin_employee_type_id");

    /// <summary>
    /// <para>【招聘】获取人才文件夹列表</para>
    /// <para>接口ID：7054018845564796956</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/talent/list-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取招聘系统中人才文件夹信息列表，包括文件夹 ID、文件夹名称、文件夹所有者 ID。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:talent_folder</item>
    /// <item>hire:talent_folder:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEsInRpbWVzdGFtcCI6MTY0MDc2NTYzMjA4OCwiaWQiOm51bGx9</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>每页获取记录数量</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/talent_folders")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1TalentFoldersResponseDto>> GetHireV1TalentFoldersAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】获取人才面试信息</para>
    /// <para>接口ID：7055229817129811969</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/interview/get_by_talent</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取人才下所有面试信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:interview</item>
    /// <item>hire:interview:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="talent_id">
    /// <para>必填：是</para>
    /// <para>人才 ID，可通过[获取人才列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent/list)接口获取</para>
    /// <para>示例值：6949805467799537964</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值：job_level_id</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，通过[「获取租户职级列表」](https://open.feishu.cn/document/server-docs/contact-v3/job_level/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_level_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/interviews/get_by_talent")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1InterviewsGetByTalentResponseDto>> GetHireV1InterviewsGetByTalentAsync(
        [PathQuery] string talent_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? job_level_id_type = "people_admin_job_level_id");

    /// <summary>
    /// <para>【邮箱】查询邮箱地址状态</para>
    /// <para>接口ID：7055500003323379713</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/user/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>使用邮箱状态查询接口，可以输入邮箱地址，查询出该邮箱地址对应的类型以及状态。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:user_mailbox</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/mail/v1/users/query")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.PostMailV1UsersQueryResponseDto>> PostMailV1UsersQueryAsync(
        [JsonContent] Mail.PostMailV1UsersQueryBodyDto dto);

    /// <summary>
    /// <para>【招聘】获取简历评估信息列表</para>
    /// <para>接口ID：7062626037662892033</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/evaluation/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量获取简历评估信息，包含评估人、评估结论、评估详情等信息。支持按照投递 ID、更新时间来进行筛选。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:evaluation:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEsInRpbWVzdGFtcCI6MTY0MDc2NTYzMjA4OCwiaWQiOm51bGx9</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>每页获取记录数量，最大100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="application_id">
    /// <para>必填：否</para>
    /// <para>投递 ID，可通过[获取投递列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/list)接口获取</para>
    /// <para>示例值：6875569957036738823</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="update_start_time">
    /// <para>必填：否</para>
    /// <para>最早更新时间，毫秒时间戳</para>
    /// <para>示例值：1600843767338</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="update_end_time">
    /// <para>必填：否</para>
    /// <para>最晚更新时间，毫秒时间戳</para>
    /// <para>示例值：1600843938726</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/evaluations")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1EvaluationsResponseDto>> GetHireV1EvaluationsAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? application_id = null,
        [PathQuery] string? update_start_time = null,
        [PathQuery] string? update_end_time = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】获取面试登记表列表</para>
    /// <para>接口ID：7063273947417247745</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/interview-settings/list-3</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取面试登记表列表，可获取到的信息包括登记表名称、登记表模块、登记表字段</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:interview</item>
    /// <item>hire:interview:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE2Mjc1NTUyMjM2NzIsImlkIjpudWxsfQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>每页获取记录数量，最大10</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/interview_registration_schemas")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1InterviewRegistrationSchemasResponseDto>> GetHireV1InterviewRegistrationSchemasAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10);

    /// <summary>
    /// <para>【云文档】创建文档</para>
    /// <para>接口ID：7068199542315204636</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/docs/docx-v1/document/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>创建文档类型为 docx 的文档。你可选择传入文档标题和文件夹。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docx:document</item>
    /// <item>docx:document:create</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/docx/v1/documents")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostDocxV1DocumentsResponseDto>> PostDocxV1DocumentsAsync(
        [JsonContent] Ccm.PostDocxV1DocumentsBodyDto dto);

    /// <summary>
    /// <para>【云文档】获取所有子块</para>
    /// <para>接口ID：7068199542315253788</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/docs/docx-v1/document-block/get-2</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>给定一个指定版本的文档，并指定需要操作的块，分页遍历其所有子块富文本内容 。如果不指定版本，则会默认查询最新版本。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docx:document</item>
    /// <item>docx:document:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="document_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文档唯一标识。对应新版文档 Token，[点击了解如何获取云文档 Token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)。</para>
    /// <para>示例值：doxcnePuYufKa49ISjhD8Ih0ikh</para>
    /// </param>
    /// <param name="block_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>Block 的唯一标识</para>
    /// <para>示例值：doxcnO6UW6wAw2qIcYf4hZpFIth</para>
    /// </param>
    /// <param name="document_revision_id">
    /// <para>必填：否</para>
    /// <para>操作的文档版本，-1表示文档最新版本。若此时操作的版本为文档最新版本，则需要持有文档的阅读权限；若此时操作的版本为文档的历史版本，则需要持有文档的编辑权限。</para>
    /// <para>示例值：-1</para>
    /// <para>默认值：-1</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：aw7DoMKBFMOGwqHCrcO8w6jCmMOvw6ILeADCvsKNw57Di8O5XGV3LG4_w5HCqhFxSnDCrCzCn0BgZcOYUg85EMOYcEAcwqYOw4ojw5QFwofCu8KoIMO3K8Ktw4IuNMOBBHNYw4bCgCV3U1zDu8K-J8KSR8Kgw7Y0fsKZdsKvW3d9w53DnkHDrcO5bDkYwrvDisOEPcOtVFJ-I03CnsOILMOoAmLDknd6dsKqG1bClAjDuS3CvcOTwo7Dg8OrwovDsRdqIcKxw5HDohTDtXN9w5rCkWo</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：500</para>
    /// <para>默认值：500</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的用户ID的类型</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/docx/v1/documents/{document_id}/blocks/{block_id}/children")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDocxV1DocumentsByDocumentIdBlocksByBlockIdChildrenResponseDto>> GetDocxV1DocumentsByDocumentIdBlocksByBlockIdChildrenAsync(
        [PathQuery] string document_id,
        [PathQuery] string block_id,
        [PathQuery] int? document_revision_id = -1,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 500,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】创建块</para>
    /// <para>接口ID：7068199542315270172</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/docs/docx-v1/document-block/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>指定需要操作的块，为其创建一批子块，并插入到指定位置。如果操作成功，接口将返回新创建子块的富文本内容。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docx:document</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="document_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文档唯一标识。对应新版文档 Token，[点击了解如何获取云文档 Token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)。</para>
    /// <para>示例值：doxcnePuYufKa49ISjhD8Ih0ikh</para>
    /// </param>
    /// <param name="block_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>Block 的唯一标识</para>
    /// <para>示例值：doxcnO6UW6wAw2qIcYf4hZpFIth</para>
    /// </param>
    /// <param name="document_revision_id">
    /// <para>必填：否</para>
    /// <para>操作的文档版本，-1 表示文档最新版本。若此时操作的版本为文档最新版本，则需要持有文档的阅读权限；若此时操作的版本为文档的历史版本，则需要持有文档的编辑权限。</para>
    /// <para>示例值：-1</para>
    /// <para>默认值：-1</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>操作的唯一标识，与接口返回值的 client_token 相对应，用于幂等的进行更新操作。此值为空表示将发起一次新的请求，此值非空表示幂等的进行更新操作。</para>
    /// <para>示例值：fe599b60-450f-46ff-b2ef-9f6675625b97</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的用户ID的类型</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/docx/v1/documents/{document_id}/blocks/{block_id}/children")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostDocxV1DocumentsByDocumentIdBlocksByBlockIdChildrenResponseDto>> PostDocxV1DocumentsByDocumentIdBlocksByBlockIdChildrenAsync(
        [PathQuery] string document_id,
        [PathQuery] string block_id,
        [JsonContent] Ccm.PostDocxV1DocumentsByDocumentIdBlocksByBlockIdChildrenBodyDto dto,
        [PathQuery] int? document_revision_id = -1,
        [PathQuery] string? client_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】更新块的内容</para>
    /// <para>接口ID：7068199542315286556</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/docs/docx-v1/document-block/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新指定的块。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docx:document</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="document_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文档唯一标识。对应新版文档 Token，[点击了解如何获取云文档 Token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)。</para>
    /// <para>示例值：doxcnePuYufKa49ISjhD8Ih0ikh</para>
    /// </param>
    /// <param name="block_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>Block 的唯一标识</para>
    /// <para>示例值：doxcnO6UW6wAw2qIcYf4hZpFIth</para>
    /// </param>
    /// <param name="document_revision_id">
    /// <para>必填：否</para>
    /// <para>操作的文档版本，-1 表示文档最新版本。若此时操作的版本为文档最新版本，则需要持有文档的阅读权限；若此时操作的版本为文档的历史版本，则需要持有文档的编辑权限。</para>
    /// <para>示例值：-1</para>
    /// <para>默认值：-1</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>操作的唯一标识，与接口返回值的 client_token 相对应，用于幂等的进行更新操作。此值为空表示将发起一次新的请求，此值非空表示幂等的进行更新操作。</para>
    /// <para>示例值：0e2633a3-aa1a-4171-af9e-0768ff863566</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的用户ID的类型</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/docx/v1/documents/{document_id}/blocks/{block_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PatchDocxV1DocumentsByDocumentIdBlocksByBlockIdResponseDto>> PatchDocxV1DocumentsByDocumentIdBlocksByBlockIdAsync(
        [PathQuery] string document_id,
        [PathQuery] string block_id,
        [JsonContent] Ccm.PatchDocxV1DocumentsByDocumentIdBlocksByBlockIdBodyDto dto,
        [PathQuery] int? document_revision_id = -1,
        [PathQuery] string? client_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】获取文档基本信息</para>
    /// <para>接口ID：7068199542315302940</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/docs/docx-v1/document/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取文档标题和最新版本 ID。</para>
    /// <para>## 前提条件</para>
    /// <para>调用此接口前，请确保当前调用身份（tenant_access_token 或 user_access_token）已有云文档的阅读、编辑等文档权限，否则接口将返回 HTTP 403 或 400 状态码。了解更多，参考[如何为应用或用户开通文档权限](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#16c6475a)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docx:document</item>
    /// <item>docx:document:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="document_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文档的唯一标识。你可通过以下方式获取文档的 `document_id`。了解更多，参考[文档概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-overview#e18a49a1)。</para>
    /// <para>- 若文档存储在云盘中，你可通过 URL 地址或通过[获取文件夹下文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list) 获取其中文档资源的 `document_id`。</para>
    /// <para>- 若文档挂载在知识库中，你需通过知识库相关接口[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)获取该节点下挂载的云资源的 `obj_token` 和 `obj_type`。在该情况下，`obj_type` 为 `docx` 时，其对应的 `obj_token` 即为文档的 `document_id`。</para>
    /// <para>**注意**：</para>
    /// <para>对于知识库（wiki）中的文档，其 URL 地址中的 token 并不是该文档的 `document_id`。使用时请注意区分。</para>
    /// <para>示例值：doxcnePuYufKa49ISjhD8Iabcef</para>
    /// </param>
    [HttpGet("/open-apis/docx/v1/documents/{document_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDocxV1DocumentsByDocumentIdResponseDto>> GetDocxV1DocumentsByDocumentIdAsync(
        [PathQuery] string document_id);

    /// <summary>
    /// <para>【云文档】删除块</para>
    /// <para>接口ID：7068199542315335708</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/docs/docx-v1/document-block/batch_delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>指定需要操作的块，删除其指定范围的子块。如果操作成功，接口将返回应用删除操作后的文档版本号。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docx:document</item>
    /// </list></para>
    /// </summary>
    /// <param name="document_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文档唯一标识。对应新版文档 Token，[点击了解如何获取云文档 Token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)。</para>
    /// <para>示例值：doxcnePuYufKa49ISjhD8Ih0ikh</para>
    /// </param>
    /// <param name="block_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>父 Block 的唯一标识</para>
    /// <para>示例值：doxcnO6UW6wAw2qIcYf4hZpFIth</para>
    /// </param>
    /// <param name="document_revision_id">
    /// <para>必填：否</para>
    /// <para>操作的文档版本，-1表示文档最新版本。若此时操作的版本为文档最新版本，则需要持有文档的阅读权限；若此时操作的版本为文档的历史版本，则需要持有文档的编辑权限。</para>
    /// <para>示例值：-1</para>
    /// <para>默认值：-1</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>操作的唯一标识，与接口返回值的 client_token 相对应，用于幂等的进行更新操作。此值为空表示将发起一次新的请求，此值非空表示幂等的进行更新操作。</para>
    /// <para>示例值：fe599b60-450f-46ff-b2ef-9f6675625b97</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpDelete("/open-apis/docx/v1/documents/{document_id}/blocks/{block_id}/children/batch_delete")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.DeleteDocxV1DocumentsByDocumentIdBlocksByBlockIdChildrenBatchDeleteResponseDto>> DeleteDocxV1DocumentsByDocumentIdBlocksByBlockIdChildrenBatchDeleteAsync(
        [PathQuery] string document_id,
        [PathQuery] string block_id,
        [JsonContent] Ccm.DeleteDocxV1DocumentsByDocumentIdBlocksByBlockIdChildrenBatchDeleteBodyDto dto,
        [PathQuery] int? document_revision_id = -1,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【云文档】获取文档所有块</para>
    /// <para>接口ID：7068199542315352092</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/docs/docx-v1/document/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取文档所有块的富文本内容并分页返回。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docx:document</item>
    /// <item>docx:document:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="document_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文档的唯一标识。对应新版文档 Token，[点击了解如何获取云文档 Token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)。</para>
    /// <para>示例值：doxcnePuYufKa49ISjhD8Ih0ikh</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：500</para>
    /// <para>默认值：500</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：aw7DoMKBFMOGwqHCrcO8w6jCmMOvw6ILeADCvsKNw57Di8O5XGV3LG4_w5HCqhFxSnDCrCzCn0BgZcOYUg85EMOYcEAcwqYOw4ojw5QFwofCu8KoIMO3K8Ktw4IuNMOBBHNYw4bCgCV3U1zDu8K-J8KSR8Kgw7Y0fsKZdsKvW3d9w53DnkHDrcO5bDkYwrvDisOEPcOtVFJ-I03CnsOILMOoAmLDknd6dsKqG1bClAjDuS3CvcOTwo7Dg8OrwovDsRdqIcKxw5HDohTDtXN9w5rCkWo</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="document_revision_id">
    /// <para>必填：否</para>
    /// <para>查询的文档版本，-1表示文档最新版本。若此时查询的版本为文档最新版本，则需要持有文档的阅读权限；若此时查询的版本为文档的历史版本，则需要持有文档的编辑权限。</para>
    /// <para>示例值：-1</para>
    /// <para>默认值：-1</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的用户ID的类型</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/docx/v1/documents/{document_id}/blocks")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDocxV1DocumentsByDocumentIdBlocksResponseDto>> GetDocxV1DocumentsByDocumentIdBlocksAsync(
        [PathQuery] string document_id,
        [PathQuery] int? page_size = 500,
        [PathQuery] string? page_token = null,
        [PathQuery] int? document_revision_id = -1,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】获取块的内容</para>
    /// <para>接口ID：7068199542315368476</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/docs/docx-v1/document-block/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取指定块的富文本内容。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docx:document</item>
    /// <item>docx:document:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="document_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文档唯一标识。对应新版文档 Token，[点击了解如何获取云文档 Token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)。</para>
    /// <para>示例值：doxcnePuYufKa49ISjhD8Ih0ikh</para>
    /// </param>
    /// <param name="block_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>Block 的唯一标识</para>
    /// <para>示例值：doxcnO6UW6wAw2qIcYf4hZpFIth</para>
    /// </param>
    /// <param name="document_revision_id">
    /// <para>必填：否</para>
    /// <para>查询的文档版本，-1 表示文档最新版本。若此时查询的版本为文档最新版本，则需要持有文档的阅读权限；若此时查询的版本为文档的历史版本，则需要持有文档的编辑权限。</para>
    /// <para>示例值：-1</para>
    /// <para>默认值：-1</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的用户ID的类型</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/docx/v1/documents/{document_id}/blocks/{block_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDocxV1DocumentsByDocumentIdBlocksByBlockIdResponseDto>> GetDocxV1DocumentsByDocumentIdBlocksByBlockIdAsync(
        [PathQuery] string document_id,
        [PathQuery] string block_id,
        [PathQuery] int? document_revision_id = -1,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【通讯录】部门群转为普通群</para>
    /// <para>接口ID：7069758645957836801</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/department/unbind_department_chat</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口将指定部门的部门群转为普通群。</para>
    /// <para>## 注意事项</para>
    /// <para>应用的通讯录权限范围内需要包含当前操作的部门。了解权限范围，参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact</item>
    /// </list></para>
    /// </summary>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。</para>
    /// <para>**默认值**：open_department_id</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 `od-`，在租户内全局唯一。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/contact/v3/departments/unbind_department_chat")]
    System.Threading.Tasks.Task<FeishuResponse> PostContactV3DepartmentsUnbindDepartmentChatAsync(
        [JsonContent] Contact.PostContactV3DepartmentsUnbindDepartmentChatBodyDto dto,
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【视频会议】创建签到板部署码</para>
    /// <para>接口ID：7070073879629430788</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/meeting_room-v1/room_config/set_checkboard_access_code</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建一个范围内的签到板部署码</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/vc/v1/room_configs/set_checkboard_access_code")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.PostVcV1RoomConfigsSetCheckboardAccessCodeResponseDto>> PostVcV1RoomConfigsSetCheckboardAccessCodeAsync(
        [JsonContent] Vc.PostVcV1RoomConfigsSetCheckboardAccessCodeBodyDto dto);

    /// <summary>
    /// <para>【视频会议】创建会议室部署码</para>
    /// <para>接口ID：7070073879629447172</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/historic-version/meeting_room-v1/room_config/set_room_access_code</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建一个范围内的会议室部署码</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/vc/v1/room_configs/set_room_access_code")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.PostVcV1RoomConfigsSetRoomAccessCodeResponseDto>> PostVcV1RoomConfigsSetRoomAccessCodeAsync(
        [JsonContent] Vc.PostVcV1RoomConfigsSetRoomAccessCodeBodyDto dto);

    /// <summary>
    /// <para>【飞书人事】创建雇佣信息</para>
    /// <para>接口ID：7072577767343718401</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/employee/employment/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建人员的雇佣信息，需要先[创建个人信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/person/create)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:employment:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/employments")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1EmploymentsResponseDto>> PostCorehrV1EmploymentsAsync(
        [JsonContent] FeishuPeople.PostCorehrV1EmploymentsBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事】删除雇佣信息</para>
    /// <para>接口ID：7072588548981325826</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/employee/employment/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除人员的雇佣信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:employment:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="employment_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要删除的雇佣信息对应的ID</para>
    /// <para>示例值：65536878783232</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    [HttpDelete("/open-apis/corehr/v1/employments/{employment_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCorehrV1EmploymentsByEmploymentIdAsync(
        [PathQuery] string employment_id,
        [PathQuery] string? user_id_type = "people_corehr_id");

    /// <summary>
    /// <para>【飞书人事】更新职务</para>
    /// <para>接口ID：7072588575270944796</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/job-management/job/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>你可以通过该接口更新一个职务信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:job:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>职务ID。ID获取方式：</para>
    /// <para>- 调用[【创建职务】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job/create)[【批量查询职务】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/job/list)等可以返回职务ID</para>
    /// <para>- 也可以通过[【事件】创建职务](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job/events/created) [【事件】更新职务](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job/events/updated) 获取ID</para>
    /// <para>示例值：1616161616</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/corehr/v1/jobs/{job_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PatchCorehrV1JobsByJobIdResponseDto>> PatchCorehrV1JobsByJobIdAsync(
        [PathQuery] string job_id,
        [JsonContent] FeishuPeople.PatchCorehrV1JobsByJobIdBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事】更新雇佣信息</para>
    /// <para>接口ID：7072588598729981980</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/employee/employment/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新人事工作信息下的字段，如：工号、工作邮箱、雇佣类型、自定义字段等</para>
    /// <para>暂不支持更新时间轴分组对象</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:employment:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="employment_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>雇佣 ID</para>
    /// <para>- 类型应与 user_id_type 一致</para>
    /// <para>示例值：1616161616</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：people_corehr_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/corehr/v1/employments/{employment_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PatchCorehrV1EmploymentsByEmploymentIdResponseDto>> PatchCorehrV1EmploymentsByEmploymentIdAsync(
        [PathQuery] string employment_id,
        [JsonContent] FeishuPeople.PatchCorehrV1EmploymentsByEmploymentIdBodyDto dto,
        [PathQuery] string? client_token = null,
        [PathQuery] string? user_id_type = "people_corehr_id",
        [PathQuery] string? department_id_type = "people_corehr_department_id");

    /// <summary>
    /// <para>【飞书人事】更新任职信息</para>
    /// <para>接口ID：7072642400195723292</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/employee/job_data/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>默认为新增一条任职记录，包括职务、职级、序列、部门等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:job_data:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:employment.pathway:read</item>
    /// <item>corehr:employment.pathway:write</item>
    /// <item>corehr:job_data.compensation_type:read</item>
    /// <item>corehr:job_data.service_company:read</item>
    /// <item>corehr:job_data.work_shift:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_data_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任职信息ID</para>
    /// <para>示例值：151515</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>操作的唯一标识，用于幂等的进行更新操作，格式为标准的 UUIDV4。此值为空表示将发起一次新的请求，此值非空表示幂等的进行更新操作。</para>
    /// <para>示例值："fe599b60-450f-46ff-b2ef-9f6675625b97"</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：【飞书】用来在具体某个应用中标识一个部门，同一个 department_id 在不同应用中的 open_department_id 相同。</item>
    /// <item>department_id：【飞书】用来标识租户内一个唯一的部门。</item>
    /// <item>people_corehr_department_id：【飞书人事】用来标识「飞书人事」中的部门。</item>
    /// </list>
    /// <para>默认值：people_corehr_department_id</para>
    /// </param>
    /// <param name="strict_verify">
    /// <para>必填：否</para>
    /// <para>是否强校验。值为 true 时，会对入参进行业务校验，并产生异动记录、发送异动事件。</para>
    /// <para>- 默认值：true</para>
    /// <para>- 仅在新增任职版本时生效，即当 version_id 有值时该字段不生效</para>
    /// <para>- 使用此功能时，试用期相关字段不支持</para>
    /// <para>- 当响应返回的任职数据无变化时，请检查人事系统-异动管理</para>
    /// <para>示例值：false</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/corehr/v1/job_datas/{job_data_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PatchCorehrV1JobDatasByJobDataIdResponseDto>> PatchCorehrV1JobDatasByJobDataIdAsync(
        [PathQuery] string job_data_id,
        [JsonContent] FeishuPeople.PatchCorehrV1JobDatasByJobDataIdBodyDto dto,
        [PathQuery] string? client_token = null,
        [PathQuery] string? user_id_type = "people_corehr_id",
        [PathQuery] string? department_id_type = "people_corehr_department_id",
        [PathQuery] string? strict_verify = null);

    /// <summary>
    /// <para>【飞书人事】删除国家证件类型</para>
    /// <para>接口ID：7072646256338894849</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/national_id_type/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除国家证件类型，已删除的数据将无法通过查询接口获取。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.preset_data:write</item>
    /// <item>corehr:corehr</item>
    /// </list></para>
    /// </summary>
    /// <param name="national_id_type_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要删除的国家证件类型 ID</para>
    /// <para>示例值：27837817381</para>
    /// </param>
    [HttpDelete("/open-apis/corehr/v1/national_id_types/{national_id_type_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCorehrV1NationalIdTypesByNationalIdTypeIdAsync(
        [PathQuery] string national_id_type_id);

    /// <summary>
    /// <para>【飞书人事】创建国家证件类型</para>
    /// <para>接口ID：7072646286193786908</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/national_id_type/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建国家证件类型。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.preset_data:write</item>
    /// <item>corehr:corehr</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/national_id_types")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1NationalIdTypesResponseDto>> PostCorehrV1NationalIdTypesAsync(
        [JsonContent] FeishuPeople.PostCorehrV1NationalIdTypesBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事】删除工时制度</para>
    /// <para>接口ID：7072646429181034498</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/working_hours_type/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除工时制度。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.preset_data:write</item>
    /// <item>corehr:corehr</item>
    /// </list></para>
    /// </summary>
    /// <param name="working_hours_type_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要删除的工时制度 ID</para>
    /// <para>- 可通过[批量查询工时制度](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/working_hours_type/list)获取</para>
    /// <para>示例值：325325254</para>
    /// </param>
    [HttpDelete("/open-apis/corehr/v1/working_hours_types/{working_hours_type_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCorehrV1WorkingHoursTypesByWorkingHoursTypeIdAsync(
        [PathQuery] string working_hours_type_id);

    /// <summary>
    /// <para>【飞书人事】创建地点</para>
    /// <para>接口ID：7072646479949316098</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/organization-management/location/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>在系统中第一次创建地点数据</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:locations:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>操作的唯一标识，用于幂等的进行更新操作，格式为标准的 UUIDV4。此值为空表示将发起一次新的请求，此值非空表示幂等的进行更新操作。</para>
    /// <para>示例值："fe599b60-450f-46ff-b2ef-9f6675625b97"</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/locations")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1LocationsResponseDto>> PostCorehrV1LocationsAsync(
        [JsonContent] FeishuPeople.PostCorehrV1LocationsBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事】更新序列</para>
    /// <para>接口ID：7072646533586927644</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/job-management/job_family/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>可以通过序列ID更新单个序列详情信息，例如序列名称、上级序列ID等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:job_family:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_family_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>序列ID。ID获取方式：</para>
    /// <para>- 调用[【新建序列】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_family/create)[【查询租户的序列信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_family/list)等接口可以返回序列ID</para>
    /// <para>示例值：1616161616</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/corehr/v1/job_families/{job_family_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PatchCorehrV1JobFamiliesByJobFamilyIdResponseDto>> PatchCorehrV1JobFamiliesByJobFamilyIdAsync(
        [PathQuery] string job_family_id,
        [JsonContent] FeishuPeople.PatchCorehrV1JobFamiliesByJobFamilyIdBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事】创建部门</para>
    /// <para>接口ID：7072646559953797122</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/organization-management/department/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>支持在单个接口中进行部门信息添加，包括部门基本信息、部门负责人、部门自定义字段信息等</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:department:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：people_corehr_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：【飞书】用来在具体某个应用中标识一个部门，同一个department_id 在不同应用中的 open_department_id 相同。</item>
    /// <item>department_id：【飞书】用来标识租户内一个唯一的部门。</item>
    /// <item>people_corehr_department_id：【飞书人事】用来标识「飞书人事」中的部门。</item>
    /// </list>
    /// <para>默认值：people_corehr_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/departments")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1DepartmentsResponseDto>> PostCorehrV1DepartmentsAsync(
        [JsonContent] FeishuPeople.PostCorehrV1DepartmentsBodyDto dto,
        [PathQuery] string? client_token = null,
        [PathQuery] string? user_id_type = "people_corehr_id",
        [PathQuery] string? department_id_type = "people_corehr_department_id");

    /// <summary>
    /// <para>【飞书人事】删除地点</para>
    /// <para>接口ID：7072646788637556737</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/organization-management/location/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除地点信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:locations:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="location_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要删除的地点 ID。ID获取方式：</para>
    /// <para>- 调用[【创建地点】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/create)[【批量分页查询地点】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/list)等接口可以返回地点ID</para>
    /// <para>示例值：4312443243</para>
    /// </param>
    [HttpDelete("/open-apis/corehr/v1/locations/{location_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCorehrV1LocationsByLocationIdAsync(
        [PathQuery] string location_id);

    /// <summary>
    /// <para>【飞书人事】更新工时制度</para>
    /// <para>接口ID：7072646859794726913</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/working_hours_type/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新工时制度。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.preset_data:write</item>
    /// <item>corehr:corehr</item>
    /// </list></para>
    /// </summary>
    /// <param name="working_hours_type_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工时制度ID</para>
    /// <para>- 可通过[批量查询工时制度](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/working_hours_type/list)获取</para>
    /// <para>示例值：1616161616</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/corehr/v1/working_hours_types/{working_hours_type_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PatchCorehrV1WorkingHoursTypesByWorkingHoursTypeIdResponseDto>> PatchCorehrV1WorkingHoursTypesByWorkingHoursTypeIdAsync(
        [PathQuery] string working_hours_type_id,
        [JsonContent] FeishuPeople.PatchCorehrV1WorkingHoursTypesByWorkingHoursTypeIdBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事】创建工时制度</para>
    /// <para>接口ID：7072647640912117762</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/working_hours_type/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建工时制度。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.preset_data:write</item>
    /// <item>corehr:corehr</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/working_hours_types")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1WorkingHoursTypesResponseDto>> PostCorehrV1WorkingHoursTypesAsync(
        [JsonContent] FeishuPeople.PostCorehrV1WorkingHoursTypesBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事】更新国家证件类型</para>
    /// <para>接口ID：7072648187001618433</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/national_id_type/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新国家证件类型。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.preset_data:write</item>
    /// <item>corehr:corehr</item>
    /// </list></para>
    /// </summary>
    /// <param name="national_id_type_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>证件类型ID</para>
    /// <para>示例值：1616161616</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/corehr/v1/national_id_types/{national_id_type_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PatchCorehrV1NationalIdTypesByNationalIdTypeIdResponseDto>> PatchCorehrV1NationalIdTypesByNationalIdTypeIdAsync(
        [PathQuery] string national_id_type_id,
        [JsonContent] FeishuPeople.PatchCorehrV1NationalIdTypesByNationalIdTypeIdBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【应用信息】更新应用反馈</para>
    /// <para>接口ID：7072687744306593794</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/application-v6/application-feedback/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新应用的反馈数据</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>application:application.feedback.feedback_info</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>目标应用 ID（本租户创建的所有应用）</para>
    /// <para>示例值：cli_9f115af860f7901b</para>
    /// </param>
    /// <param name="feedback_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用反馈记录id</para>
    /// <para>示例值：7057888018203574291</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="status">
    /// <para>必填：是</para>
    /// <para>反馈处理状态</para>
    /// <para>示例值：1</para>
    /// <list type="bullet">
    /// <item>0：反馈未处理</item>
    /// <item>1：反馈已处理</item>
    /// <item>2：反馈处理中</item>
    /// <item>3：反馈已关闭</item>
    /// </list>
    /// </param>
    /// <param name="operator_id">
    /// <para>必填：是</para>
    /// <para>反馈处理人员id，租户内用户的唯一标识， ID值与查询参数中的user_id_type 对应</para>
    /// <para>示例值：ou_9565b69967831233761cc2f11b4c089f</para>
    /// </param>
    [HttpPatch("/open-apis/application/v6/applications/{app_id}/feedbacks/{feedback_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PatchApplicationV6ApplicationsByAppIdFeedbacksByFeedbackIdAsync(
        [PathQuery] string app_id,
        [PathQuery] string feedback_id,
        [PathQuery] int status,
        [PathQuery] string operator_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【应用信息】获取应用反馈列表</para>
    /// <para>接口ID：7072687744306610178</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/application-v6/application-feedback/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询应用的反馈数据</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>application:application.feedback.feedback_info</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.email:readonly</item>
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>contact:user.phone:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>目标应用 ID（本租户创建的所有应用）</para>
    /// <para>示例值：cli_9f115af860f7901b</para>
    /// </param>
    /// <param name="from_date">
    /// <para>必填：否</para>
    /// <para>查询的起始日期，格式为yyyy-mm-dd。不填则默认为当前日期减去180天。</para>
    /// <para>示例值：2022-01-30</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="to_date">
    /// <para>必填：否</para>
    /// <para>查询的结束日期，格式为yyyy-mm-dd。不填默认为当前日期。</para>
    /// <para>只能查询 180 天内的数据。</para>
    /// <para>示例值：2022-01-30</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="feedback_type">
    /// <para>必填：否</para>
    /// <para>反馈类型，不填写则表示查询所有反馈类型。</para>
    /// <para>示例值：1</para>
    /// <list type="bullet">
    /// <item>1：故障反馈</item>
    /// <item>2：产品建议</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="status">
    /// <para>必填：否</para>
    /// <para>反馈处理状态，不填写则表示查询所有处理类型。</para>
    /// <para>示例值：0</para>
    /// <list type="bullet">
    /// <item>0：反馈未处理</item>
    /// <item>1：反馈已处理</item>
    /// <item>2：反馈处理中</item>
    /// <item>3：反馈已关闭</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值："7064688334618378259"</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>本次拉取反馈列表最大个数</para>
    /// <para>示例值：100</para>
    /// <para>默认值：100</para>
    /// </param>
    [HttpGet("/open-apis/application/v6/applications/{app_id}/feedbacks")]
    System.Threading.Tasks.Task<FeishuResponse<Application.GetApplicationV6ApplicationsByAppIdFeedbacksResponseDto>> GetApplicationV6ApplicationsByAppIdFeedbacksAsync(
        [PathQuery] string app_id,
        [PathQuery] string? from_date = null,
        [PathQuery] string? to_date = null,
        [PathQuery] int? feedback_type = null,
        [PathQuery] int? status = null,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 100);

    /// <summary>
    /// <para>【飞书人事】更新单个职级</para>
    /// <para>接口ID：7072714700206768130</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/job-management/job_level/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口可以通过职级ID更新单个职级信息，包括职级数值、名称等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:job_level:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_level_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>职级ID。ID获取方式：</para>
    /// <para>- 调用[【新建职级】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_level/create)[【查询租户的职级信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_level/list)等接口可以返回职级ID</para>
    /// <para>示例值：1616161616</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/corehr/v1/job_levels/{job_level_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PatchCorehrV1JobLevelsByJobLevelIdResponseDto>> PatchCorehrV1JobLevelsByJobLevelIdAsync(
        [PathQuery] string job_level_id,
        [JsonContent] FeishuPeople.PatchCorehrV1JobLevelsByJobLevelIdBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事】删除部门</para>
    /// <para>接口ID：7072723475538821122</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/organization-management/department/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>可以通过该接口通过部门ID删除一个部门记录</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:department:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="department_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要删除的部门 ID，可通过[【搜索部门信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/department/search)接口查询获得</para>
    /// <para>示例值：341143141</para>
    /// </param>
    [HttpDelete("/open-apis/corehr/v1/departments/{department_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCorehrV1DepartmentsByDepartmentIdAsync(
        [PathQuery] string department_id);

    /// <summary>
    /// <para>【飞书人事】删除公司</para>
    /// <para>接口ID：7072977288456126492</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/organization-management/company/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除公司</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// </list></para>
    /// </summary>
    /// <param name="company_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要删除的公司ID。ID获取方式：</para>
    /// <para>- 调用[【创建公司】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/create)[【批量查询公司】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/list)等接口可以返回部门ID</para>
    /// <para>示例值：341432424</para>
    /// </param>
    [HttpDelete("/open-apis/corehr/v1/companies/{company_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCorehrV1CompaniesByCompanyIdAsync(
        [PathQuery] string company_id);

    /// <summary>
    /// <para>【飞书人事】创建公司</para>
    /// <para>接口ID：7072977358001389570</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/organization-management/company/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>支持在单个接口中进行公司信息添加，包括公司基本信息、注册地址信息、工作地址信息等</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>操作的唯一标识，用于幂等的进行更新操作，根据client_token是否一致来判断是否为同一请求。此值为空表示将发起一次新的请求，此值非空表示幂等的进行更新操作。</para>
    /// <para>示例值："22ff85f7-5938-4579-9b57-d52cfeb05d52"</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/companies")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1CompaniesResponseDto>> PostCorehrV1CompaniesAsync(
        [JsonContent] FeishuPeople.PostCorehrV1CompaniesBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事】更新合同</para>
    /// <para>接口ID：7072977430599892994</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/contract/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过该接口可以更新员工合同相关信息，没有修改的参数会保留原值</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// </list></para>
    /// </summary>
    /// <param name="contract_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>合同ID，该ID可以通过[【批量查询合同】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/contract/list)接口获取</para>
    /// <para>示例值：7091849027838838316</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>自定义值，根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：227988d7-66da-4afb-9943-32e73d5cda8b</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/corehr/v1/contracts/{contract_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PatchCorehrV1ContractsByContractIdResponseDto>> PatchCorehrV1ContractsByContractIdAsync(
        [PathQuery] string contract_id,
        [JsonContent] FeishuPeople.PatchCorehrV1ContractsByContractIdBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事】更新待入职信息（不推荐）</para>
    /// <para>接口ID：7072977543561461762</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/pre_hire/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新待入职信息接口，本接口只是会更新待入职数据，不会校验数据规则，推荐使用新接口[【更新待入职信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/pre_hire/patch)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:pre_hire:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="pre_hire_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待入职ID</para>
    /// <para>示例值：1616161616</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/pre_hire/patch")]
    [HttpPatch("/open-apis/corehr/v1/pre_hires/{pre_hire_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PatchCorehrV1PreHiresByPreHireIdResponseDto>> PatchCorehrV1PreHiresByPreHireIdAsync(
        [PathQuery] string pre_hire_id,
        [JsonContent] FeishuPeople.PatchCorehrV1PreHiresByPreHireIdBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事】批量查询国家/地区信息</para>
    /// <para>接口ID：7072977636028874753</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/location_data/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量查询国家/地区信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.basic_data:read</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：1231231987</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/country_regions")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1CountryRegionsResponseDto>> GetCorehrV1CountryRegionsAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int page_size = 10);

    /// <summary>
    /// <para>【飞书人事】批量查询城市/区域信息</para>
    /// <para>接口ID：7072977727422562306</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/location_data/list-3</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量查询城市/区域信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.basic_data:read</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：1231231987</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="subdivision_id">
    /// <para>必填：否</para>
    /// <para>省份/行政区id，填写后只查询该省份/行政区下的城市/区域</para>
    /// <para>示例值：100</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/subregions")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1SubregionsResponseDto>> GetCorehrV1SubregionsAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int page_size = 10,
        [PathQuery] string? subdivision_id = null);

    /// <summary>
    /// <para>【飞书人事】批量查询省份/行政区信息</para>
    /// <para>接口ID：7072977831467139073</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/location_data/list-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量查询省份/行政区信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.basic_data:read</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：1231231987</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="country_region_id">
    /// <para>必填：否</para>
    /// <para>国家/地区id，填写后只查询该国家/地区下的省份/行政区</para>
    /// <para>示例值：100</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/subdivisions")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1SubdivisionsResponseDto>> GetCorehrV1SubdivisionsAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int page_size = 10,
        [PathQuery] string? country_region_id = null);

    /// <summary>
    /// <para>【飞书人事】查询单个货币信息</para>
    /// <para>接口ID：7072978068286357532</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/currency/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询单个货币信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.basic_data:read</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="currency_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>货币 ID</para>
    /// <para>示例值：67489937334909845</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/currencies/{currency_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1CurrenciesByCurrencyIdResponseDto>> GetCorehrV1CurrenciesByCurrencyIdAsync(
        [PathQuery] string currency_id);

    /// <summary>
    /// <para>【飞书人事】查询单条国家/地区信息</para>
    /// <para>接口ID：7072978180814618652</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/location_data/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询单条国家/地区信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.basic_data:read</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="country_region_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>国家/地区 ID</para>
    /// <para>示例值：67489937334909845</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/country_regions/{country_region_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1CountryRegionsByCountryRegionIdResponseDto>> GetCorehrV1CountryRegionsByCountryRegionIdAsync(
        [PathQuery] string country_region_id);

    /// <summary>
    /// <para>【飞书人事】批量查询货币信息</para>
    /// <para>接口ID：7072978200179294210</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/currency/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量查询货币信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.basic_data:read</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：1231231987</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/currencies")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1CurrenciesResponseDto>> GetCorehrV1CurrenciesAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int page_size = 10);

    /// <summary>
    /// <para>【飞书人事】查询单条省份/行政区信息</para>
    /// <para>接口ID：7072978219502321665</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/location_data/get-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询单条省份/行政区信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.basic_data:read</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="subdivision_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>省份/行政区 ID</para>
    /// <para>示例值：67489937334909845</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/subdivisions/{subdivision_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1SubdivisionsBySubdivisionIdResponseDto>> GetCorehrV1SubdivisionsBySubdivisionIdAsync(
        [PathQuery] string subdivision_id);

    /// <summary>
    /// <para>【飞书人事】查询单条城市/区域信息</para>
    /// <para>接口ID：7072978219503550465</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/location_data/get-3</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询单条城市/区域信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.basic_data:read</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="subregion_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>城市/区域 ID</para>
    /// <para>示例值：67489937334909845</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/subregions/{subregion_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1SubregionsBySubregionIdResponseDto>> GetCorehrV1SubregionsBySubregionIdAsync(
        [PathQuery] string subregion_id);

    /// <summary>
    /// <para>【多维表格】更新多维表格元数据</para>
    /// <para>接口ID：7073673019918811164</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app/update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新多维表格元数据，包括多维表格的名称、是否开启高级权限。</para>
    /// <para>## 注意事项</para>
    /// <para>- 在线文档和电子表格中嵌入的多维表格、知识库中的多维表格不支持开启高级权限。</para>
    /// <para>- 此接口非原子操作，先修改多维表格名称，后开关高级权限，可能存在部分成功的情况。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:app:update</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>目标多维表格的 App token。该接口仅支持存储在云空间文件夹中的多维表格，即 URL 以 **feishu.cn/base** 开头的多维表格形态。该类多维表格的 app_token 为 URL 下图高亮部分：</para>
    /// <para>![](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_sTn7sVvhOB.png?height=766&amp;lazyload=true&amp;maxWidth=700&amp;width=3004)</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/bitable/v1/apps/{app_token}")]
    System.Threading.Tasks.Task<FeishuResponse<Base.PutBitableV1AppsByAppTokenResponseDto>> PutBitableV1AppsByAppTokenAsync(
        [PathQuery] string app_token,
        [JsonContent] Base.PutBitableV1AppsByAppTokenBodyDto dto);

    /// <summary>
    /// <para>【飞书人事】上传文件</para>
    /// <para>接口ID：7076346346946543644</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/employee/person/upload</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>上传文件。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:file:write</item>
    /// <item>corehr:person:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    /// <param name="file_content">
    /// <para>必填：是</para>
    /// <para>文件二进制内容，大小不超过50M</para>
    /// </param>
    [HttpPost("/open-apis/corehr/v1/persons/upload")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1PersonsUploadResponseDto>> PostCorehrV1PersonsUploadAsync(
        [FormDataContent] FeishuPeople.PostCorehrV1PersonsUploadBodyDto dto,
        [FormDataContent] FormDataFile file_content);

    /// <summary>
    /// <para>【OKR】查询复盘信息</para>
    /// <para>接口ID：7078206296554274820</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/okr-v1/review/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据周期和用户查询复盘信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>okr:okr</item>
    /// <item>okr:okr:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="user_ids">
    /// <para>必填：是</para>
    /// <para>目标用户id列表，最多5个</para>
    /// <para>示例值：ou_e6139117c300506837def50545420c6a</para>
    /// </param>
    /// <param name="period_ids">
    /// <para>必填：是</para>
    /// <para>period_id列表，最多5个</para>
    /// <para>示例值：7067724095781142548</para>
    /// </param>
    [HttpGet("/open-apis/okr/v1/reviews/query")]
    System.Threading.Tasks.Task<FeishuResponse<Okr.GetOkrV1ReviewsQueryResponseDto>> GetOkrV1ReviewsQueryAsync(
        [PathQuery] string[] user_ids,
        [PathQuery] string[] period_ids,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】获取文档纯文本内容</para>
    /// <para>接口ID：7079983676051013634</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/docs/docx-v1/document/raw_content</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取文档的纯文本内容。</para>
    /// <para>## 前提条件</para>
    /// <para>调用此接口前，请确保当前调用身份（tenant_access_token 或 user_access_token）已有云文档的阅读、编辑等文档权限，否则接口将返回 HTTP 403 或 400 状态码。了解更多，参考[如何为应用或用户开通文档权限](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#16c6475a)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docx:document</item>
    /// <item>docx:document:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="document_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文档的唯一标识。点击[这里](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-overview)了解如何获取文档的 `document_id`</para>
    /// <para>示例值：doxbcmEtbFrbbq10nPNu8gabcef</para>
    /// </param>
    /// <param name="lang">
    /// <para>必填：否</para>
    /// <para>指定返回的 MentionUser 即 @用户 的语言</para>
    /// <para>示例值：0</para>
    /// <list type="bullet">
    /// <item>0：该用户的默认名称。如：@张敏</item>
    /// <item>1：该用户的英文名称。如：@Min Zhang</item>
    /// <item>2：暂不支持该枚举，使用时返回该用户的默认名称</item>
    /// </list>
    /// <para>默认值：0</para>
    /// </param>
    [HttpGet("/open-apis/docx/v1/documents/{document_id}/raw_content")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDocxV1DocumentsByDocumentIdRawContentResponseDto>> GetDocxV1DocumentsByDocumentIdRawContentAsync(
        [PathQuery] string document_id,
        [PathQuery] int? lang = 0);

    /// <summary>
    /// <para>【云文档】移动文件或文件夹</para>
    /// <para>接口ID：7080903916725993474</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/file/move</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>将文件或者文件夹移动到用户云空间的其他位置。</para>
    /// <para>## 使用限制</para>
    /// <para>该接口不支持并发调用，且调用频率上限为 5 QPS 且 10000次/天。否则会返回 1061045 错误码，可通过稍后重试解决。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>space:document:move</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要移动的文件或文件夹 token。</para>
    /// <para>了解如何获取文件 token，参考[文件概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/file-overview)。</para>
    /// <para>了解如何获取文件夹 token，参考[文件夹概述](https://open.feishu.cn/document/ukTMukTMukTM/ugTNzUjL4UzM14CO1MTN/folder-overview)。</para>
    /// <para>示例值：boxcnrHpsg1QDqXAAAyachabcef</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/drive/v1/files/{file_token}/move")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostDriveV1FilesByFileTokenMoveResponseDto>> PostDriveV1FilesByFileTokenMoveAsync(
        [PathQuery] string file_token,
        [JsonContent] Ccm.PostDriveV1FilesByFileTokenMoveBodyDto dto);

    /// <summary>
    /// <para>【管理后台】重置用户的企业邮箱密码</para>
    /// <para>接口ID：7081092146976161796</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/admin-v1/password/reset</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>重置用户的企业邮箱密码，仅当用户的邮箱和企业邮箱(别名)一致时生效，可用于处理飞书企业邮箱登录死锁的问题。</para>
    /// <para>邮箱死锁：当用户的登录凭证与飞书企业邮箱一致时，目前飞书登录流程要求用户输入验证码，由于飞书邮箱无单独的帐号体系，则未登录时无法收取邮箱验证码，即陷入死锁。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:ent_email_password</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：是</para>
    /// <para>用户 ID 类型</para>
    /// <para>**示例值**："open_id"</para>
    /// <para>**可选值有**：</para>
    /// <para>open_id:标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid),union_id:标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id),user_id:标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</para>
    /// <para>**默认值**：`open_id`</para>
    /// <para>**当值为 `user_id`，字段权限要求**：</para>
    /// <para>- contact:user.employee_id:readonly : 获取用户 user ID</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](/ssl</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](/ssl</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](/ssl</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/admin/v1/password/reset")]
    System.Threading.Tasks.Task<FeishuResponse> PostAdminV1PasswordResetAsync(
        [JsonContent] Admin.Spec.PostAdminV1PasswordResetBodyDto dto,
        [PathQuery] string user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】获取 Offer 申请表信息</para>
    /// <para>接口ID：7081627245290651652</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/offer-settings/offer_application_form/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据 Offer 申请表 ID 获取 Offer 申请表信息，可获取到的信息包括申请表名称、申请表模块、申请表字段等。</para>
    /// <para>## Offer 申请表产品示意图</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:offer_schema:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="offer_application_form_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>Offer 申请表 ID，可通过[获取 Offer 申请表列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer_application_form/list)接口获取</para>
    /// <para>示例值：7680792645903286275</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/offer_application_forms/{offer_application_form_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1OfferApplicationFormsByOfferApplicationFormIdResponseDto>> GetHireV1OfferApplicationFormsByOfferApplicationFormIdAsync(
        [PathQuery] string offer_application_form_id);

    /// <summary>
    /// <para>【事件订阅】获取事件出口 IP</para>
    /// <para>接口ID：7083805115594227714</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/event-subscription-guide/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>飞书开放平台向应用配置的回调地址推送事件时，是通过特定的 IP 发送出去的，应用可以通过本接口获取所有相关的 IP 地址。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>event:ip_list</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，默认10，取值范围 10-50</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：xxx</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/event/v1/outbound_ip")]
    System.Threading.Tasks.Task<FeishuResponse<Event.GetEventV1OutboundIpResponseDto>> GetEventV1OutboundIpAsync(
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【招聘】更新 Offer 信息</para>
    /// <para>接口ID：7085174522588348418</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/offer/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新 Offer 信息，包含基本信息、薪资信息、自定义信息。</para>
    /// <para>## 注意事项</para>
    /// <para>- 更新 Offer 时，除了本文中标注为必填的参数外，其余参数是否必填请参考[获取 Offer 申请表信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer_application_form/get)的参数定义</para>
    /// <para>- 对系统中 Offer 进行更新时，若本次更新 Offer 字段中含有「修改需审批」的字段，更新后原 Offer 的审批会自动撤回，需要重新发起审批；修改需审批字段详情可查看：[获取 Offer 申请表信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer_application_form/get)接口中`need_approve`字段</para>
    /// <para>- 当 Offer 状态为以下 2 种时， 不可更新 Offer：`Offer 已发送`、`Offer 被候选人接受`，Offer 状态详情可查看：[获取 Offer 详情](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer/get)</para>
    /// <para>- 该接口会对原 Offer 内容进行全量覆盖更新，若非必填参数未填写则会清空原有内容，必填参数未填写会拦截报错。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:offer</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="offer_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>Offer ID，可通过[获取 Offer 列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer/list)接口获取</para>
    /// <para>示例值：7016605170635213100</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>指定查询结果中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门资源介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)。</para>
    /// <para>示例值：department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：由系统自动生成的部门 ID， ID前缀固定为 `od-`，在租户内全局唯一。</item>
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内，department_id 具有唯一性。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值：job_level_id</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，通过[获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_level_id</para>
    /// </param>
    /// <param name="job_family_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「序列 ID」的类型</para>
    /// <para>示例值：job_family_id</para>
    /// <list type="bullet">
    /// <item>people_admin_job_category_id：「人力系统管理后台」适用的序列 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_family_id：「飞书管理后台」适用的序列 ID，通过[获取租户序列列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_family/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_category_id</para>
    /// </param>
    /// <param name="employee_type_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「人员类型 ID」的类型</para>
    /// <para>示例值：employee_type_enum_id</para>
    /// <list type="bullet">
    /// <item>people_admin_employee_type_id：「人力系统管理后台」适用的人员类型 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>employee_type_enum_id：「飞书管理后台」适用的人员类型 ID，通过[查询人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_employee_type_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/hire/v1/offers/{offer_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PutHireV1OffersByOfferIdResponseDto>> PutHireV1OffersByOfferIdAsync(
        [PathQuery] string offer_id,
        [JsonContent] Hire.PutHireV1OffersByOfferIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? job_level_id_type = "people_admin_job_level_id",
        [PathQuery] string? job_family_id_type = "people_admin_job_category_id",
        [PathQuery] string? employee_type_id_type = "people_admin_employee_type_id");

    /// <summary>
    /// <para>【招聘】创建 Offer</para>
    /// <para>接口ID：7085174536488697857</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/offer/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>传入 Offer 基本信息，创建 Offer。</para>
    /// <para>## 注意事项</para>
    /// <para>- 创建 Offer 时，需传入本文档中标注为必传的参数，其余参数是否必传参考[获取 Offer 申请表信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer_application_form/get)的参数定义或在「飞书招聘」-「设置」-「Offer 设置」-「Offer 申请表设置」中进行查看。</para>
    /// <para>- 若客户购买了飞书人事，且「飞书招聘」-「设置」-「Offer 设置」-「Offer 审批设置」中「Offer 薪酬信息来源」配置为“飞书人事「企业版」基础薪酬设置”，该接口将无法创建薪酬信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:offer</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型。</para>
    /// <para>示例值："department_id"</para>
    /// <list type="bullet">
    /// <item>open_department_id：【飞书】用来在具体某个应用中标识一个部门，同一个department_id 在不同应用中的 open_department_id 相同</item>
    /// <item>department_id：【飞书】用来标识租户内一个唯一的部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值："department_id"</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，通过[获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_level_id</para>
    /// </param>
    /// <param name="job_family_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「序列 ID」的类型</para>
    /// <para>示例值："people_admin_job_category_id"</para>
    /// <list type="bullet">
    /// <item>people_admin_job_category_id：「人力系统管理后台」适用的序列 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_family_id：「飞书管理后台」适用的序列 ID，通过[获取租户序列列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_family/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_category_id</para>
    /// </param>
    /// <param name="employee_type_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「人员类型 ID」的类型</para>
    /// <para>示例值："people_admin_employee_type_id"</para>
    /// <list type="bullet">
    /// <item>people_admin_employee_type_id：「人力系统管理后台」适用的人员类型 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>employee_type_enum_id：「飞书管理后台」适用的人员类型 ID，通过[查询人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_employee_type_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/offers")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1OffersResponseDto>> PostHireV1OffersAsync(
        [JsonContent] Hire.PostHireV1OffersBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? job_level_id_type = "people_admin_job_level_id",
        [PathQuery] string? job_family_id_type = "people_admin_job_category_id",
        [PathQuery] string? employee_type_id_type = "people_admin_employee_type_id");

    /// <summary>
    /// <para>【词典】创建免审词条</para>
    /// <para>接口ID：7085379347152044034</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/baike-v1/entity/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>通过此接口创建的词条，无需经过词典管理员审核，直接写入词库。因此，调用此接口时，应当慎重操作。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity:exempt_review</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/lingo-v1/entity/create")]
    [HttpPost("/open-apis/baike/v1/entities")]
    System.Threading.Tasks.Task<FeishuResponse<Baike.PostBaikeV1EntitiesResponseDto>> PostBaikeV1EntitiesAsync(
        [JsonContent] Baike.PostBaikeV1EntitiesBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【词典】更新免审词条</para>
    /// <para>接口ID：7085379347152060418</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/baike-v1/entity/update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>通过此接口更新已有的词条，无需经过词典管理员审核，直接写入词库。</para>
    /// <para>因此，调用该接口时应当慎重操作。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity:exempt_review</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="entity_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>实体词 ID</para>
    /// <para>示例值：enterprise_40217521</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/lingo-v1/entity/update")]
    [HttpPut("/open-apis/baike/v1/entities/{entity_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Baike.PutBaikeV1EntitiesByEntityIdResponseDto>> PutBaikeV1EntitiesByEntityIdAsync(
        [PathQuery] string entity_id,
        [JsonContent] Baike.PutBaikeV1EntitiesByEntityIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【词典】获取词典分类</para>
    /// <para>接口ID：7085379347152076802</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/baike-v1/classification/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取飞书词典当前分类。</para>
    /// <para>飞书词典目前为二级分类体系，每个词条可添加多个二级分类，但选择的二级分类必须从属于不同的一级分类。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity</item>
    /// <item>baike:entity:exempt_review</item>
    /// <item>baike:entity:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：20</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：408ecac018b2e3518db37275e812****bb8ad3e755fc886f322ac6c430ba</para>
    /// <para>默认值：null</para>
    /// </param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/lingo-v1/classification/list")]
    [HttpGet("/open-apis/baike/v1/classifications")]
    System.Threading.Tasks.Task<FeishuResponse<Baike.GetBaikeV1ClassificationsResponseDto>> GetBaikeV1ClassificationsAsync(
        [PathQuery] int? page_size = 20,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【飞书人事】获取异动原因列表</para>
    /// <para>接口ID：7086375306023895041</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/job_change/query-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取异动原因列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.preset_data:read</item>
    /// <item>corehr:common_data.preset_data:write</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// <item>corehr:transfer_reason:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="active">
    /// <para>必填：否</para>
    /// <para>异动原因状态</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="transfer_reason_unique_identifier">
    /// <para>必填：否</para>
    /// <para>异动原因唯一标识，多条时最多数量为10</para>
    /// <para>示例值：voluntary_transfer</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/transfer_reasons/query")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1TransferReasonsQueryResponseDto>> GetCorehrV1TransferReasonsQueryAsync(
        [PathQuery] bool? active = null,
        [PathQuery] string[]? transfer_reason_unique_identifier = null);

    /// <summary>
    /// <para>【飞书人事】获取异动类型列表</para>
    /// <para>接口ID：7086375306023911425</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/job_change/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取异动类型列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.preset_data:read</item>
    /// <item>corehr:common_data.preset_data:write</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// <item>corehr:transfer_type:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="active">
    /// <para>必填：否</para>
    /// <para>异动类型状态</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="transfer_type_unique_identifier">
    /// <para>必填：否</para>
    /// <para>异动类型唯一标识，多条时最多数量为10</para>
    /// <para>示例值：job_status_change</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/transfer_types/query")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1TransferTypesQueryResponseDto>> GetCorehrV1TransferTypesQueryAsync(
        [PathQuery] bool? active = null,
        [PathQuery] string[]? transfer_type_unique_identifier = null);

    /// <summary>
    /// <para>【云文档】新建文件夹</para>
    /// <para>接口ID：7086652480830914563</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/folder/create_folder</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于在用户云空间指定文件夹中创建一个空文件夹。</para>
    /// <para>## 使用限制</para>
    /// <para>- 该接口不支持并发创建，且调用频率上限为 5QPS 以及 10000次/天。否则会返回 1061045 错误码，可通过稍后重试解决。</para>
    /// <para>- 云空间中根目录或文件夹的单层节点上限为 1500 个。超过此限制时，接口将返回 1062507 错误码。可通过新建节点到其它节点中解决。</para>
    /// <para>- 云空间中所有层级的节点总和的上限为 40 万个。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>space:folder:create</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/drive/v1/files/create_folder")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostDriveV1FilesCreateFolderResponseDto>> PostDriveV1FilesCreateFolderAsync(
        [JsonContent] Ccm.PostDriveV1FilesCreateFolderBodyDto dto);

    /// <summary>
    /// <para>【云文档】复制文件</para>
    /// <para>接口ID：7087776630140157955</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/file/copy</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于将用户云空间中的文件复制至其它文件夹下。不支持复制文件夹。该接口为异步接口。</para>
    /// <para>## 使用限制</para>
    /// <para>- 云空间中根目录或文件夹的单层节点上限为 1500 个。超过此限制时，接口将返回 1062507 错误码。可通过将文件复制到不同文件夹中解决。</para>
    /// <para>- 云空间中所有层级的节点总和的上限为 40 万个。</para>
    /// <para>- 该接口不支持并发调用，且调用频率上限为 5QPS 且 10000次/天。否则会返回 1061045 错误码，可通过稍后重试解决。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:document:copy</item>
    /// <item>drive:drive</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>被复制的源文件的 token。了解如何获取文件 token，参考[文件概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/file-overview)。</para>
    /// <para>示例值：doccngpahSdXrFPIBD4XdIabcef</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/drive/v1/files/{file_token}/copy")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostDriveV1FilesByFileTokenCopyResponseDto>> PostDriveV1FilesByFileTokenCopyAsync(
        [PathQuery] string file_token,
        [JsonContent] Ccm.PostDriveV1FilesByFileTokenCopyBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事】批量获取角色列表</para>
    /// <para>接口ID：7088513302561128449</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/authorization/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>用于查询飞书人事中的角色列表（对应[飞书人事管理后台](https://people.feishu.cn/people/) - 设置 - 权限设置 - 角色设置中的角色列表），列表内包含角色 ID、名称、状态以及描述等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// <item>corehr:security_group:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：10</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/security_groups")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1SecurityGroupsResponseDto>> GetCorehrV1SecurityGroupsAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int page_size = 10);

    /// <summary>
    /// <para>【飞书人事】发起员工异动(不推荐)</para>
    /// <para>接口ID：7088940762189545473</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/job_change/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于发起员工异动（变更员工雇佣信息），若发起成功，会生成一条员工的异动数据，同时产生相应的事件：[异动状态变更事件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_change/events/updated)</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:job_change:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:job_change.employment_custom_field:read</item>
    /// <item>corehr:job_data.compensation_type:read</item>
    /// <item>corehr:job_data.service_company:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// <item>people_corehr_id：以飞书人事的ID来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：people_corehr_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：people_corehr_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/job_changes")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1JobChangesResponseDto>> PostCorehrV1JobChangesAsync(
        [JsonContent] FeishuPeople.PostCorehrV1JobChangesBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "people_corehr_department_id");

    /// <summary>
    /// <para>【云文档】创建导出任务</para>
    /// <para>接口ID：7089034521211191298</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/export_task/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于创建导出文件的任务，并返回导出任务 ID。导出文件指将飞书文档、电子表格、多维表格导出为本地文件，包括 Word、Excel、PDF、CSV 格式。该接口为异步接口，需要继续调用[查询导出任务结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/get)接口获取导出结果。了解完整的导出步骤，参考[导出云文档概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/export-user-guide)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:document:export</item>
    /// <item>drive:export:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/drive/v1/export_tasks")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostDriveV1ExportTasksResponseDto>> PostDriveV1ExportTasksAsync(
        [JsonContent] Ccm.PostDriveV1ExportTasksBodyDto dto);

    /// <summary>
    /// <para>【云文档】查询导出任务结果</para>
    /// <para>接口ID：7089034521211207682</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/export_task/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据[创建导出任务](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/create)返回的导出任务 ID（ticket）轮询导出任务结果，并返回导出文件的 token。你可使用该 token 继续调用[下载导出文件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/download)接口将导出的产物下载到本地。了解完整的导出文件步骤，参考[导出飞书云文档概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/export-user-guide)。</para>
    /// <para>## 注意事项</para>
    /// <para>调用该接口的用户或应用需与调用创建导出任务接口的用户或应用保持一致。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:document:export</item>
    /// <item>drive:export:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="ticket">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>导出任务 ID。调用[创建导出任务](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/create) 获取。</para>
    /// <para>示例值：6933093124755412345</para>
    /// </param>
    /// <param name="token">
    /// <para>必填：是</para>
    /// <para>要导出的云文档的 token。获取方式参考[如何获取云文档相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)。你可参考以下请求示例了解如何使用查询参数。</para>
    /// <para>示例值：docbcZVGtv1papC6jAVGiyabcef</para>
    /// </param>
    [HttpGet("/open-apis/drive/v1/export_tasks/{ticket}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDriveV1ExportTasksByTicketResponseDto>> GetDriveV1ExportTasksByTicketAsync(
        [PathQuery] string ticket,
        [PathQuery] string token);

    /// <summary>
    /// <para>【飞书人事】查询部门 / 地点的 HRBP / 属地 BP</para>
    /// <para>接口ID：7089329362222448644</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/authorization/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过部门或工作地点，查询对应的 HRBP / 属地 BP，返回的信息中包含BP的员工ID、部门ID、属地ID等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:authorization:read</item>
    /// <item>corehr:authorization.bp:read</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：people_corehr_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：people_corehr_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/security_groups/query")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1SecurityGroupsQueryResponseDto>> PostCorehrV1SecurityGroupsQueryAsync(
        [JsonContent] FeishuPeople.PostCorehrV1SecurityGroupsQueryBodyDto dto,
        [PathQuery] string? department_id_type = "people_corehr_department_id");

    /// <summary>
    /// <para>【云文档】获取云文档权限设置</para>
    /// <para>接口ID：7091106167506354178</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/permission/permission-public/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于根据 filetoken 获取云文档的权限设置。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>bitable:bitable</item>
    /// <item>docs:doc</item>
    /// <item>docs:permission.setting:read</item>
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>drive:file</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>wiki:wiki</item>
    /// </list></para>
    /// </summary>
    /// <param name="token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文件的 token，获取方式见 [如何获取云文档资源相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)</para>
    /// <para>示例值：doccnBKgoMyY5OMbUG6FioTXuBe</para>
    /// </param>
    /// <param name="type">
    /// <para>必填：是</para>
    /// <para>文件类型，需要与文件的 token 相匹配</para>
    /// <para>示例值：doc</para>
    /// <list type="bullet">
    /// <item>doc：文档</item>
    /// <item>sheet：电子表格</item>
    /// <item>file：云空间文件</item>
    /// <item>wiki：知识库节点</item>
    /// <item>bitable：多维表格</item>
    /// <item>docx：新版文档</item>
    /// <item>mindnote：思维笔记</item>
    /// <item>minutes：妙记</item>
    /// <item>slides：幻灯片</item>
    /// </list>
    /// </param>
    [HttpGet("/open-apis/drive/v1/permissions/{token}/public")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDriveV1PermissionsByTokenPublicResponseDto>> GetDriveV1PermissionsByTokenPublicAsync(
        [PathQuery] string token,
        [PathQuery] string type);

    /// <summary>
    /// <para>【云文档】下载导出文件</para>
    /// <para>接口ID：7091583486251335682</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/export_task/download</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据[查询导出任务结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/get)返回的导出文件的 token，下载导出产物到本地。了解完整的导出文件步骤，参考[导出云文档概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/export-user-guide)。</para>
    /// <para>## 注意事项</para>
    /// <para>你需及时下载导出的文件。在导出任务结束 10 分钟后，导出的文件将被删除，导致无法下载。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:document:export</item>
    /// <item>drive:export:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>导出的文件的 token。可通过调用[查询导出任务结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/get)获取该参数的值。</para>
    /// <para>示例值：boxcnxe5OdjlAkNgSNdsJvabcef</para>
    /// </param>
    /// <returns>返回文件二进制流</returns>
    [HttpGet("/open-apis/drive/v1/export_tasks/file/{file_token}/download")]
    System.Threading.Tasks.Task<HttpResponseMessage> GetDriveV1ExportTasksFileByFileTokenDownloadAsync(
        [PathQuery] string file_token);

    /// <summary>
    /// <para>【云文档】订阅云文档事件</para>
    /// <para>接口ID：7094878915034464284</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/event/subscribe</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于订阅云文档的各类通知事件。了解事件订阅的配置流程和使用场景，参考[事件概述](https://open.feishu.cn/document/ukTMukTMukTM/uUTNz4SN1MjL1UzM)。了解云文档支持的事件类型，参考[事件列表](https://open.feishu.cn/document/ukTMukTMukTM/uYDNxYjL2QTM24iN0EjN/event-list)。</para>
    /// <para>## 注意事项</para>
    /// <para>- 文档管理者仅能接收到[文件编辑](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/event/file-edited)、[多维表格字段变更](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/events/bitable_field_changed)、[多维表格记录变更](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/events/bitable_record_changed)事件。</para>
    /// <para>- 目前只支持订阅事件列表中所有文档事件，暂不支持只订阅某个或某些事件。</para>
    /// <para>- 若应用是以 `tenant_access_token` 订阅的事件，在接收事件时需要同时申请应用和用户两个身份接收事件的权限。</para>
    /// <para>## 前提条件</para>
    /// <para>- 文档的通知事件仅支持文档拥有者和文档管理者订阅。调用接口前请确保应用或用户具有相关权限。</para>
    /// <para>- 调用该接口之前，请确保正确配置订阅方式并添加了事件。详情参考[配置订阅方式](https://open.feishu.cn/document/ukTMukTMukTM/uYDNxYjL2QTM24iN0EjN/event-subscription-configure-/request-url-configuration-case)和[添加事件](https://open.feishu.cn/document/ukTMukTMukTM/uYDNxYjL2QTM24iN0EjN/event-subscription-configure-/subscription-event-case)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:doc</item>
    /// <item>docs:event:subscribe</item>
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>云文档的 token。了解如何获取各类云文档的 token，参考[云空间常见问题](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/faq)。</para>
    /// <para>示例值：doccnfYZzTlvXqZIGTdAHKabcef</para>
    /// </param>
    /// <param name="file_type">
    /// <para>必填：是</para>
    /// <para>云文档类型</para>
    /// <para>示例值：docx</para>
    /// <list type="bullet">
    /// <item>doc：旧版文档。已不推荐使用</item>
    /// <item>docx：新版文档</item>
    /// <item>sheet：电子表格</item>
    /// <item>bitable：多维表格</item>
    /// <item>file：文件</item>
    /// <item>folder：文件夹</item>
    /// <item>slides：幻灯片</item>
    /// </list>
    /// </param>
    /// <param name="event_type">
    /// <para>必填：否</para>
    /// <para>事件类型，`file_type` 为 `folder `（文件夹）时必填 `file.created_in_folder_v1`</para>
    /// <para>示例值：file.created_in_folder_v1</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpPost("/open-apis/drive/v1/files/{file_token}/subscribe")]
    System.Threading.Tasks.Task<FeishuResponse> PostDriveV1FilesByFileTokenSubscribeAsync(
        [PathQuery] string file_token,
        [PathQuery] string file_type,
        [PathQuery] string? event_type = null);

    /// <summary>
    /// <para>【云文档】查询异步任务状态</para>
    /// <para>接口ID：7094912924435021826</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/file/async-task/task_check</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>查询异步任务的状态信息。目前支持查询删除文件夹和移动文件夹的异步任务。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>drive:drive.metadata:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>必填：是</para>
    /// <para>异步任务的 ID。目前支持查询删除文件夹和移动文件夹的异步任务。可通过调用[删除文件夹](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/delete)或[移动文件夹](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/move)获取任务 ID</para>
    /// <para>示例值：7360595374803812356</para>
    /// </param>
    [HttpGet("/open-apis/drive/v1/files/task_check")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDriveV1FilesTaskCheckResponseDto>> GetDriveV1FilesTaskCheckAsync(
        [PathQuery] string task_id);

    /// <summary>
    /// <para>【帐号】批量获取脱敏的用户登录信息</para>
    /// <para>接口ID：7096084771490578433</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/authentication-management/login-state-management/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于查询用户的登录信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>passport:session_mask:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/passport/v1/sessions/query")]
    System.Threading.Tasks.Task<FeishuResponse<Passport.PostPassportV1SessionsQueryResponseDto>> PostPassportV1SessionsQueryAsync(
        [JsonContent] Passport.PostPassportV1SessionsQueryBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】获取笔试阅卷任务列表</para>
    /// <para>接口ID：7096308827411120129</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/recruitment-process-follow-up/list-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据阅卷人ID查询员工笔试阅卷任务列表，能查询到的信息包括：笔试阅卷任务ID、投递ID、任务状态等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:exam:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE2Mjc1NTUyMjM2NzIsImlkIjpudWxsfQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id">
    /// <para>必填：是</para>
    /// <para>阅卷人 ID，需要与user_id_type类型保持一致</para>
    /// <para>示例值：ou_e6139117c300506837def50545420c6a</para>
    /// </param>
    /// <param name="activity_status">
    /// <para>必填：否</para>
    /// <para>任务状态，不传则查询全部记录</para>
    /// <para>示例值：1</para>
    /// <list type="bullet">
    /// <item>1：待阅卷</item>
    /// <item>2：已阅卷</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/exam_marking_tasks")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1ExamMarkingTasksResponseDto>> GetHireV1ExamMarkingTasksAsync(
        [PathQuery] string user_id,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] int? activity_status = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】获取简历评估任务列表</para>
    /// <para>接口ID：7096308846932295682</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/recruitment-process-follow-up/list-3</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据评估人ID查询评估任务列表，可以查询到的信息包括：评估ID、投递ID、任务状态等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:evaluation:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE2Mjc1NTUyMjM2NzIsImlkIjpudWxsfQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id">
    /// <para>必填：是</para>
    /// <para>评估人 ID，需要与user_id_type类型保持一致</para>
    /// <para>示例值：ou_e6139117c300506837def50545420c6a</para>
    /// </param>
    /// <param name="activity_status">
    /// <para>必填：否</para>
    /// <para>任务状态，不传则查询全部记录</para>
    /// <para>示例值：1</para>
    /// <list type="bullet">
    /// <item>1：待评估</item>
    /// <item>2：已评估</item>
    /// <item>3：无需评估</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/evaluation_tasks")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1EvaluationTasksResponseDto>> GetHireV1EvaluationTasksAsync(
        [PathQuery] string user_id,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] int? activity_status = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】获取面试任务列表</para>
    /// <para>接口ID：7096313950274928641</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/recruitment-process-follow-up/list-4</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据面试官ID查询面试任务列表，可以查询到的信息包括：面试ID、投递ID、任务状态等</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:interview:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小, 默认10，不能超过 20</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE2Mjc1NTUyMjM2NzIsImlkIjpudWxsfQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id">
    /// <para>必填：是</para>
    /// <para>面试官 ID，需要与user_id_type类型保持一致</para>
    /// <para>示例值：ou_e6139117c300506837def50545420c6a</para>
    /// </param>
    /// <param name="activity_status">
    /// <para>必填：否</para>
    /// <para>任务状态</para>
    /// <para>示例值：1</para>
    /// <list type="bullet">
    /// <item>1：未开始</item>
    /// <item>2：未评价</item>
    /// <item>3：已评价</item>
    /// <item>5：已终止</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/interview_tasks")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1InterviewTasksResponseDto>> GetHireV1InterviewTasksAsync(
        [PathQuery] string user_id,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] int? activity_status = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事】查询员工离职原因列表</para>
    /// <para>接口ID：7097044451155197956</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/offboarding/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于查询[离职配置](https://people.feishu.cn/people/hr-settings/dimission/setting)&gt; 离职原因的选项信息，包括离职原因选项的唯一标识、名称和启用状态等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.preset_data:read</item>
    /// <item>corehr:common_data.preset_data:write</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/offboardings/query")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1OffboardingsQueryResponseDto>> PostCorehrV1OffboardingsQueryAsync(
        [JsonContent] FeishuPeople.PostCorehrV1OffboardingsQueryBodyDto dto);

    /// <summary>
    /// <para>【飞书人事】操作员工离职</para>
    /// <para>接口ID：7097044451155214340</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/offboarding/submit</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于发起员工离职。若发起成功，会生成一条员工的离职数据，同时产生相应的事件。参考[离职申请状态变更](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/offboarding/events/status_updated)</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:offboarding:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/offboardings/submit")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1OffboardingsSubmitResponseDto>> PostCorehrV1OffboardingsSubmitAsync(
        [JsonContent] FeishuPeople.PostCorehrV1OffboardingsSubmitBodyDto dto,
        [PathQuery] string? user_id_type = "people_corehr_id");

    /// <summary>
    /// <para>【招聘】获取招聘官网推广渠道列表</para>
    /// <para>接口ID：7097130725263441921</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/website/list-3</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据官网 ID 获取推广渠道列表，支持分页查询。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:site</item>
    /// <item>hire:site:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="website_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>官网 ID，可通过[获取招聘官网列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/website/list)获取</para>
    /// <para>示例值：1618209327096</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1NTUyMjM2NzIsImlkIjpudWxsfQ</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/websites/{website_id}/channels")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1WebsitesByWebsiteIdChannelsResponseDto>> GetHireV1WebsitesByWebsiteIdChannelsAsync(
        [PathQuery] string website_id,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【招聘】删除招聘官网推广渠道</para>
    /// <para>接口ID：7097130725263458305</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/website/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据招聘官网 ID 和推广渠道 ID 删除推广渠道。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:site</item>
    /// </list></para>
    /// </summary>
    /// <param name="website_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>官网 ID，可通过[获取招聘官网列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/website/list)获取</para>
    /// <para>示例值：1618209327096</para>
    /// </param>
    /// <param name="channel_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>推广渠道 ID，可通过[获取推广渠道列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/website-channel/list)获取</para>
    /// <para>示例值：7085989097067563300</para>
    /// </param>
    [HttpDelete("/open-apis/hire/v1/websites/{website_id}/channels/{channel_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteHireV1WebsitesByWebsiteIdChannelsByChannelIdAsync(
        [PathQuery] string website_id,
        [PathQuery] string channel_id);

    /// <summary>
    /// <para>【招聘】新建招聘官网推广渠道</para>
    /// <para>接口ID：7097130725263474689</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/website/create-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>新建指定官网的推广渠道。每个官网可以新建多个推广渠道，每个推广渠道具有不同的推广链接和推广码。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:site</item>
    /// </list></para>
    /// </summary>
    /// <param name="website_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>官网 ID，可通过[获取招聘官网列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/website/list)获取</para>
    /// <para>示例值：1618209327096</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/websites/{website_id}/channels")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1WebsitesByWebsiteIdChannelsResponseDto>> PostHireV1WebsitesByWebsiteIdChannelsAsync(
        [PathQuery] string website_id,
        [JsonContent] Hire.PostHireV1WebsitesByWebsiteIdChannelsBodyDto dto);

    /// <summary>
    /// <para>【招聘】更新招聘官网推广渠道</para>
    /// <para>接口ID：7097130725263491073</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/website/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据招聘官网 ID 和推广渠道 ID 更改推广渠道，仅支持修改推广渠道名称。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:site</item>
    /// </list></para>
    /// </summary>
    /// <param name="website_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>官网 ID，通过[获取招聘官网列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/website/list)获取</para>
    /// <para>示例值：1618209327096</para>
    /// </param>
    /// <param name="channel_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>推广渠道 ID，可通过[获取推广渠道列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/website-channel/list)获取</para>
    /// <para>示例值：7085989097067563300</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/hire/v1/websites/{website_id}/channels/{channel_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PutHireV1WebsitesByWebsiteIdChannelsByChannelIdResponseDto>> PutHireV1WebsitesByWebsiteIdChannelsByChannelIdAsync(
        [PathQuery] string website_id,
        [PathQuery] string channel_id,
        [JsonContent] Hire.PutHireV1WebsitesByWebsiteIdChannelsByChannelIdBodyDto dto);

    /// <summary>
    /// <para>【招聘】获取招聘官网投递任务结果</para>
    /// <para>接口ID：7097130726429179906</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/website/get-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过[根据简历附件创建招聘官网投递](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/website-delivery/create_by_attachment)接口创建的投递任务，可通过本接口获取投递任务结果。如果获取到的数据 data 为空，可继续轮询（正常情况下不会超过1分钟）直到获取到的 data 不为空。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:site_application</item>
    /// <item>hire:site_application:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="website_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>官网 ID，可通过[获取招聘官网列表](https://open.larkoffice.com/document/server-docs/hire-v1/get-candidates/website/list)获取</para>
    /// <para>示例值：7047318856652261676</para>
    /// </param>
    /// <param name="delivery_task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>投递任务 ID，可通过[根据简历附件创建招聘官网投递](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/website-delivery/create_by_attachment)获取</para>
    /// <para>示例值：f1c2a0f138ec492d99d7ab73594158ad</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/websites/{website_id}/delivery_tasks/{delivery_task_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1WebsitesByWebsiteIdDeliveryTasksByDeliveryTaskIdResponseDto>> GetHireV1WebsitesByWebsiteIdDeliveryTasksByDeliveryTaskIdAsync(
        [PathQuery] string website_id,
        [PathQuery] string delivery_task_id);

    /// <summary>
    /// <para>【招聘】根据简历附件创建招聘官网投递任务</para>
    /// <para>接口ID：7097131869725179905</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/website/create_by_attachment</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据简历附件创建招聘官网投递任务，创建投递的最终结果请通过[获取招聘官网投递任务结果](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/website-delivery_task/get)获取。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:site_application</item>
    /// </list></para>
    /// </summary>
    /// <param name="website_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>官网 ID，可通过[获取招聘官网列表](https://open.larkoffice.com/document/server-docs/hire-v1/get-candidates/website/list)获取</para>
    /// <para>示例值：7047318856652261676</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/websites/{website_id}/deliveries/create_by_attachment")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1WebsitesByWebsiteIdDeliveriesCreateByAttachmentResponseDto>> PostHireV1WebsitesByWebsiteIdDeliveriesCreateByAttachmentAsync(
        [PathQuery] string website_id,
        [JsonContent] Hire.PostHireV1WebsitesByWebsiteIdDeliveriesCreateByAttachmentBodyDto dto);

    /// <summary>
    /// <para>【考勤打卡】查询所有班次</para>
    /// <para>接口ID：7098332552943681538</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/shift/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>飞书人事管理后台中假勤设置-[班次配置](https://example.feishu.cn/people/workforce-management/setting/group/shifts)中的翻页查询所有班次功能，展示班次名称、打卡规则、弹性班次规则、休息规则等</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:rule</item>
    /// <item>attendance:rule:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：YrkvQ1wGaPVta45tkxuGiQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/attendance/v1/shifts")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.GetAttendanceV1ShiftsResponseDto>> GetAttendanceV1ShiftsAsync(
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【考勤打卡】查询所有考勤组</para>
    /// <para>接口ID：7098332552943697922</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/group/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>翻页获取所有考勤组列表。列表中的数据为考勤组信息，字段包含考勤组名称和考勤组id</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:rule</item>
    /// <item>attendance:rule:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：wgNOR1rmxogRvAsGl6CXlQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/attendance/v1/groups")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.GetAttendanceV1GroupsResponseDto>> GetAttendanceV1GroupsAsync(
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【招聘】获取面试轮次类型列表</para>
    /// <para>接口ID：7098333210140082177</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/interview-settings/list-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据职位流程查询面试轮次类型列表，可以查询到的信息包括：面试轮次类型名称、启用状态、关联的面试评价表信息。可应用于更新职位设置场景：[更新职位设置](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/update_config)</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:interview</item>
    /// <item>hire:interview:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="process_type">
    /// <para>必填：否</para>
    /// <para>职位流程类型</para>
    /// <para>示例值：1</para>
    /// <list type="bullet">
    /// <item>1：社招流程</item>
    /// <item>2：校招流程</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/interview_round_types")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1InterviewRoundTypesResponseDto>> GetHireV1InterviewRoundTypesAsync(
        [PathQuery] int? process_type = null);

    /// <summary>
    /// <para>【招聘】更新职位相关人员</para>
    /// <para>接口ID：7098334044387475484</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/job/batch_update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新职位相关人员，包含招聘负责人、招聘协助人、用人经理。</para>
    /// <para>## 注意事项</para>
    /// <para>接口将按照所选择的「更新人员类型」进行设置参数校验和更新。若设置的更新类型所对应字段更新时未填写内容，接口将报错无法完成更新。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:job</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>职位 ID，可通过[获取职位列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/list)接口获取</para>
    /// <para>示例值：7096318853365369132</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/jobs/{job_id}/managers/batch_update")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1JobsByJobIdManagersBatchUpdateResponseDto>> PostHireV1JobsByJobIdManagersBatchUpdateAsync(
        [PathQuery] string job_id,
        [JsonContent] Hire.PostHireV1JobsByJobIdManagersBatchUpdateBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】查询人才操作记录</para>
    /// <para>接口ID：7098526921012936706</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/talent/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据操作人和操作类型查询人才的操作记录。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:talent</item>
    /// <item>hire:talent:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE2Mjc1NTUyMjM2NzIsImlkIjpudWxsfQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/talent_operation_logs/search")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1TalentOperationLogsSearchResponseDto>> PostHireV1TalentOperationLogsSearchAsync(
        [JsonContent] Hire.PostHireV1TalentOperationLogsSearchBodyDto dto,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】获取职位广告发布记录</para>
    /// <para>接口ID：7098526921116745729</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/job/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据招聘渠道 ID 获取当前渠道下曾发布过的职位广告信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:job</item>
    /// <item>hire:job:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE2Mjc1NTUyMjM2NzIsImlkIjpudWxsfQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>指定查询结果中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门资源介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)。</para>
    /// <para>示例值：department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：由系统自动生成的部门 ID， ID前缀固定为 `od-`，在租户内全局唯一。</item>
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内，department_id 具有唯一性。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值：people_admin_job_level_id</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，通过[获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_level_id</para>
    /// </param>
    /// <param name="job_family_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「序列 ID」的类型</para>
    /// <para>示例值：people_admin_job_category_id</para>
    /// <list type="bullet">
    /// <item>people_admin_job_category_id：「人力系统管理后台」适用的序列 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_family_id：「飞书管理后台」适用的序列 ID，可通过[获取租户序列列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_family/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_category_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/job_publish_records/search")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1JobPublishRecordsSearchResponseDto>> PostHireV1JobPublishRecordsSearchAsync(
        [JsonContent] Hire.PostHireV1JobPublishRecordsSearchBodyDto dto,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? job_level_id_type = "people_admin_job_level_id",
        [PathQuery] string? job_family_id_type = "people_admin_job_category_id");

    /// <summary>
    /// <para>【搜索】删除数据范式</para>
    /// <para>接口ID：7100866111462162460</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/search-v2/open-search/schema/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除已存在的数据范式。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>search:data_source</item>
    /// <item>search:data_source:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="schema_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户自定义数据范式的唯一标识</para>
    /// <para>**示例值**："custom_schema_id"</para>
    /// <para>**数据校验规则**：</para>
    /// <para>- 最大长度：`40` 字符</para>
    /// <para>- 正则校验：`^[a-zA-Z][a-zA-Z0-9-_].*$`</para>
    /// </param>
    [HttpDelete("/open-apis/search/v2/schemas/{schema_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteSearchV2SchemasBySchemaIdAsync(
        [PathQuery] string schema_id);

    /// <summary>
    /// <para>【搜索】获取数据范式</para>
    /// <para>接口ID：7100866111462178844</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/search-v2/open-search/schema/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取单个数据范式。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>search:data_source</item>
    /// <item>search:data_source:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="schema_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户自定义数据范式的唯一标识</para>
    /// <para>**示例值**："custom_schema_id"</para>
    /// <para>**数据校验规则**：</para>
    /// <para>- 最大长度：`40` 字符</para>
    /// <para>- 正则校验：`^[a-zA-Z][a-zA-Z0-9-_].*$`</para>
    /// </param>
    [HttpGet("/open-apis/search/v2/schemas/{schema_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Search.Spec.GetSearchV2SchemasBySchemaIdResponseDto>> GetSearchV2SchemasBySchemaIdAsync(
        [PathQuery] string schema_id);

    /// <summary>
    /// <para>【搜索】创建数据范式</para>
    /// <para>接口ID：7100866111462195228</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/search-v2/open-search/schema/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建一个数据范式。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>search:data_source</item>
    /// <item>search:data_source:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="validate_only">
    /// <para>必填：否</para>
    /// <para>是否只用来校验合法性</para>
    /// <para>**示例值**：true</para>
    /// <para>**默认值**：`false`</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/search/v2/schemas")]
    System.Threading.Tasks.Task<FeishuResponse<Search.Spec.PostSearchV2SchemasResponseDto>> PostSearchV2SchemasAsync(
        [JsonContent] Search.Spec.PostSearchV2SchemasBodyDto dto,
        [PathQuery] bool? validate_only = null);

    /// <summary>
    /// <para>【搜索】修改数据范式</para>
    /// <para>接口ID：7100866111462211612</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/search-v2/open-search/schema/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>修改数据范式。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>search:data_source</item>
    /// <item>search:data_source:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="schema_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户自定义数据范式的唯一标识</para>
    /// <para>**示例值**："custom_schema_id"</para>
    /// <para>**数据校验规则**：</para>
    /// <para>- 最大长度：`40` 字符</para>
    /// <para>- 正则校验：`^[a-zA-Z][a-zA-Z0-9-_].*$`</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/search/v2/schemas/{schema_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Search.Spec.PatchSearchV2SchemasBySchemaIdResponseDto>> PatchSearchV2SchemasBySchemaIdAsync(
        [PathQuery] string schema_id,
        [JsonContent] Search.Spec.PatchSearchV2SchemasBySchemaIdBodyDto dto);

    /// <summary>
    /// <para>【云文档】批量更新块的内容</para>
    /// <para>接口ID：7100866542866530308</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/docs/docx-v1/document-block/batch_update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>批量更新块的富文本内容。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docx:document</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="document_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文档唯一标识。对应新版文档 Token，[点击了解如何获取云文档 Token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)。</para>
    /// <para>示例值：doxcnePuYufKa49ISjhD8Ih0ikh</para>
    /// </param>
    /// <param name="document_revision_id">
    /// <para>必填：否</para>
    /// <para>操作的文档版本，-1 表示文档最新版本。若此时操作的版本为文档最新版本，则需要持有文档的阅读权限；若此时操作的版本为文档的历史版本，则需要持有文档的编辑权限。</para>
    /// <para>示例值：-1</para>
    /// <para>默认值：-1</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>操作的唯一标识，与接口返回值的 client_token 相对应，用于幂等的进行更新操作。此值为空表示将发起一次新的请求，此值非空表示幂等的进行更新操作。</para>
    /// <para>示例值：0e2633a3-aa1a-4171-af9e-0768ff863566</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的用户ID的类型</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/docx/v1/documents/{document_id}/blocks/batch_update")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PatchDocxV1DocumentsByDocumentIdBlocksBatchUpdateResponseDto>> PatchDocxV1DocumentsByDocumentIdBlocksBatchUpdateAsync(
        [PathQuery] string document_id,
        [JsonContent] Ccm.PatchDocxV1DocumentsByDocumentIdBlocksBatchUpdateBodyDto dto,
        [PathQuery] int? document_revision_id = -1,
        [PathQuery] string? client_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【多维表格】新增协作者</para>
    /// <para>接口ID：7101134500528619523</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/advanced-permission/app-role-member/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>新增多维表格高级权限中自定义角色的协作者。</para>
    /// <para>## 前提条件</para>
    /// <para>要调用协作者相关接口，你需确保多维表格已开启高级权限并设置了自定义角色。你可通过[更新多维表格元数据](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app/update)接口开启高级权限，通过[新增自定义角色](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/create)接口设置自定义角色。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:collaborator:create</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="role_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格高级权限中自定义角色的唯一标识，以 rol 开头。获取方式：通过[列出自定义角色](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/list)接口获取。</para>
    /// <para>示例值：roljRpwIUt</para>
    /// </param>
    /// <param name="member_id_type">
    /// <para>必填：否</para>
    /// <para>协作者 ID 的类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：以 open_id 来识别协作者。获取方式参考[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)</item>
    /// <item>union_id：以 union_id 来识别协作者。获取方式参考[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)</item>
    /// <item>user_id：以 user_id 来识别协作者。获取方式参考[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)</item>
    /// <item>chat_id：以 chat_id 来识别协作者。获取方式参考[群 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)</item>
    /// <item>department_id：以 department_id 来识别协作者。调用前，请确保应用有部门的可见性，参考[配置应用可用范围](https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/availability)。获取 department_id 方式参考[部门资源介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)</item>
    /// <item>open_department_id：以 open_department_id 来识别协作者。调用前，请确保应用有部门的可见性，参考[配置应用可用范围](https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/availability)。获取 open_department_id 方式参考[部门资源介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/bitable/v1/apps/{app_token}/roles/{role_id}/members")]
    System.Threading.Tasks.Task<FeishuResponse> PostBitableV1AppsByAppTokenRolesByRoleIdMembersAsync(
        [PathQuery] string app_token,
        [PathQuery] string role_id,
        [JsonContent] Base.PostBitableV1AppsByAppTokenRolesByRoleIdMembersBodyDto dto,
        [PathQuery] string? member_id_type = "open_id");

    /// <summary>
    /// <para>【多维表格】删除自定义角色</para>
    /// <para>接口ID：7101134500528635907</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/advanced-permission/app-role/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除多维表格高级权限中自定义的角色。</para>
    /// <para>## 前提条件</para>
    /// <para>要调用自定义角色相关接口，你需确保多维表格已开启高级权限。你可通过[更新多维表格元数据](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app/update)接口开启高级权限。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:role:delete</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="role_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格高级权限中自定义角色的唯一标识，以 rol 开头。获取方式：通过[列出自定义角色](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/list)接口获取。</para>
    /// <para>示例值：roljRpwIUt</para>
    /// </param>
    [HttpDelete("/open-apis/bitable/v1/apps/{app_token}/roles/{role_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteBitableV1AppsByAppTokenRolesByRoleIdAsync(
        [PathQuery] string app_token,
        [PathQuery] string role_id);

    /// <summary>
    /// <para>【多维表格】更新自定义角色</para>
    /// <para>接口ID：7101134500528652291</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/advanced-permission/app-role/update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新多维表格高级权限中自定义的角色。</para>
    /// <para>## 前提条件</para>
    /// <para>要调用自定义角色相关接口，你需确保多维表格已开启高级权限。你可通过[更新多维表格元数据](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app/update)接口开启高级权限。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:role:update</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="role_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格高级权限中自定义角色的唯一标识，以 rol 开头。获取方式：通过[列出自定义角色](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/list)接口获取。</para>
    /// <para>示例值：roljRpwIUt</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/bitable/v1/apps/{app_token}/roles/{role_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Base.PutBitableV1AppsByAppTokenRolesByRoleIdResponseDto>> PutBitableV1AppsByAppTokenRolesByRoleIdAsync(
        [PathQuery] string app_token,
        [PathQuery] string role_id,
        [JsonContent] Base.PutBitableV1AppsByAppTokenRolesByRoleIdBodyDto dto);

    /// <summary>
    /// <para>【多维表格】列出协作者</para>
    /// <para>接口ID：7101134500528668675</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/advanced-permission/app-role-member/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>列出多维表格高级权限中自定义角色的协作者。</para>
    /// <para>## 前提条件</para>
    /// <para>要调用协作者相关接口，你需确保多维表格已开启高级权限并设置了自定义角色。你可通过[更新多维表格元数据](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app/update)接口开启高级权限，通过[新增自定义角色](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/create)接口设置自定义角色。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:collaborator:read</item>
    /// <item>bitable:app</item>
    /// <item>bitable:app:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="role_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格高级权限中自定义角色的唯一标识，以 rol 开头。获取方式：通过[列出自定义角色](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/list)接口获取。</para>
    /// <para>示例值：roljRpwIUt</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/bitable/v1/apps/{app_token}/roles/{role_id}/members")]
    System.Threading.Tasks.Task<FeishuResponse<Base.GetBitableV1AppsByAppTokenRolesByRoleIdMembersResponseDto>> GetBitableV1AppsByAppTokenRolesByRoleIdMembersAsync(
        [PathQuery] string app_token,
        [PathQuery] string role_id,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【多维表格】列出自定义角色</para>
    /// <para>接口ID：7101134500528701443</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/advanced-permission/app-role/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>列出多维表格高级权限中用户自定义的角色。</para>
    /// <para>## 前提条件</para>
    /// <para>要调用自定义角色相关接口，你需确保多维表格已开启高级权限。你可通过[更新多维表格元数据](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app/update)接口开启高级权限。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:role:read</item>
    /// <item>bitable:app</item>
    /// <item>bitable:app:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/bitable/v1/apps/{app_token}/roles")]
    System.Threading.Tasks.Task<FeishuResponse<Base.GetBitableV1AppsByAppTokenRolesResponseDto>> GetBitableV1AppsByAppTokenRolesAsync(
        [PathQuery] string app_token,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【多维表格】删除协作者</para>
    /// <para>接口ID：7101134500528717827</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/advanced-permission/app-role-member/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除多维表格高级权限中自定义角色的协作者。</para>
    /// <para>## 前提条件</para>
    /// <para>要调用协作者相关接口，你需确保多维表格已开启高级权限并设置了自定义角色。你可通过[更新多维表格元数据](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app/update)接口开启高级权限，通过[新增自定义角色](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/create)接口设置自定义角色。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:collaborator:delete</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="role_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格高级权限中自定义角色的唯一标识，以 rol 开头。获取方式：通过[列出自定义角色](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/list)接口获取。</para>
    /// <para>示例值：roljRpwIUt</para>
    /// </param>
    /// <param name="member_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>高级权限中自定义角色协作者的 ID，需与查询参数中 member_id_type 的类型需一致。获取 ID 方式参考 member_id_type 参数描述。</para>
    /// <para>示例值：ou_7dab8a3d3cdcc9da365777c7ad53uew2</para>
    /// </param>
    /// <param name="member_id_type">
    /// <para>必填：否</para>
    /// <para>协作者 ID 的类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：以 open_id 来识别协作者。获取方式参考[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)</item>
    /// <item>union_id：以 union_id 来识别协作者。获取方式参考[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)</item>
    /// <item>user_id：以 user_id 来识别协作者。获取方式参考[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)</item>
    /// <item>chat_id：以 chat_id 来识别协作者。获取方式参考[群 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)</item>
    /// <item>department_id：以 department_id 来识别协作者。调用前，请确保应用有部门的可见性，参考[配置应用可用范围](https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/availability)。获取 department_id 方式参考[部门资源介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)</item>
    /// <item>open_department_id：以 open_department_id 来识别协作者。调用前，请确保应用有部门的可见性，参考[配置应用可用范围](https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/availability)。获取 open_department_id 方式参考[部门资源介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpDelete("/open-apis/bitable/v1/apps/{app_token}/roles/{role_id}/members/{member_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteBitableV1AppsByAppTokenRolesByRoleIdMembersByMemberIdAsync(
        [PathQuery] string app_token,
        [PathQuery] string role_id,
        [PathQuery] string member_id,
        [PathQuery] string? member_id_type = "open_id");

    /// <summary>
    /// <para>【多维表格】新增自定义角色</para>
    /// <para>接口ID：7101134500528734211</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/advanced-permission/app-role/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>新增多维表格高级权限中自定义的角色。</para>
    /// <para>## 前提条件</para>
    /// <para>要调用自定义角色相关接口，你需确保多维表格已开启高级权限。你可通过[更新多维表格元数据](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app/update)接口开启高级权限。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:role:create</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/bitable/v1/apps/{app_token}/roles")]
    System.Threading.Tasks.Task<FeishuResponse<Base.PostBitableV1AppsByAppTokenRolesResponseDto>> PostBitableV1AppsByAppTokenRolesAsync(
        [PathQuery] string app_token,
        [JsonContent] Base.PostBitableV1AppsByAppTokenRolesBodyDto dto);

    /// <summary>
    /// <para>【管理后台】修改勋章信息</para>
    /// <para>接口ID：7104154222309031939</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/admin-v1/badge/badge/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过该接口可以修改勋章的信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:badge</item>
    /// </list></para>
    /// </summary>
    /// <param name="badge_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>勋章ID</para>
    /// <para>示例值：m_MzfKDM</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/admin/v1/badges/{badge_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Admin.PutAdminV1BadgesByBadgeIdResponseDto>> PutAdminV1BadgesByBadgeIdAsync(
        [PathQuery] string badge_id,
        [JsonContent] Admin.PutAdminV1BadgesByBadgeIdBodyDto dto);

    /// <summary>
    /// <para>【管理后台】获取勋章列表</para>
    /// <para>接口ID：7104154222309048323</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/admin-v1/badge/badge/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>可以通过该接口列出租户下所有的勋章，勋章的排列顺序是按照创建时间倒序排列。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:badge</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：b1fmUz</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="name">
    /// <para>必填：否</para>
    /// <para>租户内唯一的勋章名称，精确匹配。</para>
    /// <para>示例值：激励勋章</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/admin/v1/badges")]
    System.Threading.Tasks.Task<FeishuResponse<Admin.GetAdminV1BadgesResponseDto>> GetAdminV1BadgesAsync(
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? name = null);

    /// <summary>
    /// <para>【管理后台】获取授予名单列表</para>
    /// <para>接口ID：7104154222309064707</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/admin-v1/badge/badge-grant/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过该接口可以获取特定勋章下的授予名单列表，授予名单的排列顺序按照创建时间倒序排列。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:badge.grant</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="badge_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>企业勋章的唯一ID</para>
    /// <para>示例值：m_DjMzaK</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：om5fn1</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：以自定义department_id来标识部门</item>
    /// <item>open_department_id：以open_department_id来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="name">
    /// <para>必填：否</para>
    /// <para>授予名单名称，精确匹配。</para>
    /// <para>示例值：激励勋章的授予名单</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/admin/v1/badges/{badge_id}/grants")]
    System.Threading.Tasks.Task<FeishuResponse<Admin.GetAdminV1BadgesByBadgeIdGrantsResponseDto>> GetAdminV1BadgesByBadgeIdGrantsAsync(
        [PathQuery] string badge_id,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? name = null);

    /// <summary>
    /// <para>【管理后台】获取授予名单详情</para>
    /// <para>接口ID：7104154222309081091</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/admin-v1/badge/badge-grant/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过该接口可以获取特定授予名单的信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:badge.grant</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="badge_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>租户内勋章的唯一标识，该值由系统随机生成。</para>
    /// <para>示例值：m_DjMzaK</para>
    /// </param>
    /// <param name="grant_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>租户内授予名单的唯一标识，该值由系统随机生成。</para>
    /// <para>示例值：g_uS4yux</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：以自定义department_id来标识部门</item>
    /// <item>open_department_id：以open_department_id来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    [HttpGet("/open-apis/admin/v1/badges/{badge_id}/grants/{grant_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Admin.GetAdminV1BadgesByBadgeIdGrantsByGrantIdResponseDto>> GetAdminV1BadgesByBadgeIdGrantsByGrantIdAsync(
        [PathQuery] string badge_id,
        [PathQuery] string grant_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【管理后台】删除授予名单</para>
    /// <para>接口ID：7104154222309097475</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/admin-v1/badge/badge-grant/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过该接口可以删除特定授予名单的信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:badge.grant</item>
    /// </list></para>
    /// </summary>
    /// <param name="badge_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>企业勋章的唯一ID</para>
    /// <para>示例值：m_DjMzaK</para>
    /// </param>
    /// <param name="grant_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>租户内授予名单的唯一标识，该值由系统随机生成。</para>
    /// <para>示例值：g_uS4yux</para>
    /// </param>
    [HttpDelete("/open-apis/admin/v1/badges/{badge_id}/grants/{grant_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteAdminV1BadgesByBadgeIdGrantsByGrantIdAsync(
        [PathQuery] string badge_id,
        [PathQuery] string grant_id);

    /// <summary>
    /// <para>【管理后台】上传勋章图片</para>
    /// <para>接口ID：7104154222309130243</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/admin-v1/badge/badge/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过该接口可以上传勋章详情图、挂饰图的文件，获取对应的文件key。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:badge</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    /// <param name="image_file">
    /// <para>必填：是</para>
    /// <para>勋章图片的文件，仅支持 PNG 格式，320 x 320 像素，大小不超过 1024 KB。</para>
    /// </param>
    [HttpPost("/open-apis/admin/v1/badge_images")]
    System.Threading.Tasks.Task<FeishuResponse<Admin.PostAdminV1BadgeImagesResponseDto>> PostAdminV1BadgeImagesAsync(
        [FormDataContent] Admin.PostAdminV1BadgeImagesBodyDto dto,
        [FormDataContent] FormDataFile image_file);

    /// <summary>
    /// <para>【管理后台】创建勋章</para>
    /// <para>接口ID：7104154222309146627</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/admin-v1/badge/badge/create-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>使用该接口可以创建一枚完整的勋章信息，一个租户下最多可创建1000枚勋章。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:badge</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/admin/v1/badges")]
    System.Threading.Tasks.Task<FeishuResponse<Admin.PostAdminV1BadgesResponseDto>> PostAdminV1BadgesAsync(
        [JsonContent] Admin.PostAdminV1BadgesBodyDto dto);

    /// <summary>
    /// <para>【管理后台】获取勋章详情</para>
    /// <para>接口ID：7104154222309163011</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/admin-v1/badge/badge/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>可以通过该接口查询勋章的详情。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:badge</item>
    /// </list></para>
    /// </summary>
    /// <param name="badge_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>勋章id</para>
    /// <para>示例值：m_DjMzaK</para>
    /// </param>
    [HttpGet("/open-apis/admin/v1/badges/{badge_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Admin.GetAdminV1BadgesByBadgeIdResponseDto>> GetAdminV1BadgesByBadgeIdAsync(
        [PathQuery] string badge_id);

    /// <summary>
    /// <para>【管理后台】创建授予名单</para>
    /// <para>接口ID：7104154222309179395</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/admin-v1/badge/badge-grant/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过该接口可以为特定勋章创建一份授予名单，一枚勋章下最多可创建1000份授予名单。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:badge.grant</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="badge_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>勋章ID</para>
    /// <para>示例值：m_DjMzaK</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：以自定义department_id来标识部门</item>
    /// <item>open_department_id：以open_department_id来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/admin/v1/badges/{badge_id}/grants")]
    System.Threading.Tasks.Task<FeishuResponse<Admin.PostAdminV1BadgesByBadgeIdGrantsResponseDto>> PostAdminV1BadgesByBadgeIdGrantsAsync(
        [PathQuery] string badge_id,
        [JsonContent] Admin.PostAdminV1BadgesByBadgeIdGrantsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【管理后台】修改授予名单</para>
    /// <para>接口ID：7104154222309195779</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/admin-v1/badge/badge-grant/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过该接口可以修改特定授予名单的相关信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:badge.grant</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="badge_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>勋章ID</para>
    /// <para>示例值：m_DjMzaK</para>
    /// </param>
    /// <param name="grant_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>授予名单ID</para>
    /// <para>示例值：g_uS4yux</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：以自定义department_id来标识部门</item>
    /// <item>open_department_id：以open_department_id来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/admin/v1/badges/{badge_id}/grants/{grant_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Admin.PutAdminV1BadgesByBadgeIdGrantsByGrantIdResponseDto>> PutAdminV1BadgesByBadgeIdGrantsByGrantIdAsync(
        [PathQuery] string badge_id,
        [PathQuery] string grant_id,
        [JsonContent] Admin.PutAdminV1BadgesByBadgeIdGrantsByGrantIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【任务】获取评论列表</para>
    /// <para>接口ID：7104611925149581315</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/task-v1/task-comment/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于查询任务评论列表，支持分页，最大值为100。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task</item>
    /// <item>task:task:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务id</para>
    /// <para>示例值："83912691-2e43-47fc-94a4-d512e03984fa"</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值："MTYzMTg3ODUxNQ=="</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="list_direction">
    /// <para>必填：否</para>
    /// <para>评论排序标记，可按照评论时间从小到大查询，或者评论时间从大到小查询，不填默认按照从小到大</para>
    /// <para>示例值：0</para>
    /// <list type="bullet">
    /// <item>0：按照回复时间从小到大查询</item>
    /// <item>1：按照回复时间从大到小查询</item>
    /// </list>
    /// <para>默认值：0</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/task/v1/tasks/{task_id}/comments")]
    System.Threading.Tasks.Task<FeishuResponse<Task.GetTaskV1TasksByTaskIdCommentsResponseDto>> GetTaskV1TasksByTaskIdCommentsAsync(
        [PathQuery] string task_id,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] int? list_direction = 0,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】获取文件元数据</para>
    /// <para>接口ID：7106040876741345308</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/file/batch_query</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于根据文件 token 获取其元数据，包括标题、所有者、创建时间、密级、访问链接等数据。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:drive.metadata:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>drive:file.meta.sec_label.read_only</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/drive/v1/metas/batch_query")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostDriveV1MetasBatchQueryResponseDto>> PostDriveV1MetasBatchQueryAsync(
        [JsonContent] Ccm.PostDriveV1MetasBatchQueryBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【通讯录】批量添加用户组成员</para>
    /// <para>接口ID：7106501358249852931</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/group-member/batch_add</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口向指定的普通用户组内添加一个或多个成员。</para>
    /// <para>## 注意事项</para>
    /// <para>- 目前仅支持添加用户类型的成员，暂不支持添加部门类型的成员。</para>
    /// <para>- 如果应用的通讯录权限范围是 **全部员工**，则可以将当前租户内的任何用户添加到任何用户组当中。如果应用的通讯录权限范围不是 **全部员工**，则所要添加的用户以及对应的用户组，均需要在应用的通讯录权限范围内。了解通讯录权限范围，可参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>## 使用限制</para>
    /// <para>单租户内单个普通用户组的成员数量上限为 100,000，但需要注意，单租户内所有普通用户组的成员数量总和不能超过当前租户成员数量的 10 倍。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:group</item>
    /// </list></para>
    /// </summary>
    /// <param name="group_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户组 ID。</para>
    /// <para>用户组 ID 可在创建用户组时从返回值中获取，你也可以调用[查询用户组列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/simplelist)接口，获取用户组的 ID。</para>
    /// <para>示例值：test_group</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/contact/v3/group/{group_id}/member/batch_add")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.PostContactV3GroupByGroupIdMemberBatchAddResponseDto>> PostContactV3GroupByGroupIdMemberBatchAddAsync(
        [PathQuery] string group_id,
        [JsonContent] Contact.PostContactV3GroupByGroupIdMemberBatchAddBodyDto dto);

    /// <summary>
    /// <para>【通讯录】批量移除用户组成员</para>
    /// <para>接口ID：7106501358249869315</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/group-member/batch_remove</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口从指定普通用户组内移除一个或多个成员。</para>
    /// <para>## 注意事项</para>
    /// <para>- 目前仅支持移除用户类型的成员，暂不支持移除部门类型的成员。</para>
    /// <para>- 如果应用的通讯录权限范围是 **全部员工**，则可以将任何用户移除任何用户组。如果应用的通讯录权限范围不是 **全部员工**，则所要移除的用户以及对应的用户组，均需要在应用的通讯录权限范围内。了解通讯录权限范围，可参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:group</item>
    /// </list></para>
    /// </summary>
    /// <param name="group_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户组 ID。</para>
    /// <para>用户组 ID 可在创建用户组时从返回值中获取，你也可以调用[查询用户组列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/simplelist)接口，获取用户组的 ID。</para>
    /// <para>示例值：test_group</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/contact/v3/group/{group_id}/member/batch_remove")]
    System.Threading.Tasks.Task<FeishuResponse> PostContactV3GroupByGroupIdMemberBatchRemoveAsync(
        [PathQuery] string group_id,
        [JsonContent] Contact.PostContactV3GroupByGroupIdMemberBatchRemoveBodyDto dto);

    /// <summary>
    /// <para>【通讯录】查询用户所属用户组</para>
    /// <para>接口ID：7106501358249885699</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/group/member_belong</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口查询指定用户所属的用户组列表。</para>
    /// <para>## 注意事项</para>
    /// <para>- 如果应用的通讯录权限范围设置为 **全部员工**，则通过本接口可查询到用户所属的全部用户组列表，否则，仅会查询到应用通讯录权限范围内该用户所属的用户组。了解应用通讯录权限范围，可参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>- 支持查询到普通用户组和动态用户组的信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:group:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="member_id">
    /// <para>必填：是</para>
    /// <para>成员 ID。ID 类型与 member_id_type 取值保持一致。</para>
    /// <para>示例值：u287xj12</para>
    /// </param>
    /// <param name="member_id_type">
    /// <para>必填：否</para>
    /// <para>成员 ID 类型。</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)。</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)。</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)。</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="group_type">
    /// <para>必填：否</para>
    /// <para>用户组类型。</para>
    /// <para>示例值：1</para>
    /// <list type="bullet">
    /// <item>1：普通用户组</item>
    /// <item>2：动态用户组</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，用于限制一次请求所返回的数据条目数。</para>
    /// <para>示例值：500</para>
    /// <para>默认值：500</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw=</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/group/member_belong")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3GroupMemberBelongResponseDto>> GetContactV3GroupMemberBelongAsync(
        [PathQuery] string member_id,
        [PathQuery] string? member_id_type = "open_id",
        [PathQuery] int? group_type = null,
        [PathQuery] int? page_size = 500,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【云文档】获取文件夹中的文件清单</para>
    /// <para>接口ID：7108600920377016348</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/folder/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于获取用户云空间指定文件夹中文件信息清单。文件的信息包括名称、类型、token、创建时间、所有者 ID 等。</para>
    /// <para>## 使用限制</para>
    /// <para>本接口仅支持获取当前层级的文件信息，不支持递归获取子文件夹中的文件信息清单。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>space:document:retrieve</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>指定每页显示的数据项的数量。若获取根目录下的清单，将返回全部数据</para>
    /// <para>示例值：50</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：MTY1NTA3MTA1OXw3MTA4NDc2MDc1NzkyOTI0Nabcef</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="folder_token">
    /// <para>必填：否</para>
    /// <para>文件夹的 token。不填写或填空字符串，将获取用户云空间根目录下的清单，且不支持分页。了解如何获取文件夹 token，参考[文件夹概述](https://open.feishu.cn/document/ukTMukTMukTM/ugTNzUjL4UzM14CO1MTN/folder-overview)。</para>
    /// <para>示例值：fldbcO1UuPz8VwnpPx5a9abcef</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="order_by">
    /// <para>必填：否</para>
    /// <para>定义清单中文件的排序方式</para>
    /// <para>示例值：EditedTime</para>
    /// <list type="bullet">
    /// <item>EditedTime：按编辑时间排序</item>
    /// <item>CreatedTime：按创建时间排序</item>
    /// </list>
    /// <para>默认值：EditedTime</para>
    /// </param>
    /// <param name="direction">
    /// <para>必填：否</para>
    /// <para>定义清单中文件的排序规则</para>
    /// <para>示例值：DESC</para>
    /// <list type="bullet">
    /// <item>ASC：按升序排序</item>
    /// <item>DESC：按降序排序</item>
    /// </list>
    /// <para>默认值：DESC</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/drive/v1/files")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDriveV1FilesResponseDto>> GetDriveV1FilesAsync(
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? folder_token = null,
        [PathQuery] string? order_by = "EditedTime",
        [PathQuery] string? direction = "DESC",
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【考勤打卡】获取审批数据</para>
    /// <para>接口ID：7108645368100257794</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/user_approval/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取员工在某段时间内的请假、加班、外出和出差四种审批数据。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:task:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_type">
    /// <para>必填：是</para>
    /// <para>请求体中的 user_ids 和响应体中的 user_id 的员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)</para>
    /// <para>示例值：employee_id</para>
    /// <list type="bullet">
    /// <item>employee_id：员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/index) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的用户 ID</item>
    /// <item>employee_no：员工工号，即[飞书管理后台](https://example.feishu.cn/admin/index) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的工号</item>
    /// <item>open_id：用户在某个应用中的身份[查询Open ID](https://open.larkoffice.com/api-explorer?apiName=batch_get_id&amp;project=contact&amp;resource=user&amp;version=v3)</item>
    /// </list>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/attendance/v1/user_approvals/query")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PostAttendanceV1UserApprovalsQueryResponseDto>> PostAttendanceV1UserApprovalsQueryAsync(
        [PathQuery] string employee_type,
        [JsonContent] Attendance.PostAttendanceV1UserApprovalsQueryBodyDto dto);

    /// <summary>
    /// <para>【考勤打卡】写入审批结果</para>
    /// <para>接口ID：7108645368100274178</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/user_approval/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>由于部分企业使用的是自己的审批系统，而不是飞书审批系统，因此员工的请假、加班等数据无法流入到飞书考勤系统中，导致员工在请假时间段内依然收到打卡提醒，并且被记为缺卡。</para>
    /// <para>对于这些只使用飞书考勤系统，而未使用飞书审批系统的企业，可以通过考勤开放接口的形式，将三方审批结果数据回写到飞书考勤系统中。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:task</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_type">
    /// <para>必填：是</para>
    /// <para>请求体和响应体中的 user_id 的员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)</para>
    /// <para>示例值：employee_id</para>
    /// <list type="bullet">
    /// <item>employee_id：员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的用户 ID</item>
    /// <item>employee_no：员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的工号</item>
    /// <item>open_id：用户在某个应用中的身份，可以参考[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)</item>
    /// </list>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/attendance/v1/user_approvals")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PostAttendanceV1UserApprovalsResponseDto>> PostAttendanceV1UserApprovalsAsync(
        [PathQuery] string employee_type,
        [JsonContent] Attendance.PostAttendanceV1UserApprovalsBodyDto dto);

    /// <summary>
    /// <para>【考勤打卡】通知审批状态更新</para>
    /// <para>接口ID：7108645368100290562</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/user_approval/process</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对于只使用飞书考勤系统而未使用飞书审批系统的企业，可以通过该接口更新写入飞书考勤系统中的三方系统审批状态，例如请假、加班、外出、出差、补卡等审批，状态包括通过、不通过、撤销等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:task</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/attendance/v1/approval_infos/process")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PostAttendanceV1ApprovalInfosProcessResponseDto>> PostAttendanceV1ApprovalInfosProcessAsync(
        [JsonContent] Attendance.PostAttendanceV1ApprovalInfosProcessBodyDto dto);

    /// <summary>
    /// <para>【云文档】更新知识空间节点标题</para>
    /// <para>接口ID：7109718703113781251</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/wiki-v2/space-node/update_title</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>此接口用于更新节点标题</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>wiki:node:update</item>
    /// <item>wiki:wiki</item>
    /// </list></para>
    /// </summary>
    /// <param name="space_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>知识空间ID</para>
    /// <para>示例值：6946843325487912356</para>
    /// </param>
    /// <param name="node_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>节点token</para>
    /// <para>示例值：wikcnKQ1k3pcuo5uSK4t8Vabcef</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/wiki/v2/spaces/{space_id}/nodes/{node_token}/update_title")]
    System.Threading.Tasks.Task<FeishuResponse> PostWikiV2SpacesBySpaceIdNodesByNodeTokenUpdateTitleAsync(
        [PathQuery] string space_id,
        [PathQuery] string node_token,
        [JsonContent] Ccm.PostWikiV2SpacesBySpaceIdNodesByNodeTokenUpdateTitleBodyDto dto);

    /// <summary>
    /// <para>【云文档】创建知识空间节点副本</para>
    /// <para>接口ID：7109718703113797635</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/wiki-v2/space-node/copy</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>此接口用于在知识空间创建节点副本到指定位置。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>wiki:node:copy</item>
    /// <item>wiki:wiki</item>
    /// </list></para>
    /// </summary>
    /// <param name="space_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>知识空间id</para>
    /// <para>示例值：6946843325487912356</para>
    /// </param>
    /// <param name="node_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>节点token</para>
    /// <para>示例值：wikcnKQ1k3p******8Vabce</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/wiki/v2/spaces/{space_id}/nodes/{node_token}/copy")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostWikiV2SpacesBySpaceIdNodesByNodeTokenCopyResponseDto>> PostWikiV2SpacesBySpaceIdNodesByNodeTokenCopyAsync(
        [PathQuery] string space_id,
        [PathQuery] string node_token,
        [JsonContent] Ccm.PostWikiV2SpacesBySpaceIdNodesByNodeTokenCopyBodyDto dto);

    /// <summary>
    /// <para>【招聘】更新 Offer 申请表自定义字段</para>
    /// <para>接口ID：7109767413990866947</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/offer-settings/offer_application_form/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>本接口支持修改 Offer 申请表的自定义字段，Offer 申请表的定义可参考「飞书招聘」-「设置」-「Offer 设置」-「Offer 申请表设置」中的内容。</para>
    /// <para>## 注意事项</para>
    /// <para>- Offer 申请表通过版本 (schema_id) 进行变更管理，自定义字段每次修改，全量申请表的 schema_id 会同步更新。</para>
    /// <para>- 本接口不支持修改自定义字段类型。</para>
    /// <para>- 本接口不支持修改字段类型为「公式」类型的字段值。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:offer_selection_object</item>
    /// </list></para>
    /// </summary>
    /// <param name="offer_custom_field_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>Offer 申请表自定义字段 ID，可通过接口[获取 Offer 申请表信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer_application_form/get)获取</para>
    /// <para>示例值：6906755946257615112</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/hire/v1/offer_custom_fields/{offer_custom_field_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PutHireV1OfferCustomFieldsByOfferCustomFieldIdAsync(
        [PathQuery] string offer_custom_field_id,
        [JsonContent] Hire.PutHireV1OfferCustomFieldsByOfferCustomFieldIdBodyDto dto);

    /// <summary>
    /// <para>【消息与群组】添加会话标签页</para>
    /// <para>接口ID：7111246605500563457</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat-tab/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>在指定会话内添加自定义会话标签页，仅支持添加文档类型（doc）或 URL （url）类型的标签页。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 调用当前接口的用户或者机器人必须在对应的会话内。</para>
    /// <para>## 使用限制</para>
    /// <para>- 调用该接口仅支持添加 doc、url 类型的标签页，即 tab_type 参数传值时，只能传入 doc 或 url，传入其他枚举值将会报错。如果你需要添加其他类型的会话标签页，需要在飞书客户端内操作，详情参见[会话内标签页](https://www.feishu.cn/hc/zh-CN/articles/536850681075)。</para>
    /// <para>- 如果群组配置了 **仅群主和群管理员可以管理标签页**，则仅群主或者群管理员可以添加会话标签页。</para>
    /// <para>- 操作内部群时，操作者须与群组在同一租户下。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat.tabs:write_only</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>**注意**：仅支持群模式为 **群组（group）**、**单聊（p2p）** 的群组 ID。你可以调用[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)接口，在返回结果中查看 `chat_mode` 参数取值是否为 `group`、`p2p`。</para>
    /// <para>示例值：oc_a0553eda9014c201e6969b478895c230</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/im/v1/chats/{chat_id}/chat_tabs")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PostImV1ChatsByChatIdChatTabsResponseDto>> PostImV1ChatsByChatIdChatTabsAsync(
        [PathQuery] string chat_id,
        [JsonContent] Im.PostImV1ChatsByChatIdChatTabsBodyDto dto);

    /// <summary>
    /// <para>【消息与群组】删除会话标签页</para>
    /// <para>接口ID：7111246605500579841</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat-tab/delete_tabs</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除指定会话内的一个或多个会话标签页。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 调用当前接口的用户或者机器人必须在对应的会话内。</para>
    /// <para>## 使用限制</para>
    /// <para>- 只允许删除类型为`doc`和`url`的会话标签页。</para>
    /// <para>- 如果群组配置了 **仅群主和群管理员可以管理标签页**，则仅群主或者群管理员可以删除会话标签页。</para>
    /// <para>- 操作内部群时，操作者须与群组在同一租户下。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat.tabs:write_only</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>**注意**：仅支持群模式为 **群组（group）**、**单聊（p2p）** 的群组 ID。你可以调用[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)接口，在返回结果中查看 `chat_mode` 参数取值是否为 `group`、`p2p`。</para>
    /// <para>示例值：oc_a0553eda9014c201e6969b478895c230</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpDelete("/open-apis/im/v1/chats/{chat_id}/chat_tabs/delete_tabs")]
    System.Threading.Tasks.Task<FeishuResponse<Im.DeleteImV1ChatsByChatIdChatTabsDeleteTabsResponseDto>> DeleteImV1ChatsByChatIdChatTabsDeleteTabsAsync(
        [PathQuery] string chat_id,
        [JsonContent] Im.DeleteImV1ChatsByChatIdChatTabsDeleteTabsBodyDto dto);

    /// <summary>
    /// <para>【消息与群组】拉取会话标签页</para>
    /// <para>接口ID：7111246605500596225</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat-tab/list_tabs</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取指定会话内的会话标签页信息，包括 ID、名称、类型以及内容等。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 调用当前接口的用户或者机器人必须在对应的会话内。</para>
    /// <para>## 使用限制</para>
    /// <para>操作内部群时，操作者须与群组在同一租户下。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat:readonly</item>
    /// <item>im:chat.tabs:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>**注意**：仅支持群模式为 **群组（group）**、**单聊（p2p）** 的群组 ID。你可以调用[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)接口，在返回结果中查看 `chat_mode` 参数取值是否为 `group`、`p2p`。</para>
    /// <para>示例值：oc_a0553eda9014c201e6969b478895c230</para>
    /// </param>
    [HttpGet("/open-apis/im/v1/chats/{chat_id}/chat_tabs/list_tabs")]
    System.Threading.Tasks.Task<FeishuResponse<Im.GetImV1ChatsByChatIdChatTabsListTabsResponseDto>> GetImV1ChatsByChatIdChatTabsListTabsAsync(
        [PathQuery] string chat_id);

    /// <summary>
    /// <para>【消息与群组】更新会话标签页</para>
    /// <para>接口ID：7111246605500612609</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat-tab/update_tabs</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新指定的会话标签页信息，包括名称、类型以及内容等。仅支持更新文档类型（doc）或 URL （url）类型的标签页。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 调用当前接口的用户或者机器人必须在对应的会话内。</para>
    /// <para>## 使用限制</para>
    /// <para>- 调用该接口仅支持更新 doc、url 类型的标签页，即 tab_type 参数传值时，只能传入 doc 或 url，传入其他枚举值将会报错。如果你需要更新其他类型的会话标签页，需要在飞书客户端内操作，详情参见[会话内标签页](https://www.feishu.cn/hc/zh-CN/articles/536850681075)。</para>
    /// <para>- 如果群组配置了 **仅群主和群管理员可以管理标签页**，则仅群主或者群管理员可以更新会话标签页。</para>
    /// <para>- 操作内部群时，操作者须与群组在同一租户下。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat.tabs:write_only</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>**注意**：仅支持群模式为 **群组（group）**、**单聊（p2p）** 的群组 ID。你可以调用[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)接口，在返回结果中查看 `chat_mode` 参数取值是否为 `group`、`p2p`。</para>
    /// <para>示例值：oc_a0553eda9014c201e6969b478895c230</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/im/v1/chats/{chat_id}/chat_tabs/update_tabs")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PostImV1ChatsByChatIdChatTabsUpdateTabsResponseDto>> PostImV1ChatsByChatIdChatTabsUpdateTabsAsync(
        [PathQuery] string chat_id,
        [JsonContent] Im.PostImV1ChatsByChatIdChatTabsUpdateTabsBodyDto dto);

    /// <summary>
    /// <para>【消息与群组】会话标签页排序</para>
    /// <para>接口ID：7111246605500628993</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat-tab/sort_tabs</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调整指定会话内的多个会话标签页排列顺序。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 调用当前接口的用户或者机器人必须在对应的会话内。</para>
    /// <para>## 使用限制</para>
    /// <para>- 会话内消息类型的标签页固定为第一顺位，不参与排序，但需要注意请求时 tab_ids 必须包含消息类型标签页的 ID。</para>
    /// <para>- 如果群组配置了 **仅群主和群管理员可以管理标签页**，则仅群主或者群管理员可以调整会话标签页排序。</para>
    /// <para>- 操作内部群时，操作者须与群组在同一租户下。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat.tabs:write_only</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>**注意**：仅支持群模式为 **群组（group）**、**单聊（p2p）** 的群组 ID。你可以调用[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)接口，在返回结果中查看 `chat_mode` 参数取值是否为 `group`、`p2p`。</para>
    /// <para>示例值：oc_a0553eda9014c201e6969b478895c230</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/im/v1/chats/{chat_id}/chat_tabs/sort_tabs")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PostImV1ChatsByChatIdChatTabsSortTabsResponseDto>> PostImV1ChatsByChatIdChatTabsSortTabsAsync(
        [PathQuery] string chat_id,
        [JsonContent] Im.PostImV1ChatsByChatIdChatTabsSortTabsBodyDto dto);

    /// <summary>
    /// <para>【多维表格】批量删除协作者</para>
    /// <para>接口ID：7111246853309071363</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/advanced-permission/app-role-member/batch_delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除多维表格高级权限中自定义角色的协作者。</para>
    /// <para>## 前提条件</para>
    /// <para>要调用协作者相关接口，你需确保多维表格已开启高级权限并设置了自定义角色。你可通过[更新多维表格元数据](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app/update)接口开启高级权限，通过[新增自定义角色](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/create)接口设置自定义角色。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:collaborator:delete</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：bascnnKKvcoUblgmmhZkYqabcef</para>
    /// </param>
    /// <param name="role_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格高级权限中自定义角色的唯一标识，以 rol 开头。获取方式：通过[列出自定义角色](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/list)接口获取。</para>
    /// <para>示例值：rolNGhPqks</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/bitable/v1/apps/{app_token}/roles/{role_id}/members/batch_delete")]
    System.Threading.Tasks.Task<FeishuResponse> PostBitableV1AppsByAppTokenRolesByRoleIdMembersBatchDeleteAsync(
        [PathQuery] string app_token,
        [PathQuery] string role_id,
        [JsonContent] Base.PostBitableV1AppsByAppTokenRolesByRoleIdMembersBatchDeleteBodyDto dto);

    /// <summary>
    /// <para>【多维表格】批量新增协作者</para>
    /// <para>接口ID：7111246853309087747</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/advanced-permission/app-role-member/batch_create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>批量新增多维表格高级权限中自定义角色的协作者。</para>
    /// <para>## 前提条件</para>
    /// <para>要调用协作者相关接口，你需确保多维表格已开启高级权限并设置了自定义角色。你可通过[更新多维表格元数据](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app/update)接口开启高级权限，通过[新增自定义角色](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/create)接口设置自定义角色。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:collaborator:create</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：bascnnKKvcoUblgmmhZkYqabcef</para>
    /// </param>
    /// <param name="role_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格高级权限中自定义角色的唯一标识，以 rol 开头。获取方式：通过[列出自定义角色](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/list)接口获取。</para>
    /// <para>示例值：rolNGhPqks</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/bitable/v1/apps/{app_token}/roles/{role_id}/members/batch_create")]
    System.Threading.Tasks.Task<FeishuResponse> PostBitableV1AppsByAppTokenRolesByRoleIdMembersBatchCreateAsync(
        [PathQuery] string app_token,
        [PathQuery] string role_id,
        [JsonContent] Base.PostBitableV1AppsByAppTokenRolesByRoleIdMembersBatchCreateBodyDto dto);

    /// <summary>
    /// <para>【飞书人事】获取飞书人事对象列表</para>
    /// <para>接口ID：7112009113388105756</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/custom_field/list_object_api_name</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取「飞书人事」中的对象列表，含系统预置对象与自定义对象。使用方式可参考[【操作手册】如何通过 OpenAPI 维护自定义字段](https://feishu.feishu.cn/docx/QlUudBfCtosWMbxx3vxcOFDknn7)</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.meta_data:read</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：11</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/custom_fields/list_object_api_name")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1CustomFieldsListObjectApiNameResponseDto>> GetCorehrV1CustomFieldsListObjectApiNameAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int page_size = 10);

    /// <summary>
    /// <para>【飞书人事】获取自定义字段列表</para>
    /// <para>接口ID：7112009113388122140</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/custom_field/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据对象的 API name，获取「飞书人事」具体对象下的自定义字段列表</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.meta_data:read</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="object_api_name_list">
    /// <para>必填：是</para>
    /// <para>所属对象 API name，支持一个或多个，当前数量限制为 20 个。可从[获取飞书人事对象列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/list_object_api_name)接口列举所有对象及其 API name</para>
    /// <para>示例值：["offboarding_info"]</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/custom_fields/query")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1CustomFieldsQueryResponseDto>> GetCorehrV1CustomFieldsQueryAsync(
        [PathQuery] string[] object_api_name_list);

    /// <summary>
    /// <para>【飞书人事】获取字段详情</para>
    /// <para>接口ID：7112009113388138524</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/custom_field/get_by_param</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取「飞书人事」对象下某字段的详细信息，支持系统预置字段和自定义字段。可通过该接口获取某个选项字段包含的选项列表，某个自定义分组中包含的字段列表等。使用方式可参考「[如何通过 OpenAPI 维护自定义字段](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/how-to)」</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.meta_data:read</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="object_api_name">
    /// <para>必填：是</para>
    /// <para>所属对象 API name，可从[获取飞书人事对象列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/list_object_api_name)接口列举所有对象及其 API name</para>
    /// <para>示例值：offboarding_info</para>
    /// </param>
    /// <param name="custom_api_name">
    /// <para>必填：是</para>
    /// <para>字段 API name，可通过[获取自定义字段列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/query)接口中返回的 `custom_api_name` 字段获取</para>
    /// <para>示例值：custom_field_33__c</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/custom_fields/get_by_param")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1CustomFieldsGetByParamResponseDto>> GetCorehrV1CustomFieldsGetByParamAsync(
        [PathQuery] string object_api_name,
        [PathQuery] string custom_api_name);

    /// <summary>
    /// <para>【多维表格】更新表单问题</para>
    /// <para>接口ID：7112628058154893314</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/form/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新表单中的问题项。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:form:update</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：bascnCMII2ORej2RItqpZZUNMIe</para>
    /// </param>
    /// <param name="table_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格数据表的唯一标识。获取方式：</para>
    /// <para>- 你可通过多维表格 URL 获取 `table_id`，下图高亮部分即为当前数据表的 `table_id`</para>
    /// <para>- 也可通过[列出数据表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list)接口获取 `table_id`</para>
    /// <para>![](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/18741fe2a0d3cafafaf9949b263bb57d_yD1wkOrSju.png?height=746&amp;lazyload=true&amp;maxWidth=700&amp;width=2976)</para>
    /// <para>示例值：tblsRc9GRRXKqhvW</para>
    /// </param>
    /// <param name="form_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格中表单的唯一标识。表单也是视图的一种，其获取方式与获取 `view_id` 相同：</para>
    /// <para>- 在多维表格的 URL 地址栏中，`form_id` 是下图中高亮部分：</para>
    /// <para>![view_id.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/140668632c97e0095832219001d17c54_DJMgVH9x2S.png?height=748&amp;lazyload=true&amp;width=2998)</para>
    /// <para>- 通过[列出视图](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/list)接口获取。暂时无法获取到嵌入到云文档中的多维表格的 `form_id`</para>
    /// <para>示例值：vewTpR1urY</para>
    /// </param>
    /// <param name="field_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>表单问题的唯一标识。表单中的问题本质上是表单视图中的字段，因此你可通过[列出字段](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/list)接口获取表单问题的唯一标识。</para>
    /// <para>示例值：fldjX7dUj5</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/bitable/v1/apps/{app_token}/tables/{table_id}/forms/{form_id}/fields/{field_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Base.PatchBitableV1AppsByAppTokenTablesByTableIdFormsByFormIdFieldsByFieldIdResponseDto>> PatchBitableV1AppsByAppTokenTablesByTableIdFormsByFormIdFieldsByFieldIdAsync(
        [PathQuery] string app_token,
        [PathQuery] string table_id,
        [PathQuery] string form_id,
        [PathQuery] string field_id,
        [JsonContent] Base.PatchBitableV1AppsByAppTokenTablesByTableIdFormsByFormIdFieldsByFieldIdBodyDto dto);

    /// <summary>
    /// <para>【多维表格】列出表单问题</para>
    /// <para>接口ID：7112628058154909698</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/form/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>列出表单中的所有问题项。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:form:read</item>
    /// <item>bitable:app</item>
    /// <item>bitable:app:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：bascnCMII2ORej2RItqpZZUNMIe</para>
    /// </param>
    /// <param name="table_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格数据表的唯一标识。获取方式：</para>
    /// <para>- 你可通过多维表格 URL 获取 `table_id`，下图高亮部分即为当前数据表的 `table_id`</para>
    /// <para>- 也可通过[列出数据表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list)接口获取 `table_id`</para>
    /// <para>![](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/18741fe2a0d3cafafaf9949b263bb57d_yD1wkOrSju.png?height=746&amp;lazyload=true&amp;maxWidth=700&amp;width=2976)</para>
    /// <para>示例值：tblxI2tWaxP5dG7p</para>
    /// </param>
    /// <param name="form_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格中表单的唯一标识。表单也是视图的一种，其获取方式与获取 `view_id` 相同：</para>
    /// <para>- 在多维表格的 URL 地址栏中，`form_id` 是下图中高亮部分：</para>
    /// <para>![view_id.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/140668632c97e0095832219001d17c54_DJMgVH9x2S.png?height=748&amp;lazyload=true&amp;width=2998)</para>
    /// <para>- 通过[列出视图](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/list)接口获取。暂时无法获取到嵌入到云文档中的多维表格的 `form_id`</para>
    /// <para>示例值：vewTpR1urY</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：vewTpR1urY</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/bitable/v1/apps/{app_token}/tables/{table_id}/forms/{form_id}/fields")]
    System.Threading.Tasks.Task<FeishuResponse<Base.GetBitableV1AppsByAppTokenTablesByTableIdFormsByFormIdFieldsResponseDto>> GetBitableV1AppsByAppTokenTablesByTableIdFormsByFormIdFieldsAsync(
        [PathQuery] string app_token,
        [PathQuery] string table_id,
        [PathQuery] string form_id,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【审批】创建审批定义</para>
    /// <para>接口ID：7114621541589712899</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/approval/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于创建审批定义，可以灵活指定审批定义的基础信息、表单和流程等。</para>
    /// <para>## 使用限制</para>
    /// <para>通过该 API 创建的审批定义，无法从审批管理后台或以 API 方式停用、删除，请谨慎调用。不推荐企业自建应用使用该 API 创建审批定义，如有需要，尽量联系企业管理员[在审批管理后台创建定义](https://www.feishu.cn/hc/zh-CN/articles/360040241113-%E7%AE%A1%E7%90%86%E5%91%98%E5%88%9B%E5%BB%BA%E5%AE%A1%E6%89%B9)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval</item>
    /// <item>approval:definition</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 的类型。关于部门 ID 详细介绍参见[部门 ID 介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#9c02ed7a)。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 `od-`，在租户内全局唯一。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/approval/v4/approvals")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.PostApprovalV4ApprovalsResponseDto>> PostApprovalV4ApprovalsAsync(
        [JsonContent] Approval.PostApprovalV4ApprovalsBodyDto dto,
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【审批】获取单个审批实例详情</para>
    /// <para>接口ID：7114621541589729283</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/instance/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过审批实例 Code 获取指定审批实例的详细信息，包括审批实例的名称、创建时间、发起审批的用户、状态以及任务列表等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval</item>
    /// <item>approval:approval:readonly</item>
    /// <item>approval:instance</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="instance_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>审批实例 Code。获取方式：</para>
    /// <para>- [创建审批实例](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/create) 后，从返回结果中获取审批实例 Code。如果在创建的时候传了 uuid 参数，则本参数也可以通过传 uuid 获取指定审批实例详情。</para>
    /// <para>- 调用[批量获取审批实例 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/list)，获取指定审批定义内的审批实例 Code。</para>
    /// <para>- 调用[查询实例列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/query)，设置过滤条件查询指定的审批实例 Code。</para>
    /// <para>示例值：81D31358-93AF-92D6-7425-01A5D67C4E71</para>
    /// </param>
    /// <param name="locale">
    /// <para>必填：否</para>
    /// <para>语言。默认值为[创建审批定义](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/create)时在 i18n_resources 参数中配置的 is_default 取值为 true 的语言。</para>
    /// <para>示例值：zh-CN</para>
    /// <list type="bullet">
    /// <item>zh-CN：中文</item>
    /// <item>en-US：英文</item>
    /// <item>ja-JP：日文</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id">
    /// <para>必填：否</para>
    /// <para>发起审批的用户 ID，ID 类型由 user_id_type 参数指定。</para>
    /// <para>示例值：f7cb567e</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：user_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/approval/v4/instances/{instance_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.GetApprovalV4InstancesByInstanceIdResponseDto>> GetApprovalV4InstancesByInstanceIdAsync(
        [PathQuery] string instance_id,
        [PathQuery] string? locale = null,
        [PathQuery] string? user_id = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【审批】抄送审批实例</para>
    /// <para>接口ID：7114621541589745667</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/instance/cc</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口将当前审批实例抄送给指定用户。被抄送的用户可以查看审批实例详情。例如，在飞书客户端的 **工作台 &gt; 审批 &gt; 审批中心 &gt; 抄送我** 列表中查看到审批实例。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval</item>
    /// <item>approval:approval:readonly</item>
    /// <item>approval:instance</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/approval/v4/instances/cc")]
    System.Threading.Tasks.Task<FeishuResponse> PostApprovalV4InstancesCcAsync(
        [JsonContent] Approval.PostApprovalV4InstancesCcBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【审批】拒绝审批任务</para>
    /// <para>接口ID：7114621541589762051</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/task/reject</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对于单个审批任务进行拒绝操作。拒绝后审批流程结束。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval</item>
    /// <item>approval:approval:readonly</item>
    /// <item>approval:task</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/approval/v4/tasks/reject")]
    System.Threading.Tasks.Task<FeishuResponse> PostApprovalV4TasksRejectAsync(
        [JsonContent] Approval.PostApprovalV4TasksRejectBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【审批】转交审批任务</para>
    /// <para>接口ID：7114621541589778435</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/task/transfer</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对于单个审批任务进行转交操作。转交后审批流程流转给被转交人。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval</item>
    /// <item>approval:approval:readonly</item>
    /// <item>approval:task</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/approval/v4/tasks/transfer")]
    System.Threading.Tasks.Task<FeishuResponse> PostApprovalV4TasksTransferAsync(
        [JsonContent] Approval.PostApprovalV4TasksTransferBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【审批】创建三方审批定义</para>
    /// <para>接口ID：7114621541589794819</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/external_approval/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>三方审批定义用于设置审批的名称、描述等基本信息，同时还需要设置三方审批系统的审批发起页、数据回调 URL 等信息，将飞书审批与三方审批系统关联起来，使企业员工在飞书审批内即可直接发起三方审批，且审批中心可以将审批数据回传给三方审批系统。</para>
    /// <para>## 注意事项</para>
    /// <para>飞书审批中心不负责审批流程的流转，只负责审批的展示、状态操作、消息通知。因此，创建三方审批定义时，没有审批流程的参数配置项。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval</item>
    /// <item>approval:external_approval</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 `od-`，在租户内全局唯一。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/approval/v4/external_approvals")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.PostApprovalV4ExternalApprovalsResponseDto>> PostApprovalV4ExternalApprovalsAsync(
        [JsonContent] Approval.PostApprovalV4ExternalApprovalsBodyDto dto,
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【审批】同步三方审批实例</para>
    /// <para>接口ID：7114621541589811203</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/external_instance/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>审批中心不负责审批的流转，审批的流转在三方系统。本接口用于把三方系统在审批流转后生成的审批实例、审批任务、审批抄送数据同步到审批中心。</para>
    /// <para>## 实现效果</para>
    /// <para>调用本接口同步三方审批实例后，企业员工可以在审批中心浏览同步过来的审批实例、任务、抄送信息，并可以跳转回三方系统查看和操作审批，其中，实例信息在审批中心的 **已发起** 列表、任务信息在 **待办** 和 **已办** 列表、抄送信息在 **抄送我** 列表。</para>
    /// <para>[创建三方审批定义](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_approval/create)时如果设置了三方审批回调 URL，对于审批任务，可以配置[三方快捷审批回调](https://open.feishu.cn/document/ukTMukTMukTM/ukjNyYjL5YjM24SO2IjN/quick-approval-callback)，这样审批人可以在审批中心直接进行审批操作，审批中心会将审批结果回调至三方系统，三方系统收到回调后更新任务信息，并将新的任务信息同步回审批中心，形成闭环。</para>
    /// <para>## 注意事项</para>
    /// <para>需确保审批实例内各类实体（实例、任务、抄送） ID 在审批实例内的唯一性，不属于同一实体之间的 ID 也要确保唯一性。如果实例 ID、任务 ID、抄送 ID 重复，则会导致在审批中心任务看不到对应的审批数据。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval</item>
    /// <item>approval:external_instance</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/approval/v4/external_instances")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.PostApprovalV4ExternalInstancesResponseDto>> PostApprovalV4ExternalInstancesAsync(
        [JsonContent] Approval.PostApprovalV4ExternalInstancesBodyDto dto);

    /// <summary>
    /// <para>【审批】创建审批实例</para>
    /// <para>接口ID：7114621541589827587</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/instance/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用本接口使用指定审批定义 Code 创建一个审批实例，接口调用者需对审批定义的表单有详细了解，按照定义的表单结构，将表单 Value 通过本接口传入。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval</item>
    /// <item>approval:instance</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/approval/v4/instances")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.PostApprovalV4InstancesResponseDto>> PostApprovalV4InstancesAsync(
        [JsonContent] Approval.PostApprovalV4InstancesBodyDto dto);

    /// <summary>
    /// <para>【审批】撤回审批实例</para>
    /// <para>接口ID：7114621541589843971</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/instance/cancel</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>如果企业管理员在审批后台的某一审批定义的 **更多设置** 中，勾选了 **允许撤销审批中的申请** 或者 **允许撤销 x 天内通过的审批**，则在符合撤销规则的情况下，你可以调用本接口将指定提交人的审批实例撤回。</para>
    /// <para>## 注意事项</para>
    /// <para>- 如果撤回的是审批中的实例，则撤回后审批流程结束。</para>
    /// <para>- 如果撤回的是已通过的实例，则审批实例会变更为 **审批中** 的状态。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval</item>
    /// <item>approval:approval:readonly</item>
    /// <item>approval:instance</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/approval/v4/instances/cancel")]
    System.Threading.Tasks.Task<FeishuResponse> PostApprovalV4InstancesCancelAsync(
        [JsonContent] Approval.PostApprovalV4InstancesCancelBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【审批】查看指定审批定义</para>
    /// <para>接口ID：7114621541589860355</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/approval/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据审批定义 Code 以及语言、用户 ID 等筛选条件获取指定审批定义的信息，包括审批定义名称、状态、表单控件以及节点等信息。获取审批定义信息后，可根据信息构造[创建审批实例](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/create)的请求。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval</item>
    /// <item>approval:approval:readonly</item>
    /// <item>approval:definition</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="approval_code">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>审批定义 Code。获取方式：</para>
    /// <para>- 调用[创建审批定义](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/create)接口后，从响应参数 approval_code 获取。</para>
    /// <para>- 登录审批管理后台，在指定审批定义的 URL 中获取，具体操作参见[什么是 Approval Code](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/overview-of-approval-resources#8151e0ae)。</para>
    /// <para>示例值：7C468A54-8745-2245-9675-08B7C63E7A85</para>
    /// </param>
    /// <param name="locale">
    /// <para>必填：否</para>
    /// <para>语言可选值，默认为审批定义配置的默认语言。</para>
    /// <para>示例值：zh-CN</para>
    /// <list type="bullet">
    /// <item>zh-CN：中文</item>
    /// <item>en-US：英文</item>
    /// <item>ja-JP：日文</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="with_admin_id">
    /// <para>必填：否</para>
    /// <para>是否返回有数据管理权限的审批流程管理员 ID 列表（即响应参数 approval_admin_ids）。</para>
    /// <para>**默认值**：false</para>
    /// <para>示例值：false</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/approval/v4/approvals/{approval_code}")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.GetApprovalV4ApprovalsByApprovalCodeResponseDto>> GetApprovalV4ApprovalsByApprovalCodeAsync(
        [PathQuery] string approval_code,
        [PathQuery] string? locale = null,
        [PathQuery] bool? with_admin_id = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【审批】批量获取审批实例 ID</para>
    /// <para>接口ID：7114621541589876739</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/instance/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据审批定义的 approval_code 批量获取审批实例的 instance_code，用于拉取企业下某个审批定义的全部审批实例。默认以审批创建时间先后顺序排列。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval</item>
    /// <item>approval:approval:readonly</item>
    /// <item>approval:instance</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，用于指定一次请求所返回的数据量上限。</para>
    /// <para>示例值：100</para>
    /// <para>默认值：100</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：nF1ZXJ5VGhlbkZldGNoCgAAAAAA6PZwFmUzSldvTC1yU</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="approval_code">
    /// <para>必填：是</para>
    /// <para>审批定义 Code。获取方式：</para>
    /// <para>- 调用[创建审批定义](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/create)接口后，从响应参数 approval_code 获取。</para>
    /// <para>- 登录审批管理后台，在指定审批定义的 URL 中获取，具体操作参见[什么是 Approval Code](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/overview-of-approval-resources#8151e0ae)。</para>
    /// <para>示例值：7C468A54-8745-2245-9675-08B7C63E7A85</para>
    /// </param>
    /// <param name="start_time">
    /// <para>必填：是</para>
    /// <para>审批实例创建时间的开始区间，毫秒时间戳。</para>
    /// <para>**说明**：start_time 与 end_time 组成时间区间查询条件，接口会返回在该时间区间内创建的审批实例数据。</para>
    /// <para>示例值：1567690398020</para>
    /// </param>
    /// <param name="end_time">
    /// <para>必填：是</para>
    /// <para>审批实例创建时间的结束区间，毫秒时间戳。</para>
    /// <para>**说明**：start_time 与 end_time 组成时间区间查询条件，接口会返回在该时间区间内创建的审批实例的 Code。</para>
    /// <para>示例值：1567690398020</para>
    /// </param>
    [HttpGet("/open-apis/approval/v4/instances")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.GetApprovalV4InstancesResponseDto>> GetApprovalV4InstancesAsync(
        [PathQuery] string approval_code,
        [PathQuery] string start_time,
        [PathQuery] string end_time,
        [PathQuery] int? page_size = 100,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【审批】同意审批任务</para>
    /// <para>接口ID：7114621541589893123</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/task/approve</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对于单个审批任务进行同意操作。同意后审批流程会流转到下一个审批人。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval</item>
    /// <item>approval:approval:readonly</item>
    /// <item>approval:task</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/approval/v4/tasks/approve")]
    System.Threading.Tasks.Task<FeishuResponse> PostApprovalV4TasksApproveAsync(
        [JsonContent] Approval.PostApprovalV4TasksApproveBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【审批】校验三方审批实例</para>
    /// <para>接口ID：7114621541589909507</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/external_instance/check</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口校验三方审批实例数据，用于判断服务端数据是否为最新的。请求时提交实例最新更新时间，如果服务端不存在该实例，或者服务端实例更新时间不是最新的，则返回对应实例 ID。</para>
    /// <para>例如，设置定时任务每隔 5 分钟，将最近 5 分钟产生的实例使用该接口进行对比。如果数据在服务端不存在或者不是最新，则可以根据本接口返回的实例 ID、任务 ID，前往[同步三方审批实例](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_instance/create)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval</item>
    /// <item>approval:approval:readonly</item>
    /// <item>approval:external_instance</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/approval/v4/external_instances/check")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.PostApprovalV4ExternalInstancesCheckResponseDto>> PostApprovalV4ExternalInstancesCheckAsync(
        [JsonContent] Approval.PostApprovalV4ExternalInstancesCheckBodyDto dto);

    /// <summary>
    /// <para>【审批】退回审批任务</para>
    /// <para>接口ID：7117964632137089027</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/task/specified_rollback</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>从当前审批任务，退回到已审批的一个或多个任务节点。退回后，已审批节点重新生成审批任务。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval</item>
    /// <item>approval:approval:readonly</item>
    /// <item>approval:task</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/approval/v4/instances/specified_rollback")]
    System.Threading.Tasks.Task<FeishuResponse> PostApprovalV4InstancesSpecifiedRollbackAsync(
        [JsonContent] Approval.PostApprovalV4InstancesSpecifiedRollbackBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【审批】订阅审批事件</para>
    /// <para>接口ID：7117964632137105411</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/event/event-interface/subscribe</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>当应用[订阅审批事件](https://open.feishu.cn/document/ukTMukTMukTM/uUTNz4SN1MjL1UzM)后，需要调用该接口指定审批定义 Code（approval_code）开启订阅，开启后应用才可以接收该审批定义对应的事件。</para>
    /// <para>## 注意事项</para>
    /// <para>- 该接口仅用于开启应用接收审批事件，实际使用时应用还需要订阅所需的审批事件。例如订阅[审批实例状态变更](https://open.feishu.cn/document/ukTMukTMukTM/uIDO24iM4YjLygjN/event/common-event/approval-instance-event)事件。</para>
    /// <para>- 同一应用只需要调用该接口一次即可，无需重复调用该接口。</para>
    /// <para>- 当应用不再需要接收审批事件时，可以调用[取消订阅审批事件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/unsubscribe)接口，进行取消，取消后该应用将不再会收到事件订阅消息。</para>
    /// <para>- 订阅和取消订阅接口的实现都是面向应用的，多个应用可以同时订阅同一个审批定义 Code（approval_code），每个应用在都能收到审批事件。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval</item>
    /// <item>approval:definition</item>
    /// </list></para>
    /// </summary>
    /// <param name="approval_code">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>审批定义 Code。获取方式：</para>
    /// <para>- 调用[创建审批定义](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/create)接口后，从响应参数 approval_code 获取。</para>
    /// <para>- 登录审批管理后台，在指定审批定义的 URL 中获取，具体操作参见[什么是 Approval Code](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/overview-of-approval-resources#8151e0ae)。</para>
    /// <para>示例值：7C468A54-8745-2245-9675-08B7C63E7A85</para>
    /// </param>
    [HttpPost("/open-apis/approval/v4/approvals/{approval_code}/subscribe")]
    System.Threading.Tasks.Task<FeishuResponse> PostApprovalV4ApprovalsByApprovalCodeSubscribeAsync(
        [PathQuery] string approval_code);

    /// <summary>
    /// <para>【审批】删除评论</para>
    /// <para>接口ID：7117964632137121795</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/instance-comment/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除某审批实例下的一条评论或评论回复（不包含审批同意、拒绝、转交等附加的理由或意见），删除后在审批中心的审批实例内不再显示评论内容，而是显示 **评论已删除**。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval</item>
    /// <item>approval:instance.comment</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="instance_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>审批实例 Code。获取方式：</para>
    /// <para>- [创建审批实例](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/create) 后，从返回结果中获取审批实例 Code。</para>
    /// <para>- 调用[批量获取审批实例 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/list)，获取指定审批定义内的审批实例 Code。</para>
    /// <para>- 调用[查询实例列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/query)，设置过滤条件查询指定的审批实例 Code。</para>
    /// <para>说明：支持传入自定义审批实例 ID。</para>
    /// <para>示例值：6A123516-FB88-470D-A428-9AF58B71B3C0</para>
    /// </param>
    /// <param name="comment_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>评论 ID。获取方式：</para>
    /// <para>- 调用[创建评论](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance-comment/create)成功会返回评论 ID。</para>
    /// <para>- 调用[获取评论](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance-comment/list)接口，获取评论 ID。</para>
    /// <para>示例值：7081516627711606803</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：user_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="user_id">
    /// <para>必填：是</para>
    /// <para>用户 ID，ID 类型与 user_id_type 取值一致。</para>
    /// <para>示例值：ou_806a18fb5bdf525e38ba219733bdbd73</para>
    /// </param>
    [HttpDelete("/open-apis/approval/v4/instances/{instance_id}/comments/{comment_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.DeleteApprovalV4InstancesByInstanceIdCommentsByCommentIdResponseDto>> DeleteApprovalV4InstancesByInstanceIdCommentsByCommentIdAsync(
        [PathQuery] string instance_id,
        [PathQuery] string comment_id,
        [PathQuery] string user_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【审批】查询任务列表</para>
    /// <para>接口ID：7117964632137138179</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/approval-search/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口通过不同条件查询审批系统中符合条件的审批任务列表。</para>
    /// <para>## 使用限制</para>
    /// <para>- 该接口会过滤被撤销的审批实例，实例内的任务也会被过滤掉，因此会有任务存在却不返回数据的情况。</para>
    /// <para>该情况的具体表现：返回结果中每页的数据条目数可能小于 page_size 值。例如，page_size 取值为 10，实际查询结果中当前页只显示 6 条数据，则表示有 4 条数据是被撤销实例内的任务。</para>
    /// <para>- 该接口查询结果可能存在延迟，无法保证实时性。如需实时查询，建议使用[查询用户的任务列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/task/query)。</para>
    /// <para>- 查询时：</para>
    /// <para>- user_id、approval_code、instance_code、instance_external_id、group_external_id 不能同时为空。</para>
    /// <para>- approval_code 和 group_external_id 查询结果取并集；instance_code 和 instance_external_id 查询结果取并集；其他查询条件之间均取交集。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval:readonly</item>
    /// <item>approval:approval.list:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小。如果当前页包含被撤销实例内的任务，则查询结果中每页的数据条目数可能小于 page_size 值。例如，page_size 取值为 10，实际查询结果中当前页只显示 6 条数据，则表示有 4 条数据是被撤销实例内的任务。</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：nF1ZXJ5VGhlbkZldGNoCgAAAAAA6PZwFmUzSldvTC1yU</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/approval/v4/tasks/search")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.PostApprovalV4TasksSearchResponseDto>> PostApprovalV4TasksSearchAsync(
        [JsonContent] Approval.PostApprovalV4TasksSearchBodyDto dto,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【审批】创建评论</para>
    /// <para>接口ID：7117964632137154563</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/instance-comment/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>在指定审批实例下创建、修改评论或回复评论（不包含审批同意、拒绝、转交等附加的理由或意见）。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval</item>
    /// <item>approval:instance.comment</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="instance_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>审批实例 Code。获取方式：</para>
    /// <para>- [创建审批实例](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/create) 后，从返回结果中获取审批实例 Code。</para>
    /// <para>- 调用[批量获取审批实例 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/list)，获取指定审批定义内的审批实例 Code。</para>
    /// <para>- 调用[查询实例列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/query)，设置过滤条件查询指定的审批实例 Code。</para>
    /// <para>说明：支持传入自定义审批实例 ID。</para>
    /// <para>示例值：6A123516-FB88-470D-A428-9AF58B71B3C0</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：user_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="user_id">
    /// <para>必填：是</para>
    /// <para>用户 ID，ID 类型与 user_id_type 取值一致。</para>
    /// <para>示例值：e5286g26</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/approval/v4/instances/{instance_id}/comments")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.PostApprovalV4InstancesByInstanceIdCommentsResponseDto>> PostApprovalV4InstancesByInstanceIdCommentsAsync(
        [PathQuery] string instance_id,
        [PathQuery] string user_id,
        [JsonContent] Approval.PostApprovalV4InstancesByInstanceIdCommentsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【审批】获取三方审批任务状态</para>
    /// <para>接口ID：7117964632137170947</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/external_task/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取三方审批的状态。用户传入查询条件，接口返回满足条件的审批实例的状态。</para>
    /// <para>## 提示</para>
    /// <para>该接口支持多种参数的组合，具体请参考请求体示例：</para>
    /// <para>- 通过 instance_ids 获取指定实例的任务状态</para>
    /// <para>- 通过 user_ids 获取指定用户的任务状态</para>
    /// <para>- 通过 status 获取指定状态的所有任务</para>
    /// <para>- 通过page_token获取下一批数据</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval</item>
    /// <item>approval:approval:readonly</item>
    /// <item>approval:external_task</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：50</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：nF1ZXJ5VGhlbkZldGNoCgAAAAAA6PZwFmUzSldvTC1yU</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpGet("/open-apis/approval/v4/external_tasks")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.GetApprovalV4ExternalTasksResponseDto>> GetApprovalV4ExternalTasksAsync(
        [JsonContent] Approval.GetApprovalV4ExternalTasksBodyDto dto,
        [PathQuery] int? page_size = 50,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【审批】查询抄送列表</para>
    /// <para>接口ID：7117964632137187331</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/approval-search/search_cc</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口通过不同条件查询审批系统中符合条件的审批抄送列表。</para>
    /// <para>## 使用限制</para>
    /// <para>- 该接口查询结果可能存在延迟，无法保证实时性。</para>
    /// <para>- 查询时：</para>
    /// <para>- user_id、approval_code、instance_code、instance_external_id、group_external_id 不能同时为空。</para>
    /// <para>- approval_code 和 group_external_id 查询结果取并集；instance_code 和 instance_external_id 查询结果取并集；其他查询条件之间均取交集。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval.list:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：nF1ZXJ5VGhlbkZldGNoCgAAAAAA6PZwFmUzSldvTC1yU</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/approval/v4/instances/search_cc")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.PostApprovalV4InstancesSearchCcResponseDto>> PostApprovalV4InstancesSearchCcAsync(
        [JsonContent] Approval.PostApprovalV4InstancesSearchCcBodyDto dto,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【审批】查询实例列表</para>
    /// <para>接口ID：7117964632137203715</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/approval-search/query-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口通过不同条件查询审批系统中符合条件的审批实例列表。</para>
    /// <para>## 使用限制</para>
    /// <para>- 该接口会过滤被撤销的审批实例，因此会有实例存在却不返回数据的情况。</para>
    /// <para>该情况的具体表现：返回结果中每页的数据条目数可能小于 page_size 值。例如，page_size 取值为 10，实际查询结果中当前页只显示 6 条数据，则表示有 4 条数据是被撤销的审批实例。</para>
    /// <para>- 该接口查询结果可能存在延迟，无法保证实时性。如需实时查询，建议使用[批量获取审批实例 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/list)（该接口只能查询某一审批定义下的审批实例 ID）。</para>
    /// <para>- 查询时：</para>
    /// <para>- user_id、approval_code、instance_code、instance_external_id、group_external_id 不能同时为空。</para>
    /// <para>- approval_code 和 group_external_id 查询结果取并集；instance_code 和 instance_external_id 查询结果取并集；其他查询条件之间均取交集。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval.list:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小。如果当前页包含被撤销的审批实例，则查询结果中每页的数据条目数可能小于 page_size 值。例如，page_size 取值为 10，实际查询结果中当前页只显示 6 条数据，则表示有 4 条数据是被撤销的审批实例。</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：nF1ZXJ5VGhlbkZldGNoCgAAAAAA6PZwFmUzSldvTC1yU</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/approval/v4/instances/query")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.PostApprovalV4InstancesQueryResponseDto>> PostApprovalV4InstancesQueryAsync(
        [JsonContent] Approval.PostApprovalV4InstancesQueryBodyDto dto,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【审批】取消订阅审批事件</para>
    /// <para>接口ID：7117964632137220099</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/event/event-interface/unsubscribe</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用[订阅审批事件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/subscribe)接口订阅审批定义 Code 后，如果不再需要接收该审批定义下的事件订阅通知，可以调用本接口取消订阅审批定义 Code，取消后应用无法再收到该审批定义对应实例的事件通知。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval</item>
    /// <item>approval:definition</item>
    /// </list></para>
    /// </summary>
    /// <param name="approval_code">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>审批定义 Code。获取方式：</para>
    /// <para>- 调用[创建审批定义](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/create)接口后，从响应参数 approval_code 获取。</para>
    /// <para>- 登录审批管理后台，在指定审批定义的 URL 中获取，具体操作参见[什么是 Approval Code](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/overview-of-approval-resources#8151e0ae)。</para>
    /// <para>示例值：7C468A54-8745-2245-9675-08B7C63E7A85</para>
    /// </param>
    [HttpPost("/open-apis/approval/v4/approvals/{approval_code}/unsubscribe")]
    System.Threading.Tasks.Task<FeishuResponse> PostApprovalV4ApprovalsByApprovalCodeUnsubscribeAsync(
        [PathQuery] string approval_code);

    /// <summary>
    /// <para>【审批】获取评论</para>
    /// <para>接口ID：7117964632137236483</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/instance-comment/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据审批实例 Code 获取某个审批实例下，全部评论与评论回复（不包含审批同意、拒绝、转交等附加的理由或意见）。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval</item>
    /// <item>approval:approval:readonly</item>
    /// <item>approval:instance.comment</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="instance_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>审批实例 Code。获取方式：</para>
    /// <para>- [创建审批实例](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/create) 后，从返回结果中获取审批实例 Code。</para>
    /// <para>- 调用[批量获取审批实例 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/list)，获取指定审批定义内的审批实例 Code。</para>
    /// <para>- 调用[查询实例列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/query)，设置过滤条件查询指定的审批实例 Code。</para>
    /// <para>**说明**：支持传入自定义审批实例 ID。</para>
    /// <para>示例值：6A123516-FB88-470D-A428-9AF58B71B3C0</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：user_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="user_id">
    /// <para>必填：是</para>
    /// <para>用户 ID，ID 类型与 user_id_type 取值一致。</para>
    /// <para>示例值：e5286g26</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：nF1ZXJ5VGhlbkZldGNoCgAAAAAA6PZwFmUzSldvTC1yU</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，用于限制一次请求返回的数据量上限。</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    [HttpGet("/open-apis/approval/v4/instances/{instance_id}/comments")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.GetApprovalV4InstancesByInstanceIdCommentsResponseDto>> GetApprovalV4InstancesByInstanceIdCommentsAsync(
        [PathQuery] string instance_id,
        [PathQuery] string user_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10);

    /// <summary>
    /// <para>【审批】清空评论</para>
    /// <para>接口ID：7117964632137252867</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/instance-comment/remove</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>清空某审批实例下的全部评论与评论回复，包括显示为已删除的评论。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval</item>
    /// <item>approval:instance.comment</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="instance_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>审批实例 Code。获取方式：</para>
    /// <para>- [创建审批实例](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/create) 后，从返回结果中获取审批实例 Code。</para>
    /// <para>- 调用[批量获取审批实例 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/list)，获取指定审批定义内的审批实例 Code。</para>
    /// <para>- 调用[查询实例列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/query)，设置过滤条件查询指定的审批实例 Code。</para>
    /// <para>**说明**：支持传入自定义审批实例 ID。</para>
    /// <para>示例值：6A123516-FB88-470D-A428-9AF58B71B3C0</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：user_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="user_id">
    /// <para>必填：否</para>
    /// <para>用户 ID，ID 类型与 user_id_type 取值一致。</para>
    /// <para>示例值：ou_806a18fb5bdf525e38ba219733bdbd73</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpPost("/open-apis/approval/v4/instances/{instance_id}/comments/remove")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.PostApprovalV4InstancesByInstanceIdCommentsRemoveResponseDto>> PostApprovalV4InstancesByInstanceIdCommentsRemoveAsync(
        [PathQuery] string instance_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? user_id = null);

    /// <summary>
    /// <para>【任务】批量删除关注人</para>
    /// <para>接口ID：7118952533649227779</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/task-v1/task-follower/batch_delete_follower</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于批量删除关注人。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务ID</para>
    /// <para>示例值：83912691-2e43-47fc-94a4-d512e03984fa</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v1/tasks/{task_id}/batch_delete_follower")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV1TasksByTaskIdBatchDeleteFollowerResponseDto>> PostTaskV1TasksByTaskIdBatchDeleteFollowerAsync(
        [PathQuery] string task_id,
        [JsonContent] Task.PostTaskV1TasksByTaskIdBatchDeleteFollowerBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】批量删除执行者</para>
    /// <para>接口ID：7118952533649244163</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/task-v1/task-collaborator/batch_delete_collaborator</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于批量删除执行者。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务ID</para>
    /// <para>示例值：83912691-2e43-47fc-94a4-d512e03984fa</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v1/tasks/{task_id}/batch_delete_collaborator")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV1TasksByTaskIdBatchDeleteCollaboratorResponseDto>> PostTaskV1TasksByTaskIdBatchDeleteCollaboratorAsync(
        [PathQuery] string task_id,
        [JsonContent] Task.PostTaskV1TasksByTaskIdBatchDeleteCollaboratorBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【多维表格】更新表单元数据</para>
    /// <para>接口ID：7119425455108669468</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/form/patch-2</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新表单视图中的元数据，包括表单名称、描述、是否共享等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:form:update</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：bascnv1jIEppJdTCn3jOosabcef</para>
    /// </param>
    /// <param name="table_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格数据表的唯一标识。获取方式：</para>
    /// <para>- 你可通过多维表格 URL 获取 `table_id`，下图高亮部分即为当前数据表的 `table_id`</para>
    /// <para>- 也可通过[列出数据表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list)接口获取 `table_id`</para>
    /// <para>![](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/18741fe2a0d3cafafaf9949b263bb57d_yD1wkOrSju.png?height=746&amp;lazyload=true&amp;maxWidth=700&amp;width=2976)</para>
    /// <para>示例值：tblz8nadEUdxNMt5</para>
    /// </param>
    /// <param name="form_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格中表单的唯一标识。表单也是视图的一种，其获取方式与获取 `view_id` 相同：</para>
    /// <para>- 在多维表格的 URL 地址栏中，`form_id` 是下图中高亮部分：</para>
    /// <para>![view_id.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/140668632c97e0095832219001d17c54_DJMgVH9x2S.png?height=748&amp;lazyload=true&amp;width=2998)</para>
    /// <para>- 通过[列出视图](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/list)接口获取。暂时无法获取到嵌入到云文档中的多维表格的 `form_id`</para>
    /// <para>示例值：vew6oMbAa4</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/bitable/v1/apps/{app_token}/tables/{table_id}/forms/{form_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Base.PatchBitableV1AppsByAppTokenTablesByTableIdFormsByFormIdResponseDto>> PatchBitableV1AppsByAppTokenTablesByTableIdFormsByFormIdAsync(
        [PathQuery] string app_token,
        [PathQuery] string table_id,
        [PathQuery] string form_id,
        [JsonContent] Base.PatchBitableV1AppsByAppTokenTablesByTableIdFormsByFormIdBodyDto dto);

    /// <summary>
    /// <para>【多维表格】获取表单元数据</para>
    /// <para>接口ID：7119425455108685852</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/form/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取表单的所有元数据，包括表单名称、描述、是否共享等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:form:read</item>
    /// <item>bitable:app</item>
    /// <item>bitable:app:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：bascnv1jIEppJdTCn3jOosabcef</para>
    /// </param>
    /// <param name="table_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格数据表的唯一标识。获取方式：</para>
    /// <para>- 你可通过多维表格 URL 获取 `table_id`，下图高亮部分即为当前数据表的 `table_id`</para>
    /// <para>- 也可通过[列出数据表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list)接口获取 `table_id`</para>
    /// <para>![](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/18741fe2a0d3cafafaf9949b263bb57d_yD1wkOrSju.png?height=746&amp;lazyload=true&amp;maxWidth=700&amp;width=2976)</para>
    /// <para>示例值：tblz8nadEUdxNMt5</para>
    /// </param>
    /// <param name="form_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格中表单的唯一标识。表单也是视图的一种，其获取方式与获取 `view_id` 相同：</para>
    /// <para>- 在多维表格的 URL 地址栏中，`form_id` 是下图中高亮部分：</para>
    /// <para>![view_id.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/140668632c97e0095832219001d17c54_DJMgVH9x2S.png?height=748&amp;lazyload=true&amp;width=2998)</para>
    /// <para>- 通过[列出视图](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/list)接口获取。暂时无法获取到嵌入到云文档中的多维表格的 `form_id`</para>
    /// <para>示例值：vew6oMbAa4</para>
    /// </param>
    [HttpGet("/open-apis/bitable/v1/apps/{app_token}/tables/{table_id}/forms/{form_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Base.GetBitableV1AppsByAppTokenTablesByTableIdFormsByFormIdResponseDto>> GetBitableV1AppsByAppTokenTablesByTableIdFormsByFormIdAsync(
        [PathQuery] string app_token,
        [PathQuery] string table_id,
        [PathQuery] string form_id);

    /// <summary>
    /// <para>【云文档】修改电子表格属性</para>
    /// <para>接口ID：7120425077330903068</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于修改电子表格的属性。目前支持修改电子表格标题。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}")]
    System.Threading.Tasks.Task<FeishuResponse> PatchSheetsV3SpreadsheetsBySpreadsheetTokenAsync(
        [PathQuery] string spreadsheet_token,
        [JsonContent] Ccm.PatchSheetsV3SpreadsheetsBySpreadsheetTokenBodyDto dto);

    /// <summary>
    /// <para>【云文档】获取电子表格信息</para>
    /// <para>接口ID：7120425077330919452</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据电子表格 token 获取电子表格的基础信息，包括电子表格的所有者、URL 链接等。</para>
    /// <para>## 前提条件</para>
    /// <para>调用此接口前，请确保当前调用身份（tenant_access_token 或 user_access_token）已有电子表格的阅读、编辑等文档权限，否则接口将返回 HTTP 403 或 400 状态码。了解更多，参考[如何为应用或用户开通文档权限](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#16c6475a)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetSheetsV3SpreadsheetsBySpreadsheetTokenResponseDto>> GetSheetsV3SpreadsheetsBySpreadsheetTokenAsync(
        [PathQuery] string spreadsheet_token,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】查询工作表</para>
    /// <para>接口ID：7120425077330935836</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet-sheet/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据工作表 ID 查询工作表属性信息，包括工作表的标题、索引位置、是否被隐藏等。</para>
    /// <para>## 前提条件</para>
    /// <para>调用此接口前，请确保当前调用身份（tenant_access_token 或 user_access_token）已有电子表格的阅读、编辑等文档权限，否则接口将返回 HTTP 403 或 400 状态码。了解更多，参考[如何为应用或用户开通文档权限](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#16c6475a)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    /// <param name="sheet_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工作表的 ID。调用[获取工作表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query)获取 ID。</para>
    /// <para>示例值：giDk9k</para>
    /// </param>
    [HttpGet("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}/sheets/{sheet_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdResponseDto>> GetSheetsV3SpreadsheetsBySpreadsheetTokenSheetsBySheetIdAsync(
        [PathQuery] string spreadsheet_token,
        [PathQuery] string sheet_id);

    /// <summary>
    /// <para>【云文档】获取工作表</para>
    /// <para>接口ID：7120425077330952220</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/sheets-v3/spreadsheet-sheet/query</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据电子表格 token 获取表格中所有工作表及其属性信息，包括工作表 ID、标题、索引位置、是否被隐藏等。</para>
    /// <para>## 前提条件</para>
    /// <para>调用此接口前，请确保当前调用身份（tenant_access_token 或 user_access_token）已有电子表格的阅读、编辑等文档权限，否则接口将返回 HTTP 403 或 400 状态码。了解更多，参考[如何为应用或用户开通文档权限](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#16c6475a)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>sheets:spreadsheet:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="spreadsheet_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>电子表格的 token。可通过以下两种方式获取。了解更多，参考[电子表格概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。</para>
    /// <para>- 电子表格的 URL：https://sample.feishu.cn/sheets/==Iow7sNNEphp3WbtnbCscPqabcef==</para>
    /// <para>- 调用[获取文件夹中的文件清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list)</para>
    /// <para>示例值：Iow7sNNEphp3WbtnbCscPqabcef</para>
    /// </param>
    [HttpGet("/open-apis/sheets/v3/spreadsheets/{spreadsheet_token}/sheets/query")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetSheetsV3SpreadsheetsBySpreadsheetTokenSheetsQueryResponseDto>> GetSheetsV3SpreadsheetsBySpreadsheetTokenSheetsQueryAsync(
        [PathQuery] string spreadsheet_token);

    /// <summary>
    /// <para>【主数据】用户数据维度绑定</para>
    /// <para>接口ID：7120547953915510787</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mdm-v1/user_auth_data_relation/bind</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过该接口，可为指定应用下的用户绑定一类数据维度，支持批量给多个用户同时增量授权。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mdm:user_auth</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/mdm/v1/user_auth_data_relations/bind")]
    System.Threading.Tasks.Task<FeishuResponse> PostMdmV1UserAuthDataRelationsBindAsync(
        [JsonContent] Mdm.PostMdmV1UserAuthDataRelationsBindBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【主数据】用户数据维度解绑</para>
    /// <para>接口ID：7120547953915527171</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mdm-v1/user_auth_data_relation/unbind</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过该接口，可为指定应用下的指定用户解除一类数据维度。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mdm:user_auth</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/mdm/v1/user_auth_data_relations/unbind")]
    System.Threading.Tasks.Task<FeishuResponse> PostMdmV1UserAuthDataRelationsUnbindAsync(
        [JsonContent] Mdm.PostMdmV1UserAuthDataRelationsUnbindBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】获取协作者列表</para>
    /// <para>接口ID：7121656165336367106</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/permission/permission-member/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于根据文件的 token 查询协作者。</para>
    /// <para>## 前提条件</para>
    /// <para>调用该接口前，你需确保当前应用或用户具有文档的分享权限。了解更多，参考[如何为应用或用户开通文档权限](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#16c6475a)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>bitable:app</item>
    /// <item>bitable:bitable</item>
    /// <item>docs:doc</item>
    /// <item>docs:permission.member:retrieve</item>
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>wiki:wiki</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:user.base:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文件的 token，获取方式见 [如何获取云文档资源相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)</para>
    /// <para>示例值：doccnBKgoMyY5OMbUG6FioTXuBe</para>
    /// </param>
    /// <param name="type">
    /// <para>必填：是</para>
    /// <para>文件类型，需要与文件的 token 相匹配</para>
    /// <para>示例值：doc</para>
    /// <list type="bullet">
    /// <item>doc：文档</item>
    /// <item>sheet：电子表格</item>
    /// <item>file：云空间文件</item>
    /// <item>wiki：知识库节点</item>
    /// <item>bitable：多维表格</item>
    /// <item>docx：新版文档</item>
    /// <item>mindnote：思维笔记</item>
    /// <item>minutes：妙记</item>
    /// <item>slides：幻灯片</item>
    /// </list>
    /// </param>
    /// <param name="fields">
    /// <para>必填：否</para>
    /// <para>指定返回的协作者字段信息，如无指定则默认不返回</para>
    /// <para>**可选值有：**</para>
    /// <para>- `name`：协作者名</para>
    /// <para>- `type`：协作者类型</para>
    /// <para>- `avatar`：头像</para>
    /// <para>- `external_label`：外部标签</para>
    /// <para>**注意：**</para>
    /// <para>- 你可以使用特殊值`*`指定返回目前支持的所有字段</para>
    /// <para>- 你可以使用`,`分隔若干个你想指定返回的字段，如：`name,avatar`</para>
    /// <para>- 按需指定返回字段接口性能更好</para>
    /// <para>示例值：*</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="perm_type">
    /// <para>必填：否</para>
    /// <para>协作者的权限角色类型</para>
    /// <para>示例值：container</para>
    /// <list type="bullet">
    /// <item>container：当前页面及子页面</item>
    /// <item>single_page：仅当前页面，当且仅当在知识库文档中该参数有效</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/drive/v1/permissions/{token}/members")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDriveV1PermissionsByTokenMembersResponseDto>> GetDriveV1PermissionsByTokenMembersAsync(
        [PathQuery] string token,
        [PathQuery] string type,
        [PathQuery] string? fields = null,
        [PathQuery] string? perm_type = null);

    /// <summary>
    /// <para>【通讯录】恢复已删除用户</para>
    /// <para>接口ID：7122710137048399875</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/user/resurrect</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于恢复已删除用户（已离职的成员）。</para>
    /// <para>## 使用限制</para>
    /// <para>- 该接口仅适用于飞书商业专业版、商业旗舰版、企业标准版、企业专业版、企业旗舰版。版本信息参见[版本对比](https://www.feishu.cn/service)。</para>
    /// <para>- 该接口仅适用于企业自建应用，商店应用无权限调用此接口。应用类型介绍参见[应用类型简介](https://open.feishu.cn/document/home/app-types-introduction/overview)。</para>
    /// <para>## 注意事项</para>
    /// <para>- 调用该接口仅支持恢复离职 30 天内的成员。恢复后，部分用户数据仍不可恢复，请谨慎调用。</para>
    /// <para>- 可恢复的数据：单聊记录、外部联系人、群聊、企业邮箱地址和邮件；未转移的文档、妙记、问卷。</para>
    /// <para>- 不可恢复的数据：已转移的资源、成员所属部门、管理员角色等数据。</para>
    /// <para>- 待恢复成员的用户 ID 不能被企业内其他成员使用。如有重复，请先离职重复 ID 的成员，否则接口会报错。</para>
    /// <para>- 待恢复成员的手机号和邮箱不能被企业内其他成员使用。如有重复，请先修改重复成员的手机号或邮箱信息，否则接口会报错。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户 ID。ID 类型需要与查询参数中的 user_id_type类型保持一致。用户 ID 获取方式可参见[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)。</para>
    /// <para>示例值：ou_7dab8a3d3cdcc9da365777c7ad535d62</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：user_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。</para>
    /// <para>示例值：department_id</para>
    /// <list type="bullet">
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 od-，在租户内全局唯一。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/contact/v3/users/{user_id}/resurrect")]
    System.Threading.Tasks.Task<FeishuResponse> PostContactV3UsersByUserIdResurrectAsync(
        [PathQuery] string user_id,
        [JsonContent] Contact.PostContactV3UsersByUserIdResurrectBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【云文档】批量获取评论</para>
    /// <para>接口ID：7123144042921590786</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/CommentAPI/batch_query</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于根据评论 ID 列表批量获取云文档评论信息，包括评论和回复 ID、回复的内容、评论人和回复人的用户 ID 等。支持返回全局评论以及局部评论（可通过 is_whole 字段区分）。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:document.comment:read</item>
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文档 Token</para>
    /// <para>示例值：doxbcdl03Vsxhm7Qmnj110abcef</para>
    /// </param>
    /// <param name="file_type">
    /// <para>必填：是</para>
    /// <para>云文档类型</para>
    /// <para>示例值：docx</para>
    /// <list type="bullet">
    /// <item>doc：旧版文档类型，已不推荐使用</item>
    /// <item>docx：新版文档类型</item>
    /// <item>sheet：电子表格类型</item>
    /// <item>file：文件类型</item>
    /// <item>slides：幻灯片</item>
    /// </list>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/drive/v1/files/{file_token}/comments/batch_query")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostDriveV1FilesByFileTokenCommentsBatchQueryResponseDto>> PostDriveV1FilesByFileTokenCommentsBatchQueryAsync(
        [PathQuery] string file_token,
        [PathQuery] string file_type,
        [JsonContent] Ccm.PostDriveV1FilesByFileTokenCommentsBatchQueryBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】获取回复信息</para>
    /// <para>接口ID：7123144042921607170</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/CommentAPI/list-2</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于根据评论 ID，获取该条评论对应的回复信息，包括回复 ID、回复内容、回复人的用户 ID 等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:document.comment:read</item>
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文档 Token</para>
    /// <para>示例值：doxbcdl03Vsxhm7Qmnj110abcef</para>
    /// </param>
    /// <param name="comment_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>评论 ID</para>
    /// <para>示例值：1654857036541812356</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：1654857036541812356</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="file_type">
    /// <para>必填：是</para>
    /// <para>云文档类型</para>
    /// <para>示例值：docx</para>
    /// <list type="bullet">
    /// <item>doc：旧版文档，已不推荐使用</item>
    /// <item>docx：新版文档类型</item>
    /// <item>sheet：电子表格类型</item>
    /// <item>file：文件夹类型</item>
    /// <item>slides：幻灯片</item>
    /// </list>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/drive/v1/files/{file_token}/comments/{comment_id}/replies")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDriveV1FilesByFileTokenCommentsByCommentIdRepliesResponseDto>> GetDriveV1FilesByFileTokenCommentsByCommentIdRepliesAsync(
        [PathQuery] string file_token,
        [PathQuery] string comment_id,
        [PathQuery] string file_type,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】导出参会人明细</para>
    /// <para>接口ID：7124195547444477980</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/export/participant_list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>导出某个会议的参会人详情列表，具体权限要求请参考「资源介绍」。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:export</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/vc/v1/exports/participant_list")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.PostVcV1ExportsParticipantListResponseDto>> PostVcV1ExportsParticipantListAsync(
        [JsonContent] Vc.PostVcV1ExportsParticipantListBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】导出参会人会议质量数据</para>
    /// <para>接口ID：7124195547444494364</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/export/participant_quality_list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>导出某场会议某个参会人的音视频&amp;共享质量数据</para>
    /// <para>（仅支持已结束会议），具体权限要求请参考「资源介绍」。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:export</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/vc/v1/exports/participant_quality_list")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.PostVcV1ExportsParticipantQualityListResponseDto>> PostVcV1ExportsParticipantQualityListAsync(
        [JsonContent] Vc.PostVcV1ExportsParticipantQualityListBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】导出会议室预定数据</para>
    /// <para>接口ID：7124195547444510748</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/export/resource_reservation_list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>导出会议室预定数据，具体权限要求请参考「资源介绍」。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:export</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/vc/v1/exports/resource_reservation_list")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.PostVcV1ExportsResourceReservationListResponseDto>> PostVcV1ExportsResourceReservationListAsync(
        [JsonContent] Vc.PostVcV1ExportsResourceReservationListBodyDto dto);

    /// <summary>
    /// <para>【视频会议】查询导出任务结果</para>
    /// <para>接口ID：7124195547444527132</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/export/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>查看异步导出的进度。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:export</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务id</para>
    /// <para>示例值：7108646852144136212</para>
    /// </param>
    [HttpGet("/open-apis/vc/v1/exports/{task_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.GetVcV1ExportsByTaskIdResponseDto>> GetVcV1ExportsByTaskIdAsync(
        [PathQuery] string task_id);

    /// <summary>
    /// <para>【视频会议】导出会议明细</para>
    /// <para>接口ID：7124235806021238785</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/export/meeting_list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>导出会议明细，具体权限要求请参考资源介绍。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:export</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/vc/v1/exports/meeting_list")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.PostVcV1ExportsMeetingListResponseDto>> PostVcV1ExportsMeetingListAsync(
        [JsonContent] Vc.PostVcV1ExportsMeetingListBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】批量获取人才ID</para>
    /// <para>接口ID：7125370772851458076</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/talent/batch_get_id</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过手机号、邮箱、证件号，批量查询人才ID</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:talent</item>
    /// <item>hire:talent:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>hire:talent_onboard_status:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/talents/batch_get_id")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1TalentsBatchGetIdResponseDto>> PostHireV1TalentsBatchGetIdAsync(
        [JsonContent] Hire.PostHireV1TalentsBatchGetIdBodyDto dto);

    /// <summary>
    /// <para>【飞书人事】批量查询员工假期余额</para>
    /// <para>接口ID：7126729166647869443</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/leave/leave_balances</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量获取员工各个假期的余额数据。对应页面为假勤管理-休假管理-[假期报表](https://example.feishu.cn/people/workforce-management/manage/leave/leave_admin/balance)</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// <item>corehr:leave:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：`{"eu_nc":"[\"6994333322503669260\"]"}`</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：20</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="as_of_date">
    /// <para>必填：否</para>
    /// <para>查询截止日期，即截止到某天余额数据的日期（不传则默认为当天）。格式为yyyy-MM-dd</para>
    /// <para>示例值：2022-07-29</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="employment_id_list">
    /// <para>必填：否</para>
    /// <para>员工 ID 列表，最大 100 个（不传则默认查询全部员工），对应user_id_type。请注意：此接口为get请求，所以传入数组时需要满足get请求传入数组的规范，例如employment_id_list=6919733291281024522&amp;employment_id_list=6919733291281024523</para>
    /// <para>示例值：["6919733291281024526"]</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="time_zone">
    /// <para>必填：否</para>
    /// <para>查询时区</para>
    /// <para>示例值：Asia/Shanghai</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="include_offboard">
    /// <para>必填：否</para>
    /// <para>是否获取离职折算字段，默认值为false</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/leaves/leave_balances")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1LeavesLeaveBalancesResponseDto>> GetCorehrV1LeavesLeaveBalancesAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int page_size = 10,
        [PathQuery] string? as_of_date = null,
        [PathQuery] string[]? employment_id_list = null,
        [PathQuery] string? user_id_type = "people_corehr_id",
        [PathQuery] string? time_zone = null,
        [PathQuery] bool? include_offboard = null);

    /// <summary>
    /// <para>【飞书人事】获取假期类型列表</para>
    /// <para>接口ID：7126729166647885827</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/leave/leave_types</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取休假设置后台配置的假期类型列表（比如年假、事假、婚假等）。对应页面功能为设置-假勤设置-[假期类型](https://example.feishu.cn/people/workforce-management/setting/leave/leave_admin/leave_type)</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.preset_data:read</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// <item>corehr:leave:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="status">
    /// <para>必填：否</para>
    /// <para>假期类型状态（不传则为全部）</para>
    /// <para>可选值有：</para>
    /// <para>- 1：已启用</para>
    /// <para>- 2：已停用</para>
    /// <para>示例值：1</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/leaves/leave_types")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1LeavesLeaveTypesResponseDto>> GetCorehrV1LeavesLeaveTypesAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int page_size = 10,
        [PathQuery] string? status = null,
        [PathQuery] string? user_id_type = "people_corehr_id");

    /// <summary>
    /// <para>【飞书人事】批量查询员工请假记录</para>
    /// <para>接口ID：7126729166647902211</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/leave/leave_request_history</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量获取员工的请假记录数据。对应页面为假勤管理-休假管理-[请假记录](https://example.feishu.cn/people/workforce-management/manage/leave/leave_admin/leave_request)</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// <item>corehr:leave:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：[1712932008000,"7356863257632491046"]</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="employment_id_list">
    /// <para>必填：否</para>
    /// <para>员工 ID 列表，最大 100 个（不传则默认查询全部员工），ID 类型与 user_id_type 一致。请注意：此接口为get请求，所以传入数组时需要满足get请求传入数组的规范，例如employment_id_list=6919733291281024522&amp;employment_id_list=6919733291281024523</para>
    /// <para>示例值：["6919733291281024526"]</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="initiator_id_list">
    /// <para>必填：否</para>
    /// <para>休假发起人 ID 列表，最大 100 个，ID 类型与 user_id_type 一致。请注意：此接口为get请求，所以传入数组时需要满足get请求传入数组的规范，例如initiator_id_list=6919733291281024522&amp;initiator_id_list=6919733291281024523</para>
    /// <para>示例值：["6919733291281024526"]</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="leave_request_status">
    /// <para>必填：否</para>
    /// <para>请假记录的状态，不填为不过滤状态。请注意：此接口为get请求，所以传入数组时需要满足get请求传入数组的规范，例如leave_request_status =1&amp;leave_request_status=2</para>
    /// <para>可选值有：</para>
    /// <para>- 1：已通过</para>
    /// <para>- 2：审批中</para>
    /// <para>- 3：审批中（更正）</para>
    /// <para>- 4：审批中（取消休假）</para>
    /// <para>- 5：审批中（返岗）</para>
    /// <para>- 6：已返岗</para>
    /// <para>- 7：已拒绝</para>
    /// <para>- 8：已取消</para>
    /// <para>- 9：已撤回</para>
    /// <para>示例值：["1", "2"]</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="leave_type_id_list">
    /// <para>必填：否</para>
    /// <para>假期类型 ID 列表，枚举值可通过[获取假期类型列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave/leave_types)接口获取。请注意：此接口为get请求，所以传入数组时需要满足get请求传入数组的规范，例如leave_type_id_list =4718803945687580501&amp;leave_type_id_list=4718803945687580500</para>
    /// <para>示例值：["1"]</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="leave_start_date_min">
    /// <para>必填：否</para>
    /// <para>休假开始时间晚于等于的日期，格式为yyyy-MM-dd</para>
    /// <para>示例值：2022-07-20</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="leave_start_date_max">
    /// <para>必填：否</para>
    /// <para>休假开始时间早于等于的日期，格式为yyyy-MM-dd</para>
    /// <para>示例值：2022-07-20</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="leave_end_date_min">
    /// <para>必填：否</para>
    /// <para>休假结束时间晚于等于的日期，格式为yyyy-MM-dd</para>
    /// <para>示例值：2022-07-20</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="leave_end_date_max">
    /// <para>必填：否</para>
    /// <para>休假结束时间早于等于的日期，格式为yyyy-MM-dd</para>
    /// <para>示例值：2022-07-20</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="leave_submit_date_min">
    /// <para>必填：否</para>
    /// <para>休假发起时间晚于等于的日期，格式为yyyy-MM-dd</para>
    /// <para>示例值：2022-07-20</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="leave_submit_date_max">
    /// <para>必填：否</para>
    /// <para>休假发起时间早于等于的日期，格式为yyyy-MM-dd</para>
    /// <para>示例值：2022-07-20</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="leave_update_time_min">
    /// <para>必填：否</para>
    /// <para>请假记录更新时间晚于等于的时间，格式为yyyy-MM-dd HH:mm:ss</para>
    /// <para>示例值：2022-10-24 10:00:00</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="leave_update_time_max">
    /// <para>必填：否</para>
    /// <para>请假记录更新时间早于等于的时间，格式为yyyy-MM-dd HH:mm:ss</para>
    /// <para>示例值：2022-10-24 10:00:00</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="return_detail">
    /// <para>必填：否</para>
    /// <para>（暂未开放）是否返回请假详情，若为true，将在每条请假记录的details字段返回请假详情</para>
    /// <para>示例值：false</para>
    /// <para>默认值：false</para>
    /// </param>
    /// <param name="leave_term_type">
    /// <para>必填：否</para>
    /// <para>指定过滤长/短假类型，0表示不过滤，1表示仅获取短假，2表示仅获取长假, 默认0</para>
    /// <para>示例值：1</para>
    /// <para>默认值：0</para>
    /// </param>
    /// <param name="time_zone">
    /// <para>必填：否</para>
    /// <para>请假记录所在时区</para>
    /// <para>示例值：Asia/Shanghai</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="data_source">
    /// <para>必填：否</para>
    /// <para>（暂未开放）请假记录数据源，1表示中国大陆休假，2表示海外休假，不传或0表示不过滤</para>
    /// <para>示例值：1</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="db_update_time_min">
    /// <para>必填：否</para>
    /// <para>（暂未开放）请假记录DB更新时间晚于等于的时间，格式为yyyy-MM-dd HH:mm:ss</para>
    /// <para>示例值：2022-10-24 10:00:00</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="db_update_time_max">
    /// <para>必填：否</para>
    /// <para>（暂未开放）请假记录DB更新时间早于等于的时间，格式为yyyy-MM-dd HH:mm:ss</para>
    /// <para>示例值：2022-10-24 10:00:00</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="wd_need_amount_zero_records">
    /// <para>必填：否</para>
    /// <para>WorkDay专用 是否返回0值的请假记录，若为true，将返回0值的请假记录</para>
    /// <para>示例值：false</para>
    /// <para>默认值：false</para>
    /// </param>
    /// <param name="wd_need_denied_and_canceled_record">
    /// <para>必填：否</para>
    /// <para>WorkDay专用 是否拒绝和取消的请假记录，若为true，将返回拒绝和取消的请假记录</para>
    /// <para>示例值：false</para>
    /// <para>默认值：false</para>
    /// </param>
    /// <param name="wd_paid_type">
    /// <para>必填：否</para>
    /// <para>WorkDay专用 扣薪类型, 1不参与算薪 2影响算薪 3不影响算薪</para>
    /// <para>示例值：1</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/leaves/leave_request_history")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1LeavesLeaveRequestHistoryResponseDto>> GetCorehrV1LeavesLeaveRequestHistoryAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int page_size = 10,
        [PathQuery] string[]? employment_id_list = null,
        [PathQuery] string[]? initiator_id_list = null,
        [PathQuery] string[]? leave_request_status = null,
        [PathQuery] string[]? leave_type_id_list = null,
        [PathQuery] string? leave_start_date_min = null,
        [PathQuery] string? leave_start_date_max = null,
        [PathQuery] string? leave_end_date_min = null,
        [PathQuery] string? leave_end_date_max = null,
        [PathQuery] string? leave_submit_date_min = null,
        [PathQuery] string? leave_submit_date_max = null,
        [PathQuery] string? user_id_type = "people_corehr_id",
        [PathQuery] string? leave_update_time_min = null,
        [PathQuery] string? leave_update_time_max = null,
        [PathQuery] bool? return_detail = false,
        [PathQuery] int? leave_term_type = 0,
        [PathQuery] string? time_zone = null,
        [PathQuery] int? data_source = null,
        [PathQuery] string? db_update_time_min = null,
        [PathQuery] string? db_update_time_max = null,
        [PathQuery] bool? wd_need_amount_zero_records = false,
        [PathQuery] bool? wd_need_denied_and_canceled_record = false,
        [PathQuery] int? wd_paid_type = null);

    /// <summary>
    /// <para>【飞书人事】删除假期发放记录</para>
    /// <para>接口ID：7127187941650595843</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/leave/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除飞书人事休假系统中的发放记录，假勤管理-休假管理-[发放记录](https://example.feishu.cn/people/workforce-management/manage/leave/leave_admin/granting_record)（仅支持删除发放来源是「手动发放」或「外部系统发放」的记录）。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:leave_granting_record:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="leave_granting_record_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>假期发放记录 ID，从[创建假期发放记录](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave_granting_record/create)中可以获得</para>
    /// <para>示例值：6893014062142064135</para>
    /// </param>
    [HttpDelete("/open-apis/corehr/v1/leave_granting_records/{leave_granting_record_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCorehrV1LeaveGrantingRecordsByLeaveGrantingRecordIdAsync(
        [PathQuery] string leave_granting_record_id);

    /// <summary>
    /// <para>【飞书人事】创建假期发放记录</para>
    /// <para>接口ID：7127187941650612227</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/leave/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>向飞书人事休假系统写入假期发放记录。对应假勤管理-休假管理-[发放记录](https://example.feishu.cn/people/workforce-management/manage/leave/leave_admin/granting_record)的创建或者导入功能</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:leave_granting_record:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的ID来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/leave_granting_records")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1LeaveGrantingRecordsResponseDto>> PostCorehrV1LeaveGrantingRecordsAsync(
        [JsonContent] FeishuPeople.PostCorehrV1LeaveGrantingRecordsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【多维表格】列出仪表盘</para>
    /// <para>接口ID：7127206859065638914</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-dashboard/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取多维表格中的所有仪表盘。</para>
    /// <para>## 前提条件</para>
    /// <para>调用此接口前，请确保当前调用身份（tenant_access_token 或 user_access_token）已有多维表格的阅读等文档权限，否则接口将返回 HTTP 403 或 400 状态码。了解更多，参考[如何为应用或用户开通文档权限](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#16c6475a)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:dashboard:read</item>
    /// <item>bitable:app</item>
    /// <item>bitable:app:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：bascng7vrxcxpig7geggXiCtadY</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：blknkqrP3RqUkcAW</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/bitable/v1/apps/{app_token}/dashboards")]
    System.Threading.Tasks.Task<FeishuResponse<Base.GetBitableV1AppsByAppTokenDashboardsResponseDto>> GetBitableV1AppsByAppTokenDashboardsAsync(
        [PathQuery] string app_token,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【招聘】获取笔试列表</para>
    /// <para>接口ID：7127207246887796740</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/exam/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量获取人才在投递流程中的笔试信息。如作答状态、笔试得分等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:exam</item>
    /// <item>hire:exam:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE2Mjc1NTUyMjM2NzIsImlkIjpudWxsfQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>每页获取记录数量</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/tests/search")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1TestsSearchResponseDto>> PostHireV1TestsSearchAsync(
        [JsonContent] Hire.PostHireV1TestsSearchBodyDto dto,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【审批】重新提交审批任务</para>
    /// <para>接口ID：7127897901158842396</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/approval-v4/task/resubmit</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对于退回到发起人的审批任务进行重新发起操作。发起后审批流程会流转到下一个审批人。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval</item>
    /// <item>approval:approval:readonly</item>
    /// <item>approval:task</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/approval/v4/tasks/resubmit")]
    System.Threading.Tasks.Task<FeishuResponse> PostApprovalV4TasksResubmitAsync(
        [JsonContent] Approval.PostApprovalV4TasksResubmitBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【词典】上传图片</para>
    /// <para>接口ID：7138031713099317252</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/baike-v1/file/upload</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>词条图片资源上传。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity</item>
    /// <item>baike:entity:exempt_review</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>二进制文件内容，高宽像素在 320-4096 像素之间，大小在 3KB-10MB 的图片</para>
    /// </param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/lingo-v1/file/upload")]
    [HttpPost("/open-apis/baike/v1/files/upload")]
    System.Threading.Tasks.Task<FeishuResponse<Baike.PostBaikeV1FilesUploadResponseDto>> PostBaikeV1FilesUploadAsync(
        [FormDataContent] Baike.PostBaikeV1FilesUploadBodyDto dto,
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【词典】下载图片</para>
    /// <para>接口ID：7138031713099333636</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/baike-v1/file/download</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>通过 file_token 下载原图片。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity</item>
    /// <item>baike:entity:exempt_review</item>
    /// <item>baike:entity:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要下载的文件 token</para>
    /// <para>示例值：boxbcEcmKiD3***vgqWTpvdc7jc</para>
    /// </param>
    /// <returns>返回文件二进制流</returns>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/lingo-v1/file/download")]
    [HttpGet("/open-apis/baike/v1/files/{file_token}/download")]
    System.Threading.Tasks.Task<HttpResponseMessage> GetBaikeV1FilesByFileTokenDownloadAsync(
        [PathQuery] string file_token);

    /// <summary>
    /// <para>【消息与群组】Pin 消息</para>
    /// <para>接口ID：7138313270488858626</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/pin/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>Pin 一条指定的消息。Pin 消息的效果可参见[Pin 消息概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/pin/pin-overview)。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- Pin 消息时，机器人必须在消息所属的会话内。</para>
    /// <para>## 使用限制</para>
    /// <para>- 当前操作者不可见的消息无法 Pin。</para>
    /// <para>- 对同一条消息的 Pin 操作不能超过 5 QPS。</para>
    /// <para>## 注意事项</para>
    /// <para>如果消息已经被 Pin，则该接口会返回该 Pin 的操作信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message</item>
    /// <item>im:message:send_as_bot</item>
    /// <item>im:message.pins:write_only</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/im/v1/pins")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PostImV1PinsResponseDto>> PostImV1PinsAsync(
        [JsonContent] Im.PostImV1PinsBodyDto dto);

    /// <summary>
    /// <para>【消息与群组】移除 Pin 消息</para>
    /// <para>接口ID：7138313270488875010</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/pin/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>移除一条指定消息的 Pin。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 移除 Pin 消息时，机器人必须在消息所属的会话内。</para>
    /// <para>## 使用限制</para>
    /// <para>- 当前操作者不可见的消息无法移除 Pin。</para>
    /// <para>- 对同一条消息移除 Pin 的操作不能超过 5 QPS。</para>
    /// <para>## 注意事项</para>
    /// <para>如果消息未被 Pin 或已被撤回，则该接口返回成功信息 `"msg": "success"`。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message</item>
    /// <item>im:message:send_as_bot</item>
    /// <item>im:message.pins:write_only</item>
    /// </list></para>
    /// </summary>
    /// <param name="message_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待移除 Pin 的消息 ID。ID 获取方式：</para>
    /// <para>- 调用[发送消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create)接口后，从响应结果的 `message_id` 参数获取。</para>
    /// <para>- 监听[接收消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/events/receive)事件，当触发该事件后可以从事件体内获取消息的 `message_id`。</para>
    /// <para>- 调用[获取会话历史消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/list)接口，从响应结果的 `message_id` 参数获取。</para>
    /// <para>示例值：om_dc13264520392913993dd051dba21dcf</para>
    /// </param>
    [HttpDelete("/open-apis/im/v1/pins/{message_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteImV1PinsByMessageIdAsync(
        [PathQuery] string message_id);

    /// <summary>
    /// <para>【消息与群组】获取群内 Pin 消息</para>
    /// <para>接口ID：7138313270488891394</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/pin/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取指定群、指定时间范围内的所有 Pin 消息。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 获取 Pin 消息时，机器人必须在消息所属的会话内。</para>
    /// <para>## 注意事项</para>
    /// <para>- 获取的 Pin 消息按 Pin 的创建时间降序排列。</para>
    /// <para>- 接口默认限流为 50 QPS。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message</item>
    /// <item>im:message:readonly</item>
    /// <item>im:message.pins:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>必填：是</para>
    /// <para>待获取 Pin 消息的群组 ID。获取方式参见[群 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)。</para>
    /// <para>示例值：oc_234jsi43d3ssi993d43545f</para>
    /// </param>
    /// <param name="start_time">
    /// <para>必填：否</para>
    /// <para>获取 Pin 消息的起始时间，毫秒级时间戳。</para>
    /// <para>**注意**：</para>
    /// <para>- 若未传值默认获取到群聊内最早的 Pin 消息。</para>
    /// <para>- 传值时需小于 `end_time` 值。</para>
    /// <para>示例值：1658632251800</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="end_time">
    /// <para>必填：否</para>
    /// <para>获取 Pin 消息的结束时间，毫秒级时间戳。</para>
    /// <para>**注意**：</para>
    /// <para>- 若未传值默认从群聊内最新的 Pin 消息开始获取。</para>
    /// <para>- 传值时需大于 `start_time` 值。</para>
    /// <para>示例值：1658731646425</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，用于限制一次请求返回的数据条目数。</para>
    /// <para>示例值：20</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：GxmvlNRvP0NdQZpa7yIqf_Lv_QuBwTQ8tXkX7w-irAghVD_TvuYd1aoJ1LQph86O-XImC4X9j9FhUPhXQDvtrQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/im/v1/pins")]
    System.Threading.Tasks.Task<FeishuResponse<Im.GetImV1PinsResponseDto>> GetImV1PinsAsync(
        [PathQuery] string chat_id,
        [PathQuery] string? start_time = null,
        [PathQuery] string? end_time = null,
        [PathQuery] int? page_size = 20,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【消息与群组】获取群分享链接</para>
    /// <para>接口ID：7139929321426386972</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat/link</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取指定群的分享链接，他人点击分享链接后可加入群组。</para>
    /// <para>## 前提条件</para>
    /// <para>应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>## 使用限制</para>
    /// <para>- 调用该接口的用户或机器人必须在对应群组内。</para>
    /// <para>- 单聊、密聊、团队群不支持生成分享链接。</para>
    /// <para>- 当机器人被停用或者退出群组时，由该机器人获取的群分享链接也将失效。</para>
    /// <para>- 当群组设置了 **仅群主和群管理员可添加群成员或分享群** 时，调用该接口的用户或机器人必须是群组的群主或管理员。</para>
    /// <para>- 获取内部群分享链接时，调用该接口的用户或机器人必须和群组属于同一租户。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat:read</item>
    /// <item>im:chat:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>**注意**：单聊、密聊、团队群不支持分享群链接</para>
    /// <para>示例值：oc_a0553eda9014c201e6969b478895c230</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/im/v1/chats/{chat_id}/link")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PostImV1ChatsByChatIdLinkResponseDto>> PostImV1ChatsByChatIdLinkAsync(
        [PathQuery] string chat_id,
        [JsonContent] Im.PostImV1ChatsByChatIdLinkBodyDto dto);

    /// <summary>
    /// <para>【飞书人事】获取组织类角色授权列表</para>
    /// <para>接口ID：7141207412454998019</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/authorization/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询组织类角色的授权信息，返回的授权列表中包含被授权的用户ID和被授权的管理维度等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:authorization:read</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/assigned_users/search")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1AssignedUsersSearchResponseDto>> PostCorehrV1AssignedUsersSearchAsync(
        [JsonContent] FeishuPeople.PostCorehrV1AssignedUsersSearchBodyDto dto,
        [PathQuery] string? user_id_type = "people_corehr_id");

    /// <summary>
    /// <para>【招聘】更新实习 Offer 入/离职状态</para>
    /// <para>接口ID：7143222622736957442</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/offer/intern_offer_status</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对「实习待入职」状态的实习 Offer 确认入职、放弃入职，或对「实习已入职」状态的实习 Offer 操作离职。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:offer</item>
    /// </list></para>
    /// </summary>
    /// <param name="offer_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>Offer ID，如何获取请参考[获取 Offer 列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer/list)</para>
    /// <para>示例值：7016605170635213100</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/offers/{offer_id}/intern_offer_status")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1OffersByOfferIdInternOfferStatusResponseDto>> PostHireV1OffersByOfferIdInternOfferStatusAsync(
        [PathQuery] string offer_id,
        [JsonContent] Hire.PostHireV1OffersByOfferIdInternOfferStatusBodyDto dto);

    /// <summary>
    /// <para>【视频会议】下载导出文件</para>
    /// <para>接口ID：7143809848869109763</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/export/download</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>下载导出文件。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:export</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_token">
    /// <para>必填：是</para>
    /// <para>文档token</para>
    /// <para>示例值：6yHu7Igp7Igy62Ez6fLr6IJz7j9i5WMe6fHq5yZeY2Jz6yLqYAMAY46fZfEz64Lr5fYyYQ==</para>
    /// </param>
    /// <returns>返回文件二进制流</returns>
    [HttpGet("/open-apis/vc/v1/exports/download")]
    System.Threading.Tasks.Task<HttpResponseMessage> GetVcV1ExportsDownloadAsync(
        [PathQuery] string file_token);

    /// <summary>
    /// <para>【应用信息】获取应用版本列表</para>
    /// <para>接口ID：7146031228486467585</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/application-v6/application/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据 app_id 获取对应应用版本列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>application:application:self_manage</item>
    /// <item>application:application.app_version:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用的 app_id，需要查询其他应用版本信息时，必须申请[获取应用版本信息](https://open.feishu.cn/document/ukTMukTMukTM/uQjN3QjL0YzN04CN2cDN)权限，仅查询本应用版本信息时，可填入 "me" 或者应用自身 app_id</para>
    /// <para>示例值：cli_9b445f5258795107</para>
    /// </param>
    /// <param name="lang">
    /// <para>必填：是</para>
    /// <para>应用信息的语言版本</para>
    /// <para>示例值：zh_cn</para>
    /// <list type="bullet">
    /// <item>zh_cn：中文</item>
    /// <item>en_us：英文</item>
    /// <item>ja_jp：日文</item>
    /// </list>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：new-e3c5a0627cdf0c2e057da7257b90376a</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="order">
    /// <para>必填：否</para>
    /// <para>0：按照时间倒序 1：按照时间正序</para>
    /// <para>示例值：0</para>
    /// <para>默认值：0</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/application/v6/applications/{app_id}/app_versions")]
    System.Threading.Tasks.Task<FeishuResponse<Application.GetApplicationV6ApplicationsByAppIdAppVersionsResponseDto>> GetApplicationV6ApplicationsByAppIdAppVersionsAsync(
        [PathQuery] string app_id,
        [PathQuery] string lang,
        [PathQuery] int? page_size = 20,
        [PathQuery] string? page_token = null,
        [PathQuery] int? order = 0,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】获取告警记录</para>
    /// <para>接口ID：7146108826851770396</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/alert/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取特定条件下租户的设备告警记录。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:alert:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="start_time">
    /// <para>必填：是</para>
    /// <para>开始时间（unix时间，单位秒）</para>
    /// <para>示例值：1608888867</para>
    /// </param>
    /// <param name="end_time">
    /// <para>必填：是</para>
    /// <para>结束时间（unix时间，单位秒）</para>
    /// <para>示例值：1608888867</para>
    /// </param>
    /// <param name="query_type">
    /// <para>必填：否</para>
    /// <para>查询对象类型，不填返回所有</para>
    /// <para>示例值：1</para>
    /// <list type="bullet">
    /// <item>1：会议室</item>
    /// <item>2：企业会议室连接器</item>
    /// <item>3：SIP会议室系统</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="query_value">
    /// <para>必填：否</para>
    /// <para>查询对象ID，会议室ID或企业会议室连接器ID</para>
    /// <para>示例值：omm_4de32cf10a4358788ff4e09e37ebbf9b</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>请求期望返回的告警记录数量，不足则返回全部，该值默认为 100，最大为 1000</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：100</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/vc/v1/alerts")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.GetVcV1AlertsResponseDto>> GetVcV1AlertsAsync(
        [PathQuery] string start_time,
        [PathQuery] string end_time,
        [PathQuery] int? query_type = null,
        [PathQuery] string? query_value = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【应用信息】获取当前设置的推荐规则列表</para>
    /// <para>接口ID：7148673650311643139</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/workplace-v1/app_recommend_rule/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取当前设置的推荐规则列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>application:app_recommend_rule:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>**示例值**：10</para>
    /// <para>**数据校验规则**：</para>
    /// <para>- 最大值：`50`</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>**示例值**："new-e11ee058b4a8ed2881da11ac7e37c4fc"</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>**示例值**："open_id"</para>
    /// <para>**可选值有**：</para>
    /// <para>open_id:标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid),union_id:标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id),user_id:标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</para>
    /// <para>**默认值**：`open_id`</para>
    /// <para>**当值为 `user_id`，字段权限要求**：</para>
    /// <para>- contact:user.employee_id:readonly : 获取用户 user ID</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](/ssl</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](/ssl</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](/ssl</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/application/v6/app_recommend_rules")]
    System.Threading.Tasks.Task<FeishuResponse<Application.Spec.GetApplicationV6AppRecommendRulesResponseDto>> GetApplicationV6AppRecommendRulesAsync(
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】查询会议室预定限制</para>
    /// <para>接口ID：7152043170151333892</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/scope_config/reserve_scope</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询会议室预定限制。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// <item>vc:room:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="scope_id">
    /// <para>必填：是</para>
    /// <para>会议室或层级id</para>
    /// <para>示例值：omm_3c5dxxxbd1a771</para>
    /// </param>
    /// <param name="scope_type">
    /// <para>必填：是</para>
    /// <para>1 代表层级，2 代表会议室</para>
    /// <para>示例值：2</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/vc/v1/reserve_configs/reserve_scope")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.GetVcV1ReserveConfigsReserveScopeResponseDto>> GetVcV1ReserveConfigsReserveScopeAsync(
        [PathQuery] string scope_id,
        [PathQuery] string scope_type,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】更新会议室预定限制</para>
    /// <para>接口ID：7152043170151350276</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/scope_config/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新会议室预定限制。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="reserve_config_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>会议室或层级id</para>
    /// <para>示例值：omm_3c5dd7e09bac0c1758fcf9511bd1a771</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/vc/v1/reserve_configs/{reserve_config_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PatchVcV1ReserveConfigsByReserveConfigIdAsync(
        [PathQuery] string reserve_config_id,
        [JsonContent] Vc.PatchVcV1ReserveConfigsByReserveConfigIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【认证信息】获取认证信息</para>
    /// <para>接口ID：7155320694884614148</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/verification-v1/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取企业主体名称、是否认证等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>verification:verification_information:readonly</item>
    /// </list></para>
    /// </summary>
    [HttpGet("/open-apis/verification/v1/verification")]
    System.Threading.Tasks.Task<FeishuResponse<VerificationInformation.Spec.GetVerificationV1VerificationResponseDto>> GetVerificationV1VerificationAsync();

    /// <summary>
    /// <para>【云文档】获取文档版本列表</para>
    /// <para>接口ID：7156062028484984836</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/file-version/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取文档或电子表格的版本列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive:version</item>
    /// <item>drive:drive:version:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>源文档的 token。获取方式参考 [如何获取云文档相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)。</para>
    /// <para>示例值：doxbcyvqZlSc9WlHvQMlSJabcef</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：20</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：1665739388</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="obj_type">
    /// <para>必填：是</para>
    /// <para>源文档的类型</para>
    /// <para>示例值：docx</para>
    /// <list type="bullet">
    /// <item>docx：新版文档</item>
    /// <item>sheet：电子表格</item>
    /// </list>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/drive/v1/files/{file_token}/versions")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDriveV1FilesByFileTokenVersionsResponseDto>> GetDriveV1FilesByFileTokenVersionsAsync(
        [PathQuery] string file_token,
        [PathQuery] string obj_type,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】获取文档版本信息</para>
    /// <para>接口ID：7156062028485001220</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/file-version/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于获取文档或电子表格指定版本的信息，包括标题、标识、创建者、创建时间等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive:version</item>
    /// <item>drive:drive:version:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>源文档的 token。获取方式参考 [如何获取云文档相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)。</para>
    /// <para>示例值：shtbcqqoXZJaKYrfN5IHQgabcef</para>
    /// </param>
    /// <param name="version_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>版本文档的版本标识</para>
    /// <para>示例值：fnJfyX</para>
    /// </param>
    /// <param name="obj_type">
    /// <para>必填：是</para>
    /// <para>源文档的类型</para>
    /// <para>示例值：docx</para>
    /// <list type="bullet">
    /// <item>docx：新版文档</item>
    /// <item>sheet：电子表格</item>
    /// </list>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/drive/v1/files/{file_token}/versions/{version_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDriveV1FilesByFileTokenVersionsByVersionIdResponseDto>> GetDriveV1FilesByFileTokenVersionsByVersionIdAsync(
        [PathQuery] string file_token,
        [PathQuery] string version_id,
        [PathQuery] string obj_type,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】删除文档版本</para>
    /// <para>接口ID：7156062028485017604</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/file-version/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除基于在线文档或电子表格创建的版本。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive:version</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>当前版本对应的源文档的 token。获取方式参考[如何获取云文档相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)。</para>
    /// <para>示例值：doxbcyvqZlSc9WlHvQMlSJabcef</para>
    /// </param>
    /// <param name="version_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>版本文档版本标识</para>
    /// <para>示例值：fnJfyX</para>
    /// </param>
    /// <param name="obj_type">
    /// <para>必填：是</para>
    /// <para>源文档的类型</para>
    /// <para>示例值：docx</para>
    /// <list type="bullet">
    /// <item>docx：新版文档</item>
    /// <item>sheet：电子表格</item>
    /// </list>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpDelete("/open-apis/drive/v1/files/{file_token}/versions/{version_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteDriveV1FilesByFileTokenVersionsByVersionIdAsync(
        [PathQuery] string file_token,
        [PathQuery] string version_id,
        [PathQuery] string obj_type,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】创建文档版本</para>
    /// <para>接口ID：7156062028485033988</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/file-version/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>创建文档版本。文档支持在线文档或电子表格。该接口为异步接口。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive:version</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>源文档的 token，获取方式参考 [如何获取云文档相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)。</para>
    /// <para>示例值：doxbcyvqZlSc9WlHvQMlSJabcef</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/drive/v1/files/{file_token}/versions")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostDriveV1FilesByFileTokenVersionsResponseDto>> PostDriveV1FilesByFileTokenVersionsAsync(
        [PathQuery] string file_token,
        [JsonContent] Ccm.PostDriveV1FilesByFileTokenVersionsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【词典】提取潜在的词条</para>
    /// <para>接口ID：7158733167621242883</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/baike-v1/entity/extract</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>提取文本中可能成为词条的词语，且不会过滤已经成为词条的词语。同时返回推荐的别名。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity</item>
    /// <item>baike:entity:exempt_review</item>
    /// <item>baike:entity:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [Obsolete("迁移至新版本：https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/lingo-v1/entity/extract")]
    [HttpPost("/open-apis/baike/v1/entities/extract")]
    System.Threading.Tasks.Task<FeishuResponse<Baike.PostBaikeV1EntitiesExtractResponseDto>> PostBaikeV1EntitiesExtractAsync(
        [JsonContent] Baike.PostBaikeV1EntitiesExtractBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】直接创建待入职</para>
    /// <para>接口ID：7160511371865014276</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/pre_hire/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>使用指定数据创建一个待入职人员。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:pre_hire:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/pre_hires")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2PreHiresResponseDto>> PostCorehrV2PreHiresAsync(
        [JsonContent] Corehr.PostCorehrV2PreHiresBodyDto dto);

    /// <summary>
    /// <para>【视频会议】批量查询会议室层级详情</para>
    /// <para>接口ID：7160517356095897604</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/room_level/mget</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口可以使用会议室层级 ID 批量查询会议室层级详情。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// <item>vc:room:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/vc/v1/room_levels/mget")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.PostVcV1RoomLevelsMgetResponseDto>> PostVcV1RoomLevelsMgetAsync(
        [JsonContent] Vc.PostVcV1RoomLevelsMgetBodyDto dto);

    /// <summary>
    /// <para>【视频会议】搜索会议室层级</para>
    /// <para>接口ID：7160517356095913988</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/room_level/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口可以用来搜索会议室层级，支持使用自定义会议室层级 ID 进行查询。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// <item>vc:room:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="custom_level_ids">
    /// <para>必填：是</para>
    /// <para>用于查询指定会议室层级的自定义会议室层级ID</para>
    /// <para>示例值：1000,1001</para>
    /// </param>
    [HttpGet("/open-apis/vc/v1/room_levels/search")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.GetVcV1RoomLevelsSearchResponseDto>> GetVcV1RoomLevelsSearchAsync(
        [PathQuery] string custom_level_ids);

    /// <summary>
    /// <para>【视频会议】查询会议室配置</para>
    /// <para>接口ID：7160517356095930372</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/scope_config/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口可以用来查询某个会议层级范围下或者某个会议室的配置。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// <item>vc:room:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="scope_type">
    /// <para>必填：是</para>
    /// <para>查询节点范围</para>
    /// <para>示例值：1</para>
    /// <list type="bullet">
    /// <item>1：会议室层级</item>
    /// <item>2：会议室</item>
    /// </list>
    /// </param>
    /// <param name="scope_id">
    /// <para>必填：是</para>
    /// <para>查询节点ID：如果scope_type为1，则为层级ID，如果scope_type为2，则为会议室ID</para>
    /// <para>示例值：omm_608d34d82d531b27fa993902d350a307</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/vc/v1/scope_config")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.GetVcV1ScopeConfigResponseDto>> GetVcV1ScopeConfigAsync(
        [PathQuery] int scope_type,
        [PathQuery] string scope_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】批量查询会议室详情</para>
    /// <para>接口ID：7160517356095946756</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/room/mget</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口可以使用会议室 ID 批量查询会议室详情。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// <item>vc:room:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/vc/v1/rooms/mget")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.PostVcV1RoomsMgetResponseDto>> PostVcV1RoomsMgetAsync(
        [JsonContent] Vc.PostVcV1RoomsMgetBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】更新会议室</para>
    /// <para>接口ID：7160517356095963140</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/room/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口可以用来更新某个会议室的信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="room_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>会议室ID</para>
    /// <para>示例值：omm_4de32cf10a4358788ff4e09e37ebbf9b</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/vc/v1/rooms/{room_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PatchVcV1RoomsByRoomIdAsync(
        [PathQuery] string room_id,
        [JsonContent] Vc.PatchVcV1RoomsByRoomIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】删除会议室</para>
    /// <para>接口ID：7160517356095979524</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/room/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口可以用来删除某个会议室。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// </list></para>
    /// </summary>
    /// <param name="room_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>会议室ID</para>
    /// <para>示例值：omm_4de32cf10a4358788ff4e09e37ebbf9b</para>
    /// </param>
    [HttpDelete("/open-apis/vc/v1/rooms/{room_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteVcV1RoomsByRoomIdAsync(
        [PathQuery] string room_id);

    /// <summary>
    /// <para>【视频会议】更新会议室层级</para>
    /// <para>接口ID：7160517356095995908</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/room_level/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口可以用来更新某个会议室层级的信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// </list></para>
    /// </summary>
    /// <param name="room_level_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>层级ID</para>
    /// <para>示例值：omb_4ad1a2c7a2fbc5fc9570f38456931293</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/vc/v1/room_levels/{room_level_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PatchVcV1RoomLevelsByRoomLevelIdAsync(
        [PathQuery] string room_level_id,
        [JsonContent] Vc.PatchVcV1RoomLevelsByRoomLevelIdBodyDto dto);

    /// <summary>
    /// <para>【视频会议】设置会议室配置</para>
    /// <para>接口ID：7160517357591920643</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/scope_config/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口可以用来设置某个会议层级范围下或者某个会议室的配置。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/vc/v1/scope_config")]
    System.Threading.Tasks.Task<FeishuResponse> PostVcV1ScopeConfigAsync(
        [JsonContent] Vc.PostVcV1ScopeConfigBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】创建会议室层级</para>
    /// <para>接口ID：7160517357591986179</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/room_level/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于创建会议室层级。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/vc/v1/room_levels")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.PostVcV1RoomLevelsResponseDto>> PostVcV1RoomLevelsAsync(
        [JsonContent] Vc.PostVcV1RoomLevelsBodyDto dto);

    /// <summary>
    /// <para>【视频会议】删除会议室层级</para>
    /// <para>接口ID：7160517357592002563</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/room_level/del</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口可以用来删除某个会议室层级。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/vc/v1/room_levels/del")]
    System.Threading.Tasks.Task<FeishuResponse> PostVcV1RoomLevelsDelAsync(
        [JsonContent] Vc.PostVcV1RoomLevelsDelBodyDto dto);

    /// <summary>
    /// <para>【视频会议】查询会议室列表</para>
    /// <para>接口ID：7160517357592051715</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/room/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口可以用来查询某个会议室层级下会议室列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// <item>vc:room:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：10</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="room_level_id">
    /// <para>必填：否</para>
    /// <para>层级ID，当需要获取租户下会议室列表时，room_level_id可传空</para>
    /// <para>示例值：omb_4ad1a2c7a2fbc5fc9570f38456931293</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/vc/v1/rooms")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.GetVcV1RoomsResponseDto>> GetVcV1RoomsAsync(
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? room_level_id = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】查询会议室详情</para>
    /// <para>接口ID：7160517357592068099</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/room/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口可以使用会议室 ID 查询会议室详情。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// <item>vc:room:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="room_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>会议室ID</para>
    /// <para>示例值：omm_4de32cf10a4358788ff4e09e37ebbf9c</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/vc/v1/rooms/{room_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.GetVcV1RoomsByRoomIdResponseDto>> GetVcV1RoomsByRoomIdAsync(
        [PathQuery] string room_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】创建会议室</para>
    /// <para>接口ID：7160517357592084483</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/room/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于创建会议室。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/vc/v1/rooms")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.PostVcV1RoomsResponseDto>> PostVcV1RoomsAsync(
        [JsonContent] Vc.PostVcV1RoomsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】查询会议室层级列表</para>
    /// <para>接口ID：7160517357592117251</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/room_level/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用来查询某个会议室层级下的子层级列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// <item>vc:room:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="room_level_id">
    /// <para>必填：否</para>
    /// <para>层级ID，当需要获取租户下层级列表时，room_level_id可传空</para>
    /// <para>示例值：omb_4ad1a2c7a2fbc5fc9570f38456931293</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页尺寸大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/vc/v1/room_levels")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.GetVcV1RoomLevelsResponseDto>> GetVcV1RoomLevelsAsync(
        [PathQuery] string? room_level_id = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【视频会议】查询会议室层级详情</para>
    /// <para>接口ID：7160517357592133635</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/room_level/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口可以使用会议室层级 ID 查询会议室层级详情。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// <item>vc:room:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="room_level_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>层级ID，查询租户层级可传0</para>
    /// <para>示例值：omb_57c9cc7d9a81e27e54c8fabfd02759e7</para>
    /// </param>
    [HttpGet("/open-apis/vc/v1/room_levels/{room_level_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.GetVcV1RoomLevelsByRoomLevelIdResponseDto>> GetVcV1RoomLevelsByRoomLevelIdAsync(
        [PathQuery] string room_level_id);

    /// <summary>
    /// <para>【飞书人事】获取流程表单数据</para>
    /// <para>接口ID：7160631114605608962</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/process-form_variable_data/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据流程实例 id（process_id）获取流程表单字段数据，包括表单里的业务字段和自定义字段。仅支持飞书人事、假勤相关业务流程。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// <item>corehr:process:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="process_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>流程实例 ID</para>
    /// <para>示例值：123456987</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/processes/{process_id}/form_variable_data")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1ProcessesByProcessIdFormVariableDataResponseDto>> GetCorehrV1ProcessesByProcessIdFormVariableDataAsync(
        [PathQuery] string process_id);

    /// <summary>
    /// <para>【个人设置】修改系统状态</para>
    /// <para>接口ID：7161608966368739331</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/personal_settings-v1/system_status/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>修改租户维度系统状态。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>personal_settings:status:system_status_update</item>
    /// </list></para>
    /// </summary>
    /// <param name="system_status_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>系统状态ID</para>
    /// <para>[获取系统状态ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/personal_settings-v1/system_status/list)</para>
    /// <para>示例值：7101214603622940633</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/personal_settings/v1/system_statuses/{system_status_id}")]
    System.Threading.Tasks.Task<FeishuResponse<PersonalSettings.PatchPersonalSettingsV1SystemStatusesBySystemStatusIdResponseDto>> PatchPersonalSettingsV1SystemStatusesBySystemStatusIdAsync(
        [PathQuery] string system_status_id,
        [JsonContent] PersonalSettings.PatchPersonalSettingsV1SystemStatusesBySystemStatusIdBodyDto dto);

    /// <summary>
    /// <para>【个人设置】获取系统状态</para>
    /// <para>接口ID：7161608966368755715</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/personal_settings-v1/system_status/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取租户下所有系统状态。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>personal_settings:status:system_status_update</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：50</para>
    /// <para>默认值：50</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：GxmvlNRvP0NdQZpa7yIqf_Lv_QuBwTQ8tXkX7w-irAghVD_TvuYd1aoJ1LQph86O-XImC4X9j9FhUPhXQDvtrQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/personal_settings/v1/system_statuses")]
    System.Threading.Tasks.Task<FeishuResponse<PersonalSettings.GetPersonalSettingsV1SystemStatusesResponseDto>> GetPersonalSettingsV1SystemStatusesAsync(
        [PathQuery] int? page_size = 50,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【个人设置】批量开启系统状态</para>
    /// <para>接口ID：7161608966368772099</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/personal_settings-v1/system_status/batch_open</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量开启用户系统状态可用。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>personal_settings:status:system_status_operate</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="system_status_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>系统状态ID</para>
    /// <para>[获取系统状态ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/personal_settings-v1/system_status/list)</para>
    /// <para>示例值：7101214603622940672</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/personal_settings/v1/system_statuses/{system_status_id}/batch_open")]
    System.Threading.Tasks.Task<FeishuResponse<PersonalSettings.PostPersonalSettingsV1SystemStatusesBySystemStatusIdBatchOpenResponseDto>> PostPersonalSettingsV1SystemStatusesBySystemStatusIdBatchOpenAsync(
        [PathQuery] string system_status_id,
        [JsonContent] PersonalSettings.PostPersonalSettingsV1SystemStatusesBySystemStatusIdBatchOpenBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【个人设置】批量关闭系统状态</para>
    /// <para>接口ID：7161608966368788483</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/personal_settings-v1/system_status/batch_close</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量关闭用户系统状态可用。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>personal_settings:status:system_status_operate</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="system_status_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>系统状态ID</para>
    /// <para>[获取系统状态ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/personal_settings-v1/system_status/list)</para>
    /// <para>示例值：7101214603622940671</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/personal_settings/v1/system_statuses/{system_status_id}/batch_close")]
    System.Threading.Tasks.Task<FeishuResponse<PersonalSettings.PostPersonalSettingsV1SystemStatusesBySystemStatusIdBatchCloseResponseDto>> PostPersonalSettingsV1SystemStatusesBySystemStatusIdBatchCloseAsync(
        [PathQuery] string system_status_id,
        [JsonContent] PersonalSettings.PostPersonalSettingsV1SystemStatusesBySystemStatusIdBatchCloseBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【个人设置】创建系统状态</para>
    /// <para>接口ID：7161608966368821251</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/personal_settings-v1/system_status/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建租户维度的系统状态。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>personal_settings:status:system_status_update</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/personal_settings/v1/system_statuses")]
    System.Threading.Tasks.Task<FeishuResponse<PersonalSettings.PostPersonalSettingsV1SystemStatusesResponseDto>> PostPersonalSettingsV1SystemStatusesAsync(
        [JsonContent] PersonalSettings.PostPersonalSettingsV1SystemStatusesBodyDto dto);

    /// <summary>
    /// <para>【个人设置】删除系统状态</para>
    /// <para>接口ID：7161608966368837635</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/personal_settings-v1/system_status/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除租户维度的系统状态。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>personal_settings:status:system_status_update</item>
    /// </list></para>
    /// </summary>
    /// <param name="system_status_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>系统状态ID</para>
    /// <para>[获取系统状态ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/personal_settings-v1/system_status/list)</para>
    /// <para>示例值：7101214603622940633</para>
    /// </param>
    [HttpDelete("/open-apis/personal_settings/v1/system_statuses/{system_status_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeletePersonalSettingsV1SystemStatusesBySystemStatusIdAsync(
        [PathQuery] string system_status_id);

    /// <summary>
    /// <para>【招聘】获取职位设置</para>
    /// <para>接口ID：7172190705011212292</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/job/config</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取职位设置，包含 Offer 申请表、Offer 审批流程、建议评估人列表、面试评价表、建议面试官列表、招聘需求、面试登记表、入职登记表、面试轮次类型列表、关联职位列表等设置。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:job:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>职位 ID，可通过[获取职位列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/list)接口获取</para>
    /// <para>示例值：6960663240925956660</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/jobs/{job_id}/config")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1JobsByJobIdConfigResponseDto>> GetHireV1JobsByJobIdConfigAsync(
        [PathQuery] string job_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【邮箱】批量获取邮件组管理员</para>
    /// <para>接口ID：7172379500607668228</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/mail-group/mailgroup-manager/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量获取邮件组管理员。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:mailgroup</item>
    /// <item>mail:mailgroup:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="mailgroup_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>邮件组ID或邮箱地址</para>
    /// <para>示例值：xxxxxx 或 test_mail_group@xx.xx</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：20</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：xxxxxx</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/mail/v1/mailgroups/{mailgroup_id}/managers")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.GetMailV1MailgroupsByMailgroupIdManagersResponseDto>> GetMailV1MailgroupsByMailgroupIdManagersAsync(
        [PathQuery] string mailgroup_id,
        [PathQuery] int? page_size = 20,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【邮箱】批量创建邮件组管理员</para>
    /// <para>接口ID：7172379500607684612</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/mail-group/mailgroup-manager/batch_create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量创建邮件组管理员。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:mailgroup</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="mailgroup_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>邮件组ID或邮箱地址</para>
    /// <para>示例值：xxxxxx 或 test_mail_group@xx.xx</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/mail/v1/mailgroups/{mailgroup_id}/managers/batch_create")]
    System.Threading.Tasks.Task<FeishuResponse> PostMailV1MailgroupsByMailgroupIdManagersBatchCreateAsync(
        [PathQuery] string mailgroup_id,
        [JsonContent] Mail.PostMailV1MailgroupsByMailgroupIdManagersBatchCreateBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【邮箱】批量删除邮件组管理员</para>
    /// <para>接口ID：7172379500607700996</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/mail-group/mailgroup-manager/batch_delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量删除邮件组管理员。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:mailgroup</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="mailgroup_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>邮件组ID或者邮件组地址</para>
    /// <para>示例值：xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/mail/v1/mailgroups/{mailgroup_id}/managers/batch_delete")]
    System.Threading.Tasks.Task<FeishuResponse> PostMailV1MailgroupsByMailgroupIdManagersBatchDeleteAsync(
        [PathQuery] string mailgroup_id,
        [JsonContent] Mail.PostMailV1MailgroupsByMailgroupIdManagersBatchDeleteBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【消息与群组】添加群菜单</para>
    /// <para>接口ID：7174746098262638596</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat-menu_tree/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>在指定群组中添加一个或多个群菜单。成功调用后接口会返回当前群组内所有群菜单信息。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 调用当前接口的机器人必须在对应的群组内。</para>
    /// <para>## 使用限制</para>
    /// <para>- 该接口是向群内追加菜单，群内已存在的菜单不会被覆盖。</para>
    /// <para>- 一个群内最多有 3 个一级菜单，每个一级菜单最多配置 5 个二级菜单。</para>
    /// <para>- 不支持在已有的一级菜单中追加二级菜单。</para>
    /// <para>- 该接口仅支持群模式为 `group` 的群组，你可以调用[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)接口，在返回结果中查看 `chat_mode` 参数取值是否为 `group`。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat.menu_tree:write_only</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>**注意**：仅支持群模式为 **群组（group）** 的群组 ID。你可以调用[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)接口，在返回结果中查看 `chat_mode` 参数取值是否为 `group`。</para>
    /// <para>示例值：oc_a0553eda9014c201e6969b478895c230</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/im/v1/chats/{chat_id}/menu_tree")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PostImV1ChatsByChatIdMenuTreeResponseDto>> PostImV1ChatsByChatIdMenuTreeAsync(
        [PathQuery] string chat_id,
        [JsonContent] Im.PostImV1ChatsByChatIdMenuTreeBodyDto dto);

    /// <summary>
    /// <para>【消息与群组】删除群菜单</para>
    /// <para>接口ID：7174746098262654980</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat-menu_tree/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除指定群内的一级菜单。成功调用后接口会返回群组内最新的群菜单信息。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 调用当前接口的用户或者机器人必须在对应的会话内。</para>
    /// <para>## 使用限制</para>
    /// <para>- 该接口仅支持群模式为 `group` 的群组，你可以调用[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)接口，在返回结果中查看 `chat_mode` 参数取值是否为 `group`。</para>
    /// <para>- 仅支持删除群组内的一级菜单。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat.menu_tree:write_only</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>**注意**：仅支持群模式为 **群组（group）** 的群组 ID。你可以调用[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)接口，在返回结果中查看 `chat_mode` 参数取值是否为 `group`。</para>
    /// <para>示例值：oc_a0553eda9014c201e6969b478895c230</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpDelete("/open-apis/im/v1/chats/{chat_id}/menu_tree")]
    System.Threading.Tasks.Task<FeishuResponse<Im.DeleteImV1ChatsByChatIdMenuTreeResponseDto>> DeleteImV1ChatsByChatIdMenuTreeAsync(
        [PathQuery] string chat_id,
        [JsonContent] Im.DeleteImV1ChatsByChatIdMenuTreeBodyDto dto);

    /// <summary>
    /// <para>【消息与群组】获取群菜单</para>
    /// <para>接口ID：7174746098262671364</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat-menu_tree/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取指定群组内的群菜单信息，包括所有一级或二级菜单的名称、跳转链接、图标等信息。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 调用当前接口的机器人必须在对应的群组内。</para>
    /// <para>## 使用限制</para>
    /// <para>该接口仅支持群模式为 `group` 的群组，你可以调用[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)接口，在返回结果中查看 `chat_mode` 参数取值是否为 `group`。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat:readonly</item>
    /// <item>im:chat.menu_tree:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>**注意**：仅支持群模式为 **群组（group）** 的群组 ID。你可以调用[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)接口，在返回结果中查看 `chat_mode` 参数取值是否为 `group`。</para>
    /// <para>示例值：oc_a0553eda9014c201e6969b478895c230</para>
    /// </param>
    [HttpGet("/open-apis/im/v1/chats/{chat_id}/menu_tree")]
    System.Threading.Tasks.Task<FeishuResponse<Im.GetImV1ChatsByChatIdMenuTreeResponseDto>> GetImV1ChatsByChatIdMenuTreeAsync(
        [PathQuery] string chat_id);

    /// <summary>
    /// <para>【消息与群组】排序群菜单</para>
    /// <para>接口ID：7174746098262687748</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat-menu_tree/sort</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调整指定群组内的群菜单排列顺序，成功调用后接口会返回群组内所有群菜单信息。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 调用当前接口的机器人必须在对应的群组内。</para>
    /// <para>## 使用限制</para>
    /// <para>- 该接口仅支持群模式为 `group` 的群组，你可以调用[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)接口，在返回结果中查看 `chat_mode` 参数取值是否为 `group`。</para>
    /// <para>- 仅支持调整群组内一级菜单的排序。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat.menu_tree:write_only</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>**注意**：仅支持群模式为 **群组（group）** 的群组 ID。你可以调用[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)接口，在返回结果中查看 `chat_mode` 参数取值是否为 `group`。</para>
    /// <para>示例值：oc_a0553eda9014c201e6969b478895c230</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/im/v1/chats/{chat_id}/menu_tree/sort")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PostImV1ChatsByChatIdMenuTreeSortResponseDto>> PostImV1ChatsByChatIdMenuTreeSortAsync(
        [PathQuery] string chat_id,
        [JsonContent] Im.PostImV1ChatsByChatIdMenuTreeSortBodyDto dto);

    /// <summary>
    /// <para>【消息与群组】修改群菜单元信息</para>
    /// <para>接口ID：7174746098262704132</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/group/chat-menu_tree/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>修改指定群组内的某个一级菜单或者二级菜单的元信息，包括图标、名称、国际化名称和跳转链接。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 调用当前接口的机器人必须在对应的群组内。</para>
    /// <para>## 使用限制</para>
    /// <para>- 该接口仅支持群模式为 `group` 的群组，你可以调用[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)接口，在返回结果中查看 `chat_mode` 参数取值是否为 `group`。</para>
    /// <para>- 本接口不支持在一级菜单上添加或删除二级菜单。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat</item>
    /// <item>im:chat.menu_tree:write_only</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>**注意**：仅支持群模式为 **群组（group）** 的群组 ID。你可以调用[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)接口，在返回结果中查看 `chat_mode` 参数取值是否为 `group`。</para>
    /// <para>示例值：oc_a0553eda9014c201e6969b478895c230</para>
    /// </param>
    /// <param name="menu_item_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>一级菜单或者二级菜单的 ID，ID 可通过 [获取群菜单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-menu_tree/get) 接口获取。</para>
    /// <para>示例值：7156553273518882844</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/im/v1/chats/{chat_id}/menu_items/{menu_item_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PatchImV1ChatsByChatIdMenuItemsByMenuItemIdResponseDto>> PatchImV1ChatsByChatIdMenuItemsByMenuItemIdAsync(
        [PathQuery] string chat_id,
        [PathQuery] string menu_item_id,
        [JsonContent] Im.PatchImV1ChatsByChatIdMenuItemsByMenuItemIdBodyDto dto);

    /// <summary>
    /// <para>【招聘】获取人才详情</para>
    /// <para>接口ID：7177216475677474820</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/talent/get-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据人才 ID 获取人才详情，包含人才加入文件夹列表、标签、人才库、备注以及屏蔽名单等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:talent</item>
    /// <item>hire:talent:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>hire:note</item>
    /// <item>hire:note:readonly</item>
    /// <item>hire:talent_blocklist</item>
    /// <item>hire:talent_blocklist:readonly</item>
    /// <item>hire:talent_folder</item>
    /// <item>hire:talent_folder:readonly</item>
    /// <item>hire:talent_tag</item>
    /// <item>hire:talent_tag:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="talent_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>人才 ID，可通过[获取人才列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent/list)接口获取</para>
    /// <para>示例值：6960663240925956555</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以 people_admin_id 来识别用户</item>
    /// </list>
    /// <para>默认值：people_admin_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v2/talents/{talent_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV2TalentsByTalentIdResponseDto>> GetHireV2TalentsByTalentIdAsync(
        [PathQuery] string talent_id,
        [PathQuery] string? user_id_type = "people_admin_id");

    /// <summary>
    /// <para>【OKR】获取 OKR 周期规则</para>
    /// <para>接口ID：7177567881395699740</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/okr-v1/period_rule/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取租户的周期规则列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>okr:okr</item>
    /// <item>okr:okr:readonly</item>
    /// </list></para>
    /// </summary>
    [HttpGet("/open-apis/okr/v1/period_rules")]
    System.Threading.Tasks.Task<FeishuResponse<Okr.GetOkrV1PeriodRulesResponseDto>> GetOkrV1PeriodRulesAsync();

    /// <summary>
    /// <para>【OKR】创建 OKR 周期</para>
    /// <para>接口ID：7177567881395716124</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/okr-v1/period/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据周期规则创建一个 OKR 周期。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>okr:okr</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/okr/v1/periods")]
    System.Threading.Tasks.Task<FeishuResponse<Okr.PostOkrV1PeriodsResponseDto>> PostOkrV1PeriodsAsync(
        [JsonContent] Okr.PostOkrV1PeriodsBodyDto dto);

    /// <summary>
    /// <para>【OKR】修改 OKR 周期状态</para>
    /// <para>接口ID：7177567881395732508</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/okr-v1/period/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>修改某个 OKR 周期的状态为「正常」、「失效」或「隐藏」，对租户所有人生效，请谨慎操作</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>okr:okr</item>
    /// </list></para>
    /// </summary>
    /// <param name="period_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>周期id</para>
    /// <para>示例值：6969864184272078374</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/okr/v1/periods/{period_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Okr.PatchOkrV1PeriodsByPeriodIdResponseDto>> PatchOkrV1PeriodsByPeriodIdAsync(
        [PathQuery] string period_id,
        [JsonContent] Okr.PatchOkrV1PeriodsByPeriodIdBodyDto dto);

    /// <summary>
    /// <para>【多维表格】复制仪表盘</para>
    /// <para>接口ID：7177650713441812483</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-dashboard/copy</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>基于现有仪表盘复制出新的仪表盘。</para>
    /// <para>## 前提条件</para>
    /// <para>调用此接口前，请确保当前调用身份（tenant_access_token 或 user_access_token）已有原多维表格的阅读权限，否则接口将返回 HTTP 403 或 400 状态码。了解更多，参考[如何为应用或用户开通文档权限](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#16c6475a)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:dashboard:copy</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：basbcldP5xZeskcHDFZQfeToydb</para>
    /// </param>
    /// <param name="block_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格仪表盘的唯一标识，以 blk 开头。获取方式：</para>
    /// <para>- 在多维表格的 URL 地址栏中，`block_id` 是下图中高亮部分：</para>
    /// <para>![image.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/a966d15323ee73c66b1e9a31d34ae6c7_x3ctncH2nO.png?height=575&amp;lazyload=true&amp;width=1397)</para>
    /// <para>- 通过[列出仪表盘](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-dashboard/list)接口获取</para>
    /// <para>示例值：blkEsvEEaNllY2UV</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/bitable/v1/apps/{app_token}/dashboards/{block_id}/copy")]
    System.Threading.Tasks.Task<FeishuResponse<Base.PostBitableV1AppsByAppTokenDashboardsByBlockIdCopyResponseDto>> PostBitableV1AppsByAppTokenDashboardsByBlockIdCopyAsync(
        [PathQuery] string app_token,
        [PathQuery] string block_id,
        [JsonContent] Base.PostBitableV1AppsByAppTokenDashboardsByBlockIdCopyBodyDto dto);

    /// <summary>
    /// <para>【多维表格】更新视图</para>
    /// <para>接口ID：7177650713441828867</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table-view/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>增量更新视图信息，包括视图名称、属性等，可设置视图的筛选条件。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:view:write_only</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：bascng7vrxcxpig7geggXiCtadY</para>
    /// </param>
    /// <param name="table_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格数据表的唯一标识。获取方式：</para>
    /// <para>- 你可通过多维表格 URL 获取 `table_id`，下图高亮部分即为当前数据表的 `table_id`</para>
    /// <para>- 也可通过[列出数据表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list)接口获取 `table_id`</para>
    /// <para>![](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/18741fe2a0d3cafafaf9949b263bb57d_yD1wkOrSju.png?height=746&amp;lazyload=true&amp;maxWidth=700&amp;width=2976)</para>
    /// <para>示例值：tblsRc9GRRXKqhvW</para>
    /// </param>
    /// <param name="view_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格中视图的唯一标识。获取方式：</para>
    /// <para>- 在多维表格的 URL 地址栏中，`view_id` 是下图中高亮部分：</para>
    /// <para>![view_id.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/140668632c97e0095832219001d17c54_DJMgVH9x2S.png?height=748&amp;lazyload=true&amp;width=2998)</para>
    /// <para>- 通过[列出视图](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/list)接口获取。暂时无法获取到嵌入到云文档中的多维表格的 `view_id`。</para>
    /// <para>示例值：vewTpR1urY</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/bitable/v1/apps/{app_token}/tables/{table_id}/views/{view_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Base.PatchBitableV1AppsByAppTokenTablesByTableIdViewsByViewIdResponseDto>> PatchBitableV1AppsByAppTokenTablesByTableIdViewsByViewIdAsync(
        [PathQuery] string app_token,
        [PathQuery] string table_id,
        [PathQuery] string view_id,
        [JsonContent] Base.PatchBitableV1AppsByAppTokenTablesByTableIdViewsByViewIdBodyDto dto);

    /// <summary>
    /// <para>【多维表格】获取视图</para>
    /// <para>接口ID：7177650713441845251</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table-view/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据视图 ID 获取现有视图信息，包括视图名称、类型、属性等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:view:read</item>
    /// <item>bitable:app</item>
    /// <item>bitable:app:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：bascnCMII2ORej2RItqpZZUNMIe</para>
    /// </param>
    /// <param name="table_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格数据表的唯一标识。获取方式：</para>
    /// <para>- 你可通过多维表格 URL 获取 `table_id`，下图高亮部分即为当前数据表的 `table_id`</para>
    /// <para>- 也可通过[列出数据表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list)接口获取 `table_id`</para>
    /// <para>![](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/18741fe2a0d3cafafaf9949b263bb57d_yD1wkOrSju.png?height=746&amp;lazyload=true&amp;maxWidth=700&amp;width=2976)</para>
    /// <para>示例值：tblsRc9GRRXKqhvW</para>
    /// </param>
    /// <param name="view_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格中视图的唯一标识。获取方式：</para>
    /// <para>- 在多维表格的 URL 地址栏中，`view_id` 是下图中高亮部分：</para>
    /// <para>![view_id.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/140668632c97e0095832219001d17c54_DJMgVH9x2S.png?height=748&amp;lazyload=true&amp;width=2998)</para>
    /// <para>- 通过[列出视图](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/list)接口获取。暂时无法获取到嵌入到云文档中的多维表格的 `view_id`。</para>
    /// <para>**注意**：</para>
    /// <para>当 `filter` 参数 或 `sort` 参数不为空时，请求视为对数据表中的全部数据做条件过滤，指定的 `view_id` 会被忽略。</para>
    /// <para>示例值：vewTpR1urY</para>
    /// </param>
    [HttpGet("/open-apis/bitable/v1/apps/{app_token}/tables/{table_id}/views/{view_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Base.GetBitableV1AppsByAppTokenTablesByTableIdViewsByViewIdResponseDto>> GetBitableV1AppsByAppTokenTablesByTableIdViewsByViewIdAsync(
        [PathQuery] string app_token,
        [PathQuery] string table_id,
        [PathQuery] string view_id);

    /// <summary>
    /// <para>【妙记】获取妙记统计数据</para>
    /// <para>接口ID：7181729161035612161</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/minutes-v1/minute-statistics/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>通过这个接口，可以获得妙记的访问情况统计，包含PV、UV、访问过的 user id、访问过的 user timestamp。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>minutes:minutes</item>
    /// <item>minutes:minutes:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="minute_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>妙记唯一标识。可从妙记链接中获取，一般为链接中最后一串字符</para>
    /// <para>示例值：obcnq3b9jl72l83w4f14xxxx</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/minutes/v1/minutes/{minute_token}/statistics")]
    System.Threading.Tasks.Task<FeishuResponse<Minutes.GetMinutesV1MinutesByMinuteTokenStatisticsResponseDto>> GetMinutesV1MinutesByMinuteTokenStatisticsAsync(
        [PathQuery] string minute_token,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【妙记】获取妙记信息</para>
    /// <para>接口ID：7181729161035628545</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/minutes-v1/minute/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>通过这个接口，可以得到一篇妙记的基础概述信息，包含 `owner_id`、`create_time`、标题、封面、时长和 URL。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>minutes:minutes</item>
    /// <item>minutes:minutes:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="minute_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>妙记唯一标识。可从妙记链接中获取，一般为链接中最后一串字符</para>
    /// <para>示例值：obcnq3b9jl72l83w4f14xxxx</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/minutes/v1/minutes/{minute_token}")]
    System.Threading.Tasks.Task<FeishuResponse<Minutes.GetMinutesV1MinutesByMinuteTokenResponseDto>> GetMinutesV1MinutesByMinuteTokenAsync(
        [PathQuery] string minute_token,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【多维表格】更新数据表</para>
    /// <para>接口ID：7182466310810402817</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新数据表的名称。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:table:update</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：XrgTb4y1haKYnasu0xXb1g7lcSg</para>
    /// </param>
    /// <param name="table_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格数据表的唯一标识。获取方式：</para>
    /// <para>- 你可通过多维表格 URL 获取 `table_id`，下图高亮部分即为当前数据表的 `table_id`</para>
    /// <para>- 也可通过[列出数据表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list)接口获取 `table_id`</para>
    /// <para>![](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/18741fe2a0d3cafafaf9949b263bb57d_yD1wkOrSju.png?height=746&amp;lazyload=true&amp;maxWidth=700&amp;width=2976)</para>
    /// <para>示例值：tbl1TkhyTWDkSoZ3</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/bitable/v1/apps/{app_token}/tables/{table_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Base.PatchBitableV1AppsByAppTokenTablesByTableIdResponseDto>> PatchBitableV1AppsByAppTokenTablesByTableIdAsync(
        [PathQuery] string app_token,
        [PathQuery] string table_id,
        [JsonContent] Base.PatchBitableV1AppsByAppTokenTablesByTableIdBodyDto dto);

    /// <summary>
    /// <para>【飞书人事】获取员工薪资标准</para>
    /// <para>接口ID：7182538601166028802</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/compensation_standard/match</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>- 调用此接口来获取员工匹配的薪资标准信息</para>
    /// <para>- 请求时，可选传递员工的部门 ID、职级 ID、职务ID 、序列 ID 等筛选条件，用于匹配薪资标准</para>
    /// <para>- 此接口将返回员工可匹配到的薪资标准全部信息，包括薪资标准表 ID、薪级薪等、薪资带宽、薪资标准值等</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:compensation_standards:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的ID来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型，传入部门ID时传入</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：【飞书】用来在具体某个应用中标识一个部门，同一个department_id 在不同应用中的 open_department_id 相同。</item>
    /// <item>department_id：【飞书】用来标识租户内一个唯一的部门。</item>
    /// <item>people_corehr_department_id：【飞书人事】用来标识「飞书人事」中的部门。</item>
    /// </list>
    /// <para>默认值：people_corehr_department_id</para>
    /// </param>
    /// <param name="employment_id">
    /// <para>必填：否</para>
    /// <para>雇员ID，可通过接口[【批量查询员工信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/employee/batch_get)获取</para>
    /// <para>示例值：7124293751317038636</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="reference_object_api">
    /// <para>必填：否</para>
    /// <para>薪资标准的关联对象，项目或者指标</para>
    /// <para>示例值：cpst_item</para>
    /// <list type="bullet">
    /// <item>cpst_item：薪资项目</item>
    /// <item>cpst_indicator：薪资统计指标</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="reference_object_id">
    /// <para>必填：是</para>
    /// <para>薪资标准表关联对象ID，即薪资项目/统计指标ID，可通过接口[【批量查询薪资项】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/item/list)、[【批量查询薪资统计指标】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/indicator/list)获取</para>
    /// <para>示例值：7156853394442044972</para>
    /// </param>
    /// <param name="department_id">
    /// <para>必填：否</para>
    /// <para>部门ID，可通过接口[【批量查询部门】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/department/list)获取</para>
    /// <para>示例值：od-53899868dd0da32292a2d809f0518c8f</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="work_location_id">
    /// <para>必填：否</para>
    /// <para>工作地点ID，可通过接口[【批量查询地点】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/list)获取</para>
    /// <para>示例值：7094869485965870636</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="company_id">
    /// <para>必填：否</para>
    /// <para>公司ID，可通过接口[【批量查询公司】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/list)获取</para>
    /// <para>示例值：7091599096804394540</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="job_family_id">
    /// <para>必填：否</para>
    /// <para>职务序列ID，可通过接口[【批量查询职务序列】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_family/list)获取</para>
    /// <para>示例值：7039313681989502508</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="job_id">
    /// <para>必填：否</para>
    /// <para>职务ID，可通过接口[【批量查询职务】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/job/list)</para>
    /// <para>示例值：7342883436321097257</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="job_level_id">
    /// <para>必填：否</para>
    /// <para>职级ID，可通过接口[【批量查询职务级别】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_level/list)获取</para>
    /// <para>示例值：7086415175263258156</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="employee_type_id">
    /// <para>必填：否</para>
    /// <para>人员类型ID，可通过接口[【批量查询人员类型】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employee_type/list)获取</para>
    /// <para>示例值：7039310401359775276</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="recruitment_type">
    /// <para>必填：否</para>
    /// <para>招聘类型</para>
    /// <para>示例值：experienced_professionals</para>
    /// <list type="bullet">
    /// <item>experienced_professionals：社招</item>
    /// <item>recent_graduates：校招</item>
    /// <item>routine_intern：日常实习</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="cpst_change_reason_id">
    /// <para>必填：否</para>
    /// <para>定调薪原因ID，可通过接口[【批量查询定调薪原因】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/change_reason/list)获取</para>
    /// <para>示例值：6967639606963471117</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="cpst_plan_id">
    /// <para>必填：否</para>
    /// <para>薪资方案ID，可通过接口[【批量查询薪资方案】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/plan/list)获取</para>
    /// <para>示例值：6967639606963471118</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="cpst_salary_level_id">
    /// <para>必填：否</para>
    /// <para>薪级薪等ID</para>
    /// <para>示例值：6967639606963471119</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="effective_time">
    /// <para>必填：否</para>
    /// <para>生效时间（毫秒级时间戳）</para>
    /// <para>示例值：1660924800000</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/compensation_standards/match")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1CompensationStandardsMatchResponseDto>> GetCorehrV1CompensationStandardsMatchAsync(
        [PathQuery] string reference_object_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "people_corehr_department_id",
        [PathQuery] string? employment_id = null,
        [PathQuery] string? reference_object_api = null,
        [PathQuery] string? department_id = null,
        [PathQuery] string? work_location_id = null,
        [PathQuery] string? company_id = null,
        [PathQuery] string? job_family_id = null,
        [PathQuery] string? job_id = null,
        [PathQuery] string? job_level_id = null,
        [PathQuery] string? employee_type_id = null,
        [PathQuery] string? recruitment_type = null,
        [PathQuery] string? cpst_change_reason_id = null,
        [PathQuery] string? cpst_plan_id = null,
        [PathQuery] string? cpst_salary_level_id = null,
        [PathQuery] string? effective_time = null);

    /// <summary>
    /// <para>【云文档】转移所有者</para>
    /// <para>接口ID：7186547801970507777</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/permission/permission-member/transfer_owner</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于根据云文档 token 和用户信息转移文件的所有者。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>bitable:app</item>
    /// <item>bitable:bitable</item>
    /// <item>docs:doc</item>
    /// <item>docs:permission.member:transfer</item>
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>wiki:wiki</item>
    /// </list></para>
    /// </summary>
    /// <param name="token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文件的 token</para>
    /// <para>示例值：doccnBKgoMyY5OMbUG6FioTXuBe</para>
    /// </param>
    /// <param name="type">
    /// <para>必填：是</para>
    /// <para>文件类型，需要与文件的 token 相匹配</para>
    /// <para>示例值：doc</para>
    /// <list type="bullet">
    /// <item>doc：文档</item>
    /// <item>sheet：电子表格</item>
    /// <item>file：云空间文件</item>
    /// <item>wiki：知识库节点</item>
    /// <item>bitable：多维表格</item>
    /// <item>docx：新版文档</item>
    /// <item>mindnote：思维笔记</item>
    /// <item>minutes：妙记</item>
    /// <item>slides：幻灯片</item>
    /// <item>folder：文件夹</item>
    /// </list>
    /// </param>
    /// <param name="need_notification">
    /// <para>必填：否</para>
    /// <para>是否需要通知新的文件所有者</para>
    /// <para>示例值：true</para>
    /// <para>默认值：true</para>
    /// </param>
    /// <param name="remove_old_owner">
    /// <para>必填：否</para>
    /// <para>转移后是否需要移除原文件所有者的权限</para>
    /// <para>示例值：false</para>
    /// <para>默认值：false</para>
    /// </param>
    /// <param name="stay_put">
    /// <para>必填：否</para>
    /// <para>仅当文件在个人文件夹下，此参数才会生效。如果设为`false`，系统会将该内容移至新所有者的空间下。如果设为`true`，则留在原位置。</para>
    /// <para>示例值：false</para>
    /// <para>默认值：false</para>
    /// </param>
    /// <param name="old_owner_perm">
    /// <para>必填：否</para>
    /// <para>仅当 remove_old_owner = false 时，此参数才会生效 保留原文件所有者指定的权限角色</para>
    /// <para>示例值：view</para>
    /// <para>默认值：full_access</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/drive/v1/permissions/{token}/members/transfer_owner")]
    System.Threading.Tasks.Task<FeishuResponse> PostDriveV1PermissionsByTokenMembersTransferOwnerAsync(
        [PathQuery] string token,
        [PathQuery] string type,
        [JsonContent] Ccm.PostDriveV1PermissionsByTokenMembersTransferOwnerBodyDto dto,
        [PathQuery] bool? need_notification = true,
        [PathQuery] bool? remove_old_owner = false,
        [PathQuery] bool? stay_put = false,
        [PathQuery] string? old_owner_perm = "full_access");

    /// <summary>
    /// <para>【云文档】判断当前用户是否有某权限</para>
    /// <para>接口ID：7186547801970524161</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/permission/permission-member/auth</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于根据 filetoken 判断当前登录用户是否具有某权限。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>bitable:app</item>
    /// <item>bitable:bitable</item>
    /// <item>docs:doc</item>
    /// <item>docs:permission.member:auth</item>
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>wiki:wiki</item>
    /// </list></para>
    /// </summary>
    /// <param name="token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文件的 token</para>
    /// <para>示例值：doccnBKgoMyY5OMbUG6FioTXuBe</para>
    /// </param>
    /// <param name="type">
    /// <para>必填：是</para>
    /// <para>文件类型，需要与文件的 token 相匹配</para>
    /// <para>示例值：doc</para>
    /// <list type="bullet">
    /// <item>doc：文档</item>
    /// <item>sheet：电子表格</item>
    /// <item>file：云空间文件</item>
    /// <item>wiki：知识库节点</item>
    /// <item>bitable：多维表格</item>
    /// <item>docx：新版文档</item>
    /// <item>mindnote：思维笔记</item>
    /// <item>minutes：妙记</item>
    /// <item>slides：幻灯片</item>
    /// </list>
    /// </param>
    /// <param name="action">
    /// <para>必填：是</para>
    /// <para>需要判断的权限</para>
    /// <para>示例值：view</para>
    /// <list type="bullet">
    /// <item>view：阅读</item>
    /// <item>edit：编辑</item>
    /// <item>share：分享</item>
    /// <item>comment：评论</item>
    /// <item>export：导出</item>
    /// <item>copy：拷贝</item>
    /// <item>print：打印</item>
    /// <item>manage_public：管理权限设置</item>
    /// </list>
    /// </param>
    [HttpGet("/open-apis/drive/v1/permissions/{token}/members/auth")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDriveV1PermissionsByTokenMembersAuthResponseDto>> GetDriveV1PermissionsByTokenMembersAuthAsync(
        [PathQuery] string token,
        [PathQuery] string type,
        [PathQuery] string action);

    /// <summary>
    /// <para>【邮箱】批量删除邮件组成员</para>
    /// <para>接口ID：7187647376462872580</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/mail-group/mailgroup-member/batch_delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>一次请求可以删除一个邮件组中的多个成员。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:mailgroup</item>
    /// </list></para>
    /// </summary>
    /// <param name="mailgroup_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>The unique ID or email address of a mail group</para>
    /// <para>示例值：xxxxxxxxxxxxxxx or test_mail_group@xxx.xx</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpDelete("/open-apis/mail/v1/mailgroups/{mailgroup_id}/members/batch_delete")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteMailV1MailgroupsByMailgroupIdMembersBatchDeleteAsync(
        [PathQuery] string mailgroup_id,
        [JsonContent] Mail.DeleteMailV1MailgroupsByMailgroupIdMembersBatchDeleteBodyDto dto);

    /// <summary>
    /// <para>【邮箱】批量创建邮件组权限成员</para>
    /// <para>接口ID：7187647376462888964</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/mail-group/mailgroup-permission_member/batch_create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>一次请求可以给一个邮件组添加多个权限成员。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:mailgroup</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="mailgroup_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>The unique ID or email address of a mail group</para>
    /// <para>示例值：xxxxxxxxxxxxxxx or test_mail_group@xxx.xx</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：以自定义department_id来标识部门</item>
    /// <item>open_department_id：以open_department_id来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/mail/v1/mailgroups/{mailgroup_id}/permission_members/batch_create")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.PostMailV1MailgroupsByMailgroupIdPermissionMembersBatchCreateResponseDto>> PostMailV1MailgroupsByMailgroupIdPermissionMembersBatchCreateAsync(
        [PathQuery] string mailgroup_id,
        [JsonContent] Mail.PostMailV1MailgroupsByMailgroupIdPermissionMembersBatchCreateBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【邮箱】批量删除邮件组权限成员</para>
    /// <para>接口ID：7187647376462905348</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/mail-group/mailgroup-permission_member/batch_delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>一次请求可以删除一个邮件组中的多个权限成员。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:mailgroup</item>
    /// </list></para>
    /// </summary>
    /// <param name="mailgroup_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>The unique ID or email address of a mail group</para>
    /// <para>示例值：xxxxxxxxxxxxxxx or test_mail_group@xxx.xx</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpDelete("/open-apis/mail/v1/mailgroups/{mailgroup_id}/permission_members/batch_delete")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteMailV1MailgroupsByMailgroupIdPermissionMembersBatchDeleteAsync(
        [PathQuery] string mailgroup_id,
        [JsonContent] Mail.DeleteMailV1MailgroupsByMailgroupIdPermissionMembersBatchDeleteBodyDto dto);

    /// <summary>
    /// <para>【邮箱】批量添加公共邮箱成员</para>
    /// <para>接口ID：7187647376462921732</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/public-mailbox/public_mailbox-member/batch_create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>一次请求可以给一个公共邮箱添加多个成员。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:public_mailbox</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="public_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>The unique ID or email address of a public mailbox</para>
    /// <para>示例值：xxxxxxxxxxxxxxx or test_public_mailbox@xxx.xx</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/mail/v1/public_mailboxes/{public_mailbox_id}/members/batch_create")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.PostMailV1PublicMailboxesByPublicMailboxIdMembersBatchCreateResponseDto>> PostMailV1PublicMailboxesByPublicMailboxIdMembersBatchCreateAsync(
        [PathQuery] string public_mailbox_id,
        [JsonContent] Mail.PostMailV1PublicMailboxesByPublicMailboxIdMembersBatchCreateBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【邮箱】批量删除公共邮箱成员</para>
    /// <para>接口ID：7187647376462938116</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/public-mailbox/public_mailbox-member/batch_delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>一次请求可以删除一个公共邮箱中的多个成员。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:public_mailbox</item>
    /// </list></para>
    /// </summary>
    /// <param name="public_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>The unique ID or email address of a public mailbox</para>
    /// <para>示例值：xxxxxxxxxxxxxxx or test_public_mailbox@xxx.xx</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpDelete("/open-apis/mail/v1/public_mailboxes/{public_mailbox_id}/members/batch_delete")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteMailV1PublicMailboxesByPublicMailboxIdMembersBatchDeleteAsync(
        [PathQuery] string public_mailbox_id,
        [JsonContent] Mail.DeleteMailV1PublicMailboxesByPublicMailboxIdMembersBatchDeleteBodyDto dto);

    /// <summary>
    /// <para>【邮箱】批量创建邮件组成员</para>
    /// <para>接口ID：7187647376462954500</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/mail-v1/mail-group/mailgroup-member/batch_create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>一次请求可以给一个邮件组添加多个成员。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:mailgroup</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="mailgroup_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>The unique ID or email address of a mail group</para>
    /// <para>示例值：xxxxxxxxxxxxxxx or test_mail_group@xxx.xx</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：以自定义department_id来标识部门</item>
    /// <item>open_department_id：以open_department_id来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/mail/v1/mailgroups/{mailgroup_id}/members/batch_create")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.PostMailV1MailgroupsByMailgroupIdMembersBatchCreateResponseDto>> PostMailV1MailgroupsByMailgroupIdMembersBatchCreateAsync(
        [PathQuery] string mailgroup_id,
        [JsonContent] Mail.PostMailV1MailgroupsByMailgroupIdMembersBatchCreateBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【通讯录】删除职级</para>
    /// <para>接口ID：7194273512282390532</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/job_level/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口删除指定的职级。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact</item>
    /// <item>contact:job_level</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_level_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>职级 ID。获取方式：</para>
    /// <para>- 创建职级时，可以从返回结果中获取职级 ID。</para>
    /// <para>- 调用[获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list)接口，查找指定职级的 ID 信息。</para>
    /// <para>示例值：mga5oa8ayjlp9rb</para>
    /// </param>
    [HttpDelete("/open-apis/contact/v3/job_levels/{job_level_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteContactV3JobLevelsByJobLevelIdAsync(
        [PathQuery] string job_level_id);

    /// <summary>
    /// <para>【通讯录】更新序列</para>
    /// <para>接口ID：7194273512282406916</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/job_family/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口更新指定序列的信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact</item>
    /// <item>contact:job_family</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_family_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>序列 ID。获取方式：</para>
    /// <para>- [创建序列](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_family/create)时可以从返回结果中获取（job_family_id）。</para>
    /// <para>- 调用[获取租户序列列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_family/list)接口获取序列 ID。</para>
    /// <para>示例值：mga5oa8ayjlpkzy</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/contact/v3/job_families/{job_family_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.PutContactV3JobFamiliesByJobFamilyIdResponseDto>> PutContactV3JobFamiliesByJobFamilyIdAsync(
        [PathQuery] string job_family_id,
        [JsonContent] Contact.PutContactV3JobFamiliesByJobFamilyIdBodyDto dto);

    /// <summary>
    /// <para>【通讯录】创建职级</para>
    /// <para>接口ID：7194273512282423300</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/job_level/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口创建一个职级。职级是用户属性之一，用于标识用户的职位级别，例如 P1、P2、P3、P4。</para>
    /// <para>## 使用限制</para>
    /// <para>单租户内职级数量总数上限为 10,000，但需要注意，如果总数超过 4,000，则无法在[管理后台](https://feishu.cn/admin)打开职级列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact</item>
    /// <item>contact:job_level</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/contact/v3/job_levels")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.PostContactV3JobLevelsResponseDto>> PostContactV3JobLevelsAsync(
        [JsonContent] Contact.PostContactV3JobLevelsBodyDto dto);

    /// <summary>
    /// <para>【通讯录】更新职级</para>
    /// <para>接口ID：7194273512282439684</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/job_level/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口更新指定职级的信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact</item>
    /// <item>contact:job_level</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_level_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>职级 ID。获取方式：</para>
    /// <para>- 创建职级时，可以从返回结果中获取职级 ID。</para>
    /// <para>- 调用[获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list)接口，查找指定职级的 ID 信息。</para>
    /// <para>示例值：mga5oa8ayjlp9rb</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/contact/v3/job_levels/{job_level_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.PutContactV3JobLevelsByJobLevelIdResponseDto>> PutContactV3JobLevelsByJobLevelIdAsync(
        [PathQuery] string job_level_id,
        [JsonContent] Contact.PutContactV3JobLevelsByJobLevelIdBodyDto dto);

    /// <summary>
    /// <para>【通讯录】获取单个序列信息</para>
    /// <para>接口ID：7194273512282456068</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/job_family/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口获取指定序列的信息，包括序列的名称、描述、启用状态以及 ID 等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:job_family</item>
    /// <item>contact:job_family:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_family_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>序列 ID。获取方式：</para>
    /// <para>- [创建序列](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_family/create)时可以从返回结果中获取（job_family_id）。</para>
    /// <para>- 调用[获取租户序列列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_family/list)接口获取序列 ID。</para>
    /// <para>示例值：mga5oa8ayjlp9rb</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/job_families/{job_family_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3JobFamiliesByJobFamilyIdResponseDto>> GetContactV3JobFamiliesByJobFamilyIdAsync(
        [PathQuery] string job_family_id);

    /// <summary>
    /// <para>【通讯录】获取单个职级信息</para>
    /// <para>接口ID：7194273512282472452</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/job_level/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口获取指定职级的信息，包括职级名称、描述、排序、状态以及多语言等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:job_level</item>
    /// <item>contact:job_level:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_level_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>职级 ID。获取方式：</para>
    /// <para>- 创建职级时，可以从返回结果中获取职级 ID。</para>
    /// <para>- 调用[获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list)接口，查找指定职级的 ID 信息。</para>
    /// <para>示例值：mga5oa8ayjlp9rb</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/job_levels/{job_level_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3JobLevelsByJobLevelIdResponseDto>> GetContactV3JobLevelsByJobLevelIdAsync(
        [PathQuery] string job_level_id);

    /// <summary>
    /// <para>【通讯录】获取租户职级列表</para>
    /// <para>接口ID：7194273514093379588</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/job_level/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口获取当前租户下的职级信息，包括职级名称、描述、排序、状态以及多语言等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:job_level</item>
    /// <item>contact:job_level:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，用于限制一次请求所返回的数据条目数。</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：AQD9/Rn9eij9Pm39ED40/RD/cIFmu77WxpxPB/2oHfQLZ+G8JG6tK7+ZnHiT7COhD2hMSICh/eBl7cpzU6JEC3J7COKNe4jrQ8ExwBCR</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="name">
    /// <para>必填：否</para>
    /// <para>职级名称。</para>
    /// <para>- 传入该字段时，可查询指定职级名称对应的职级信息（不支持模糊查询）。</para>
    /// <para>- 不传入该字段时，查询当前租户下所以职级的信息。</para>
    /// <para>示例值：高级专家</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/job_levels")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3JobLevelsResponseDto>> GetContactV3JobLevelsAsync(
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? name = null);

    /// <summary>
    /// <para>【通讯录】获取租户序列列表</para>
    /// <para>接口ID：7194273514093395972</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/job_family/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口获取当前租户下的序列信息，包含序列的名称、描述、启用状态以及 ID 等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:job_family</item>
    /// <item>contact:job_family:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，用于限制一次请求所返回的数据条目数。</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：3</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="name">
    /// <para>必填：否</para>
    /// <para>序列名称。</para>
    /// <para>- 传入该字段时，可查询指定序列名称对应的序列信息（不支持模糊查询）。</para>
    /// <para>- 不传入该字段时，查询当前租户下所有序列的信息。</para>
    /// <para>示例值：产品</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/job_families")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3JobFamiliesResponseDto>> GetContactV3JobFamiliesAsync(
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? name = null);

    /// <summary>
    /// <para>【通讯录】创建序列</para>
    /// <para>接口ID：7194273514093412356</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/job_family/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口创建一个序列。序列是用户属性之一，用来定义用户的工作类型，例如产品、研发、运营等。</para>
    /// <para>## 使用限制</para>
    /// <para>单租户内序列数量总数上限为 10,000，但需要注意，如果总数超过 4,000，则无法在[管理后台](https://feishu.cn/admin)打开序列列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact</item>
    /// <item>contact:job_family</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/contact/v3/job_families")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.PostContactV3JobFamiliesResponseDto>> PostContactV3JobFamiliesAsync(
        [JsonContent] Contact.PostContactV3JobFamiliesBodyDto dto);

    /// <summary>
    /// <para>【通讯录】删除序列</para>
    /// <para>接口ID：7194273514093428740</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/job_family/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口删除指定序列。</para>
    /// <para>## 使用限制</para>
    /// <para>仅支持删除没有子序列的序列。如果序列内存在子序列，则不能直接删除。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact</item>
    /// <item>contact:job_family</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_family_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>序列 ID。获取方式：</para>
    /// <para>- [创建序列](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_family/create)时可以从返回结果中获取（job_family_id）。</para>
    /// <para>- 调用[获取租户序列列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_family/list)接口获取序列 ID。</para>
    /// <para>示例值：mga5oa8ayjlp9rb</para>
    /// </param>
    [HttpDelete("/open-apis/contact/v3/job_families/{job_family_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteContactV3JobFamiliesByJobFamilyIdAsync(
        [PathQuery] string job_family_id);

    /// <summary>
    /// <para>【视频会议】查询会议室预定表单</para>
    /// <para>接口ID：7194790671877144578</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/scope_config/get-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询会议室预定表单。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// <item>vc:room:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="reserve_config_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>会议室或层级id</para>
    /// <para>示例值：omm_3c5dd7e09bac0c1758fcf9511bd1a771</para>
    /// </param>
    /// <param name="scope_type">
    /// <para>必填：是</para>
    /// <para>1代表层级，2代表会议室</para>
    /// <para>示例值：2</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/vc/v1/reserve_configs/{reserve_config_id}/form")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.GetVcV1ReserveConfigsByReserveConfigIdFormResponseDto>> GetVcV1ReserveConfigsByReserveConfigIdFormAsync(
        [PathQuery] string reserve_config_id,
        [PathQuery] int scope_type,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】更新会议室预定表单</para>
    /// <para>接口ID：7194790671877160962</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/scope_config/patch-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新会议室预定表单。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="reserve_config_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>会议室或层级ID</para>
    /// <para>示例值：omm_3c5dd7e09bac0c1758fcf9511bd1a771</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/vc/v1/reserve_configs/{reserve_config_id}/form")]
    System.Threading.Tasks.Task<FeishuResponse> PatchVcV1ReserveConfigsByReserveConfigIdFormAsync(
        [PathQuery] string reserve_config_id,
        [JsonContent] Vc.PatchVcV1ReserveConfigsByReserveConfigIdFormBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】更新会议室预定管理员</para>
    /// <para>接口ID：7194805625628000259</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/scope_config/patch-3</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新会议室预定管理员。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="reserve_config_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>会议室或层级id</para>
    /// <para>示例值：omm_3c5dd7e09bac0c1758fcf9511bd1a771</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/vc/v1/reserve_configs/{reserve_config_id}/admin")]
    System.Threading.Tasks.Task<FeishuResponse> PatchVcV1ReserveConfigsByReserveConfigIdAdminAsync(
        [PathQuery] string reserve_config_id,
        [JsonContent] Vc.PatchVcV1ReserveConfigsByReserveConfigIdAdminBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】查询会议明细</para>
    /// <para>接口ID：7194805625628033027</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/meeting-room-data/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>查询会议明细，具体权限要求请参考[资源介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting-room-data/resource-introduction)</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="start_time">
    /// <para>必填：是</para>
    /// <para>查询开始时间（unix时间，单位sec）</para>
    /// <para>示例值：1655276858</para>
    /// </param>
    /// <param name="end_time">
    /// <para>必填：是</para>
    /// <para>查询结束时间（unix时间，单位sec）</para>
    /// <para>示例值：1655276858</para>
    /// </param>
    /// <param name="meeting_status">
    /// <para>必填：否</para>
    /// <para>会议状态（不传默认为已结束会议）</para>
    /// <para>示例值：2</para>
    /// <list type="bullet">
    /// <item>1：进行中</item>
    /// <item>2：已结束</item>
    /// <item>3：待召开。该枚举值只读，请求时不支持选择。</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="meeting_no">
    /// <para>必填：否</para>
    /// <para>按9位会议号筛选（最多一个筛选条件）</para>
    /// <para>示例值：123456789</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id">
    /// <para>必填：否</para>
    /// <para>按参会Lark用户筛选（最多一个筛选条件）</para>
    /// <para>示例值：ou_3ec3f6a28a0d08c45d895276e8e5e19b</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="room_id">
    /// <para>必填：否</para>
    /// <para>按参会Rooms筛选（最多一个筛选条件）</para>
    /// <para>示例值：omm_eada1d61a550955240c28757e7dec3af</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="meeting_type">
    /// <para>必填：否</para>
    /// <para>按会议类型筛选（最多一个筛选条件）</para>
    /// <para>示例值：2</para>
    /// <list type="bullet">
    /// <item>1：全部类型（默认）</item>
    /// <item>2：视频会议</item>
    /// <item>3：本地投屏</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页尺寸大小</para>
    /// <para>示例值：20</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：20</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/vc/v1/meeting_list")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.GetVcV1MeetingListResponseDto>> GetVcV1MeetingListAsync(
        [PathQuery] string start_time,
        [PathQuery] string end_time,
        [PathQuery] int? meeting_status = null,
        [PathQuery] string? meeting_no = null,
        [PathQuery] string? user_id = null,
        [PathQuery] string? room_id = null,
        [PathQuery] int? meeting_type = null,
        [PathQuery] int? page_size = 20,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】查询参会人会议质量数据</para>
    /// <para>接口ID：7194805625628049411</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/meeting-room-data/get-3</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>查询参会人会议质量数据（仅支持已结束会议），具体权限要求请参考「资源介绍」。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="meeting_start_time">
    /// <para>必填：是</para>
    /// <para>会议开始时间（需要精确到一分钟，unix时间，单位sec）</para>
    /// <para>示例值：1655276858</para>
    /// </param>
    /// <param name="meeting_end_time">
    /// <para>必填：是</para>
    /// <para>会议结束时间（unix时间，单位sec）</para>
    /// <para>示例值：1655276858</para>
    /// </param>
    /// <param name="meeting_no">
    /// <para>必填：是</para>
    /// <para>9位会议号</para>
    /// <para>示例值：123456789</para>
    /// </param>
    /// <param name="join_time">
    /// <para>必填：是</para>
    /// <para>参会人入会时间（unix时间，单位sec），可从「查询参会人明细」返回结果获取</para>
    /// <para>示例值：1655276858</para>
    /// </param>
    /// <param name="user_id">
    /// <para>必填：否</para>
    /// <para>参会人为Lark用户时填入，room_id和user_id必须只填一个</para>
    /// <para>示例值：ou_3ec3f6a28a0d08c45d895276e8e5e19b</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="room_id">
    /// <para>必填：否</para>
    /// <para>参会人为Rooms时填入，room_id和user_id必须只填一个</para>
    /// <para>示例值：omm_eada1d61a550955240c28757e7dec3af</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页尺寸大小</para>
    /// <para>示例值：20</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：20</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/vc/v1/participant_quality_list")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.GetVcV1ParticipantQualityListResponseDto>> GetVcV1ParticipantQualityListAsync(
        [PathQuery] string meeting_start_time,
        [PathQuery] string meeting_end_time,
        [PathQuery] string meeting_no,
        [PathQuery] string join_time,
        [PathQuery] string? user_id = null,
        [PathQuery] string? room_id = null,
        [PathQuery] int? page_size = 20,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】查询会议室预定数据</para>
    /// <para>接口ID：7194805625628065795</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/meeting-room-data/get-4</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>查询会议室预定数据，具体权限要求请参考「资源介绍」。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="room_level_id">
    /// <para>必填：是</para>
    /// <para>层级ID，如传递非omb前缀的异常ID时，会默认使用租户层级进行兜底</para>
    /// <para>示例值：omb_57c9cc7d9a81e27e54c8fabfd02759e7</para>
    /// </param>
    /// <param name="need_topic">
    /// <para>必填：否</para>
    /// <para>是否展示会议主题</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="start_time">
    /// <para>必填：是</para>
    /// <para>查询开始时间（unix时间，单位sec）</para>
    /// <para>示例值：1655276858</para>
    /// </param>
    /// <param name="end_time">
    /// <para>必填：是</para>
    /// <para>查询结束时间（unix时间，单位sec）</para>
    /// <para>示例值：1655276858</para>
    /// </param>
    /// <param name="room_ids">
    /// <para>必填：是</para>
    /// <para>待筛选的会议室ID列表；如需要传递多个会议室ID，需要通过room_ids=aaaa&amp;room_ids=bbbb&amp;room_ids=cccc的形式传递</para>
    /// <para>示例值：["omm_12443435556"]</para>
    /// </param>
    /// <param name="is_exclude">
    /// <para>必填：否</para>
    /// <para>默认为false；若为false，则获取room_ids字段传入的会议室列表预定数据；若为true，则根据room_level_id字段获取层级下的会议室列表，并过滤掉room_ids范围的会议室，获取剩余会议室的预定数据</para>
    /// <para>示例值：false</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页尺寸大小</para>
    /// <para>示例值：20</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：20</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/vc/v1/resource_reservation_list")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.GetVcV1ResourceReservationListResponseDto>> GetVcV1ResourceReservationListAsync(
        [PathQuery] string room_level_id,
        [PathQuery] string start_time,
        [PathQuery] string end_time,
        [PathQuery] string[] room_ids,
        [PathQuery] bool? need_topic = null,
        [PathQuery] bool? is_exclude = null,
        [PathQuery] int? page_size = 20,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【视频会议】查询会议室预定管理员</para>
    /// <para>接口ID：7194805625628131331</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/scope_config/get-3</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询会议室预定管理员。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// <item>vc:room:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="reserve_config_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>会议室或层级id</para>
    /// <para>示例值：omm_3c5dd7e09bac0c1758fcf9511bd1a771</para>
    /// </param>
    /// <param name="scope_type">
    /// <para>必填：是</para>
    /// <para>会议室或层级</para>
    /// <para>示例值：2</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/vc/v1/reserve_configs/{reserve_config_id}/admin")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.GetVcV1ReserveConfigsByReserveConfigIdAdminResponseDto>> GetVcV1ReserveConfigsByReserveConfigIdAdminAsync(
        [PathQuery] string reserve_config_id,
        [PathQuery] int scope_type,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】查询参会人明细</para>
    /// <para>接口ID：7194805625628147715</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/meeting-room-data/get-2</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>查询参会人明细，具体权限要求请参考[资源介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting-room-data/resource-introduction)</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="meeting_start_time">
    /// <para>必填：是</para>
    /// <para>会议开始时间（unix时间，单位sec）</para>
    /// <para>示例值：1655276858</para>
    /// </param>
    /// <param name="meeting_end_time">
    /// <para>必填：是</para>
    /// <para>会议结束时间（unix时间，单位sec，若是进行中会议可填当前时间，否则填准确的会议结束时间）</para>
    /// <para>示例值：1655276858</para>
    /// </param>
    /// <param name="meeting_status">
    /// <para>必填：否</para>
    /// <para>会议状态（不传默认为已结束会议）</para>
    /// <para>示例值：2</para>
    /// <list type="bullet">
    /// <item>1：进行中</item>
    /// <item>2：已结束</item>
    /// <item>3：待召开</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="meeting_no">
    /// <para>必填：是</para>
    /// <para>9位会议号</para>
    /// <para>示例值：123456789</para>
    /// </param>
    /// <param name="user_id">
    /// <para>必填：否</para>
    /// <para>按参会Lark用户筛选（最多一个筛选条件）</para>
    /// <para>示例值：ou_3ec3f6a28a0d08c45d895276e8e5e19b</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="room_id">
    /// <para>必填：否</para>
    /// <para>按参会Rooms筛选（最多一个筛选条件）</para>
    /// <para>示例值：omm_eada1d61a550955240c28757e7dec3af</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页尺寸大小</para>
    /// <para>示例值：20</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：20</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/vc/v1/participant_list")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.GetVcV1ParticipantListResponseDto>> GetVcV1ParticipantListAsync(
        [PathQuery] string meeting_start_time,
        [PathQuery] string meeting_end_time,
        [PathQuery] string meeting_no,
        [PathQuery] int? meeting_status = null,
        [PathQuery] string? user_id = null,
        [PathQuery] string? room_id = null,
        [PathQuery] int? page_size = 20,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】创建背调套餐和附加调查项</para>
    /// <para>接口ID：7195815976042512386</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/ecological-docking/eco_background_check_package/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>在指定背调帐号下创建可用的背调套餐列表和附加调查项信息列表。该接口为增量创建，每次调用会在原有的套餐列表和附加调查项列表基础上新增。</para>
    /// <para>## 注意事项</para>
    /// <para>已经创建过的套餐 ID和附加调查项 ID无法重复创建，如需修改，请使用[更新背调套餐和附加调查项](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/eco_background_check_package/batch_update)或</para>
    /// <para>[删除背调套餐和附加调查项](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/eco_background_check_package/batch_delete)接口进行操作。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:background_check_order</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/eco_background_check_packages")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1EcoBackgroundCheckPackagesAsync(
        [JsonContent] Hire.PostHireV1EcoBackgroundCheckPackagesBodyDto dto);

    /// <summary>
    /// <para>【招聘】删除背调套餐和附加调查项</para>
    /// <para>接口ID：7195815976042528770</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/ecological-docking/eco_background_check_package/batch_delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除背调帐号下的背调套餐和附加调查项信息。删除操作不会影响已创建的背调。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:background_check_order</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/eco_background_check_packages/batch_delete")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1EcoBackgroundCheckPackagesBatchDeleteAsync(
        [JsonContent] Hire.PostHireV1EcoBackgroundCheckPackagesBatchDeleteBodyDto dto);

    /// <summary>
    /// <para>【招聘】删除账号自定义字段</para>
    /// <para>接口ID：7195815976042545154</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/ecological-docking/eco_account_custom_field/batch_delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>飞书招聘的背调或笔试服务商，可通过此接口删除账号自定义字段（如客户在服务商处的租户 ID、账号 ID等）。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:background_check_order</item>
    /// <item>hire:exam</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/eco_account_custom_fields/batch_delete")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1EcoAccountCustomFieldsBatchDeleteAsync(
        [JsonContent] Hire.PostHireV1EcoAccountCustomFieldsBatchDeleteBodyDto dto);

    /// <summary>
    /// <para>【招聘】创建试卷列表</para>
    /// <para>接口ID：7195815976042561538</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/ecological-docking/eco_exam_paper/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>飞书招聘的笔试服务商，在完成[账号绑定](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/eco_account/events/created)后，可通过本接口在客户的笔试帐号下创建试卷列表。若客户的笔试账号为「未激活」、「停用」状态，则试卷创建成功后，客户的账号将变为「正常」状态，可正常安排笔试。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:exam</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/eco_exam_papers")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1EcoExamPapersAsync(
        [JsonContent] Hire.PostHireV1EcoExamPapersBodyDto dto);

    /// <summary>
    /// <para>【招聘】删除试卷列表</para>
    /// <para>接口ID：7195815976042577922</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/ecological-docking/eco_exam_paper/batch_delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>飞书招聘的笔试服务商，可通过该接口删除客户笔试帐号下的试卷列表。删除操作不影响已安排的笔试，删除不存在的试卷时不会报错。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:exam</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/eco_exam_papers/batch_delete")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1EcoExamPapersBatchDeleteAsync(
        [JsonContent] Hire.PostHireV1EcoExamPapersBatchDeleteBodyDto dto);

    /// <summary>
    /// <para>【招聘】更新背调自定义字段</para>
    /// <para>接口ID：7195815976042594306</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/ecological-docking/eco_background_check_custom_field/batch_update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新用户在发起背调时展示的表单自定义字段名称和描述。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:background_check_order</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/hire/v1/eco_background_check_custom_fields/batch_update")]
    System.Threading.Tasks.Task<FeishuResponse> PatchHireV1EcoBackgroundCheckCustomFieldsBatchUpdateAsync(
        [JsonContent] Hire.PatchHireV1EcoBackgroundCheckCustomFieldsBatchUpdateBodyDto dto);

    /// <summary>
    /// <para>【招聘】回传笔试安排结果</para>
    /// <para>接口ID：7195815979079401473</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/ecological-docking/eco_exam/login_info</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>飞书招聘的笔试服务商，在收到[创建笔试](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/eco_exam/events/created)事件并安排笔试后，应通过本接口</para>
    /// <para>回传笔试安排结果。若安排成功，须返回笔试链接；若笔试链接需要登录鉴权，则须返回登录凭证（`username`，`password`)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:exam</item>
    /// <item>hire:exam:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="exam_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>笔试 ID。可通过[创建笔试](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/eco_exam/events/created)事件获取</para>
    /// <para>示例值：7178536692385679677</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/eco_exams/{exam_id}/login_info")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1EcoExamsByExamIdLoginInfoAsync(
        [PathQuery] string exam_id,
        [JsonContent] Hire.PostHireV1EcoExamsByExamIdLoginInfoBodyDto dto);

    /// <summary>
    /// <para>【招聘】更新账号自定义字段</para>
    /// <para>接口ID：7195815979079434241</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/ecological-docking/eco_account_custom_field/batch_update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>飞书招聘的背调或笔试服务商，可通过此接口更新账号自定义字段（比如客户在服务商处的租户 ID、账号 ID等）的名称和描述。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:background_check_order</item>
    /// <item>hire:exam</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/hire/v1/eco_account_custom_fields/batch_update")]
    System.Threading.Tasks.Task<FeishuResponse> PatchHireV1EcoAccountCustomFieldsBatchUpdateAsync(
        [JsonContent] Hire.PatchHireV1EcoAccountCustomFieldsBatchUpdateBodyDto dto);

    /// <summary>
    /// <para>【招聘】创建背调自定义字段</para>
    /// <para>接口ID：7195815979079450625</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/ecological-docking/eco_background_check_custom_field/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建用户在发起背调时展示的表单自定义字段。自定义字段支持多种类型如单行文本、单选等，可以设置为必填或非必填。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:background_check_order</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/eco_background_check_custom_fields")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1EcoBackgroundCheckCustomFieldsAsync(
        [JsonContent] Hire.PostHireV1EcoBackgroundCheckCustomFieldsBodyDto dto);

    /// <summary>
    /// <para>【招聘】回传笔试结果</para>
    /// <para>接口ID：7195815979079467009</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/ecological-docking/eco_exam/update_result</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>飞书招聘的笔试服务商，可通过该接口回传候选人的笔试结果。回传笔试结果后，候选人在飞书招聘内的笔试状态将变为「已作答」。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:exam</item>
    /// <item>hire:exam:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="exam_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>笔试 ID，可通过[创建笔试](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/eco_exam/events/created)事件获取</para>
    /// <para>示例值：7178536692385679677</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/eco_exams/{exam_id}/update_result")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1EcoExamsByExamIdUpdateResultAsync(
        [PathQuery] string exam_id,
        [JsonContent] Hire.PostHireV1EcoExamsByExamIdUpdateResultBodyDto dto);

    /// <summary>
    /// <para>【招聘】更新背调订单进度</para>
    /// <para>接口ID：7195815979079483393</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/ecological-docking/eco_background_check/update_progress</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新指定背调订单的进度信息和阶段性报告，进度信息将会被展示在「飞书招聘」-「投递详情页」-「背调卡片」上，告知用户目前背调订单的流转状态。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:background_check_order</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/eco_background_checks/update_progress")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1EcoBackgroundChecksUpdateProgressAsync(
        [JsonContent] Hire.PostHireV1EcoBackgroundChecksUpdateProgressBodyDto dto);

    /// <summary>
    /// <para>【招聘】回传背调订单的最终结果</para>
    /// <para>接口ID：7195815979079499777</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/ecological-docking/eco_background_check/update_result</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>回传背调的最终结果和终版报告。回传后，若租户未启用背调报告审批功能，则背调订单状态将会直接变成「已完成」。若启用背调报告审批功能，则在管理员审批通过后，订单状态流转为「已完成」。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:background_check_order</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/eco_background_checks/update_result")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1EcoBackgroundChecksUpdateResultAsync(
        [JsonContent] Hire.PostHireV1EcoBackgroundChecksUpdateResultBodyDto dto);

    /// <summary>
    /// <para>【招聘】更新试卷列表</para>
    /// <para>接口ID：7195815979079532545</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/ecological-docking/eco_exam_paper/batch_update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>飞书招聘的笔试服务商，可通过该接口更新客户笔试账号下的试卷列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:exam</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/hire/v1/eco_exam_papers/batch_update")]
    System.Threading.Tasks.Task<FeishuResponse> PatchHireV1EcoExamPapersBatchUpdateAsync(
        [JsonContent] Hire.PatchHireV1EcoExamPapersBatchUpdateBodyDto dto);

    /// <summary>
    /// <para>【招聘】更新背调套餐和附加调查项</para>
    /// <para>接口ID：7195815979079548929</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/ecological-docking/eco_background_check_package/batch_update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新指定背调帐号下的背调套餐和附加调查项信息。如需新增背调套餐、附加调查项请使用[创建背调套餐和附加调查项](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/eco_background_check_package/create)进行添加。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:background_check_order</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/hire/v1/eco_background_check_packages/batch_update")]
    System.Threading.Tasks.Task<FeishuResponse> PatchHireV1EcoBackgroundCheckPackagesBatchUpdateAsync(
        [JsonContent] Hire.PatchHireV1EcoBackgroundCheckPackagesBatchUpdateBodyDto dto);

    /// <summary>
    /// <para>【招聘】删除背调自定义字段</para>
    /// <para>接口ID：7195815979079565313</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/ecological-docking/eco_background_check_custom_field/batch_delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除用户在发起背调时展示的表单自定义字段。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:background_check_order</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/eco_background_check_custom_fields/batch_delete")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1EcoBackgroundCheckCustomFieldsBatchDeleteAsync(
        [JsonContent] Hire.PostHireV1EcoBackgroundCheckCustomFieldsBatchDeleteBodyDto dto);

    /// <summary>
    /// <para>【招聘】创建账号自定义字段</para>
    /// <para>接口ID：7195815979079581697</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/ecological-docking/eco_account_custom_field/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>飞书招聘的背调或笔试服务商，可通过此接口创建账号自定义字段，用来标识飞书招聘客户在服务商处的身份（比如客户在服务商处的租户 ID、账号 ID等字段）。</para>
    /// <para>## 使用流程</para>
    /// <para>客户在「飞书招聘」-「设置」-「生态对接」-「笔试/背景调查」添加服务商账号时，需填写本接口创建的自定义字段，之后系统将通过[账号绑定](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/eco_account/events/created)事件将客户填入的自定义字段值推送给服务商，服务商可据此识别和绑定飞书招聘客户，并以此来[创建背调套餐和附加调查项](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/eco_background_check_package/create)或[创建试卷列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/eco_exam_paper/create)等。</para>
    /// <para>详细的接入步骤可参考 [背调/笔试生态接入概览文档](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/ecological-docking/summary)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:background_check_order</item>
    /// <item>hire:exam</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/eco_account_custom_fields")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1EcoAccountCustomFieldsAsync(
        [JsonContent] Hire.PostHireV1EcoAccountCustomFieldsBodyDto dto);

    /// <summary>
    /// <para>【招聘】终止背调订单</para>
    /// <para>接口ID：7195815979079598081</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/ecological-docking/eco_background_check/cancel</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用此接口将会将背调订单状态变成已终止，已终止订单将将无法通过[更新背调订单进度](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/eco_background_check/update_progress)和[回传背调订单的最终结果](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/eco_background_check/update_result)修改订单进度和最终结果。 调用此接口前，建议先调用[更新背调订单进度](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/eco_background_check/update_progress)接口将订单进度更新为「已终止」。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:background_check_order</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/eco_background_checks/cancel")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1EcoBackgroundChecksCancelAsync(
        [JsonContent] Hire.PostHireV1EcoBackgroundChecksCancelBodyDto dto);

    /// <summary>
    /// <para>【通讯录】查询角色下的所有成员信息</para>
    /// <para>接口ID：7200215886840987676</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/functional_role-member/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用本接口查询指定角色内的所有成员信息，包括成员的用户 ID、管理范围。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:functional_role</item>
    /// <item>contact:functional_role:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="role_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>角色 ID。获取方式：</para>
    /// <para>- 在[创建角色](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/functional_role/create)时，可从返回结果中获取。</para>
    /// <para>- 企业管理员可以在 [管理后台](https://feishu.cn/admin) &gt; **组织架构** &gt; **角色管理** 页面，在角色名称右侧获取角色 ID。</para>
    /// <para>示例值：7vrj3vk70xk7v5r</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，用于限制一次请求返回的数据条目数。</para>
    /// <para>示例值：50</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：dawdewd</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 `od-`，在租户内全局唯一。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/functional_roles/{role_id}/members")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3FunctionalRolesByRoleIdMembersResponseDto>> GetContactV3FunctionalRolesByRoleIdMembersAsync(
        [PathQuery] string role_id,
        [PathQuery] int? page_size = 20,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【通讯录】删除角色</para>
    /// <para>接口ID：7200215886841020444</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/functional_role/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口删除指定角色。</para>
    /// <para>## 注意事项</para>
    /// <para>角色内如果有成员，则不支持直接删除。你可以调用[查询角色下的所有成员信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/functional_role-member/list)接口，查看角色内是否还有成员，如果有，可以调用[删除角色下的成员](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/functional_role-member/batch_delete)接口，将角色成员删除后，再删除角色。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:functional_role</item>
    /// </list></para>
    /// </summary>
    /// <param name="role_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>角色 ID。获取方式：</para>
    /// <para>- 在创建角色时，可从返回结果中获取。</para>
    /// <para>- 企业管理员可以在 [管理后台](https://feishu.cn/admin) &gt; **组织架构** &gt; **角色管理** 页面，在角色名称右侧获取角色 ID。</para>
    /// <para>示例值：7vrj3vk70xk7v5r</para>
    /// </param>
    [HttpDelete("/open-apis/contact/v3/functional_roles/{role_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteContactV3FunctionalRolesByRoleIdAsync(
        [PathQuery] string role_id);

    /// <summary>
    /// <para>【通讯录】批量添加角色成员</para>
    /// <para>接口ID：7200215886841053212</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/functional_role-member/batch_create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口在指定角色内添加一个或多个成员。</para>
    /// <para>## 使用限制</para>
    /// <para>单个角色内成员数量上限为 1000。</para>
    /// <para>## 注意事项</para>
    /// <para>待添加到角色的成员，需要包含在当前应用的通讯录权限范围内，否则将会操作失败。如何设置通讯录权限范围，可参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:functional_role</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="role_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>角色 ID。获取方式：</para>
    /// <para>- 在[创建角色](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/functional_role/create)时，可从返回结果中获取。</para>
    /// <para>- 企业管理员可以在 [管理后台](https://feishu.cn/admin) &gt; **组织架构** &gt; **角色管理** 页面，在角色名称右侧获取角色 ID。</para>
    /// <para>示例值：7vrj3vk70xk7v5r</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/contact/v3/functional_roles/{role_id}/members/batch_create")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.PostContactV3FunctionalRolesByRoleIdMembersBatchCreateResponseDto>> PostContactV3FunctionalRolesByRoleIdMembersBatchCreateAsync(
        [PathQuery] string role_id,
        [JsonContent] Contact.PostContactV3FunctionalRolesByRoleIdMembersBatchCreateBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【通讯录】查询角色下某个成员的管理范围</para>
    /// <para>接口ID：7200215886841069596</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/functional_role-member/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用本接口查询指定角色内的指定成员的管理范围。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:functional_role</item>
    /// <item>contact:functional_role:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="role_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>角色 ID。获取方式：</para>
    /// <para>- 在[创建角色](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/functional_role/create)时，可从返回结果中获取。</para>
    /// <para>- 企业管理员可以在 [管理后台](https://feishu.cn/admin) &gt; **组织架构** &gt; **角色管理** 页面，在角色名称右侧获取角色 ID。</para>
    /// <para>示例值：7vrj3vk70xk7v5r</para>
    /// </param>
    /// <param name="member_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>角色成员的用户 ID，ID 类型需要和查询参数 user_id_type 的取值保持一致。</para>
    /// <para>示例值：od-123456</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 `od-`，在租户内全局唯一。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/functional_roles/{role_id}/members/{member_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3FunctionalRolesByRoleIdMembersByMemberIdResponseDto>> GetContactV3FunctionalRolesByRoleIdMembersByMemberIdAsync(
        [PathQuery] string role_id,
        [PathQuery] string member_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【通讯录】修改角色名称</para>
    /// <para>接口ID：7200215886841085980</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/functional_role/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用本接口修改指定角色的角色名称。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:functional_role</item>
    /// </list></para>
    /// </summary>
    /// <param name="role_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>角色 ID。获取方式：</para>
    /// <para>- 在创建角色时，可从返回结果中获取。</para>
    /// <para>- 企业管理员可以在 [管理后台](https://feishu.cn/admin) &gt; **组织架构** &gt; **角色管理** 页面，在角色名称右侧获取角色 ID。</para>
    /// <para>示例值：7vrj3vk70xk7v5r</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/contact/v3/functional_roles/{role_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PutContactV3FunctionalRolesByRoleIdAsync(
        [PathQuery] string role_id,
        [JsonContent] Contact.PutContactV3FunctionalRolesByRoleIdBodyDto dto);

    /// <summary>
    /// <para>【通讯录】删除角色下的成员</para>
    /// <para>接口ID：7200215886841102364</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/functional_role-member/batch_delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口在指定角色内删除一个或多个成员。</para>
    /// <para>## 注意事项</para>
    /// <para>待删除的角色成员，需要包含在当前应用的通讯录权限范围内，否则将会操作失败。如何设置通讯录权限范围，可参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:functional_role</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="role_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>角色 ID。获取方式：</para>
    /// <para>- 在[创建角色](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/functional_role/create)时，可从返回结果中获取。</para>
    /// <para>- 企业管理员可以在 [管理后台](https://feishu.cn/admin) &gt; **组织架构** &gt; **角色管理** 页面，在角色名称右侧获取角色 ID。</para>
    /// <para>示例值：7vrj3vk70xk7v5r</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/contact/v3/functional_roles/{role_id}/members/batch_delete")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.PatchContactV3FunctionalRolesByRoleIdMembersBatchDeleteResponseDto>> PatchContactV3FunctionalRolesByRoleIdMembersBatchDeleteAsync(
        [PathQuery] string role_id,
        [JsonContent] Contact.PatchContactV3FunctionalRolesByRoleIdMembersBatchDeleteBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【通讯录】批量设置角色成员管理范围</para>
    /// <para>接口ID：7200215886841118748</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/functional_role-member/scopes</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口为指定角色内的一个或多个角色成员设置管理范围。管理范围是指角色成员可以管理的部门范围。</para>
    /// <para>## 注意事项</para>
    /// <para>当前应用的通讯录权限范围需要包含待操作的用户与部门，否则将会操作失败。如何设置通讯录权限范围，可参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:functional_role</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="role_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>角色 ID。获取方式：</para>
    /// <para>- 在[创建角色](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/functional_role/create)时，可从返回结果中获取。</para>
    /// <para>- 企业管理员可以在 [管理后台](https://feishu.cn/admin) &gt; **组织架构** &gt; **角色管理** 页面，在角色名称右侧获取角色 ID。</para>
    /// <para>示例值：7vrj3vk70xk7v5r</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 `od-`，在租户内全局唯一。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/contact/v3/functional_roles/{role_id}/members/scopes")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.PatchContactV3FunctionalRolesByRoleIdMembersScopesResponseDto>> PatchContactV3FunctionalRolesByRoleIdMembersScopesAsync(
        [PathQuery] string role_id,
        [JsonContent] Contact.PatchContactV3FunctionalRolesByRoleIdMembersScopesBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【通讯录】创建角色</para>
    /// <para>接口ID：7200215886841135132</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/contact-v3/functional_role/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口创建一个角色。</para>
    /// <para>## 使用限制</para>
    /// <para>同一租户下，角色数量上限为 500。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:functional_role</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/contact/v3/functional_roles")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.PostContactV3FunctionalRolesResponseDto>> PostContactV3FunctionalRolesAsync(
        [JsonContent] Contact.PostContactV3FunctionalRolesBodyDto dto);

    /// <summary>
    /// <para>【企业信息】获取企业席位信息接口</para>
    /// <para>接口ID：7204729599813222401</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/tenant-v2/tenant-product_assign_info/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取租户下待分配的席位列表，包含席位名称、席位ID、数量及对应有效期。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>tenant:tenant.product_assign_info:read</item>
    /// </list></para>
    /// </summary>
    [HttpGet("/open-apis/tenant/v2/tenant/assign_info_list/query")]
    System.Threading.Tasks.Task<FeishuResponse<Tenant.GetTenantV2TenantAssignInfoListQueryResponseDto>> GetTenantV2TenantAssignInfoListQueryAsync();

    /// <summary>
    /// <para>【招聘】获取内推官网下职位广告详情</para>
    /// <para>接口ID：7204730827112185860</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/referral/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据职位广告 ID 获取内推官网下的职位广告详情，包含职位广告 ID 以及职位信息等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:referral_website:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_post_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>职位广告 ID，可通过[获取内推官网下职位广告列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/referral_website-job_post/list)获取</para>
    /// <para>示例值：6701528341100366094</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>指定查询结果中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 od-，在租户内全局唯一。</item>
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值：job_level_id</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，通过[获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_level_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/referral_websites/job_posts/{job_post_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1ReferralWebsitesJobPostsByJobPostIdResponseDto>> GetHireV1ReferralWebsitesJobPostsByJobPostIdAsync(
        [PathQuery] string job_post_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? job_level_id_type = "people_admin_job_level_id");

    /// <summary>
    /// <para>【招聘】获取内推官网下职位广告列表</para>
    /// <para>接口ID：7204730827112202244</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/referral/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取内推官网下的职位列表，包含职位广告ID、职位广告名称、职位信息等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:referral_website:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="process_type">
    /// <para>必填：否</para>
    /// <para>招聘流程类型</para>
    /// <para>示例值：1</para>
    /// <list type="bullet">
    /// <item>1：社招</item>
    /// <item>2：校招</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE2Mjc1NTUyMjM2NzIsImlkIjpudWxsfQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>每页获取记录数量</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>指定查询结果中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 od-，在租户内全局唯一。</item>
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值：job_level_id</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，通过[获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_level_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/referral_websites/job_posts")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1ReferralWebsitesJobPostsResponseDto>> GetHireV1ReferralWebsitesJobPostsAsync(
        [PathQuery] int? process_type = null,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? job_level_id_type = "people_admin_job_level_id");

    /// <summary>
    /// <para>【AI 能力】识别文件中的名片</para>
    /// <para>接口ID：7205462689421066244</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/ai/document_ai-v1/business_card/recognize</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>名片识别接口，通过上传 JPG / PNG / PDF 等文件类型进行一次性的名片识别。接口适用于20MB以下的文件，适用于英文、日语的名片。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>document_ai:business_card:recognize</item>
    /// </list></para>
    /// </summary>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>识别名片的源文件（支持 JPG / PNG / PDF）</para>
    /// </param>
    [HttpPost("/open-apis/document_ai/v1/business_card/recognize")]
    System.Threading.Tasks.Task<FeishuResponse<Ai.PostDocumentAiV1BusinessCardRecognizeResponseDto>> PostDocumentAiV1BusinessCardRecognizeAsync(
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【多维表格】复制多维表格</para>
    /// <para>接口ID：7205776220394160156</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/bitable-v1/app/copy</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>复制一个多维表格，可以指定复制到某个有权限的文件夹下。</para>
    /// <para>## 前提条件</para>
    /// <para>调用此接口前，请确保当前调用身份（tenant_access_token 或 user_access_token）已有多维表格和目标文件夹的阅读、编辑等文档权限，否则接口将返回 HTTP 403 或 400 状态码。了解更多，参考[如何为应用或用户开通云文档权限](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#16c6475a)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:app:copy</item>
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要复制的多维表格 App 的唯一标识。不同形态的多维表格，其 app_token 的获取方式不同，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview)获取。</para>
    /// <para>示例值：AW3Qbtr2cakCnesXzXVbbsrIcVT</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/bitable/v1/apps/{app_token}/copy")]
    System.Threading.Tasks.Task<FeishuResponse<Base.PostBitableV1AppsByAppTokenCopyResponseDto>> PostBitableV1AppsByAppTokenCopyAsync(
        [PathQuery] string app_token,
        [JsonContent] Base.PostBitableV1AppsByAppTokenCopyBodyDto dto);

    /// <summary>
    /// <para>【消息与群组】转发消息</para>
    /// <para>接口ID：7210967154035621891</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/message/forward</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口将一条指定的消息转发给用户、群聊或话题。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 向用户转发消息时，用户需要在机器人的[可用范围](https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/availability)内。</para>
    /// <para>- 向群组转发消息时，机器人需要在该群组中，且拥有发言权限。</para>
    /// <para>## 使用限制</para>
    /// <para>- 不支持转发红包、投票、语音、日程转让、系统消息、加密消息类型。</para>
    /// <para>- 不支持二次转发 **合并转发消息中的子消息**（即含有`upper_message_id`字段的消息）。</para>
    /// <para>- 为避免消息发送频繁对用户造成打扰，向同一用户发送消息的限频为 ==5 QPS==、向同一群组发送消息的限频为群内机器人共享 ==5 QPS==。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message</item>
    /// <item>im:message:send_as_bot</item>
    /// </list></para>
    /// </summary>
    /// <param name="message_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待转发的消息 ID。ID 获取方式：</para>
    /// <para>- 调用[发送消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create)接口后，从响应结果的 `message_id` 参数获取。</para>
    /// <para>- 监听[接收消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/events/receive)事件，当触发该事件后可以从事件体内获取消息的 `message_id`。</para>
    /// <para>- 调用[获取会话历史消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/list)接口，从响应结果的 `message_id` 参数获取。</para>
    /// <para>示例值：om_dc13264520392913993dd051dba21dcf</para>
    /// </param>
    /// <param name="receive_id_type">
    /// <para>必填：是</para>
    /// <para>消息接收者 ID 类型。</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>email：以用户的真实邮箱来标识用户。</item>
    /// <item>chat_id：以群 ID 来标识群聊。[了解更多：如何获取群 ID ](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)</item>
    /// <item>thread_id：以话题 ID 来标识话题。了解更多：[话题介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/thread-introduction) &lt;/md-enum-item&gt; **当值为 `user_id`，字段权限要求**： &lt;md-perm name="contact:user.employee_id:readonly" desc="获取用户 user ID" support_app_types="custom" tags=""&gt;获取用户 user ID&lt;/md-perm&gt;</item>
    /// </list>
    /// </param>
    /// <param name="uuid">
    /// <para>必填：否</para>
    /// <para>自定义设置的唯一字符串序列，用于在转发消息时请求去重。持有相同 uuid 的请求，在 1 小时内向同一目标的转发只可成功一次。</para>
    /// <para>示例值：b13g2t38-1jd2-458b-8djf-dtbca5104204</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/im/v1/messages/{message_id}/forward")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PostImV1MessagesByMessageIdForwardResponseDto>> PostImV1MessagesByMessageIdForwardAsync(
        [PathQuery] string message_id,
        [PathQuery] string receive_id_type,
        [JsonContent] Im.PostImV1MessagesByMessageIdForwardBodyDto dto,
        [PathQuery] string? uuid = null);

    /// <summary>
    /// <para>【消息与群组】合并转发消息</para>
    /// <para>接口ID：7210967154035638275</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/message/merge_forward</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>将来自同一个会话内的多条消息，合并转发给指定的用户、群聊或话题。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)</para>
    /// <para>- 向用户合并转发消息时，用户需要在机器人的[可用范围](https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/availability)内。</para>
    /// <para>- 向群组合并转发消息，机器人需要在该群组中，且拥有发言权限。</para>
    /// <para>- 合并转发生成的新消息的消息内容为固定值==Merged and Forwarded Message==，其中的子消息可以使用[获取指定消息的内容](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/get)接口获取。</para>
    /// <para>## 使用限制</para>
    /// <para>- 不支持合并转发[系统消息（system）](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/im-v1/message/create_json#e159cb73)。</para>
    /// <para>- 不支持合并转发来自不同群聊的消息。</para>
    /// <para>- 不支持同时合并转发来自多个话题中的消息。</para>
    /// <para>- 不支持同时合并转发普通消息与话题中的消息。</para>
    /// <para>- 不支持再次合并转发 **合并转发消息中的子消息**（含有==upper_message_id==字段的消息）。</para>
    /// <para>- 为避免消息发送频繁对用户造成打扰，向同一用户发送消息的限频为 ==5 QPS==、向同一群组发送消息的限频为群内机器人共享 ==5 QPS==。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message</item>
    /// <item>im:message:send_as_bot</item>
    /// </list></para>
    /// </summary>
    /// <param name="receive_id_type">
    /// <para>必填：是</para>
    /// <para>消息接收者 ID 类型。</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>email：以用户的真实邮箱来标识用户。</item>
    /// <item>chat_id：以群 ID 来标识群聊。[了解更多：如何获取群 ID ](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)</item>
    /// <item>thread_id：以话题 ID 来标识话题。了解更多：[话题介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/thread-introduction) &lt;/md-enum-item&gt; **当值为 `user_id`，字段权限要求**： &lt;md-perm name="contact:user.employee_id:readonly" desc="获取用户 user ID" support_app_types="custom" tags=""&gt;获取用户 user ID&lt;/md-perm&gt;</item>
    /// </list>
    /// </param>
    /// <param name="uuid">
    /// <para>必填：否</para>
    /// <para>自定义设置的唯一字符串序列，用于在合并转发消息时请求去重。持有相同 uuid 的请求，在 1 小时内向同一目标的合并转发只可成功一次。</para>
    /// <para>示例值：b13g2t38-1jd2-458b-8djf-dtbca5104204</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/im/v1/messages/merge_forward")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PostImV1MessagesMergeForwardResponseDto>> PostImV1MessagesMergeForwardAsync(
        [PathQuery] string receive_id_type,
        [JsonContent] Im.PostImV1MessagesMergeForwardBodyDto dto,
        [PathQuery] string? uuid = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】搜索员工异动信息</para>
    /// <para>接口ID：7211423970042150916</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/job_change/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>搜索异动信息，该接口会按照应用拥有的「员工数据」的权限范围返回数据，请确定在「开发者后台 - 权限管理 - 数据权限」中有申请「员工资源」权限范围</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:job_change:read</item>
    /// <item>corehr:job_change:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:contract.company:read</item>
    /// <item>corehr:contract.company:write</item>
    /// <item>corehr:contract.period:read</item>
    /// <item>corehr:contract.period:write</item>
    /// <item>corehr:employment.job_grade:read</item>
    /// <item>corehr:employment.job_grade:write</item>
    /// <item>corehr:employment.job_level:read</item>
    /// <item>corehr:employment.job_level:write</item>
    /// <item>corehr:employment.job:read</item>
    /// <item>corehr:job_change.custom_field:read</item>
    /// <item>corehr:job_change.employment_custom_field:read</item>
    /// <item>corehr:job_change.is_adjust_salary:read</item>
    /// <item>corehr:job_change.remark:read</item>
    /// <item>corehr:job_change.social_security_city:read</item>
    /// <item>corehr:job_data.compensation_type:read</item>
    /// <item>corehr:job_data.service_company:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6891251722631890445</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/job_changes/search")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2JobChangesSearchResponseDto>> PostCorehrV2JobChangesSearchAsync(
        [JsonContent] Corehr.PostCorehrV2JobChangesSearchBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】搜索员工信息</para>
    /// <para>接口ID：7211423970042167300</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/employee/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询员工的工作信息、个人信息等数据</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:employee:read</item>
    /// <item>corehr:employee:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:contract.period:read</item>
    /// <item>corehr:contract.period:write</item>
    /// <item>corehr:employee.all_bp:read</item>
    /// <item>corehr:employee.bp:read</item>
    /// <item>corehr:employment.archive_cpst_plan:read</item>
    /// <item>corehr:employment.assignment_pay_group:read</item>
    /// <item>corehr:employment.assignment:read</item>
    /// <item>corehr:employment.contract_type:read</item>
    /// <item>corehr:employment.custom_field:read</item>
    /// <item>corehr:employment.custom_org_field:read</item>
    /// <item>corehr:employment.custom_org_field:write</item>
    /// <item>corehr:employment.job_grade:read</item>
    /// <item>corehr:employment.job_grade:write</item>
    /// <item>corehr:employment.job_level:read</item>
    /// <item>corehr:employment.job_level:write</item>
    /// <item>corehr:employment.job:read</item>
    /// <item>corehr:employment.offboarding_reason:read</item>
    /// <item>corehr:employment.pathway:read</item>
    /// <item>corehr:employment.pathway:write</item>
    /// <item>corehr:employment.pay_group:read</item>
    /// <item>corehr:employment.position:read</item>
    /// <item>corehr:employment.position:write</item>
    /// <item>corehr:employment.seniority_adjust_information:read</item>
    /// <item>corehr:employment.seniority_adjust_information:write</item>
    /// <item>corehr:job_data.compensation_type:read</item>
    /// <item>corehr:job_data.service_company:read</item>
    /// <item>corehr:job_data.work_shift:read</item>
    /// <item>corehr:job.job_level:read</item>
    /// <item>corehr:person.additional_name:read</item>
    /// <item>corehr:person.additional_name:write</item>
    /// <item>corehr:person.address:read</item>
    /// <item>corehr:person.address:write</item>
    /// <item>corehr:person.bank_account:read</item>
    /// <item>corehr:person.bank_account:write</item>
    /// <item>corehr:person.born_country_region:read</item>
    /// <item>corehr:person.born_country_region:write</item>
    /// <item>corehr:person.custom_field:read</item>
    /// <item>corehr:person.custom_field:write</item>
    /// <item>corehr:person.date_entered_workforce:read</item>
    /// <item>corehr:person.date_entered_workforce:write</item>
    /// <item>corehr:person.date_of_birth:read</item>
    /// <item>corehr:person.date_of_birth:write</item>
    /// <item>corehr:person.dependent:read</item>
    /// <item>corehr:person.dependent:write</item>
    /// <item>corehr:person.education:read</item>
    /// <item>corehr:person.education:write</item>
    /// <item>corehr:person.email:read</item>
    /// <item>corehr:person.email:write</item>
    /// <item>corehr:person.emergency_contact:read</item>
    /// <item>corehr:person.emergency_contact:write</item>
    /// <item>corehr:person.entry_leave_time:read</item>
    /// <item>corehr:person.entry_leave_time:write</item>
    /// <item>corehr:person.gender:read</item>
    /// <item>corehr:person.gender:write</item>
    /// <item>corehr:person.hukou:read</item>
    /// <item>corehr:person.hukou:write</item>
    /// <item>corehr:person.is_disabled:read</item>
    /// <item>corehr:person.is_disabled:write</item>
    /// <item>corehr:person.is_old_alone:read</item>
    /// <item>corehr:person.is_old_alone:write</item>
    /// <item>corehr:person.legal_name:read</item>
    /// <item>corehr:person.legal_name:write</item>
    /// <item>corehr:person.marital_status:read</item>
    /// <item>corehr:person.marital_status:write</item>
    /// <item>corehr:person.martyr_family:read</item>
    /// <item>corehr:person.martyr_family:write</item>
    /// <item>corehr:person.national_id:read</item>
    /// <item>corehr:person.national_id:write</item>
    /// <item>corehr:person.nationality:read</item>
    /// <item>corehr:person.nationality:write</item>
    /// <item>corehr:person.native_region:read</item>
    /// <item>corehr:person.native_region:write</item>
    /// <item>corehr:person.personal_profile:read</item>
    /// <item>corehr:person.personal_profile:write</item>
    /// <item>corehr:person.phone:read</item>
    /// <item>corehr:person.phone:write</item>
    /// <item>corehr:person.political_affiliation:read</item>
    /// <item>corehr:person.political_affiliation:write</item>
    /// <item>corehr:person.race:read</item>
    /// <item>corehr:person.religion:read</item>
    /// <item>corehr:person.religion:write</item>
    /// <item>corehr:person.resident_tax_custom_field:read</item>
    /// <item>corehr:person.resident_tax_custom_field:write</item>
    /// <item>corehr:person.resident_tax:read</item>
    /// <item>corehr:person.resident_tax:write</item>
    /// <item>corehr:person.work_experience:read</item>
    /// <item>corehr:person.work_experience:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6891251722631890445</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/employees/search")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2EmployeesSearchResponseDto>> PostCorehrV2EmployeesSearchAsync(
        [JsonContent] Corehr.PostCorehrV2EmployeesSearchBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【飞书人事】搜索离职信息</para>
    /// <para>接口ID：7211423970042183684</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/offboarding/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口支持根据员工ID、离职审批发起时间和离职日期等字段搜索离职信息，可获取包括离职日期、离职原因、离职状态和流程审批状态等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:offboarding:read</item>
    /// <item>corehr:offboarding:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:employment.offboarding_reason:read</item>
    /// <item>corehr:offboarding.block_list:read</item>
    /// <item>corehr:offboarding.block_list:write</item>
    /// <item>corehr:offboarding.custom_field:read</item>
    /// <item>corehr:offboarding.last_attendance_date:read</item>
    /// <item>corehr:offboarding.noncompete_agreement:read</item>
    /// <item>corehr:offboarding.retain_account:read</item>
    /// <item>corehr:offboarding.retain_account:write</item>
    /// <item>corehr:offboarding.signature:read</item>
    /// <item>corehr:offboarding.social_insurance:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6891251722631890445</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/offboardings/search")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1OffboardingsSearchResponseDto>> PostCorehrV1OffboardingsSearchAsync(
        [JsonContent] FeishuPeople.PostCorehrV1OffboardingsSearchBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】搜索部门信息</para>
    /// <para>接口ID：7211423970042200068</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/organization-management/department/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口支持通过部门id、上级部门ID、部门负责人、名称、编码字段批量搜索当天的部门详情信息，包括部门包含的名称、描述、启用状态等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:department:read</item>
    /// <item>corehr:department:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:department.cost_center_id:read</item>
    /// <item>corehr:department.custom_fields:read</item>
    /// <item>corehr:department.manager:read</item>
    /// <item>corehr:department.organize:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6891251722631890445</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：【飞书】用来在具体某个应用中标识一个部门，同一个department_id 在不同应用中的 open_department_id 相同。</item>
    /// <item>department_id：【飞书】用来标识租户内一个唯一的部门。</item>
    /// <item>people_corehr_department_id：【飞书人事】用来标识「飞书人事」中的部门。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/departments/search")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2DepartmentsSearchResponseDto>> PostCorehrV2DepartmentsSearchAsync(
        [JsonContent] Corehr.PostCorehrV2DepartmentsSearchBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【视频会议】查询禁用状态变更通知</para>
    /// <para>接口ID：7211447510368534532</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/scope_config/get-4</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询禁用状态变更通知</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// <item>vc:room:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="reserve_config_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>会议室或层级ID，可通过会议室或层级相关查询接口获取</para>
    /// <para>示例值：omm_3c5dd7e09bac0c1758fcf9511bd1a771</para>
    /// </param>
    /// <param name="scope_type">
    /// <para>必填：是</para>
    /// <para>1表示层级，2表示会议室</para>
    /// <para>示例值：2</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/vc/v1/reserve_configs/{reserve_config_id}/disable_inform")]
    System.Threading.Tasks.Task<FeishuResponse<Vc.GetVcV1ReserveConfigsByReserveConfigIdDisableInformResponseDto>> GetVcV1ReserveConfigsByReserveConfigIdDisableInformAsync(
        [PathQuery] string reserve_config_id,
        [PathQuery] int scope_type,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【视频会议】更新禁用状态变更通知</para>
    /// <para>接口ID：7211447510368550916</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/vc-v1/scope_config/patch-4</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新禁用状态变更通知</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>vc:room</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="reserve_config_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>会议室或层级ID，可通过会议室或层级相关查询接口获取</para>
    /// <para>示例值：omm_3c5dd7e09bac0c1758fcf9511bd1a771</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/vc/v1/reserve_configs/{reserve_config_id}/disable_inform")]
    System.Threading.Tasks.Task<FeishuResponse> PatchVcV1ReserveConfigsByReserveConfigIdDisableInformAsync(
        [PathQuery] string reserve_config_id,
        [JsonContent] Vc.PatchVcV1ReserveConfigsByReserveConfigIdDisableInformBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】获取面试记录附件</para>
    /// <para>接口ID：7215583964449849372</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/interview/get-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取面试记录 PDF 附件，包含相关投递基本信息、面试评价信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:interview</item>
    /// <item>hire:interview:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="application_id">
    /// <para>必填：是</para>
    /// <para>投递 ID，可通过[获取投递信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/get)接口获取</para>
    /// <para>示例值：6949805467799537964</para>
    /// </param>
    /// <param name="interview_record_id">
    /// <para>必填：否</para>
    /// <para>面试评价 ID，可通过[获取面试信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/interview/list)接口获取，若不填该参数，则会获取入参投递下所有的面试评价</para>
    /// <para>示例值：6969137186734393644</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="language">
    /// <para>必填：否</para>
    /// <para>面试评价语言，用于指定附件的语言</para>
    /// <para>示例值：1</para>
    /// <list type="bullet">
    /// <item>1：中文</item>
    /// <item>2：英文</item>
    /// </list>
    /// <para>默认值：1</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/interview_records/attachments")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1InterviewRecordsAttachmentsResponseDto>> GetHireV1InterviewRecordsAttachmentsAsync(
        [PathQuery] string application_id,
        [PathQuery] string? interview_record_id = null,
        [PathQuery] int? language = 1);

    /// <summary>
    /// <para>【招聘】查询外部投递列表</para>
    /// <para>接口ID：7215630682033946652</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/import-external-system-information/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>可根据人才 ID 获取人才外部投递列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:external_application</item>
    /// </list></para>
    /// </summary>
    /// <param name="talent_id">
    /// <para>必填：是</para>
    /// <para>人才 ID，可通过[获取人才列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent/list)接口获取</para>
    /// <para>示例值：6960663240925956660</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>**默认值：**</para>
    /// <para>10</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE2Mjc1NTUyMjM2NzIsImlkIjpudWxsfQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/external_applications")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1ExternalApplicationsResponseDto>> GetHireV1ExternalApplicationsAsync(
        [PathQuery] string talent_id,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【招聘】更新外部投递</para>
    /// <para>接口ID：7215630682033963036</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/import-external-system-information/update-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新外部投递信息。</para>
    /// <para>## 注意事项</para>
    /// <para>该接口会对原投递内容进行全量覆盖更新。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:external_application</item>
    /// </list></para>
    /// </summary>
    /// <param name="external_application_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>外部投递 ID，可通过[查询外部投递列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/external_application/list)接口获取</para>
    /// <para>示例值：6960663240925956660</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/hire/v1/external_applications/{external_application_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PutHireV1ExternalApplicationsByExternalApplicationIdResponseDto>> PutHireV1ExternalApplicationsByExternalApplicationIdAsync(
        [PathQuery] string external_application_id,
        [JsonContent] Hire.PutHireV1ExternalApplicationsByExternalApplicationIdBodyDto dto);

    /// <summary>
    /// <para>【招聘】删除外部投递</para>
    /// <para>接口ID：7215630682033979420</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/import-external-system-information/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据外部投递 ID 删除外部投递。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:external_application</item>
    /// </list></para>
    /// </summary>
    /// <param name="external_application_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>外部投递 ID，可通过[查询外部投递列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/external_application/list)接口获取</para>
    /// <para>示例值：6960663240925956660</para>
    /// </param>
    /// <param name="talent_id">
    /// <para>必填：否</para>
    /// <para>人才 ID，可通过[获取人才列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent/list)接口获取</para>
    /// <para>示例值：6960663240925956660</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpDelete("/open-apis/hire/v1/external_applications/{external_application_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.DeleteHireV1ExternalApplicationsByExternalApplicationIdResponseDto>> DeleteHireV1ExternalApplicationsByExternalApplicationIdAsync(
        [PathQuery] string external_application_id,
        [PathQuery] string? talent_id = null);

    /// <summary>
    /// <para>【云文档】创建文件快捷方式</para>
    /// <para>接口ID：7216001760515112961</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/file/create_shortcut</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>创建指定文件的快捷方式到云空间的其它文件夹中。</para>
    /// <para>## 使用限制</para>
    /// <para>该接口不支持并发调用，且调用频率上限为 5 QPS，10000 次/天。否则会返回 1061045 错误码，可通过稍后重试解决。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:drive</item>
    /// <item>space:document:shortcut</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/drive/v1/files/create_shortcut")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostDriveV1FilesCreateShortcutResponseDto>> PostDriveV1FilesCreateShortcutAsync(
        [JsonContent] Ccm.PostDriveV1FilesCreateShortcutBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【应用信息】获取应用通讯录权限范围配置</para>
    /// <para>接口ID：7218093640928133124</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/application-v6/admin/contacts_range_configuration</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取当前企业内某个自建应用线上实际生效的通讯录权限范围配置。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:app.info:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用的 app_id，可以在[开发者后台](https://open.feishu.cn/app) &gt; 凭证与基础信息页查看。</para>
    /// <para>示例值：cli_9b445f5258795107</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：20</para>
    /// <para>默认值：50</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：new-e3c5a0627cdf0c2e057da7257b90376a</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>返回值的部门ID的类型</para>
    /// <para>示例值：department_id</para>
    /// <list type="bullet">
    /// <item>department_id：以自定义department_id来标识部门</item>
    /// <item>open_department_id：以open_department_id来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/application/v6/applications/{app_id}/contacts_range_configuration")]
    System.Threading.Tasks.Task<FeishuResponse<Application.GetApplicationV6ApplicationsByAppIdContactsRangeConfigurationResponseDto>> GetApplicationV6ApplicationsByAppIdContactsRangeConfigurationAsync(
        [PathQuery] string app_id,
        [PathQuery] int? page_size = 50,
        [PathQuery] string? page_token = null,
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【应用信息】查询用户或部门是否在应用的可用或禁用名单</para>
    /// <para>接口ID：7218093640928149508</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/application-v6/admin/check_white_black_list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于查询用户、部门、用户组是否在应用的可用或禁用名单中</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:app.info:readonly</item>
    /// <item>application:application:self_manage</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用的 AppID，可以在[开发者后台](https://open.feishu.cn/app) &gt; **凭证与基础信息**页查看。</para>
    /// <para>* 仅查询本应用信息时，可填应用自身AppID。</para>
    /// <para>- admin:app.info:readonly : 获取应用信息</para>
    /// <para>示例值：cli_a3axxx01b</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：user_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>部门ID类型</para>
    /// <para>示例值：department_id</para>
    /// <list type="bullet">
    /// <item>department_id：以自定义department_id来标识部门</item>
    /// <item>open_department_id：以open_department_id来标识部门</item>
    /// </list>
    /// <para>默认值：department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/application/v6/applications/{app_id}/visibility/check_white_black_list")]
    System.Threading.Tasks.Task<FeishuResponse<Application.PostApplicationV6ApplicationsByAppIdVisibilityCheckWhiteBlackListResponseDto>> PostApplicationV6ApplicationsByAppIdVisibilityCheckWhiteBlackListAsync(
        [PathQuery] string app_id,
        [JsonContent] Application.PostApplicationV6ApplicationsByAppIdVisibilityCheckWhiteBlackListBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "department_id");

    /// <summary>
    /// <para>【应用信息】获取应用版本中开发者申请的通讯录权限范围</para>
    /// <para>接口ID：7218093640928165892</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/application-v6/application/contacts_range_suggest</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于根据应用的 App ID 和版本 ID 获取企业自建应用某个版本的通讯录权限范围。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>application:application:self_manage</item>
    /// <item>application:application.app_version:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用的 AppID，可以在[开发者后台](https://open.feishu.cn/app) &gt; **凭证与基础信息**页查看。</para>
    /// <para>* 仅查询本应用信息时，可填应用自身App ID 或 `me`。</para>
    /// <para>- admin:app.info:readonly : 获取应用信息</para>
    /// <para>示例值：cli_9f3ca975326b501b</para>
    /// </param>
    /// <param name="version_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>唯一标识应用版本的 ID，可以调用[获取应用版本列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-app_version/list)接口获取。</para>
    /// <para>示例值：oav_d317f090b7258ad0372aa53963cda70d</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>返回值的部门ID的类型</para>
    /// <para>示例值：department_id</para>
    /// <list type="bullet">
    /// <item>department_id：以自定义department_id来标识部门</item>
    /// <item>open_department_id：以open_department_id来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/application/v6/applications/{app_id}/app_versions/{version_id}/contacts_range_suggest")]
    System.Threading.Tasks.Task<FeishuResponse<Application.GetApplicationV6ApplicationsByAppIdAppVersionsByVersionIdContactsRangeSuggestResponseDto>> GetApplicationV6ApplicationsByAppIdAppVersionsByVersionIdContactsRangeSuggestAsync(
        [PathQuery] string app_id,
        [PathQuery] string version_id,
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】获取人才库列表</para>
    /// <para>接口ID：7218853190452428804</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/talent_pool/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取人才库列表，可获取的信息包括人才库 ID、人才库名称等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:talent_folder</item>
    /// <item>hire:talent_folder:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE2Mjc1NTUyMjM2NzIsImlkIjpudWxsfQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="id_list">
    /// <para>必填：否</para>
    /// <para>人才库 ID 列表。当传入该参数时，返回min(page_size, len(id_list))的人才库信息</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/talent_pools/")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1TalentPoolsResponseDto>> GetHireV1TalentPoolsAsync(
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string[]? id_list = null);

    /// <summary>
    /// <para>【招聘】将人才加入人才库</para>
    /// <para>接口ID：7218853190452445188</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/talent_pool/move_talent</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>将人才加入人才库。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:talent_folder</item>
    /// </list></para>
    /// </summary>
    /// <param name="talent_pool_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>人才库 ID，可通过接口 [获取人才库列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent_pool/search) 获取</para>
    /// <para>示例值：6930815272790114325</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/talent_pools/{talent_pool_id}/talent_relationship")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1TalentPoolsByTalentPoolIdTalentRelationshipResponseDto>> PostHireV1TalentPoolsByTalentPoolIdTalentRelationshipAsync(
        [PathQuery] string talent_pool_id,
        [JsonContent] Hire.PostHireV1TalentPoolsByTalentPoolIdTalentRelationshipBodyDto dto);

    /// <summary>
    /// <para>【招聘】获取招聘需求信息</para>
    /// <para>接口ID：7218888199548633092</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/recruitment-related-configuration/job_requirement/list_by_id</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据「招聘需求ID」获取招聘需求信息，支持批量查询</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:job_requirement</item>
    /// <item>hire:job_requirement:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>指定查询结果中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)。</para>
    /// <para>示例值："open_department_id"</para>
    /// <list type="bullet">
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 od-，在租户内全局唯一。</item>
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值："job_level_id"</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，通过[获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_level_id</para>
    /// </param>
    /// <param name="job_family_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「序列 ID」的类型</para>
    /// <para>示例值："people_admin_job_category_id"</para>
    /// <list type="bullet">
    /// <item>people_admin_job_category_id：「人力系统管理后台」适用的序列 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_family_id：「飞书管理后台」适用的序列 ID，通过[获取租户序列列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_family/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_category_id</para>
    /// </param>
    /// <param name="employee_type_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「人员类型 ID」的类型</para>
    /// <para>示例值："people_admin_employee_type_id"</para>
    /// <list type="bullet">
    /// <item>people_admin_employee_type_id：「人力系统管理后台」适用的人员类型 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>employee_type_enum_id：「飞书管理后台」适用的人员类型 ID，通过[查询人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_employee_type_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/job_requirements/search")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1JobRequirementsSearchResponseDto>> PostHireV1JobRequirementsSearchAsync(
        [JsonContent] Hire.PostHireV1JobRequirementsSearchBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? job_level_id_type = "people_admin_job_level_id",
        [PathQuery] string? job_family_id_type = "people_admin_job_category_id",
        [PathQuery] string? employee_type_id_type = "people_admin_employee_type_id");

    /// <summary>
    /// <para>【招聘】更新 Offer 状态</para>
    /// <para>接口ID：7219143467641487363</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/offer/offer_status</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过 Offer ID 更新候选人 Offer 的「Offer 审批状态」或 「Offer 发送和接受状态」。</para>
    /// <para>## 注意事项</para>
    /// <para>- 若当前 Offer 是通过飞书招聘发起的审批，则不可通过此接口更新「Offer 审批状态」。</para>
    /// <para>- 若当前 Offer 通过飞书招聘发送过候选人，则不可通过此接口更新「Offer 发送和接受状态」。</para>
    /// <para>- 若当前 Offer 所属投递阶段已进入「待入职」阶段，则不可通过此接口更新「Offer 审批状态」和「Offer 发送和接受状态」。</para>
    /// <para>## 前提条件</para>
    /// <para>- 更新 Offer 审批状态前，请前往「飞书招聘」-「设置」-「Offer 设置」-「Offer 规则设置」开启「通过 OA 系统创建和审批 Offer」。</para>
    /// <para>- 更新 Offer 发送和接受状态前，请前往「飞书招聘」-「设置」-「Offer 设置」-「Offer 规则设置」开启「通过 OA 系统发送 Offer」。</para>
    /// <para>## Offer 状态说明</para>
    /// <para>### Offer 状态分类</para>
    /// <para>- Offer 被创建后，状态为`「Offer 已创建」`</para>
    /// <para>- Offer 审批状态：`「Offer 审批中」`、`「Offer 审批通过」`、`「Offer 审批不通过」`、`「Offer 审批已撤回」`</para>
    /// <para>- Offer 发送和接受状态：`「Offer 已发送」`、`「Offer 已失效」`、`「Offer 被候选人接受」`、`「Offer 被候选人拒绝」`</para>
    /// <para>### Offer 状态流转图</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:offer</item>
    /// </list></para>
    /// </summary>
    /// <param name="offer_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>Offer ID，如何获取请参考[获取 Offer 列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer/list)</para>
    /// <para>示例值：6930815272790114324</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/hire/v1/offers/{offer_id}/offer_status")]
    System.Threading.Tasks.Task<FeishuResponse> PatchHireV1OffersByOfferIdOfferStatusAsync(
        [PathQuery] string offer_id,
        [JsonContent] Hire.PatchHireV1OffersByOfferIdOfferStatusBodyDto dto);

    /// <summary>
    /// <para>【云文档】开启密码</para>
    /// <para>接口ID：7220305453616152580</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/permission/permission-public/permission-public-password/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于根据 filetoken 开启云文档的密码。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>bitable:bitable</item>
    /// <item>docs:doc</item>
    /// <item>docs:permission.setting:write_only</item>
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>wiki:wiki</item>
    /// </list></para>
    /// </summary>
    /// <param name="token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文件的 token，获取方式见 [如何获取云文档资源相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)</para>
    /// <para>示例值：doccnBKgoMyY5OMbUG6FioTXuBe</para>
    /// </param>
    /// <param name="type">
    /// <para>必填：是</para>
    /// <para>文件类型，需要与文件的 token 相匹配</para>
    /// <para>示例值：doc</para>
    /// <list type="bullet">
    /// <item>doc：文档</item>
    /// <item>sheet：电子表格</item>
    /// <item>file：云空间文件</item>
    /// <item>wiki：知识库节点</item>
    /// <item>bitable：多维表格</item>
    /// <item>docx：新版文档</item>
    /// <item>mindnote：思维笔记</item>
    /// <item>minutes：妙计（暂不支持）</item>
    /// <item>slides：幻灯片</item>
    /// </list>
    /// </param>
    [HttpPost("/open-apis/drive/v1/permissions/{token}/public/password")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostDriveV1PermissionsByTokenPublicPasswordResponseDto>> PostDriveV1PermissionsByTokenPublicPasswordAsync(
        [PathQuery] string token,
        [PathQuery] string type);

    /// <summary>
    /// <para>【云文档】刷新密码</para>
    /// <para>接口ID：7220305453616168964</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/permission/permission-public/permission-public-password/update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于根据 filetoken 刷新云文档的密码。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>bitable:bitable</item>
    /// <item>docs:doc</item>
    /// <item>docs:permission.setting:write_only</item>
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>wiki:wiki</item>
    /// </list></para>
    /// </summary>
    /// <param name="token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文件的 token，获取方式见 [如何获取云文档资源相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)</para>
    /// <para>示例值：doccnBKgoMyY5OMbUG6FioTXuBe</para>
    /// </param>
    /// <param name="type">
    /// <para>必填：是</para>
    /// <para>文件类型，需要与文件的 token 相匹配</para>
    /// <para>示例值：doc</para>
    /// <list type="bullet">
    /// <item>doc：文档</item>
    /// <item>sheet：电子表格</item>
    /// <item>file：云空间文件</item>
    /// <item>wiki：知识库节点</item>
    /// <item>bitable：多维表格</item>
    /// <item>docx：新版文档</item>
    /// <item>mindnote：思维笔记</item>
    /// <item>minutes：妙计（暂不支持）</item>
    /// <item>slides：幻灯片</item>
    /// </list>
    /// </param>
    [HttpPut("/open-apis/drive/v1/permissions/{token}/public/password")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PutDriveV1PermissionsByTokenPublicPasswordResponseDto>> PutDriveV1PermissionsByTokenPublicPasswordAsync(
        [PathQuery] string token,
        [PathQuery] string type);

    /// <summary>
    /// <para>【云文档】关闭密码</para>
    /// <para>接口ID：7220305453616185348</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/permission/permission-public/permission-public-password/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于根据 filetoken 关闭云文档的密码。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>bitable:bitable</item>
    /// <item>docs:doc</item>
    /// <item>docs:permission.setting:write_only</item>
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>wiki:wiki</item>
    /// </list></para>
    /// </summary>
    /// <param name="token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文件的 token，获取方式见 [如何获取云文档资源相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)</para>
    /// <para>示例值：doccnBKgoMyY5OMbUG6FioTXuBe</para>
    /// </param>
    /// <param name="type">
    /// <para>必填：是</para>
    /// <para>文件类型，需要与文件的 token 相匹配</para>
    /// <para>示例值：doc</para>
    /// <list type="bullet">
    /// <item>doc：文档</item>
    /// <item>sheet：电子表格</item>
    /// <item>file：云空间文件</item>
    /// <item>wiki：知识库节点</item>
    /// <item>bitable：多维表格</item>
    /// <item>docx：新版文档</item>
    /// <item>mindnote：思维笔记</item>
    /// <item>minutes：妙计（暂不支持）</item>
    /// <item>slides：幻灯片</item>
    /// </list>
    /// </param>
    [HttpDelete("/open-apis/drive/v1/permissions/{token}/public/password")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteDriveV1PermissionsByTokenPublicPasswordAsync(
        [PathQuery] string token,
        [PathQuery] string type);

    /// <summary>
    /// <para>【AI 能力】提取文件中的合同字段</para>
    /// <para>接口ID：7220312184105664515</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/ai/document_ai-v1/contract/field_extraction</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>支持从doc、docx和pdf文件类型中提取合同字段。</para>
    /// <para>文件大小需要小于10M。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>document_ai:contract:field_extract</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>合同字段解析的源文件，当前只支持pdf, doc, docx三种类型的文件</para>
    /// </param>
    [HttpPost("/open-apis/document_ai/v1/contract/field_extraction")]
    System.Threading.Tasks.Task<FeishuResponse<Ai.PostDocumentAiV1ContractFieldExtractionResponseDto>> PostDocumentAiV1ContractFieldExtractionAsync(
        [FormDataContent] Ai.PostDocumentAiV1ContractFieldExtractionBodyDto dto,
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【飞书人事】下载文件</para>
    /// <para>接口ID：7223214746191708188</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/employee/person/get-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据ID下载文件</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:file:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>上传文件ID</para>
    /// <para>示例值：150018109586e8ea745e47ae8feb3722dbe1d03a181336393633393133303431393831343930373235150100</para>
    /// </param>
    /// <returns>返回文件二进制流</returns>
    [HttpGet("/open-apis/corehr/v1/files/{id}")]
    System.Threading.Tasks.Task<HttpResponseMessage> GetCorehrV1FilesByIdAsync(
        [PathQuery] string id);

    /// <summary>
    /// <para>【云文档】获取云文档权限设置</para>
    /// <para>接口ID：7224057619119112196</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/permission/permission-public/get-2</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于根据 filetoken 获取云文档的权限设置。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>bitable:bitable</item>
    /// <item>docs:doc</item>
    /// <item>docs:permission.setting:read</item>
    /// <item>docx:document</item>
    /// <item>drive:drive</item>
    /// <item>drive:drive:readonly</item>
    /// <item>drive:file</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>wiki:wiki</item>
    /// </list></para>
    /// </summary>
    /// <param name="token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文件的 token，获取方式见 [如何获取云文档资源相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)</para>
    /// <para>示例值：doccnBKgoMyY5OMbUG6FioTXuBe</para>
    /// </param>
    /// <param name="type">
    /// <para>必填：是</para>
    /// <para>文件类型，需要与文件的 token 相匹配</para>
    /// <para>示例值：doc</para>
    /// <list type="bullet">
    /// <item>doc：旧版文档</item>
    /// <item>sheet：电子表格</item>
    /// <item>file：云空间文件</item>
    /// <item>wiki：知识库节点</item>
    /// <item>bitable：多维表格</item>
    /// <item>docx：新版文档</item>
    /// <item>mindnote：思维笔记</item>
    /// <item>minutes：妙记</item>
    /// <item>slides：幻灯片</item>
    /// </list>
    /// </param>
    [HttpGet("/open-apis/drive/v2/permissions/{token}/public")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDriveV2PermissionsByTokenPublicResponseDto>> GetDriveV2PermissionsByTokenPublicAsync(
        [PathQuery] string token,
        [PathQuery] string type);

    /// <summary>
    /// <para>【云文档】更新云文档权限设置</para>
    /// <para>接口ID：7224057619119128580</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/permission/permission-public/patch-2</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于根据 filetoken 更新云文档的权限设置。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>bitable:bitable</item>
    /// <item>docs:doc</item>
    /// <item>docs:permission.setting:write_only</item>
    /// <item>docx:document</item>
    /// <item>drive:drive</item>
    /// <item>drive:file</item>
    /// <item>sheets:spreadsheet</item>
    /// <item>wiki:wiki</item>
    /// </list></para>
    /// </summary>
    /// <param name="token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文件的 token，获取方式见 [如何获取云文档资源相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)</para>
    /// <para>示例值：doccnBKgoMyY5OMbUG6FioTXuBe</para>
    /// </param>
    /// <param name="type">
    /// <para>必填：是</para>
    /// <para>文件类型，需要与文件的 token 相匹配</para>
    /// <para>示例值：doc</para>
    /// <list type="bullet">
    /// <item>doc：旧版文档</item>
    /// <item>sheet：电子表格</item>
    /// <item>file：云空间文件</item>
    /// <item>wiki：知识库节点</item>
    /// <item>bitable：多维表格</item>
    /// <item>docx：新版文档</item>
    /// <item>mindnote：思维笔记</item>
    /// <item>minutes：妙记</item>
    /// <item>slides：幻灯片</item>
    /// </list>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/drive/v2/permissions/{token}/public")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PatchDriveV2PermissionsByTokenPublicResponseDto>> PatchDriveV2PermissionsByTokenPublicAsync(
        [PathQuery] string token,
        [PathQuery] string type,
        [JsonContent] Ccm.PatchDriveV2PermissionsByTokenPublicBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】搜索成本中心信息</para>
    /// <para>接口ID：7225452763517075459</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/organization-management/cost_center/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>搜索成本中心信息；支持通过成本中心ID，成本中心名称，成本中心编码，成本中心上级搜索成本中心的信息，有分页功能。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:cost_center:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6891251722631890445</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/cost_centers/search")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2CostCentersSearchResponseDto>> PostCorehrV2CostCentersSearchAsync(
        [JsonContent] Corehr.PostCorehrV2CostCentersSearchBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "people_corehr_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】更新个人信息</para>
    /// <para>接口ID：7225452763517091843</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/employee/person/patch-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新员工的个人信息，包括姓名、个人电话、邮箱、联系地址、政治面貌、户口信息等</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:person:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>corehr:person.address:read</item>
    /// <item>corehr:person.address:write</item>
    /// <item>corehr:person.bank_account:read</item>
    /// <item>corehr:person.bank_account:write</item>
    /// <item>corehr:person.born_country_region:read</item>
    /// <item>corehr:person.born_country_region:write</item>
    /// <item>corehr:person.custom_field:read</item>
    /// <item>corehr:person.custom_field:write</item>
    /// <item>corehr:person.date_entered_workforce:read</item>
    /// <item>corehr:person.date_entered_workforce:write</item>
    /// <item>corehr:person.date_of_birth:read</item>
    /// <item>corehr:person.date_of_birth:write</item>
    /// <item>corehr:person.dependent:read</item>
    /// <item>corehr:person.dependent:write</item>
    /// <item>corehr:person.education:read</item>
    /// <item>corehr:person.education:write</item>
    /// <item>corehr:person.email:read</item>
    /// <item>corehr:person.email:write</item>
    /// <item>corehr:person.emergency_contact:read</item>
    /// <item>corehr:person.emergency_contact:write</item>
    /// <item>corehr:person.entry_leave_time:read</item>
    /// <item>corehr:person.entry_leave_time:write</item>
    /// <item>corehr:person.gender:read</item>
    /// <item>corehr:person.gender:write</item>
    /// <item>corehr:person.hukou:read</item>
    /// <item>corehr:person.hukou:write</item>
    /// <item>corehr:person.is_disabled:read</item>
    /// <item>corehr:person.is_disabled:write</item>
    /// <item>corehr:person.is_old_alone:read</item>
    /// <item>corehr:person.is_old_alone:write</item>
    /// <item>corehr:person.legal_name:read</item>
    /// <item>corehr:person.legal_name:write</item>
    /// <item>corehr:person.marital_status:read</item>
    /// <item>corehr:person.marital_status:write</item>
    /// <item>corehr:person.martyr_family:read</item>
    /// <item>corehr:person.martyr_family:write</item>
    /// <item>corehr:person.national_id:read</item>
    /// <item>corehr:person.national_id:write</item>
    /// <item>corehr:person.native_region:read</item>
    /// <item>corehr:person.native_region:write</item>
    /// <item>corehr:person.personal_profile:read</item>
    /// <item>corehr:person.personal_profile:write</item>
    /// <item>corehr:person.phone:read</item>
    /// <item>corehr:person.phone:write</item>
    /// <item>corehr:person.race:read</item>
    /// <item>corehr:person.resident_tax_custom_field:read</item>
    /// <item>corehr:person.resident_tax_custom_field:write</item>
    /// <item>corehr:person.resident_tax:read</item>
    /// <item>corehr:person.resident_tax:write</item>
    /// <item>corehr:person.work_experience:read</item>
    /// <item>corehr:person.work_experience:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="person_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>个人信息 ID</para>
    /// <para>- 该 ID 在[【创建个人信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/person/create)时可从响应体中获取（person_id）</para>
    /// <para>- 此外你也可以调用[【搜索员工信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/employee/search)接口，获取指定员工的 person_id。</para>
    /// <para>示例值：12454646</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>操作的唯一标识，用于幂等的进行更新操作，格式为标准的 UUIDV4。此值为空表示将发起一次新的请求，此值非空表示幂等的进行更新操作。</para>
    /// <para>示例值："fe599b60-450f-46ff-b2ef-9f6675625b97"</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="no_need_query">
    /// <para>必填：否</para>
    /// <para>根据no_need_query判断更新后是否返回更新后个人信息，若填写为 “true”则 data 为空。</para>
    /// <para>示例值：false</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/corehr/v2/persons/{person_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PatchCorehrV2PersonsByPersonIdResponseDto>> PatchCorehrV2PersonsByPersonIdAsync(
        [PathQuery] string person_id,
        [JsonContent] Corehr.PatchCorehrV2PersonsByPersonIdBodyDto dto,
        [PathQuery] string? client_token = null,
        [PathQuery] bool? no_need_query = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】创建个人信息</para>
    /// <para>接口ID：7225452763517108227</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/employee/person/create-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建员工的个人信息，包括姓名、个人电话、邮箱、联系地址、政治面貌、户口信息等</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:person:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>corehr:person.address:read</item>
    /// <item>corehr:person.address:write</item>
    /// <item>corehr:person.bank_account:read</item>
    /// <item>corehr:person.bank_account:write</item>
    /// <item>corehr:person.born_country_region:read</item>
    /// <item>corehr:person.born_country_region:write</item>
    /// <item>corehr:person.custom_field:read</item>
    /// <item>corehr:person.custom_field:write</item>
    /// <item>corehr:person.date_entered_workforce:read</item>
    /// <item>corehr:person.date_entered_workforce:write</item>
    /// <item>corehr:person.date_of_birth:read</item>
    /// <item>corehr:person.date_of_birth:write</item>
    /// <item>corehr:person.dependent:read</item>
    /// <item>corehr:person.dependent:write</item>
    /// <item>corehr:person.education:read</item>
    /// <item>corehr:person.education:write</item>
    /// <item>corehr:person.email:read</item>
    /// <item>corehr:person.email:write</item>
    /// <item>corehr:person.emergency_contact:read</item>
    /// <item>corehr:person.emergency_contact:write</item>
    /// <item>corehr:person.entry_leave_time:read</item>
    /// <item>corehr:person.entry_leave_time:write</item>
    /// <item>corehr:person.gender:read</item>
    /// <item>corehr:person.gender:write</item>
    /// <item>corehr:person.hukou:read</item>
    /// <item>corehr:person.hukou:write</item>
    /// <item>corehr:person.is_disabled:read</item>
    /// <item>corehr:person.is_disabled:write</item>
    /// <item>corehr:person.is_old_alone:read</item>
    /// <item>corehr:person.is_old_alone:write</item>
    /// <item>corehr:person.legal_name:read</item>
    /// <item>corehr:person.legal_name:write</item>
    /// <item>corehr:person.marital_status:read</item>
    /// <item>corehr:person.marital_status:write</item>
    /// <item>corehr:person.martyr_family:read</item>
    /// <item>corehr:person.martyr_family:write</item>
    /// <item>corehr:person.national_id:read</item>
    /// <item>corehr:person.national_id:write</item>
    /// <item>corehr:person.native_region:read</item>
    /// <item>corehr:person.native_region:write</item>
    /// <item>corehr:person.passport_number:read</item>
    /// <item>corehr:person.personal_profile:read</item>
    /// <item>corehr:person.personal_profile:write</item>
    /// <item>corehr:person.phone:read</item>
    /// <item>corehr:person.phone:write</item>
    /// <item>corehr:person.race:read</item>
    /// <item>corehr:person.resident_tax_custom_field:read</item>
    /// <item>corehr:person.resident_tax_custom_field:write</item>
    /// <item>corehr:person.resident_tax:read</item>
    /// <item>corehr:person.resident_tax:write</item>
    /// <item>corehr:person.work_experience:read</item>
    /// <item>corehr:person.work_experience:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>操作的唯一标识，用于幂等的进行更新操作，格式为标准的 UUIDV4。此值为空表示将发起一次新的请求，此值非空表示幂等的进行更新操作。</para>
    /// <para>示例值："fe599b60-450f-46ff-b2ef-9f6675625b97"</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/persons")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2PersonsResponseDto>> PostCorehrV2PersonsAsync(
        [JsonContent] Corehr.PostCorehrV2PersonsBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】撤销成本中心版本</para>
    /// <para>接口ID：7225452763517124611</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/organization-management/cost_center/cost_center-version/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口支持通过成本中心的版本ID撤销成本中心版本信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:cost_center:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="cost_center_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>成本中心ID，可通过[【搜索成本中心信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/cost_center/search)接口查询获得</para>
    /// <para>示例值：6862995757234914824</para>
    /// </param>
    /// <param name="version_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>版本ID，可通过[【搜索成本中心信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/cost_center/search)接口查询获得</para>
    /// <para>示例值：6862995757234914824</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpDelete("/open-apis/corehr/v2/cost_centers/{cost_center_id}/versions/{version_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCorehrV2CostCentersByCostCenterIdVersionsByVersionIdAsync(
        [PathQuery] string cost_center_id,
        [PathQuery] string version_id,
        [JsonContent] Corehr.DeleteCorehrV2CostCentersByCostCenterIdVersionsByVersionIdBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】创建成本中心</para>
    /// <para>接口ID：7225452763517140995</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/organization-management/cost_center/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>单个创建成本中心；可定义成本中心的名称，父级成本中心，成本中心负责人，生效时间等</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:cost_center:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/cost_centers")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2CostCentersResponseDto>> PostCorehrV2CostCentersAsync(
        [JsonContent] Corehr.PostCorehrV2CostCentersBodyDto dto,
        [PathQuery] string? user_id_type = "people_corehr_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】删除成本中心</para>
    /// <para>接口ID：7225452763517157379</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/organization-management/cost_center/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除成本中心记录</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:cost_center:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="cost_center_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>成本ID。ID获取方式：</para>
    /// <para>- 调用[【创建成本中心】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/cost_center/create)[【搜索成本中心】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/cost_center/search)等接口可以返回成本中心ID</para>
    /// <para>示例值：6862995757234914824</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpDelete("/open-apis/corehr/v2/cost_centers/{cost_center_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCorehrV2CostCentersByCostCenterIdAsync(
        [PathQuery] string cost_center_id,
        [JsonContent] Corehr.DeleteCorehrV2CostCentersByCostCenterIdBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】创建成本中心版本</para>
    /// <para>接口ID：7225452763517173763</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/organization-management/cost_center/cost_center-version/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建成本中心版本；每次调用可创建一个成本中心版本，可定义成本中心的名称，描述，上级成本，成本中心负责人，版本生效时间等信息，接口内会做相关规则的校验</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:cost_center:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="cost_center_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>成本中心ID，可通过[【搜索成本中心信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/cost_center/search)接口查询获得</para>
    /// <para>示例值：6862995757234914824</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/cost_centers/{cost_center_id}/versions")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2CostCentersByCostCenterIdVersionsResponseDto>> PostCorehrV2CostCentersByCostCenterIdVersionsAsync(
        [PathQuery] string cost_center_id,
        [JsonContent] Corehr.PostCorehrV2CostCentersByCostCenterIdVersionsBodyDto dto,
        [PathQuery] string? user_id_type = "people_corehr_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】更正成本中心版本</para>
    /// <para>接口ID：7225452763517190147</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/organization-management/cost_center/cost_center-version/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对成本中心的版本记录进行更正，可更正的字段包括：名称，上级成本中心，成本中心负责人列表，成本中心的描述，生效时间</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:cost_center:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="cost_center_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>成本中心ID，可通过[【搜索成本中心信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/cost_center/search)接口查询获得</para>
    /// <para>示例值：6862995757234914824</para>
    /// </param>
    /// <param name="version_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>版本ID，可通过[【搜索成本中心信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/cost_center/search)接口查询获得</para>
    /// <para>示例值：6862995757234914824</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/corehr/v2/cost_centers/{cost_center_id}/versions/{version_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PatchCorehrV2CostCentersByCostCenterIdVersionsByVersionIdResponseDto>> PatchCorehrV2CostCentersByCostCenterIdVersionsByVersionIdAsync(
        [PathQuery] string cost_center_id,
        [PathQuery] string version_id,
        [JsonContent] Corehr.PatchCorehrV2CostCentersByCostCenterIdVersionsByVersionIdBodyDto dto,
        [PathQuery] string? user_id_type = "people_corehr_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】启用 / 停用成本中心</para>
    /// <para>接口ID：7225452763517206531</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/organization-management/cost_center/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口支持对单个成本中心进行启用和停用操作。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:cost_center:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="cost_center_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>成本中心ID，可通过[【搜索成本中心信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/cost_center/search)接口查询获得</para>
    /// <para>示例值：6862995757234914824</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/corehr/v2/cost_centers/{cost_center_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PatchCorehrV2CostCentersByCostCenterIdResponseDto>> PatchCorehrV2CostCentersByCostCenterIdAsync(
        [PathQuery] string cost_center_id,
        [JsonContent] Corehr.PatchCorehrV2CostCentersByCostCenterIdBodyDto dto,
        [PathQuery] string? user_id_type = "people_corehr_id");

    /// <summary>
    /// <para>【招聘】获取申请表附加信息</para>
    /// <para>接口ID：7232192298414292993</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/application/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取候选人的申请表附加信息。支持通过投递 ID 或者人才 ID 进行查询。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:talent</item>
    /// <item>hire:talent:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/applications/diversity_inclusions/search")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1ApplicationsDiversityInclusionsSearchResponseDto>> PostHireV1ApplicationsDiversityInclusionsSearchAsync(
        [JsonContent] Hire.PostHireV1ApplicationsDiversityInclusionsSearchBodyDto dto);

    /// <summary>
    /// <para>【云文档】获取文件访问记录</para>
    /// <para>接口ID：7232207479622074371</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/file-view_record/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取文档、电子表格、多维表格等文件的历史访问记录，包括访问者的 ID、姓名、头像和最近访问时间。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:user.base:readonly</item>
    /// <item>drive:file:view_record:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文件 token。获取方式参考[文件概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/file-overview)。</para>
    /// <para>示例值：XIHSdYSI7oMEU1xrsnxc8fabcef</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：1674037112--7189934631754563585</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="file_type">
    /// <para>必填：是</para>
    /// <para>文件类型</para>
    /// <para>示例值：docx</para>
    /// <list type="bullet">
    /// <item>doc：旧版文档</item>
    /// <item>docx：新版文档</item>
    /// <item>sheet：电子表格</item>
    /// <item>bitable：多维表格</item>
    /// <item>mindnote：思维笔记</item>
    /// <item>wiki：知识库文档</item>
    /// <item>file：文件</item>
    /// </list>
    /// </param>
    /// <param name="viewer_id_type">
    /// <para>必填：否</para>
    /// <para>返回的访问者 ID 的类型。</para>
    /// <para>**当值为`user_id`时，字段权限要求**：</para>
    /// <para>- contact:user.employee_id:readonly : 获取用户 user ID</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/drive/v1/files/{file_token}/view_records")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDriveV1FilesByFileTokenViewRecordsResponseDto>> GetDriveV1FilesByFileTokenViewRecordsAsync(
        [PathQuery] string file_token,
        [PathQuery] string file_type,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? viewer_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】获取父部门信息</para>
    /// <para>接口ID：7236202966714957826</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/corehr-v1/organization-management/department/parents</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用来递归获取部门的父部门信息，并按照由子到父的顺序返回有权限的父部门信息列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:department.organize:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：【飞书】用来在具体某个应用中标识一个部门，同一个department_id 在不同应用中的 open_department_id 相同。</item>
    /// <item>department_id：【飞书】用来标识租户内一个唯一的部门。</item>
    /// <item>people_corehr_department_id：【飞书人事】用来标识「飞书人事」中的部门。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/departments/parents")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2DepartmentsParentsResponseDto>> PostCorehrV2DepartmentsParentsAsync(
        [JsonContent] Corehr.PostCorehrV2DepartmentsParentsBodyDto dto,
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【招聘】更新人才在职状态</para>
    /// <para>接口ID：7236665938900877340</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/talent/onboard_status</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新人才的在职状态，可进行的操作包括入职与离职。</para>
    /// <para>## 注意事项</para>
    /// <para>- 进行入职、离职操作后，「飞书招聘」- 「人才库」-「人才详情页」等场景会相应展示已入职、已离职标签</para>
    /// <para>- 已入职的人才不能进行入职操作，已离职的人才不能进行入职操作。已离职的人才若需入职，需走正常的招聘流程</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:talent</item>
    /// </list></para>
    /// </summary>
    /// <param name="talent_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>人才ID，可通过[获取人才列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent/list)接口获取</para>
    /// <para>示例值：6960663240925956661</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/talents/{talent_id}/onboard_status")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1TalentsByTalentIdOnboardStatusAsync(
        [PathQuery] string talent_id,
        [JsonContent] Hire.PostHireV1TalentsByTalentIdOnboardStatusBodyDto dto);

    /// <summary>
    /// <para>【消息与群组】编辑消息</para>
    /// <para>接口ID：7239186075281358852</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/im-v1/message/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口编辑已发送的消息内容，支持编辑文本、富文本消息。如需编辑卡片消息，请使用[更新应用发送的消息卡片](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/patch)接口。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 编辑用户单聊内的消息时，用户需要在机器人的[可用范围](https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/availability)内。</para>
    /// <para>- 编辑群组内的消息时，机器人需要在该群组中，且拥有发言权限。</para>
    /// <para>## 使用限制</para>
    /// <para>- 一条消息最多可编辑 20 次。</para>
    /// <para>- 仅可编辑当前操作者自己发送的消息。</para>
    /// <para>- 不可编辑已撤回，已删除，超出可编辑时间的消息。可编辑时间由企业管理员设定，详情了解[管理员设置撤回和编辑消息权限](https://www.feishu.cn/hc/zh-CN/articles/325339752183)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message</item>
    /// <item>im:message:send_as_bot</item>
    /// <item>im:message:update</item>
    /// </list></para>
    /// </summary>
    /// <param name="message_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待编辑的消息 ID，仅支持编辑文本（text）、富文本（post）消息。</para>
    /// <para>ID 获取方式：</para>
    /// <para>- 调用[发送消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create)接口后，从响应结果的 `message_id` 参数获取。</para>
    /// <para>- 监听[接收消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/events/receive)事件，当触发该事件后可以从事件体内获取消息的 `message_id`。</para>
    /// <para>- 调用[获取会话历史消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/list)接口，从响应结果的 `message_id` 参数获取。</para>
    /// <para>示例值：om_dc13264520392913993dd051dba21dcf</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/im/v1/messages/{message_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PutImV1MessagesByMessageIdResponseDto>> PutImV1MessagesByMessageIdAsync(
        [PathQuery] string message_id,
        [JsonContent] Im.PutImV1MessagesByMessageIdBodyDto dto);

    /// <summary>
    /// <para>【考勤打卡】通过过期时间获取发放记录</para>
    /// <para>接口ID：7239198678939697156</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/leave_employ_expire_record/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>只能获取到对应时间段过期的发放记录</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:rule</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="leave_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>假期类型ID，可通过[获取假期类型列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave/leave_types)获取</para>
    /// <para>示例值：7111688079785723436</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的ID来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpGet("/open-apis/attendance/v1/leave_employ_expire_records/{leave_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.GetAttendanceV1LeaveEmployExpireRecordsByLeaveIdResponseDto>> GetAttendanceV1LeaveEmployExpireRecordsByLeaveIdAsync(
        [PathQuery] string leave_id,
        [JsonContent] Attendance.GetAttendanceV1LeaveEmployExpireRecordsByLeaveIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【考勤打卡】修改发放记录</para>
    /// <para>接口ID：7239198678939713540</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/attendance-v1/leave_accrual_record/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新发放记录的发放数量和失效日期，对应假勤管理-休假管理-[发放记录](https://example.feishu.cn/people/workforce-management/manage/leave/leave_admin/granting_record)</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:rule</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="leave_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>假期类型ID，可通过[获取假期类型列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave/leave_types)获取</para>
    /// <para>示例值：7111688079785723436</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/attendance/v1/leave_accrual_record/{leave_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PatchAttendanceV1LeaveAccrualRecordByLeaveIdResponseDto>> PatchAttendanceV1LeaveAccrualRecordByLeaveIdAsync(
        [PathQuery] string leave_id,
        [JsonContent] Attendance.PatchAttendanceV1LeaveAccrualRecordByLeaveIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【通讯录】批量获取用户信息</para>
    /// <para>接口ID：7243624444425502748</para>
    /// <para>接口文档：https://open.feishu.cn/document/contact-v3/user/batch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口获取通讯录内一个或多个用户的信息，包括用户 ID、名称、邮箱、手机号、状态以及所属部门等信息。</para>
    /// <para>## 注意事项</para>
    /// <para>该查询接口目前不返回用户的席位（assign_info）和部门路径信息（department_path）。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact.base:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:user.assign_info:read</item>
    /// <item>contact:user.base:readonly</item>
    /// <item>contact:user.department_path:readonly</item>
    /// <item>contact:user.department:readonly</item>
    /// <item>contact:user.dotted_line_leader_info.read</item>
    /// <item>contact:user.email:readonly</item>
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>contact:user.employee_number:read</item>
    /// <item>contact:user.employee:readonly</item>
    /// <item>contact:user.gender:readonly</item>
    /// <item>contact:user.job_family:readonly</item>
    /// <item>contact:user.job_level:readonly</item>
    /// <item>contact:user.phone:readonly</item>
    /// <item>contact:user.subscription_ids:write</item>
    /// <item>contact:user.user_geo</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_ids">
    /// <para>必填：是</para>
    /// <para>用户ID。ID 类型与查询参数 `user_id_type` 保持一致。</para>
    /// <para>如需一次查询多个用户ID，可多次传递同一参数名，并且每次传递不同的参数值。例如：</para>
    /// <para>`https://{url}?user_ids={user_id1}&amp;user_ids={user_id2}`。</para>
    /// <para>**说明**：</para>
    /// <para>- 单次最大请求可设置的用户 ID 数量上限为 50。</para>
    /// <para>- 如上例子中的 `user_ids`是参数名，可以多次传递。`{user_id1}`和`{user_id2}`是每次传入的参数值。</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>指定查询结果中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 `od-`，在租户内全局唯一。</item>
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/users/batch")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3UsersBatchResponseDto>> GetContactV3UsersBatchAsync(
        [PathQuery] string[] user_ids,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【通讯录】批量获取部门信息</para>
    /// <para>接口ID：7243624444425519132</para>
    /// <para>接口文档：https://open.feishu.cn/document/contact-v3/department/batch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口获取一个或多个部门的信息，包括部门名称、ID、父部门、负责人、状态以及成员个数等。</para>
    /// <para>## 注意事项</para>
    /// <para>使用不同身份调用本接口时，需要注意不同身份所需的不同权限范围。具体说明如下：</para>
    /// <para>- 当你使用应用身份（tenant_access_token）调用本接口时，应用的通讯录权限范围内需要包含当前被查询的部门。如果需要查询根部门信息，则应用的通讯录权限范围需设置为 **全部成员**。了解权限范围参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>- 当你使用用户身份（user_access_token）调用本接口时，需要确保该用户身份拥有待查询部门的可见性。如果需要查询根部门信息，则用户需要可见所有人。用户的组织架构可见范围需要由企业管理员在[管理后台](https://feishu.cn/admin/index) &gt; **安全** &gt; **成员权限** &gt; **组织架构可见范围** 内调整。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact.base:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:department.base:readonly</item>
    /// <item>contact:department.hrbp:readonly</item>
    /// <item>contact:department.organize:readonly</item>
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="department_ids">
    /// <para>必填：是</para>
    /// <para>部门 ID，ID 类型需要与查询参数 department_id_type 的取值保持一致。ID 获取方式说明：</para>
    /// <para>- 调用[创建部门](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/create)接口后，可从返回结果中获取到部门 ID 信息。</para>
    /// <para>- 部门 API 提供了多种获取其他部门 ID 的方式，如[获取子部门列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/children)、[获取父部门信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/parent)、[搜索部门](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/search)，你可以选择合适的 API 进行查询。</para>
    /// <para>**注意：**</para>
    /// <para>- 单次最大请求的 ID 数量为 50。</para>
    /// <para>- 如需一次查询多个部门，可将同一参数名多次传递，并且每次传递不同的部门 ID 进行查询。GET 请求示例：</para>
    /// <para>`https://{url}?department_ids={department_id1}&amp;department_ids={department_id2}`。其中：</para>
    /// <para>- `department_ids` 是参数名，可以多次传递。</para>
    /// <para>- `department_id1`和`department_id2`是不同的参数值。</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 `od-`，在租户内全局唯一。</item>
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/departments/batch")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3DepartmentsBatchResponseDto>> GetContactV3DepartmentsBatchAsync(
        [PathQuery] string[] department_ids,
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【工作台】获取定制工作台小组件访问数据</para>
    /// <para>接口ID：7244463472595681282</para>
    /// <para>接口文档：https://open.feishu.cn/document/workplace-v1/workplace_access_data/search-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取定制工作台小组件访问数据</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>workplace:workplace_using_data:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="from_date">
    /// <para>必填：是</para>
    /// <para>数据检索开始时间，精确到日。格式yyyy-MM-dd。</para>
    /// <para>示例值：2023-02-01</para>
    /// </param>
    /// <param name="to_date">
    /// <para>必填：是</para>
    /// <para>数据检索结束时间，精确到日。格式yyyy-MM-dd。</para>
    /// <para>示例值：2023-03-02</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最小为 1，最大为 200，默认为 20。</para>
    /// <para>示例值：20</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：ddowkdkl9w2d</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="block_id">
    /// <para>必填：否</para>
    /// <para>小组件id（BlockID）。</para>
    /// <para>可前往 飞书管理后台 &gt; 工作台 &gt; 定制工作台，选择指定的工作台并进入工作台编辑器，点击某个小组件，即可查看页面右侧面板中该小组件名称下方的“BlockID”</para>
    /// <para>示例值：283438293839422334</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpPost("/open-apis/workplace/v1/workplace_block_access_data/search")]
    System.Threading.Tasks.Task<FeishuResponse<Workplace.PostWorkplaceV1WorkplaceBlockAccessDataSearchResponseDto>> PostWorkplaceV1WorkplaceBlockAccessDataSearchAsync(
        [PathQuery] string from_date,
        [PathQuery] string to_date,
        [PathQuery] int page_size = 20,
        [PathQuery] string? page_token = null,
        [PathQuery] string? block_id = null);

    /// <summary>
    /// <para>【工作台】获取定制工作台访问数据</para>
    /// <para>接口ID：7244463472595697666</para>
    /// <para>接口文档：https://open.feishu.cn/document/workplace-v1/workplace_access_data/search-3</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取定制工作台访问数据</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>workplace:workplace_using_data:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="from_date">
    /// <para>必填：是</para>
    /// <para>数据检索开始时间，精确到日。格式yyyy-MM-dd</para>
    /// <para>示例值：2023-03-01</para>
    /// </param>
    /// <param name="to_date">
    /// <para>必填：是</para>
    /// <para>数据检索结束时间，精确到日。格式yyyy-MM-dd。</para>
    /// <para>示例值：2023-03-22</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最小为 1，最大为 200，默认为 20。</para>
    /// <para>示例值：20</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：ddowkdkl9w2d</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="custom_workplace_id">
    /// <para>必填：否</para>
    /// <para>定制工作台id，非必填。不填时，返回所有定制工作台数据。</para>
    /// <para>如何获取定制工作台ID：可前往 飞书管理后台 &gt; 工作台 &gt; 定制工作台，点击指定工作台的 设置 进入设置页面；鼠标连续点击三次顶部的 设置 字样即可出现 ID，复制 ID 即可</para>
    /// <para>示例值：tpl_647184b585400013254c4ea6</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpPost("/open-apis/workplace/v1/custom_workplace_access_data/search")]
    System.Threading.Tasks.Task<FeishuResponse<Workplace.PostWorkplaceV1CustomWorkplaceAccessDataSearchResponseDto>> PostWorkplaceV1CustomWorkplaceAccessDataSearchAsync(
        [PathQuery] string from_date,
        [PathQuery] string to_date,
        [PathQuery] int page_size = 20,
        [PathQuery] string? page_token = null,
        [PathQuery] string? custom_workplace_id = null);

    /// <summary>
    /// <para>【工作台】获取工作台访问数据</para>
    /// <para>接口ID：7244463472595714050</para>
    /// <para>接口文档：https://open.feishu.cn/document/workplace-v1/workplace_access_data/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取工作台访问数据（包含默认工作台与定制工作台）</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>workplace:workplace_using_data:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="from_date">
    /// <para>必填：是</para>
    /// <para>数据检索开始时间，精确到日。格式yyyy-MM-dd</para>
    /// <para>示例值：2023-03-01</para>
    /// </param>
    /// <param name="to_date">
    /// <para>必填：是</para>
    /// <para>数据检索结束时间，精确到日。格式yyyy-MM-dd。</para>
    /// <para>示例值：2023-03-22</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最小为 1，最大为 200，默认为 20。</para>
    /// <para>示例值：20</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：ddowkdkl9w2d</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpPost("/open-apis/workplace/v1/workplace_access_data/search")]
    System.Threading.Tasks.Task<FeishuResponse<Workplace.PostWorkplaceV1WorkplaceAccessDataSearchResponseDto>> PostWorkplaceV1WorkplaceAccessDataSearchAsync(
        [PathQuery] string from_date,
        [PathQuery] string to_date,
        [PathQuery] int page_size = 20,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【AI 能力】识别文件中的增值税发票</para>
    /// <para>接口ID：7247054875321434114</para>
    /// <para>接口文档：https://open.feishu.cn/document/ai/document_ai-v1/vat_invoice/recognize</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>增值税发票识别接口，支持JPG/JPEG/PNG/PDF/BMP/OFD六种文件类型的一次性的识别。</para>
    /// <para>文件大小需要小于10M。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>document_ai:vat_invoice:recognize</item>
    /// </list></para>
    /// </summary>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>识别的增值税发票文件（支持JPG/JPEG/PNG/PDF/BMP/OFD）</para>
    /// </param>
    [HttpPost("/open-apis/document_ai/v1/vat_invoice/recognize")]
    System.Threading.Tasks.Task<FeishuResponse<Ai.PostDocumentAiV1VatInvoiceRecognizeResponseDto>> PostDocumentAiV1VatInvoiceRecognizeAsync(
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【飞书人事（企业版）】搜索合同</para>
    /// <para>接口ID：7248868628551303172</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/contract/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口可用于搜索合同信息，包括合同开始时间、合同预计结束时间、合同实际结束时间、合同公司主体等信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:contract:read</item>
    /// <item>corehr:contract:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:contract.company:read</item>
    /// <item>corehr:contract.company:write</item>
    /// <item>corehr:contract.period:read</item>
    /// <item>corehr:contract.period:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：10</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/contracts/search")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2ContractsSearchResponseDto>> PostCorehrV2ContractsSearchAsync(
        [JsonContent] Corehr.PostCorehrV2ContractsSearchBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【词典】获取词条详情</para>
    /// <para>接口ID：7249689905696981020</para>
    /// <para>接口文档：https://open.feishu.cn/document/lingo-v1/entity/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>通过词条 id 拉取对应的词条详情信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity</item>
    /// <item>baike:entity:exempt_review</item>
    /// <item>baike:entity:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="entity_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>词条 ID</para>
    /// <para>示例值：enterprise_515879</para>
    /// </param>
    /// <param name="provider">
    /// <para>必填：否</para>
    /// <para>外部系统</para>
    /// <para>示例值：星云</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="outer_id">
    /// <para>必填：否</para>
    /// <para>词条在外部系统中对应的唯一 ID</para>
    /// <para>示例值：123aaa</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/lingo/v1/entities/{entity_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Baike.GetLingoV1EntitiesByEntityIdResponseDto>> GetLingoV1EntitiesByEntityIdAsync(
        [PathQuery] string entity_id,
        [PathQuery] string? provider = null,
        [PathQuery] string? outer_id = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【词典】获取词条列表</para>
    /// <para>接口ID：7249689905696997404</para>
    /// <para>接口文档：https://open.feishu.cn/document/lingo-v1/entity/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>分页拉取词条列表数据，支持拉取租户内(或指定词库内)的全部词条。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity</item>
    /// <item>baike:entity:exempt_review</item>
    /// <item>baike:entity:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：20</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：408ecac018b2e3518db37275e812aad7bb8ad3e755fc886f322ac6c430ba</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="provider">
    /// <para>必填：否</para>
    /// <para>相关外部系统【可用来过滤词条数据】</para>
    /// <para>示例值：星云</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="repo_id">
    /// <para>必填：否</para>
    /// <para>词库 id(不传时默认返回全员词库数据)</para>
    /// <para>如以应用身份拉取非全员词库的词条，需要在“词库设置”页面添加应用；若以用户身份拉取非全员词库的词条，该用户需要拥有对应词库的可见权限。</para>
    /// <para>示例值：7152790921053274113</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/lingo/v1/entities")]
    System.Threading.Tasks.Task<FeishuResponse<Baike.GetLingoV1EntitiesResponseDto>> GetLingoV1EntitiesAsync(
        [PathQuery] int? page_size = 20,
        [PathQuery] string? page_token = null,
        [PathQuery] string? provider = null,
        [PathQuery] string? repo_id = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【词典】上传图片</para>
    /// <para>接口ID：7249689905697013788</para>
    /// <para>接口文档：https://open.feishu.cn/document/lingo-v1/file/upload</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>词条图片资源上传。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity</item>
    /// <item>baike:entity:exempt_review</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>二进制文件内容，高宽像素在 320-4096 像素之间，大小在 3KB-10MB 的图片</para>
    /// </param>
    [HttpPost("/open-apis/lingo/v1/files/upload")]
    System.Threading.Tasks.Task<FeishuResponse<Baike.PostLingoV1FilesUploadResponseDto>> PostLingoV1FilesUploadAsync(
        [FormDataContent] Baike.PostLingoV1FilesUploadBodyDto dto,
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【词典】下载图片</para>
    /// <para>接口ID：7249689905697030172</para>
    /// <para>接口文档：https://open.feishu.cn/document/lingo-v1/file/download</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>通过 file_token 下载原图片。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity</item>
    /// <item>baike:entity:exempt_review</item>
    /// <item>baike:entity:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要下载的文件 token</para>
    /// <para>示例值：boxbcEcmKiD3***vgqWTpvdc7jc</para>
    /// </param>
    /// <returns>返回文件二进制流</returns>
    [HttpGet("/open-apis/lingo/v1/files/{file_token}/download")]
    System.Threading.Tasks.Task<HttpResponseMessage> GetLingoV1FilesByFileTokenDownloadAsync(
        [PathQuery] string file_token);

    /// <summary>
    /// <para>【词典】创建草稿</para>
    /// <para>接口ID：7249689905697046556</para>
    /// <para>接口文档：https://open.feishu.cn/document/lingo-v1/draft/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>草稿并非词条，而是指通过 API 发起创建新词条或更新现有词条的申请。</para>
    /// <para>词典管理员审核通过后，草稿将变为新的词条或覆盖已有词条。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity</item>
    /// <item>baike:entity:exempt_review</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="repo_id">
    /// <para>必填：否</para>
    /// <para>词库ID（需要在指定词库创建草稿时填写，不填写默认创建至全员词库）</para>
    /// <para>如以应用身份创建草稿到非全员词库，需要在“词库设置”页面添加应用；若以用户身份创建草稿到非全员词库，该用户需要拥有对应词库的可见权限。</para>
    /// <para>示例值：72025****640276</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/lingo/v1/drafts")]
    System.Threading.Tasks.Task<FeishuResponse<Baike.PostLingoV1DraftsResponseDto>> PostLingoV1DraftsAsync(
        [JsonContent] Baike.PostLingoV1DraftsBodyDto dto,
        [PathQuery] string? repo_id = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【词典】更新草稿</para>
    /// <para>接口ID：7249689905697062940</para>
    /// <para>接口文档：https://open.feishu.cn/document/lingo-v1/draft/update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据 draft_id 更新草稿内容，已审批的草稿无法编辑。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity</item>
    /// <item>baike:entity:exempt_review</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="draft_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>草稿ID</para>
    /// <para>示例值：7241543272228814852</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/lingo/v1/drafts/{draft_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Baike.PutLingoV1DraftsByDraftIdResponseDto>> PutLingoV1DraftsByDraftIdAsync(
        [PathQuery] string draft_id,
        [JsonContent] Baike.PutLingoV1DraftsByDraftIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【词典】精准搜索词条</para>
    /// <para>接口ID：7249689905697079324</para>
    /// <para>接口文档：https://open.feishu.cn/document/lingo-v1/entity/match</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>将关键词与词条名、别名精准匹配，并返回对应的 词条 ID。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity</item>
    /// <item>baike:entity:exempt_review</item>
    /// <item>baike:entity:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="repo_id">
    /// <para>必填：否</para>
    /// <para>词库ID(不传时默认在全员词库内搜索)</para>
    /// <para>如以应用身份搜索非全员词库中的词条，需要在“词库设置”页面添加应用；若以用户身份搜索非全员词库中的词条，该用户需要拥有对应词库的可见权限。</para>
    /// <para>示例值：7202510112396640276</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/lingo/v1/entities/match")]
    System.Threading.Tasks.Task<FeishuResponse<Baike.PostLingoV1EntitiesMatchResponseDto>> PostLingoV1EntitiesMatchAsync(
        [JsonContent] Baike.PostLingoV1EntitiesMatchBodyDto dto,
        [PathQuery] string? repo_id = null);

    /// <summary>
    /// <para>【词典】模糊搜索词条</para>
    /// <para>接口ID：7249689905697095708</para>
    /// <para>接口文档：https://open.feishu.cn/document/lingo-v1/entity/search</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>传入关键词，与词条名、别名、释义等信息进行模糊匹配，返回搜到的词条信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity</item>
    /// <item>baike:entity:exempt_review</item>
    /// <item>baike:entity:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>每页返回的词条量</para>
    /// <para>示例值：20</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：b152fa6e6f62a291019a04c3a93f365f8ac641910506ff15ff4cad6534e087cb4ed8fa2c</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="repo_id">
    /// <para>必填：否</para>
    /// <para>词库ID(不传时默认在全员词库内搜索)</para>
    /// <para>如以应用身份搜索非全员词库中的词条，需要在“词库设置”页面添加应用；若以用户身份搜索非全员词库中的词条，该用户需要拥有对应词库的可见权限。</para>
    /// <para>示例值：7202510112396640276</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/lingo/v1/entities/search")]
    System.Threading.Tasks.Task<FeishuResponse<Baike.PostLingoV1EntitiesSearchResponseDto>> PostLingoV1EntitiesSearchAsync(
        [JsonContent] Baike.PostLingoV1EntitiesSearchBodyDto dto,
        [PathQuery] int? page_size = 20,
        [PathQuery] string? page_token = null,
        [PathQuery] string? repo_id = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【词典】更新免审词条</para>
    /// <para>接口ID：7249689905697128476</para>
    /// <para>接口文档：https://open.feishu.cn/document/lingo-v1/entity/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过此接口更新已有的词条，无需经过词典管理员审核，直接写入词库。因此，调用该接口时应当慎重操作。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity:exempt_review</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="entity_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>词条 ID</para>
    /// <para>示例值：enterprise_40217521</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/lingo/v1/entities/{entity_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Baike.PutLingoV1EntitiesByEntityIdResponseDto>> PutLingoV1EntitiesByEntityIdAsync(
        [PathQuery] string entity_id,
        [JsonContent] Baike.PutLingoV1EntitiesByEntityIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【词典】获取词典分类</para>
    /// <para>接口ID：7249689905697161244</para>
    /// <para>接口文档：https://open.feishu.cn/document/lingo-v1/classification/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取飞书词典当前分类。</para>
    /// <para>飞书词典目前为二级分类体系，每个词条可添加多个二级分类，但选择的二级分类必须从属于不同的一级分类。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity</item>
    /// <item>baike:entity:exempt_review</item>
    /// <item>baike:entity:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：20</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：408ecac018b2e3518db37275e812aad7bb8ad3e755fc886f322ac6c430ba</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="repo_id">
    /// <para>必填：否</para>
    /// <para>词库ID（不传默认范围为全员词库）</para>
    /// <para>如以应用身份获取非全员词库中的分类，需要在“词库设置”页面添加应用；若以用户身份获取非全员词库中的分类，该用户需要拥有对应词库的可见权限。</para>
    /// <para>示例值：7202510112396640276</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/lingo/v1/classifications")]
    System.Threading.Tasks.Task<FeishuResponse<Baike.GetLingoV1ClassificationsResponseDto>> GetLingoV1ClassificationsAsync(
        [PathQuery] int? page_size = 20,
        [PathQuery] string? page_token = null,
        [PathQuery] string? repo_id = null);

    /// <summary>
    /// <para>【词典】获取词库列表</para>
    /// <para>接口ID：7249689905697177628</para>
    /// <para>接口文档：https://open.feishu.cn/document/lingo-v1/repo/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取有权限访问的飞书词典词库列表。</para>
    /// <para>如以应用身份获取，需要在“词库设置”页面添加应用；若以用户身份获取，该用户需要拥有对应词库的可见权限。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity</item>
    /// <item>baike:entity:exempt_review</item>
    /// <item>baike:entity:readonly</item>
    /// </list></para>
    /// </summary>
    [HttpGet("/open-apis/lingo/v1/repos")]
    System.Threading.Tasks.Task<FeishuResponse<Baike.GetLingoV1ReposResponseDto>> GetLingoV1ReposAsync();

    /// <summary>
    /// <para>【词典】创建免审词条</para>
    /// <para>接口ID：7249689905697194012</para>
    /// <para>接口文档：https://open.feishu.cn/document/lingo-v1/entity/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过此接口创建的词条，无需经过词典管理员审核，直接写入词库。因此，调用此接口时，应当慎重操作。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity:exempt_review</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="repo_id">
    /// <para>必填：否</para>
    /// <para>词库 ID（需要在指定词库创建词条时传入，不传时默认创建至全员词库）</para>
    /// <para>如以应用身份创建词条到非全员词库，需要在“词库设置”页面添加应用；若以用户身份创建词条到非全员词库，该用户需要拥有对应词库的可见权限。</para>
    /// <para>示例值：71527909****274113</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/lingo/v1/entities")]
    System.Threading.Tasks.Task<FeishuResponse<Baike.PostLingoV1EntitiesResponseDto>> PostLingoV1EntitiesAsync(
        [JsonContent] Baike.PostLingoV1EntitiesBodyDto dto,
        [PathQuery] string? repo_id = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【词典】词条高亮</para>
    /// <para>接口ID：7249689905697210396</para>
    /// <para>接口文档：https://open.feishu.cn/document/lingo-v1/entity/highlight</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>传入一句话，智能识别句中对应的词条，并返回词条位置和 entity_id，可在外部系统中快速实现词条智能高亮。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity</item>
    /// <item>baike:entity:exempt_review</item>
    /// <item>baike:entity:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/lingo/v1/entities/highlight")]
    System.Threading.Tasks.Task<FeishuResponse<Baike.PostLingoV1EntitiesHighlightResponseDto>> PostLingoV1EntitiesHighlightAsync(
        [JsonContent] Baike.PostLingoV1EntitiesHighlightBodyDto dto);

    /// <summary>
    /// <para>【AI 能力】识别文件中的出租车发票</para>
    /// <para>接口ID：7249730096956620803</para>
    /// <para>接口文档：https://open.feishu.cn/document/ai/document_ai-v1/taxi_invoice/recognize</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>出租车发票识别接口，支持JPG/JPEG/PNG/PDF/OFD五种文件类型的一次性的识别。</para>
    /// <para>文件大小需要小于10M。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>document_ai:taxi_invoice:recognize</item>
    /// </list></para>
    /// </summary>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>识别的出租车票源文件</para>
    /// </param>
    [HttpPost("/open-apis/document_ai/v1/taxi_invoice/recognize")]
    System.Threading.Tasks.Task<FeishuResponse<Ai.PostDocumentAiV1TaxiInvoiceRecognizeResponseDto>> PostDocumentAiV1TaxiInvoiceRecognizeAsync(
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【AI 能力】识别文件中的身份证</para>
    /// <para>接口ID：7249730096956637187</para>
    /// <para>接口文档：https://open.feishu.cn/document/ai/document_ai-v1/id_card/recognize</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>身份证识别接口，支持JPG/JPEG/PNG/BMP四种文件类型的一次性的识别。</para>
    /// <para>文件大小需要小于10M。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>document_ai:id_card:recognize</item>
    /// </list></para>
    /// </summary>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>识别身份证的源文件</para>
    /// </param>
    [HttpPost("/open-apis/document_ai/v1/id_card/recognize")]
    System.Threading.Tasks.Task<FeishuResponse<Ai.PostDocumentAiV1IdCardRecognizeResponseDto>> PostDocumentAiV1IdCardRecognizeAsync(
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【AI 能力】识别文件中的驾驶证</para>
    /// <para>接口ID：7249730096956653571</para>
    /// <para>接口文档：https://open.feishu.cn/document/ai/document_ai-v1/driving_license/recognize</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>驾驶证识别接口，支持JPG/JPEG/PNG/BMP四种文件类型的一次性的识别。</para>
    /// <para>文件大小需要小于10M。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>document_ai:driving_license:recognize</item>
    /// </list></para>
    /// </summary>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>识别的驾驶证源文件</para>
    /// </param>
    [HttpPost("/open-apis/document_ai/v1/driving_license/recognize")]
    System.Threading.Tasks.Task<FeishuResponse<Ai.PostDocumentAiV1DrivingLicenseRecognizeResponseDto>> PostDocumentAiV1DrivingLicenseRecognizeAsync(
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【AI 能力】识别文件中的行驶证</para>
    /// <para>接口ID：7249730096956669955</para>
    /// <para>接口文档：https://open.feishu.cn/document/ai/document_ai-v1/vehicle_license/recognize</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>行驶证识别接口，支持JPG/JPEG/PNG/BMP四种文件类型的一次性的识别。</para>
    /// <para>文件大小需要小于10M。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>document_ai:vehicle_license:recognize</item>
    /// </list></para>
    /// </summary>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>识别的行驶证源文件</para>
    /// </param>
    [HttpPost("/open-apis/document_ai/v1/vehicle_license/recognize")]
    System.Threading.Tasks.Task<FeishuResponse<Ai.PostDocumentAiV1VehicleLicenseRecognizeResponseDto>> PostDocumentAiV1VehicleLicenseRecognizeAsync(
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【AI 能力】识别文件中的火车票</para>
    /// <para>接口ID：7249730096956686339</para>
    /// <para>接口文档：https://open.feishu.cn/document/ai/document_ai-v1/train_invoice/recognize</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>火车票识别接口，支持JPG/JPEG/PNG/PDF/OFD五种文件类型的一次性的识别。</para>
    /// <para>文件大小需要小于10M。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>document_ai:train_invoice:recognize</item>
    /// </list></para>
    /// </summary>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>识别的火车票源文件</para>
    /// </param>
    [HttpPost("/open-apis/document_ai/v1/train_invoice/recognize")]
    System.Threading.Tasks.Task<FeishuResponse<Ai.PostDocumentAiV1TrainInvoiceRecognizeResponseDto>> PostDocumentAiV1TrainInvoiceRecognizeAsync(
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【AI 能力】识别文件中的食品生产许可证</para>
    /// <para>接口ID：7249730096956702723</para>
    /// <para>接口文档：https://open.feishu.cn/document/ai/document_ai-v1/food_produce_license/recognize</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>食品生产许可证识别接口，支持JPG/JPEG/PNG/BMP/PDF五种文件类型的一次性的识别。</para>
    /// <para>文件大小需要小于10M。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>document_ai:food_produce_license:recoginze</item>
    /// </list></para>
    /// </summary>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>识别的食品生产许可证源文件</para>
    /// </param>
    [HttpPost("/open-apis/document_ai/v1/food_produce_license/recognize")]
    System.Threading.Tasks.Task<FeishuResponse<Ai.PostDocumentAiV1FoodProduceLicenseRecognizeResponseDto>> PostDocumentAiV1FoodProduceLicenseRecognizeAsync(
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【AI 能力】识别文件中的食品经营许可证</para>
    /// <para>接口ID：7249730096956719107</para>
    /// <para>接口文档：https://open.feishu.cn/document/ai/document_ai-v1/food_manage_license/recognize</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>食品经营许可证识别接口，支持JPG/JPEG/PNG/BMP/PDF五种文件类型的一次性的识别。</para>
    /// <para>文件大小需要小于10M。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>document_ai:food_manage_license:recognize</item>
    /// </list></para>
    /// </summary>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>识别的食品经营许可证源文件</para>
    /// </param>
    [HttpPost("/open-apis/document_ai/v1/food_manage_license/recognize")]
    System.Threading.Tasks.Task<FeishuResponse<Ai.PostDocumentAiV1FoodManageLicenseRecognizeResponseDto>> PostDocumentAiV1FoodManageLicenseRecognizeAsync(
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【AI 能力】识别文件中的营业执照</para>
    /// <para>接口ID：7249730096956735491</para>
    /// <para>接口文档：https://open.feishu.cn/document/ai/document_ai-v1/business_license/recognize</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>营业执照识别接口，支持JPG/JPEG/PNG/BMP/PDF五种文件类型的一次性的识别。</para>
    /// <para>文件大小需要小于10M。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>document_ai:business_license:recognize</item>
    /// </list></para>
    /// </summary>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>识别的营业执照源文件</para>
    /// </param>
    [HttpPost("/open-apis/document_ai/v1/business_license/recognize")]
    System.Threading.Tasks.Task<FeishuResponse<Ai.PostDocumentAiV1BusinessLicenseRecognizeResponseDto>> PostDocumentAiV1BusinessLicenseRecognizeAsync(
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【飞书人事（企业版）】通过地点 ID 批量获取地点信息</para>
    /// <para>接口ID：7252157701853167644</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/location/batch_get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于根据地点 ID批量查询地点信息，信息包含地点名称、描述、地点用途、工时制度、区域设置、时区以及关联的地址信息等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:locations:read</item>
    /// <item>corehr:locations:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/locations/batch_get")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2LocationsBatchGetResponseDto>> PostCorehrV2LocationsBatchGetAsync(
        [JsonContent] Corehr.PostCorehrV2LocationsBatchGetBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】通过公司 ID 批量获取公司信息</para>
    /// <para>接口ID：7252157701853184028</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/company/batch_get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过 ID 批量查询公司信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:company:read</item>
    /// <item>corehr:company:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/companies/batch_get")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2CompaniesBatchGetResponseDto>> PostCorehrV2CompaniesBatchGetAsync(
        [JsonContent] Corehr.PostCorehrV2CompaniesBatchGetBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】通过职级 ID 批量获取职级信息</para>
    /// <para>接口ID：7252157701853200412</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/job-management/job_level/batch_get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口支持通过职级id批量查询职级详情信息，包括职级包含的名称、描述、启用状态等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:job_level:read</item>
    /// <item>corehr:job_level:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/job_levels/batch_get")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2JobLevelsBatchGetResponseDto>> PostCorehrV2JobLevelsBatchGetAsync(
        [JsonContent] Corehr.PostCorehrV2JobLevelsBatchGetBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】通过序列 ID 批量获取序列信息</para>
    /// <para>接口ID：7252157701853216796</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/job-management/job_family/batch_get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过序列 ID 批量查询序列的详情信息，包括序列名称、启用状态、上级序列等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:job_family:read</item>
    /// <item>corehr:job_family:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/job_families/batch_get")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2JobFamiliesBatchGetResponseDto>> PostCorehrV2JobFamiliesBatchGetAsync(
        [JsonContent] Corehr.PostCorehrV2JobFamiliesBatchGetBodyDto dto);

    /// <summary>
    /// <para>【招聘】停用内推账户</para>
    /// <para>接口ID：7252281835550867458</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/referral_account/deactivate</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>停用内推账户，停用后，将不再发送[「内推账户余额变更事件」](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/referral_account/events/assets_update)，也无法通过[「提取内推账号余额」](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/referral_account/withdraw)提取。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:referral_account</item>
    /// </list></para>
    /// </summary>
    /// <param name="referral_account_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>账户ID，注册账户后获取：[注册内推账户](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/referral_account/create)</para>
    /// <para>示例值：6942778198054125570</para>
    /// </param>
    [HttpPost("/open-apis/hire/v1/referral_account/{referral_account_id}/deactivate")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1ReferralAccountByReferralAccountIdDeactivateResponseDto>> PostHireV1ReferralAccountByReferralAccountIdDeactivateAsync(
        [PathQuery] string referral_account_id);

    /// <summary>
    /// <para>【招聘】全额提取内推账户余额</para>
    /// <para>接口ID：7252281835550883842</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/referral_account/withdraw</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过账户 ID 全额提取内推账户下的积分/现金。全额提现后，内推人在飞书招聘系统中的积分/现金余额会变为 0，对应的积分/现金奖励状态也会变为「已发放」。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:referral_account</item>
    /// </list></para>
    /// </summary>
    /// <param name="referral_account_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>账户 ID，通过[注册内推账户](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/referral_account/create)生成</para>
    /// <para>示例值：6942778198054125570</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/referral_account/{referral_account_id}/withdraw")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1ReferralAccountByReferralAccountIdWithdrawResponseDto>> PostHireV1ReferralAccountByReferralAccountIdWithdrawAsync(
        [PathQuery] string referral_account_id,
        [JsonContent] Hire.PostHireV1ReferralAccountByReferralAccountIdWithdrawBodyDto dto);

    /// <summary>
    /// <para>【招聘】内推账户提现数据对账</para>
    /// <para>接口ID：7252281835550900226</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/referral_account/reconciliation</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对一段时间内的内推账户积分提现数据进行对账，调用方需传入调用方系统的内推账户积分变动信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:referral_account</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/referral_account/reconciliation")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1ReferralAccountReconciliationResponseDto>> PostHireV1ReferralAccountReconciliationAsync(
        [JsonContent] Hire.PostHireV1ReferralAccountReconciliationBodyDto dto);

    /// <summary>
    /// <para>【招聘】注册内推账户</para>
    /// <para>接口ID：7252281835550932994</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/referral_account/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过内推人的手机号或邮箱注册「内推奖励账户」。注册后，可通过[查询内推账户](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/referral_account/get_account_assets)接口获取内推账户 ID、积分余额、现金余额等，可通过[「全额提取内推账号余额」](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/referral_account/withdraw)接口提取账户余额，可通过[启动内推账户](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/referral_account/enable)、[「停用内推账户」](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/referral_account/deactivate)接口启/停用账户。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:referral_account</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/referral_account")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1ReferralAccountResponseDto>> PostHireV1ReferralAccountAsync(
        [JsonContent] Hire.PostHireV1ReferralAccountBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】批量查询员工信息</para>
    /// <para>接口ID：7252969409509490692</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/employee/batch_get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过员工 ID 、个人信息 ID、工作邮箱等筛选项批量查询员工的工作信息、个人信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:employee:read</item>
    /// <item>corehr:employee:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:contract.period:read</item>
    /// <item>corehr:contract.period:write</item>
    /// <item>corehr:employee.all_bp:read</item>
    /// <item>corehr:employee.bp:read</item>
    /// <item>corehr:employment.archive_cpst_plan:read</item>
    /// <item>corehr:employment.assignment_pay_group:read</item>
    /// <item>corehr:employment.assignment:read</item>
    /// <item>corehr:employment.contract_type:read</item>
    /// <item>corehr:employment.custom_field:read</item>
    /// <item>corehr:employment.custom_org_field:read</item>
    /// <item>corehr:employment.custom_org_field:write</item>
    /// <item>corehr:employment.job_grade:read</item>
    /// <item>corehr:employment.job_grade:write</item>
    /// <item>corehr:employment.job_level:read</item>
    /// <item>corehr:employment.job_level:write</item>
    /// <item>corehr:employment.job:read</item>
    /// <item>corehr:employment.offboarding_reason:read</item>
    /// <item>corehr:employment.pathway:read</item>
    /// <item>corehr:employment.pathway:write</item>
    /// <item>corehr:employment.pay_group:read</item>
    /// <item>corehr:employment.position:read</item>
    /// <item>corehr:employment.position:write</item>
    /// <item>corehr:employment.seniority_adjust_information:read</item>
    /// <item>corehr:employment.seniority_adjust_information:write</item>
    /// <item>corehr:job_data.compensation_type:read</item>
    /// <item>corehr:job_data.service_company:read</item>
    /// <item>corehr:job_data.work_shift:read</item>
    /// <item>corehr:job.job_level:read</item>
    /// <item>corehr:person.address:read</item>
    /// <item>corehr:person.address:write</item>
    /// <item>corehr:person.bank_account:read</item>
    /// <item>corehr:person.bank_account:write</item>
    /// <item>corehr:person.born_country_region:read</item>
    /// <item>corehr:person.born_country_region:write</item>
    /// <item>corehr:person.custom_field:read</item>
    /// <item>corehr:person.custom_field:write</item>
    /// <item>corehr:person.date_entered_workforce:read</item>
    /// <item>corehr:person.date_entered_workforce:write</item>
    /// <item>corehr:person.date_of_birth:read</item>
    /// <item>corehr:person.date_of_birth:write</item>
    /// <item>corehr:person.dependent:read</item>
    /// <item>corehr:person.dependent:write</item>
    /// <item>corehr:person.education:read</item>
    /// <item>corehr:person.education:write</item>
    /// <item>corehr:person.email:read</item>
    /// <item>corehr:person.email:write</item>
    /// <item>corehr:person.emergency_contact:read</item>
    /// <item>corehr:person.emergency_contact:write</item>
    /// <item>corehr:person.entry_leave_time:read</item>
    /// <item>corehr:person.entry_leave_time:write</item>
    /// <item>corehr:person.gender:read</item>
    /// <item>corehr:person.gender:write</item>
    /// <item>corehr:person.hukou:read</item>
    /// <item>corehr:person.hukou:write</item>
    /// <item>corehr:person.is_disabled:read</item>
    /// <item>corehr:person.is_disabled:write</item>
    /// <item>corehr:person.is_old_alone:read</item>
    /// <item>corehr:person.is_old_alone:write</item>
    /// <item>corehr:person.legal_name:read</item>
    /// <item>corehr:person.legal_name:write</item>
    /// <item>corehr:person.marital_status:read</item>
    /// <item>corehr:person.marital_status:write</item>
    /// <item>corehr:person.martyr_family:read</item>
    /// <item>corehr:person.martyr_family:write</item>
    /// <item>corehr:person.national_id:read</item>
    /// <item>corehr:person.national_id:write</item>
    /// <item>corehr:person.nationality:read</item>
    /// <item>corehr:person.nationality:write</item>
    /// <item>corehr:person.native_region:read</item>
    /// <item>corehr:person.native_region:write</item>
    /// <item>corehr:person.personal_profile:read</item>
    /// <item>corehr:person.personal_profile:write</item>
    /// <item>corehr:person.phone:read</item>
    /// <item>corehr:person.phone:write</item>
    /// <item>corehr:person.political_affiliation:read</item>
    /// <item>corehr:person.political_affiliation:write</item>
    /// <item>corehr:person.race:read</item>
    /// <item>corehr:person.religion:read</item>
    /// <item>corehr:person.religion:write</item>
    /// <item>corehr:person.resident_tax_custom_field:read</item>
    /// <item>corehr:person.resident_tax_custom_field:write</item>
    /// <item>corehr:person.resident_tax:read</item>
    /// <item>corehr:person.resident_tax:write</item>
    /// <item>corehr:person.work_experience:read</item>
    /// <item>corehr:person.work_experience:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/employees/batch_get")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2EmployeesBatchGetResponseDto>> PostCorehrV2EmployeesBatchGetAsync(
        [JsonContent] Corehr.PostCorehrV2EmployeesBatchGetBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【招聘】获取职位上的招聘人员信息</para>
    /// <para>接口ID：7254447878126878748</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/recruitment-related-configuration/job/recruiter</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据职位 ID 获取职位上的招聘人员信息，如招聘负责人、用人经理等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:job:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>职位 ID, 可通过[获取职位列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/list)接口获取</para>
    /// <para>示例值：6960663240925956555</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/jobs/{job_id}/recruiter")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1JobsByJobIdRecruiterResponseDto>> GetHireV1JobsByJobIdRecruiterAsync(
        [PathQuery] string job_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】搜索试用期信息</para>
    /// <para>接口ID：7254814386694553602</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/probation/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>搜索试用期信息，创建试用期后立刻搜索，可能会存在 5s 左右延迟</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:probation:read</item>
    /// <item>corehr:probation:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:probation.assessment:read</item>
    /// <item>corehr:probation.assessment:write</item>
    /// <item>corehr:probation.custom_field:read</item>
    /// <item>corehr:probation.custom_field:write</item>
    /// <item>corehr:probation.notes:read</item>
    /// <item>corehr:probation.notes:write</item>
    /// <item>corehr:probation.self_review:read</item>
    /// <item>corehr:probation.self_review:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6891251722631890445</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/probation/search")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2ProbationSearchResponseDto>> PostCorehrV2ProbationSearchAsync(
        [JsonContent] Corehr.PostCorehrV2ProbationSearchBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】启用/停用试用期考核功能</para>
    /// <para>接口ID：7254814386694569986</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/probation/enable_disable_assessment</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>启用/停用试用期考核功能，启用后系统功能中针对试用期考核相关的字段会自动启用，并可通过接口更新试用期考核结果</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:probation.assessment:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/probation/enable_disable_assessment")]
    System.Threading.Tasks.Task<FeishuResponse> PostCorehrV2ProbationEnableDisableAssessmentAsync(
        [JsonContent] Corehr.PostCorehrV2ProbationEnableDisableAssessmentBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】新增试用期考核信息</para>
    /// <para>接口ID：7254814386694586370</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/probation/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>新增员工试用期考核结果</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:probation.assessment:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据 client_token 是否一致来判断是否为同一请求</para>
    /// <para>示例值：6822122262122064111</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/probation/assessments")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2ProbationAssessmentsResponseDto>> PostCorehrV2ProbationAssessmentsAsync(
        [JsonContent] Corehr.PostCorehrV2ProbationAssessmentsBodyDto dto,
        [PathQuery] string? client_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】更新试用期考核信息</para>
    /// <para>接口ID：7254814386694602754</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/probation/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新试用期的考核结果</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:probation.assessment:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="assessment_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>考核结果 ID</para>
    /// <para>示例值：7140964208476371331</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据 client_token 是否一致来判断是否为同一请求</para>
    /// <para>示例值：6822122262122064111</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/corehr/v2/probation/assessments/{assessment_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PatchCorehrV2ProbationAssessmentsByAssessmentIdAsync(
        [PathQuery] string assessment_id,
        [JsonContent] Corehr.PatchCorehrV2ProbationAssessmentsByAssessmentIdBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】删除试用期考核信息</para>
    /// <para>接口ID：7254814386694619138</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/probation/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除试用期的考核结果</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:probation.assessment:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="assessment_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>考核结果 ID</para>
    /// <para>示例值：7140964208476371331</para>
    /// </param>
    [HttpDelete("/open-apis/corehr/v2/probation/assessments/{assessment_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCorehrV2ProbationAssessmentsByAssessmentIdAsync(
        [PathQuery] string assessment_id);

    /// <summary>
    /// <para>【飞书人事（企业版）】发起转正</para>
    /// <para>接口ID：7254814386694635522</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/probation/submit</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过本接口可以为员工发起转正</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:probation:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:probation.assessment:read</item>
    /// <item>corehr:probation.assessment:write</item>
    /// <item>corehr:probation.custom_field:read</item>
    /// <item>corehr:probation.custom_field:write</item>
    /// <item>corehr:probation.notes:read</item>
    /// <item>corehr:probation.notes:write</item>
    /// <item>corehr:probation.self_review:read</item>
    /// <item>corehr:probation.self_review:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据 client_token 是否一致来判断是否为同一请求</para>
    /// <para>示例值：6822122262122064111</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/probation/submit")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2ProbationSubmitResponseDto>> PostCorehrV2ProbationSubmitAsync(
        [JsonContent] Corehr.PostCorehrV2ProbationSubmitBodyDto dto,
        [PathQuery] string? client_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】撤销转正</para>
    /// <para>接口ID：7254814386694651906</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/probation/withdraw</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>可通过本接口撤销对员工之前发起的转正</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:probation:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据 client_token 是否一致来判断是否为同一请求</para>
    /// <para>示例值：6822122262122064111</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/probation/withdraw")]
    System.Threading.Tasks.Task<FeishuResponse> PostCorehrV2ProbationWithdrawAsync(
        [JsonContent] Corehr.PostCorehrV2ProbationWithdrawBodyDto dto,
        [PathQuery] string? client_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【审批】查看指定三方审批定义</para>
    /// <para>接口ID：7255160068449828892</para>
    /// <para>接口文档：https://open.feishu.cn/document/approval-v4/external_approval/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口通过三方审批定义 Code 获取审批定义的详细数据，包括三方审批定义的名称、说明、三方审批发起链接、回调 URL 以及审批定义可见人列表等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>approval:approval</item>
    /// <item>approval:external_approval</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="approval_code">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>三方审批定义 Code。获取方式：</para>
    /// <para>- 调用[创建三方审批定义](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_approval/create)时，会返回审批定义 Code。</para>
    /// <para>- 登录审批管理后台，在指定审批定义的 URL 中获取，具体操作参见[什么是 Approval Code](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/overview-of-approval-resources#8151e0ae)。</para>
    /// <para>示例值：7C468A54-8745-2245-9675-08B7C63E7A85</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/approval/v4/external_approvals/{approval_code}")]
    System.Threading.Tasks.Task<FeishuResponse<Approval.GetApprovalV4ExternalApprovalsByApprovalCodeResponseDto>> GetApprovalV4ExternalApprovalsByApprovalCodeAsync(
        [PathQuery] string approval_code,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】创建任务</para>
    /// <para>接口ID：7255580838154371100</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/task/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口可以创建一个任务，在创建任务时，支持填写任务的基本信息（如标题、描述、负责人等），此外，还可以设置任务的开始时间、截止时间提醒等条件，此外，还可以通过传入 tasklists 字段将新任务加到多个清单中。</para>
    /// <para>创建任务时，可以通过设置`members`字段来设置任务的负责人和关注人。关于member的格式，详见[功能概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/overview)中的“ 如何表示任务和清单的成员？ ”章节。</para>
    /// <para>如果要设置任务的开始时间和截止时间，需要遵守任务时间的格式和约束。详见[功能概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/overview)中的“ 如何使用开始时间和截止时间？”章节。</para>
    /// <para>如要设置自定义字段值，可以设置`custom_fields`字段。但因为自定义字段归属于清单，因此要填写的自定义字段的guid必须归属于要添加的清单(通过`tasklists`设置）。详见[自定义字段概览](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/custom_field/custom-field-overview)。</para>
    /// <para>通过设置`client_token`实现幂等调用。详见[功能概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/overview)中的“ 幂等调用 ”章节。</para>
    /// <para>如要创建一个任务的子任务，需要使用[创建子任务](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/task-subtask/create)接口。</para>
    /// <para>创建任务时可以一并设置自定义字段值。但根据自定义字段的权限关系，任务只能添加`tasklists`字段设置的清单中关联的自定义字段的值。详见[自定义字段功能概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/custom_field/custom-field-overview)中的介绍。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task:write</item>
    /// <item>task:task:writeonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v2/tasks")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV2TasksResponseDto>> PostTaskV2TasksAsync(
        [JsonContent] Task.PostTaskV2TasksBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】获取评论详情</para>
    /// <para>接口ID：7255580838154387484</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/comment/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>给定一个评论的ID，返回评论的详情，包括内容，创建人，创建时间和更新时间等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:comment:read</item>
    /// <item>task:comment:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="comment_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要获取评论详情的评论ID</para>
    /// <para>示例值：7198104824246747156</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/task/v2/comments/{comment_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Task.GetTaskV2CommentsByCommentIdResponseDto>> GetTaskV2CommentsByCommentIdAsync(
        [PathQuery] string comment_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】更新评论</para>
    /// <para>接口ID：7255580838154420252</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/comment/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新一条评论。</para>
    /// <para>更新时，将`update_fields`字段中填写所有要修改的评论的字段名，同时在`comment`字段中填写要修改的字段的新值即可。更新接口规范详情见[功能概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/overview)中的“ 关于资源的更新”章节。</para>
    /// <para>目前只支持更新评论的"conent"字段。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:comment:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="comment_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要更新的评论ID</para>
    /// <para>示例值：7198104824246747156</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/task/v2/comments/{comment_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PatchTaskV2CommentsByCommentIdResponseDto>> PatchTaskV2CommentsByCommentIdAsync(
        [PathQuery] string comment_id,
        [JsonContent] Task.PatchTaskV2CommentsByCommentIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】列取任务所在清单</para>
    /// <para>接口ID：7255580838154453020</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/task/tasklists</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>列取一个任务所在的所有清单的信息，包括清单的GUID和所在自定义分组的GUID。</para>
    /// <para>只有调用身份有权限访问的清单信息会被返回。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task:read</item>
    /// <item>task:task:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要获取清单列表的任务的全局唯一ID</para>
    /// <para>示例值：d300a75f-c56a-4be9-80d1-e47653028ceb</para>
    /// </param>
    [HttpGet("/open-apis/task/v2/tasks/{task_guid}/tasklists")]
    System.Threading.Tasks.Task<FeishuResponse<Task.GetTaskV2TasksByTaskGuidTasklistsResponseDto>> GetTaskV2TasksByTaskGuidTasklistsAsync(
        [PathQuery] string task_guid);

    /// <summary>
    /// <para>【任务】创建清单</para>
    /// <para>接口ID：7255580838154469404</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/tasklist/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>创建一个清单。清单可以用于组织和管理属于同一个项目的多个任务。</para>
    /// <para>创建时，必须填写清单的名字。同时，可以设置通过`members`字段设置清单的协作成员。关于member的格式，详见[功能概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/overview)中的“ 如何表示任务和清单的成员？”章节。</para>
    /// <para>创建清单后，创建人自动成为清单的所有者。如果请求同时将创建人设置为可编辑/可阅读角色，则最终该用户成为清单所有者，并自动从清单成员列表中消失。因为同一个用户在同一个清单只能拥有一个角色。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:tasklist:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v2/tasklists")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV2TasklistsResponseDto>> PostTaskV2TasklistsAsync(
        [JsonContent] Task.PostTaskV2TasklistsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】添加清单成员</para>
    /// <para>接口ID：7255580838154485788</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/tasklist/add_members</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>向一个清单添加1个或多个协作成员。成员信息通过设置`members`字段实现。关于member的格式，详见[功能概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/overview)中的“ 如何表示任务和清单的成员？”章节。</para>
    /// <para>一个清单协作成员可以是一个用户，应用或者群组。每个成员可以设置“可编辑”或者“可阅读”的角色。群组作为协作成员表示该群里所有群成员都自动拥有群组协作成员的角色。</para>
    /// <para>如果要添加的成员已经是清单成员，且角色和请求中设置是一样的，则会被自动忽略，接口返回成功。</para>
    /// <para>如果要添加的成员已经是清单成员，且角色和请求中设置是不一样的（比如原来的角色是可阅读，请求中设为可编辑），则相当于更新其角色。</para>
    /// <para>如果要添加的成员已经是清单的所有者，则会被自动忽略。接口返回成功。其所有者的角色不会改变。</para>
    /// <para>本接口不能用来设置清单所有者，如要设置，可以使用[更新清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist/patch)接口。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:tasklist:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="tasklist_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要添加成员的清单的全局唯一ID</para>
    /// <para>示例值：d300a75f-c56a-4be9-80d1-e47653028ceb</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v2/tasklists/{tasklist_guid}/add_members")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV2TasklistsByTasklistGuidAddMembersResponseDto>> PostTaskV2TasklistsByTasklistGuidAddMembersAsync(
        [PathQuery] string tasklist_guid,
        [JsonContent] Task.PostTaskV2TasklistsByTasklistGuidAddMembersBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】任务加入清单</para>
    /// <para>接口ID：7255580838154502172</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/task/add_tasklist</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>将一个任务加入清单。返回任务的详细信息，包括任务所在的所有清单信息。</para>
    /// <para>如果任务已经在该清单，接口将返回成功。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要添加到清单的任务的全局唯一ID</para>
    /// <para>示例值：d300a75f-c56a-4be9-80d1-e47653028ceb</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v2/tasks/{task_guid}/add_tasklist")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV2TasksByTaskGuidAddTasklistResponseDto>> PostTaskV2TasksByTaskGuidAddTasklistAsync(
        [PathQuery] string task_guid,
        [JsonContent] Task.PostTaskV2TasksByTaskGuidAddTasklistBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】获取任务的子任务列表</para>
    /// <para>接口ID：7255580838154518556</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/task-subtask/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取一个任务的子任务列表。</para>
    /// <para>支持分页，数据按照子任务在界面上的顺序返回。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task:read</item>
    /// <item>task:task:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>父任务的全局唯一ID</para>
    /// <para>示例值：d300a75f-c56a-4be9-80d1-e47653028ceb</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：50</para>
    /// <para>默认值：50</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：aWQ9NzEwMjMzMjMxMDE=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/task/v2/tasks/{task_guid}/subtasks")]
    System.Threading.Tasks.Task<FeishuResponse<Task.GetTaskV2TasksByTaskGuidSubtasksResponseDto>> GetTaskV2TasksByTaskGuidSubtasksAsync(
        [PathQuery] string task_guid,
        [PathQuery] int? page_size = 50,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】创建子任务</para>
    /// <para>接口ID：7255580838154551324</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/task-subtask/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>给一个任务创建一个子任务。</para>
    /// <para>接口功能除了额外需要输入父任务的GUID之外，和[创建任务](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/task/create)接口功能完全一致。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>父任务GUID</para>
    /// <para>示例值：e297ddff-06ca-4166-b917-4ce57cd3a7a0</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v2/tasks/{task_guid}/subtasks")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV2TasksByTaskGuidSubtasksResponseDto>> PostTaskV2TasksByTaskGuidSubtasksAsync(
        [PathQuery] string task_guid,
        [JsonContent] Task.PostTaskV2TasksByTaskGuidSubtasksBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】删除清单</para>
    /// <para>接口ID：7255580838154567708</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/tasklist/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除一个清单。</para>
    /// <para>删除清单后，不可对该清单做任何操作，也无法再访问到清单。清单被删除后不可恢复。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:tasklist:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="tasklist_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要删除的清单GUID</para>
    /// <para>示例值：d300a75f-c56a-4be9-80d1-e47653028ceb</para>
    /// </param>
    [HttpDelete("/open-apis/task/v2/tasklists/{tasklist_guid}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteTaskV2TasklistsByTasklistGuidAsync(
        [PathQuery] string tasklist_guid);

    /// <summary>
    /// <para>【任务】添加任务成员</para>
    /// <para>接口ID：7255580838154584092</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/task/add_members</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>添加任务的负责人或者关注人。一次性可以添加多个成员。返回任务的实体中会返回最终任务成员的列表。</para>
    /// <para>* 关于member的格式，详见[功能概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/overview)中的“ 如何表示任务和清单的成员？”章节。</para>
    /// <para>* 成员的角色支持"assignee"和"follower"。</para>
    /// <para>* 成员类型支持"user"和"app"。</para>
    /// <para>* 如果要添加的成员已经在任务中，则自动被忽略。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要添加负责人的任务全局唯一ID</para>
    /// <para>示例值：d300a75f-c56a-4be9-80d1-e47653028ceb</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v2/tasks/{task_guid}/add_members")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV2TasksByTaskGuidAddMembersResponseDto>> PostTaskV2TasksByTaskGuidAddMembersAsync(
        [PathQuery] string task_guid,
        [JsonContent] Task.PostTaskV2TasksByTaskGuidAddMembersBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】创建评论</para>
    /// <para>接口ID：7255580838154616860</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/comment/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>为一个任务创建评论，或者回复该任务的某个评论。</para>
    /// <para>若要创建一个回复评论，需要在创建时设置`reply_to_comment_id`字段。被回复的评论和新建的评论必须属于同一个任务。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:comment:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v2/comments")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV2CommentsResponseDto>> PostTaskV2CommentsAsync(
        [JsonContent] Task.PostTaskV2CommentsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】获取任务详情</para>
    /// <para>接口ID：7255580838154633244</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/task/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于获取任务详情，包括任务标题、描述、时间、成员等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task:read</item>
    /// <item>task:task:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要获取的任务guid</para>
    /// <para>示例值：e297ddff-06ca-4166-b917-4ce57cd3a7a0</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/task/v2/tasks/{task_guid}")]
    System.Threading.Tasks.Task<FeishuResponse<Task.GetTaskV2TasksByTaskGuidResponseDto>> GetTaskV2TasksByTaskGuidAsync(
        [PathQuery] string task_guid,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】删除任务</para>
    /// <para>接口ID：7255580838154649628</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/task/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除一个任务。</para>
    /// <para>删除后任务无法再被获取到。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要删除的任务guid</para>
    /// <para>示例值：e297ddff-06ca-4166-b917-4ce57cd3a7a0</para>
    /// </param>
    [HttpDelete("/open-apis/task/v2/tasks/{task_guid}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteTaskV2TasksByTaskGuidAsync(
        [PathQuery] string task_guid);

    /// <summary>
    /// <para>【任务】获取清单详情</para>
    /// <para>接口ID：7255580838154666012</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/tasklist/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取一个清单的详细信息，包括清单名，所有者，清单成员等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:tasklist:read</item>
    /// <item>task:tasklist:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="tasklist_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>清单全局唯一GUID</para>
    /// <para>示例值：d300a75f-c56a-4be9-80d1-e47653028ceb</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/task/v2/tasklists/{tasklist_guid}")]
    System.Threading.Tasks.Task<FeishuResponse<Task.GetTaskV2TasklistsByTasklistGuidResponseDto>> GetTaskV2TasklistsByTasklistGuidAsync(
        [PathQuery] string tasklist_guid,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】更新清单</para>
    /// <para>接口ID：7255580838154682396</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/tasklist/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新清单，可以更新清单的名字和所有者。</para>
    /// <para>更新清单时，将`update_fields`字段中填写所有要修改的清单字段名，同时在`tasklist`字段中填写要修改的字段的新值即可。更新调用规范详见[功能概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/overview)中的“ 关于资源的更新”章节。</para>
    /// <para>支持更新的字段包括:</para>
    /// <para>* `name` - 清单名字</para>
    /// <para>* `owner` - 清单所有者</para>
    /// <para>更新清单所有者（owner）时，如果该成员已经是清单的“可编辑”或者“可阅读”角色，则该成员将直接升级为所有者角色，自动从清单的成员列表中消失。这是因为同一个用户在同一个清单中只能有一个角色。同时，支持使用`origin_owner_to_role`字段将原有所有者变为可编辑/可阅读角色或者直接退出清单。</para>
    /// <para>该接口不能用于更新清单的成员和增删清单中的任务。</para>
    /// <para>* 如要增删清单中的成员，可以使用[添加清单成员](/ssl:ttdoc:/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist/add_members)和[移除清单成员](/ssl:ttdoc:/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist/remove_members)接口。</para>
    /// <para>* 如要增删清单中的任务，可以使用[任务加入清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/task/add_tasklist)和[任务移出清单]( https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/task/remove_tasklist)接口。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:tasklist:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="tasklist_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要更新的清单的全局唯一GUID</para>
    /// <para>示例值：d300a75f-c56a-4be9-80d1-e47653028ceb</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/task/v2/tasklists/{tasklist_guid}")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PatchTaskV2TasklistsByTasklistGuidResponseDto>> PatchTaskV2TasklistsByTasklistGuidAsync(
        [PathQuery] string tasklist_guid,
        [JsonContent] Task.PatchTaskV2TasklistsByTasklistGuidBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】获取清单任务列表</para>
    /// <para>接口ID：7255580838154698780</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/tasklist/tasks</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取一个清单的任务列表，返回任务的摘要信息。</para>
    /// <para>本接口支持分页。清单中的任务以“自定义拖拽”的顺序返回。</para>
    /// <para>本接口支持简单的按照任务的完成状态或者任务的创建时间范围过滤。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:tasklist:read</item>
    /// <item>task:tasklist:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="tasklist_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要获取任务的清单全局唯一ID</para>
    /// <para>示例值：d300a75f-c56a-4be9-80d1-e47653028ceb</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>每页返回的任务数量</para>
    /// <para>示例值：50</para>
    /// <para>默认值：50</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：aWQ9NzEwMjMzMjMxMDE=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="completed">
    /// <para>必填：否</para>
    /// <para>只查看特定完成状态的任务，填写“true”表示返回已经完成的任务；“false”表示只返回未完成的任务；不填写表示不按完成状态过滤。</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="created_from">
    /// <para>必填：否</para>
    /// <para>任务创建的起始时间戳（ms），闭区间，不填写默认为首个任务的创建时间戳</para>
    /// <para>示例值：1675742789470</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="created_to">
    /// <para>必填：否</para>
    /// <para>任务创建的结束时间戳（ms），闭区间，不填写默认为最后创建任务的创建时间戳</para>
    /// <para>示例值：1675742789470</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/task/v2/tasklists/{tasklist_guid}/tasks")]
    System.Threading.Tasks.Task<FeishuResponse<Task.GetTaskV2TasklistsByTasklistGuidTasksResponseDto>> GetTaskV2TasklistsByTasklistGuidTasksAsync(
        [PathQuery] string tasklist_guid,
        [PathQuery] int? page_size = 50,
        [PathQuery] string? page_token = null,
        [PathQuery] bool? completed = null,
        [PathQuery] string? created_from = null,
        [PathQuery] string? created_to = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】获取清单列表</para>
    /// <para>接口ID：7255580838154715164</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/tasklist/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取调用身份所有可读取的清单列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:tasklist:read</item>
    /// <item>task:tasklist:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>每页返回的清单数量</para>
    /// <para>示例值：50</para>
    /// <para>默认值：50</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：aWQ9NzEwMjMzMjMxMDE=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/task/v2/tasklists")]
    System.Threading.Tasks.Task<FeishuResponse<Task.GetTaskV2TasklistsResponseDto>> GetTaskV2TasklistsAsync(
        [PathQuery] int? page_size = 50,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】删除评论</para>
    /// <para>接口ID：7255580838154731548</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/comment/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除一条评论。</para>
    /// <para>评论被删除后，将无法进行任何操作，也无法恢复。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:comment:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="comment_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要删除的评论id</para>
    /// <para>示例值：7198104824246747156</para>
    /// </param>
    [HttpDelete("/open-apis/task/v2/comments/{comment_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteTaskV2CommentsByCommentIdAsync(
        [PathQuery] string comment_id);

    /// <summary>
    /// <para>【任务】获取评论列表</para>
    /// <para>接口ID：7255580838154747932</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/comment/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>给定一个资源，返回该资源的评论列表。</para>
    /// <para>支持分页。评论可以按照创建时间的正序（asc, 从最老到最新），或者逆序（desc，从最老到最新），返回数据。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:comment:read</item>
    /// <item>task:comment:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，默认为50。</para>
    /// <para>示例值：50</para>
    /// <para>默认值：50</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：aWQ9NzEwMjMzMjMxMDE=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="resource_type">
    /// <para>必填：否</para>
    /// <para>要获取评论列表的资源类型，目前只支持"task"，默认为"task"。</para>
    /// <para>示例值：task</para>
    /// <para>默认值：task</para>
    /// </param>
    /// <param name="resource_id">
    /// <para>必填：是</para>
    /// <para>要获取评论的资源ID。例如要获取任务的评论列表，此处应该填写任务全局唯一ID</para>
    /// <para>示例值：d300a75f-c56a-4be9-80d1-e47653028ceb</para>
    /// </param>
    /// <param name="direction">
    /// <para>必填：否</para>
    /// <para>返回数据的排序方式。"asc"表示从最老到最新顺序返回；"desc"表示从最新到最老顺序返回。默认为"asc"。</para>
    /// <para>示例值：asc</para>
    /// <list type="bullet">
    /// <item>asc：评论发表时间升序</item>
    /// <item>desc：评论发表时间降序</item>
    /// </list>
    /// <para>默认值：asc</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/task/v2/comments")]
    System.Threading.Tasks.Task<FeishuResponse<Task.GetTaskV2CommentsResponseDto>> GetTaskV2CommentsAsync(
        [PathQuery] string resource_id,
        [PathQuery] int? page_size = 50,
        [PathQuery] string? page_token = null,
        [PathQuery] string? resource_type = "task",
        [PathQuery] string? direction = "asc",
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】任务移出清单</para>
    /// <para>接口ID：7255580838154780700</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/task/remove_tasklist</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>将任务从一个清单中移出。返回任务详情。</para>
    /// <para>如果任务不在清单中，接口将返回成功。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要从清单移除的任务的全局唯一ID</para>
    /// <para>示例值：d300a75f-c56a-4be9-80d1-e47653028ceb</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v2/tasks/{task_guid}/remove_tasklist")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV2TasksByTaskGuidRemoveTasklistResponseDto>> PostTaskV2TasksByTaskGuidRemoveTasklistAsync(
        [PathQuery] string task_guid,
        [JsonContent] Task.PostTaskV2TasksByTaskGuidRemoveTasklistBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】移除任务成员</para>
    /// <para>接口ID：7255580838154797084</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/task/remove_members</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>移除任务成员。一次性可以移除多个成员。可以移除任务的负责人或者关注人。移除时，如果要移除的成员不是任务成员，会被自动忽略。本接口返回移除成员后的任务数据，包含移除后的任务成员列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要移除成员的任务全局唯一ID</para>
    /// <para>示例值：d300a75f-c56a-4be9-80d1-e47653028ceb</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v2/tasks/{task_guid}/remove_members")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV2TasksByTaskGuidRemoveMembersResponseDto>> PostTaskV2TasksByTaskGuidRemoveMembersAsync(
        [PathQuery] string task_guid,
        [JsonContent] Task.PostTaskV2TasksByTaskGuidRemoveMembersBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】添加任务提醒</para>
    /// <para>接口ID：7255580838154813468</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/task/add_reminders</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>为一个任务添加提醒。提醒是基于任务的截止时间计算得到的一个时刻。为了设置提醒，任务必须首先拥有截止时间(due)。可以在[创建任务](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/task/create)时设置截止时间，或者通过[更新任务](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/task/patch)设置一个截止时间。</para>
    /// <para>目前一个任务只能设置1个提醒。但接口的形式可以在未来扩充为一个任务支持多个提醒。</para>
    /// <para>如果当前任务已经有提醒了，要更新提醒的设置，需要先调用[移除任务提醒](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/task/remove_reminders)接口移除原有提醒。再调用本接口添加提醒。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要添加负责人的任务全局唯一ID</para>
    /// <para>示例值：d300a75f-c56a-4be9-80d1-e47653028ceb</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v2/tasks/{task_guid}/add_reminders")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV2TasksByTaskGuidAddRemindersResponseDto>> PostTaskV2TasksByTaskGuidAddRemindersAsync(
        [PathQuery] string task_guid,
        [JsonContent] Task.PostTaskV2TasksByTaskGuidAddRemindersBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】移除任务提醒</para>
    /// <para>接口ID：7255580838154829852</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/task/remove_reminders</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>将一个提醒从任务中移除。</para>
    /// <para>如果要移除的提醒本来就不存在，本接口将直接返回成功。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要移除提醒的任务全局唯一ID</para>
    /// <para>示例值：d300a75f-c56a-4be9-80d1-e47653028ceb</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v2/tasks/{task_guid}/remove_reminders")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV2TasksByTaskGuidRemoveRemindersResponseDto>> PostTaskV2TasksByTaskGuidRemoveRemindersAsync(
        [PathQuery] string task_guid,
        [JsonContent] Task.PostTaskV2TasksByTaskGuidRemoveRemindersBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】移除清单成员</para>
    /// <para>接口ID：7255580838154846236</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/tasklist/remove_members</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>移除清单的一个或多个协作成员。通过设置`members`字段表示要移除的成员信息。关于member的格式，详见[功能概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/overview)中的“ 如何表示任务和清单的成员？”章节。</para>
    /// <para>清单中同一个成员只能有一个角色，通过的member的id和type可以唯一确定一个成员，因此请求参数中对于要删除的成员，不需要填写"role"字段。</para>
    /// <para>如果要移除的成员不在清单中，则被自动忽略，接口返回成功。</para>
    /// <para>该接口不能用于移除清单所有者。如果要移除的成员是清单所有者，则会被自动忽略。如要设置清单所有者，需要调用[更新清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist/patch)接口。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:tasklist:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="tasklist_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要移除协作人的清单全局唯一ID</para>
    /// <para>示例值：d300a75f-c56a-4be9-80d1-e47653028ceb</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v2/tasklists/{tasklist_guid}/remove_members")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV2TasklistsByTasklistGuidRemoveMembersResponseDto>> PostTaskV2TasklistsByTasklistGuidRemoveMembersAsync(
        [PathQuery] string tasklist_guid,
        [JsonContent] Task.PostTaskV2TasklistsByTasklistGuidRemoveMembersBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】更新任务</para>
    /// <para>接口ID：7255580838154879004</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/task/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于修改任务的标题、描述、截止时间等信息。</para>
    /// <para>更新时，将`update_fields`字段中填写所有要修改的任务字段名，同时在`task`字段中填写要修改的字段的新值即可。如果`update_fields`中设置了要变更一个字段的名字，但是task里没设置新的值，则表示将该字段清空。调用约定详情见[功能概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/overview)中的“ 关于资源的更新”章节。</para>
    /// <para>目前支持更新的字段包括：</para>
    /// <para>* `summary` - 任务标题</para>
    /// <para>* `description` - 任务描述</para>
    /// <para>* `start` - 任务开始时间</para>
    /// <para>* `due` - 任务截止时间</para>
    /// <para>* `completed_at` - 用于标记任务完成/未完成</para>
    /// <para>* `extra` - 任务附带自定义数据</para>
    /// <para>* `custom_complete` - 任务自定义完成配置。</para>
    /// <para>* `repeat_rule` - 重复任务规则。</para>
    /// <para>* `mode` - 任务完成模式。</para>
    /// <para>* `is_milestone` - 是否是里程碑任务。</para>
    /// <para>* `custom_fields` - 自定义字段值。</para>
    /// <para>该接口可以用于完成任务和将任务恢复至未完成，只需要修改`completed_at`字段即可。但留意，目前不管任务本身是会签任务还是或签任务，oapi对任务进行完成只能实现“整体完成”，不支持个人单独完成。此外，不能对已经完成的任务再次完成，但可以将其恢复到未完成的状态(设置`completed_at`为"0")。</para>
    /// <para>如更新自定义字段的值，需要调用身份同时拥有任务的编辑权限和自定义字段的编辑权限。详情见[自定义字段功能概览](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/custom_field/custom-field-overview)。更新时，只有填写在`task.custom_fields`的自定义字段值会被更新，不填写的不会被改变。</para>
    /// <para>任务成员/提醒/清单数据不能使用本接口进行更新。</para>
    /// <para>* 如要修改任务成员，需要使用[添加任务成员](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/task/add_members)</para>
    /// <para>和[移除任务成员](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/task/remove_members)接口。</para>
    /// <para>* 如要修改任务提醒，需要使用[添加任务提醒](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/task/add_reminders)和[移除任务提醒](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/task/remove_reminders)接口。</para>
    /// <para>* 如要变更任务所在的清单，需要使用[任务加入清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/task/add_tasklist)和[任务移出清单]( https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/task/remove_tasklist)接口。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要更新的任务全局唯一ID</para>
    /// <para>示例值：e297ddff-06ca-4166-b917-4ce57cd3a7a0</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/task/v2/tasks/{task_guid}")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PatchTaskV2TasksByTaskGuidResponseDto>> PatchTaskV2TasksByTaskGuidAsync(
        [PathQuery] string task_guid,
        [JsonContent] Task.PatchTaskV2TasksByTaskGuidBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【通讯录】获取单个职务信息</para>
    /// <para>接口ID：7256700963174989828</para>
    /// <para>接口文档：https://open.feishu.cn/document/contact-v3/job_title/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口获取指定职务的信息，包括职务的 ID、名称、多语言名称以及启用状态。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_user</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:job_title:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_title_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>职务 ID。你可以调用[获取租户职务列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_title/list)接口获取职务 ID。</para>
    /// <para>示例值：dd39369b19b9</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/job_titles/{job_title_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3JobTitlesByJobTitleIdResponseDto>> GetContactV3JobTitlesByJobTitleIdAsync(
        [PathQuery] string job_title_id);

    /// <summary>
    /// <para>【通讯录】获取租户职务列表</para>
    /// <para>接口ID：7256700963175006212</para>
    /// <para>接口文档：https://open.feishu.cn/document/contact-v3/job_title/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口获取当前租户下的职务信息，包括职务的 ID、名称、多语言名称以及启用状态。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_user</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:job_title:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，用于限制一次请求所返回的数据条目数。</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值："xxx"</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/job_titles")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3JobTitlesResponseDto>> GetContactV3JobTitlesAsync(
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【通讯录】获取单个工作城市信息</para>
    /// <para>接口ID：7256700963175022596</para>
    /// <para>接口文档：https://open.feishu.cn/document/contact-v3/work_city/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口获取指定工作城市的信息，包括工作城市的 ID、名称、多语言名称以及启用状态。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_user</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:work_city:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="work_city_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>工作城市 ID。你可以调用[获取租户工作城市列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/work_city/list)接口，获取工作城市 ID。</para>
    /// <para>示例值：dd39369b19b9</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/work_cities/{work_city_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3WorkCitiesByWorkCityIdResponseDto>> GetContactV3WorkCitiesByWorkCityIdAsync(
        [PathQuery] string work_city_id);

    /// <summary>
    /// <para>【通讯录】获取租户工作城市列表</para>
    /// <para>接口ID：7256700963175038980</para>
    /// <para>接口文档：https://open.feishu.cn/document/contact-v3/work_city/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口获取当前租户下所有工作城市信息，包括工作城市的 ID、名称、多语言名称以及启用状态。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_user</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:work_city:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，用于限制一次请求所返回的数据条目数。</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值："xxx"</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/contact/v3/work_cities")]
    System.Threading.Tasks.Task<FeishuResponse<Contact.GetContactV3WorkCitiesResponseDto>> GetContactV3WorkCitiesAsync(
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【通讯录】更新用户 ID</para>
    /// <para>接口ID：7257363132833300482</para>
    /// <para>接口文档：https://open.feishu.cn/document/contact-v3/user/update_user_id</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口更新用户的 user_id。</para>
    /// <para>## 注意事项</para>
    /// <para>更新后的用户 user_id 需要保证在当前租户内未被占用。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact:update_user_id</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户 ID，ID 类型与查询参数 user_id_type 的取值保持一致。</para>
    /// <para>示例值：ou-938e3e4fdc5e1993bee01250076f0cc2</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/contact/v3/users/{user_id}/update_user_id")]
    System.Threading.Tasks.Task<FeishuResponse> PatchContactV3UsersByUserIdUpdateUserIdAsync(
        [PathQuery] string user_id,
        [JsonContent] Contact.PatchContactV3UsersByUserIdUpdateUserIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【通讯录】更新部门 ID</para>
    /// <para>接口ID：7257363132833546242</para>
    /// <para>接口文档：https://open.feishu.cn/document/contact-v3/department/update_department_id</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口可以更新部门的自定义 ID，即 department_id。</para>
    /// <para>## 注意事项</para>
    /// <para>本接口仅支持使用应用身份（tenant_access_token）调用。调用时，应用的通讯录权限范围内需要包含当前被操作的部门。了解权限范围参见[权限范围资源介绍](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>contact:contact:update_department_id</item>
    /// </list></para>
    /// </summary>
    /// <param name="department_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要更新自定义 ID 的部门 ID，该 ID 类型需要与查询参数 department_id_type 的取值一致。ID 获取方式说明：</para>
    /// <para>- 调用[创建部门](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/create)接口后，可从返回结果中获取到部门 ID 信息。</para>
    /// <para>- 部门 API 提供了多种获取其他部门 ID 的方式，如[获取子部门列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/children)、[获取父部门信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/parent)、[搜索部门](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/search)，你可以选择合适的 API 进行查询。</para>
    /// <para>示例值：od-d6b83d25c129775723a36f52495c4f81</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。</para>
    /// <para>**默认值**：open_department_id</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。</item>
    /// <item>open_department_id：由系统自动生成的部门 ID，ID 前缀固定为 `od-`，在租户内全局唯一。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/contact/v3/departments/{department_id}/update_department_id")]
    System.Threading.Tasks.Task<FeishuResponse> PatchContactV3DepartmentsByDepartmentIdUpdateDepartmentIdAsync(
        [PathQuery] string department_id,
        [JsonContent] Contact.PatchContactV3DepartmentsByDepartmentIdUpdateDepartmentIdBodyDto dto,
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【招聘】获取信息登记表列表</para>
    /// <para>接口ID：7259225956346232860</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/recruitment-related-configuration/application/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据适用场景获取信息登记表列表，可获取到的信息包括登记表名称、登记表模块、登记表字段等</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:talent</item>
    /// <item>hire:talent:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：20</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6930815272790114324</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="scenario">
    /// <para>必填：否</para>
    /// <para>登记表适用场景；不填表示获取全部类型信息登记表</para>
    /// <para>示例值：5</para>
    /// <list type="bullet">
    /// <item>5：面试登记表</item>
    /// <item>6：入职登记表</item>
    /// <item>14：信息更新登记表</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/registration_schemas")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1RegistrationSchemasResponseDto>> GetHireV1RegistrationSchemasAsync(
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] int? scenario = null);

    /// <summary>
    /// <para>【任务】创建自定义分组</para>
    /// <para>接口ID：7259330038033809436</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/section/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>为清单或我负责的任务列表创建一个自定义分组。创建时可以需要提供名称和可选的配置。如果不指定位置，新分组会放到指定resource的自定义分组列表的最后。</para>
    /// <para>当在清单中创建自定义分组时，需要设置`resourse_type`为"tasklist", `resource_id`设为清单的GUID。</para>
    /// <para>当为我负责任务列表中创建自定义分组时，需要设置`resource_type`为"my_tasks"，不需要设置`resource_id`。调用身份只能为自己的我负责的任务列表创建自定义分组。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:section:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v2/sections")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV2SectionsResponseDto>> PostTaskV2SectionsAsync(
        [JsonContent] Task.PostTaskV2SectionsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】获取自定义分组详情</para>
    /// <para>接口ID：7259330038033825820</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/section/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取一个自定义分组详情，包括名称，创建人等信息。如果该自定义分组归属于一个清单，还会返回清单的摘要信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:section:read</item>
    /// <item>task:section:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="section_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要获取的自定义分组GUID</para>
    /// <para>示例值：9842501a-9f47-4ff5-a622-d319eeecb97f</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/task/v2/sections/{section_guid}")]
    System.Threading.Tasks.Task<FeishuResponse<Task.GetTaskV2SectionsBySectionGuidResponseDto>> GetTaskV2SectionsBySectionGuidAsync(
        [PathQuery] string section_guid,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】更新自定义分组</para>
    /// <para>接口ID：7259330038033842204</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/section/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新自定义分组，可以更新自定义分组的名称和位置。</para>
    /// <para>更新时，将`update_fields`字段中填写所有要修改的字段名，同时在`section`字段中填写要修改的字段的新值即可。调用约定详情见[功能概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/overview)中的“ 关于资源的更新”章节。</para>
    /// <para>目前支持更新的字段包括：</para>
    /// <para>* `name` - 自定义字段名字;</para>
    /// <para>* `insert_before` - 要让当前自定义分组放到某个自定义分组前面的secion_guid，用于改变当前自定义分组的位置;</para>
    /// <para>* `insert_after` - 要让当前自定义分组放到某个自定义分组后面的secion_guid，用于改变当前自定义分组的位置。</para>
    /// <para>`insert_before`和`insert_after`如果填写，必须是同一个资源的合法section_guid。注意不能同时设置`insert_before`和`insert_after`。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:section:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="section_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要更新的自定义分组GUID</para>
    /// <para>示例值：9842501a-9f47-4ff5-a622-d319eeecb97f</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/task/v2/sections/{section_guid}")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PatchTaskV2SectionsBySectionGuidResponseDto>> PatchTaskV2SectionsBySectionGuidAsync(
        [PathQuery] string section_guid,
        [JsonContent] Task.PatchTaskV2SectionsBySectionGuidBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】删除自定义分组</para>
    /// <para>接口ID：7259330038033858588</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/section/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除一个自定义分组。删除后该自定义分组中的任务会被移动到被删除自定义分组所属资源的默认自定义分组中。</para>
    /// <para>不能删除默认的自定义分组。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:section:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="section_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要删除的自定义分组全局唯一ID</para>
    /// <para>示例值：9842501a-9f47-4ff5-a622-d319eeecb97f</para>
    /// </param>
    [HttpDelete("/open-apis/task/v2/sections/{section_guid}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteTaskV2SectionsBySectionGuidAsync(
        [PathQuery] string section_guid);

    /// <summary>
    /// <para>【任务】获取自定义分组列表</para>
    /// <para>接口ID：7259330038033874972</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/section/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取一个资源下所有的自定义分组列表。支持分页。返回结果按照自定义分组在界面上的顺序排序。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:section:read</item>
    /// <item>task:section:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：50</para>
    /// <para>默认值：50</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：aWQ9NzEwMjMzMjMxMDE=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="resource_type">
    /// <para>必填：是</para>
    /// <para>自定义分组所属的资源类型。支持my_tasks(我负责的）和tasklist（清单）。当使用tasklist时，需要用resource_id提供清单的全局唯一ID。</para>
    /// <para>示例值：tasklist</para>
    /// </param>
    /// <param name="resource_id">
    /// <para>必填：否</para>
    /// <para>如`resource_type`为"tasklist"，这里需要填写要列取自定义分组的清单的GUID。</para>
    /// <para>示例值：caef228f-2342-23c1-c36d-91186414dc64</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/task/v2/sections")]
    System.Threading.Tasks.Task<FeishuResponse<Task.GetTaskV2SectionsResponseDto>> GetTaskV2SectionsAsync(
        [PathQuery] string resource_type,
        [PathQuery] int? page_size = 50,
        [PathQuery] string? page_token = null,
        [PathQuery] string? resource_id = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】获取自定义分组任务列表</para>
    /// <para>接口ID：7259330038033891356</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/section/tasks</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>列取一个自定义分组里的所有任务。支持分页。任务按照自定义排序的顺序返回。本接口支持简单的过滤。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:section:read</item>
    /// <item>task:section:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="section_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要获取任务的自定义分组全局唯一ID</para>
    /// <para>示例值：9842501a-9f47-4ff5-a622-d319eeecb97f</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：50</para>
    /// <para>默认值：50</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：aWQ9NzEwMjMzMjMxMDE=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="completed">
    /// <para>必填：否</para>
    /// <para>按照任务状态过滤，如果不填写则表示不按完成状态过滤</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="created_from">
    /// <para>必填：否</para>
    /// <para>按照创建时间筛选的起始时间戳（ms)，如不填写则为首个任务的创建时刻</para>
    /// <para>示例值：1675742789470</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="created_to">
    /// <para>必填：否</para>
    /// <para>按照创建时间筛选的起始时间戳（ms)，如不填写则为最后任务的创建时刻</para>
    /// <para>示例值：1675742789470</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/task/v2/sections/{section_guid}/tasks")]
    System.Threading.Tasks.Task<FeishuResponse<Task.GetTaskV2SectionsBySectionGuidTasksResponseDto>> GetTaskV2SectionsBySectionGuidTasksAsync(
        [PathQuery] string section_guid,
        [PathQuery] int? page_size = 50,
        [PathQuery] string? page_token = null,
        [PathQuery] bool? completed = null,
        [PathQuery] string? created_from = null,
        [PathQuery] string? created_to = null);

    /// <summary>
    /// <para>【云文档】取消云文档事件订阅</para>
    /// <para>接口ID：7259592279886233628</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/docs/drive-v1/event/delete_subscribe</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于取消订阅云文档的通知事件。了解事件订阅的配置流程和使用场景，参考[事件概述](https://open.feishu.cn/document/ukTMukTMukTM/uUTNz4SN1MjL1UzM)。了解云文档支持的事件类型，参考[事件列表](https://open.feishu.cn/document/ukTMukTMukTM/uYDNxYjL2QTM24iN0EjN/event-list)。</para>
    /// <para>## 注意事项</para>
    /// <para>目前只支持取消订阅事件列表中所有文档事件，暂不支持指定取消的事件。</para>
    /// <para>## 前提条件</para>
    /// <para>- 调用接口前，请确保应用或用户为文档所有者或文档管理者。</para>
    /// <para>- 调用接口前，请确保正确配置订阅方式并添加了事件。详情参考[配置订阅方式](https://open.feishu.cn/document/ukTMukTMukTM/uYDNxYjL2QTM24iN0EjN/event-subscription-configure-/request-url-configuration-case)和[添加事件](https://open.feishu.cn/document/ukTMukTMukTM/uYDNxYjL2QTM24iN0EjN/event-subscription-configure-/subscription-event-case)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:doc</item>
    /// <item>docs:event:subscribe</item>
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>云文档的 token。了解如何获取各类云文档的token，参考[云空间常见问题](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/faq)。</para>
    /// <para>示例值：doccnfYZzTlvXqZIGTdAHKabcef</para>
    /// </param>
    /// <param name="file_type">
    /// <para>必填：是</para>
    /// <para>云文档类型</para>
    /// <para>示例值：docx</para>
    /// <list type="bullet">
    /// <item>doc：旧版文档。已不推荐使用</item>
    /// <item>docx：新版文档</item>
    /// <item>sheet：电子表格</item>
    /// <item>bitable：多维表格</item>
    /// <item>file：文件</item>
    /// <item>folder：文件夹</item>
    /// <item>slides：幻灯片</item>
    /// </list>
    /// </param>
    /// <param name="event_type">
    /// <para>必填：否</para>
    /// <para>事件类型，`file_type` 为 `folder`（文件夹）时必填 `file.created_in_folder_v1`</para>
    /// <para>示例值：file.created_in_folder_v1</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpDelete("/open-apis/drive/v1/files/{file_token}/delete_subscribe")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteDriveV1FilesByFileTokenDeleteSubscribeAsync(
        [PathQuery] string file_token,
        [PathQuery] string file_type,
        [PathQuery] string? event_type = null);

    /// <summary>
    /// <para>【云文档】查询云文档事件订阅状态</para>
    /// <para>接口ID：7259592279886250012</para>
    /// <para>接口文档：https://open.feishu.cn/document/docs/drive-v1/event/get_subscribe</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于查询云文档事件的订阅状态。了解事件订阅的配置流程和使用场景，参考[事件概述](https://open.feishu.cn/document/ukTMukTMukTM/uUTNz4SN1MjL1UzM)。了解云文档支持的事件类型，参考[事件列表](https://open.feishu.cn/document/ukTMukTMukTM/uYDNxYjL2QTM24iN0EjN/event-list)。</para>
    /// <para>## 前提条件</para>
    /// <para>- 调用接口前，请确保应用或用户为文档所有者或文档管理者。文档的通知事件仅支持文档拥有者和文档管理者订阅。</para>
    /// <para>- 调用接口前，请确保正确配置订阅方式并添加了事件。详情参考[配置订阅方式](https://open.feishu.cn/document/ukTMukTMukTM/uYDNxYjL2QTM24iN0EjN/event-subscription-configure-/request-url-configuration-case)和[添加事件](https://open.feishu.cn/document/ukTMukTMukTM/uYDNxYjL2QTM24iN0EjN/event-subscription-configure-/subscription-event-case)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:doc</item>
    /// <item>docs:event:subscribe</item>
    /// <item>drive:drive</item>
    /// <item>sheets:spreadsheet</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>云文档的 token。了解如何获取各类云文档的 token，参考[云空间常见问题](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/faq)。</para>
    /// <para>示例值：doccnfYZzTlvXqZIGTdAHKabcef</para>
    /// </param>
    /// <param name="file_type">
    /// <para>必填：是</para>
    /// <para>文档类型</para>
    /// <para>示例值：docx</para>
    /// <list type="bullet">
    /// <item>doc：旧版文档。已不推荐使用</item>
    /// <item>docx：新版文档</item>
    /// <item>sheet：电子表格</item>
    /// <item>bitable：多维表格</item>
    /// <item>file：文件</item>
    /// <item>folder：文件夹</item>
    /// <item>slides：幻灯片</item>
    /// </list>
    /// </param>
    /// <param name="event_type">
    /// <para>必填：否</para>
    /// <para>事件类型，`file_type` 为 `folder `（文件夹）时必填 `file.created_in_folder_v1`</para>
    /// <para>示例值：file.created_in_folder_v1</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/drive/v1/files/{file_token}/get_subscribe")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDriveV1FilesByFileTokenGetSubscribeResponseDto>> GetDriveV1FilesByFileTokenGetSubscribeAsync(
        [PathQuery] string file_token,
        [PathQuery] string file_type,
        [PathQuery] string? event_type = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询部门 HRBP</para>
    /// <para>接口ID：7261860942295547906</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/authorization/get_by_department</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询部门的 HRBP 信息，包括来自上级部门的 HRBP。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:bp.get_by_department:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/bps/get_by_department")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2BpsGetByDepartmentResponseDto>> PostCorehrV2BpsGetByDepartmentAsync(
        [JsonContent] Corehr.PostCorehrV2BpsGetByDepartmentBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】获取 HRBP 列表</para>
    /// <para>接口ID：7261860942295564290</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/authorization/list-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取 HRBP 列表。列表中包含HRBP的ID以及部门ID信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:bp.list:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 500</para>
    /// <para>示例值：500</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6891251722631890445</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v2/bps")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.GetCorehrV2BpsResponseDto>> GetCorehrV2BpsAsync(
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】查询员工 HRBP / 属地 BP</para>
    /// <para>接口ID：7261860942295580674</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/authorization/batch_get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询员工的 HRBP 和属地 BP，包括来自上级部门的 HRBP 和属地 BP。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:employee.bp:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:employee.all_bp:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/employees/bps/batch_get")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2EmployeesBpsBatchGetResponseDto>> PostCorehrV2EmployeesBpsBatchGetAsync(
        [JsonContent] Corehr.PostCorehrV2EmployeesBpsBatchGetBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】获取任职信息列表</para>
    /// <para>接口ID：7262387840977207297</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/employee/job_data/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取任职信息列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:employee.job_data:read</item>
    /// <item>corehr:job_data:read</item>
    /// <item>corehr:job_data:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:employment.job_grade:read</item>
    /// <item>corehr:employment.job_grade:write</item>
    /// <item>corehr:employment.job_level:read</item>
    /// <item>corehr:employment.job_level:write</item>
    /// <item>corehr:employment.job:read</item>
    /// <item>corehr:employment.pathway:read</item>
    /// <item>corehr:employment.pathway:write</item>
    /// <item>corehr:employment.position:read</item>
    /// <item>corehr:employment.position:write</item>
    /// <item>corehr:job_data.assignment_start_reason:read</item>
    /// <item>corehr:job_data.compensation_type:read</item>
    /// <item>corehr:job_data.job_data_reason:read</item>
    /// <item>corehr:job_data.service_company:read</item>
    /// <item>corehr:job_data.work_shift:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6891251722631890445</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：people_corehr_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：people_corehr_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/employees/job_datas/query")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2EmployeesJobDatasQueryResponseDto>> PostCorehrV2EmployeesJobDatasQueryAsync(
        [JsonContent] Corehr.PostCorehrV2EmployeesJobDatasQueryBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "people_corehr_department_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】批量查询员工任职信息</para>
    /// <para>接口ID：7262387840977223681</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/employee/job_data/batch_get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过员工雇佣 ID 批量查询任职信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:employee.job_data:read</item>
    /// <item>corehr:job_data:read</item>
    /// <item>corehr:job_data:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:employment.job_grade:read</item>
    /// <item>corehr:employment.job_grade:write</item>
    /// <item>corehr:employment.job_level:read</item>
    /// <item>corehr:employment.job_level:write</item>
    /// <item>corehr:employment.job:read</item>
    /// <item>corehr:employment.pathway:read</item>
    /// <item>corehr:employment.pathway:write</item>
    /// <item>corehr:employment.position:read</item>
    /// <item>corehr:employment.position:write</item>
    /// <item>corehr:job_data.assignment_start_reason:read</item>
    /// <item>corehr:job_data.compensation_type:read</item>
    /// <item>corehr:job_data.job_data_reason:read</item>
    /// <item>corehr:job_data.service_company:read</item>
    /// <item>corehr:job_data.work_shift:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：people_corehr_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：people_corehr_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/employees/job_datas/batch_get")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2EmployeesJobDatasBatchGetResponseDto>> PostCorehrV2EmployeesJobDatasBatchGetAsync(
        [JsonContent] Corehr.PostCorehrV2EmployeesJobDatasBatchGetBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "people_corehr_department_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】搜索待入职信息</para>
    /// <para>接口ID：7263303427627270148</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/pre_hire/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于根据工号/待入职人员 ID /入职地点等查询条件搜索待入职人员信息。</para>
    /// <para>- 查询的待入职数量及字段越多，耗时越久，使用时建议细化指定需要的字段。</para>
    /// <para>- 创建待入职后，会有5秒内的数据延迟导致搜索不到数据</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:pre_hire:read</item>
    /// <item>corehr:pre_hire:write</item>
    /// <item>corehr:pre_hire.search:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:contract.company:read</item>
    /// <item>corehr:contract.company:write</item>
    /// <item>corehr:contract.period:read</item>
    /// <item>corehr:contract.period:write</item>
    /// <item>corehr:employment.compensation_type:read</item>
    /// <item>corehr:employment.compensation_type:write</item>
    /// <item>corehr:employment.custom_field:read</item>
    /// <item>corehr:employment.has_offer_salary:read</item>
    /// <item>corehr:employment.job_grade:read</item>
    /// <item>corehr:employment.job_grade:write</item>
    /// <item>corehr:employment.job_level:read</item>
    /// <item>corehr:employment.job_level:write</item>
    /// <item>corehr:employment.job:read</item>
    /// <item>corehr:employment.non_compete_covenant:read</item>
    /// <item>corehr:employment.non_compete_covenant:write</item>
    /// <item>corehr:employment.pay_group:read</item>
    /// <item>corehr:employment.position:read</item>
    /// <item>corehr:employment.position:write</item>
    /// <item>corehr:employment.recruitment_project_id:read</item>
    /// <item>corehr:job_data.work_shift:read</item>
    /// <item>corehr:person.address:read</item>
    /// <item>corehr:person.address:write</item>
    /// <item>corehr:person.bank_account:read</item>
    /// <item>corehr:person.bank_account:write</item>
    /// <item>corehr:person.born_country_region:read</item>
    /// <item>corehr:person.born_country_region:write</item>
    /// <item>corehr:person.custom_field:read</item>
    /// <item>corehr:person.custom_field:write</item>
    /// <item>corehr:person.date_entered_workforce:read</item>
    /// <item>corehr:person.date_entered_workforce:write</item>
    /// <item>corehr:person.date_of_birth:read</item>
    /// <item>corehr:person.date_of_birth:write</item>
    /// <item>corehr:person.dependent:read</item>
    /// <item>corehr:person.dependent:write</item>
    /// <item>corehr:person.education:read</item>
    /// <item>corehr:person.education:write</item>
    /// <item>corehr:person.email:read</item>
    /// <item>corehr:person.email:write</item>
    /// <item>corehr:person.emergency_contact:read</item>
    /// <item>corehr:person.emergency_contact:write</item>
    /// <item>corehr:person.gender:read</item>
    /// <item>corehr:person.gender:write</item>
    /// <item>corehr:person.hukou:read</item>
    /// <item>corehr:person.hukou:write</item>
    /// <item>corehr:person.is_disabled:read</item>
    /// <item>corehr:person.is_disabled:write</item>
    /// <item>corehr:person.is_old_alone:read</item>
    /// <item>corehr:person.is_old_alone:write</item>
    /// <item>corehr:person.legal_name:read</item>
    /// <item>corehr:person.legal_name:write</item>
    /// <item>corehr:person.marital_status:read</item>
    /// <item>corehr:person.marital_status:write</item>
    /// <item>corehr:person.martyr_family:read</item>
    /// <item>corehr:person.martyr_family:write</item>
    /// <item>corehr:person.national_id:read</item>
    /// <item>corehr:person.national_id:write</item>
    /// <item>corehr:person.nationality:read</item>
    /// <item>corehr:person.nationality:write</item>
    /// <item>corehr:person.native_region:read</item>
    /// <item>corehr:person.native_region:write</item>
    /// <item>corehr:person.passport_number:read</item>
    /// <item>corehr:person.personal_profile:read</item>
    /// <item>corehr:person.personal_profile:write</item>
    /// <item>corehr:person.phone:read</item>
    /// <item>corehr:person.phone:write</item>
    /// <item>corehr:person.political_affiliation:read</item>
    /// <item>corehr:person.race:read</item>
    /// <item>corehr:person.religion:read</item>
    /// <item>corehr:person.religion:write</item>
    /// <item>corehr:person.resident_tax_custom_field:read</item>
    /// <item>corehr:person.resident_tax_custom_field:write</item>
    /// <item>corehr:person.resident_tax:read</item>
    /// <item>corehr:person.resident_tax:write</item>
    /// <item>corehr:person.work_experience:read</item>
    /// <item>corehr:person.work_experience:write</item>
    /// <item>corehr:pre_hire.abnormal_reason_field:read</item>
    /// <item>corehr:pre_hire.background_check_order_account_name:read</item>
    /// <item>corehr:pre_hire.background_check_order_complete_time:read</item>
    /// <item>corehr:pre_hire.background_check_order_id:read</item>
    /// <item>corehr:pre_hire.background_check_order_name:read</item>
    /// <item>corehr:pre_hire.background_check_order_package_name:read</item>
    /// <item>corehr:pre_hire.background_check_order_result:read</item>
    /// <item>corehr:pre_hire.background_check_order_start_time:read</item>
    /// <item>corehr:pre_hire.background_check_order_status:read</item>
    /// <item>corehr:pre_hire.background_check_order_supplier_name:read</item>
    /// <item>corehr:pre_hire.check_in_data:read</item>
    /// <item>corehr:pre_hire.company_manual_updated:read</item>
    /// <item>corehr:pre_hire.company_sponsored_visa:read</item>
    /// <item>corehr:pre_hire.contract_file_id:read</item>
    /// <item>corehr:pre_hire.cost_center:read</item>
    /// <item>corehr:pre_hire.cost_center:write</item>
    /// <item>corehr:pre_hire.dotted_line_manager:read</item>
    /// <item>corehr:pre_hire.flow_id:read</item>
    /// <item>corehr:pre_hire.office_address:read</item>
    /// <item>corehr:pre_hire.onboarding_address:read</item>
    /// <item>corehr:pre_hire.seniority_adjust_information:read</item>
    /// <item>corehr:pre_hire.suspected_rehiring:read</item>
    /// <item>corehr:pre_hire.working_calendar:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6891251722631890445</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/pre_hires/search")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2PreHiresSearchResponseDto>> PostCorehrV2PreHiresSearchAsync(
        [JsonContent] Corehr.PostCorehrV2PreHiresSearchBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【日历】解绑会议群</para>
    /// <para>接口ID：7263360328350728196</para>
    /// <para>接口文档：https://open.feishu.cn/document/calendar-v4/calendar-event-meeting_chat/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口以当前身份（应用或用户）为日程解绑已创建的会议群。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar.event:update</item>
    /// </list></para>
    /// </summary>
    /// <param name="calendar_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日程所在的日历 ID。</para>
    /// <para>示例值：feishu.cn_xxx@group.calendar.feishu.cn</para>
    /// </param>
    /// <param name="event_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日程 ID。</para>
    /// <para>示例值：75d28f9b-e35c-4230-8a83-123_0</para>
    /// </param>
    /// <param name="meeting_chat_id">
    /// <para>必填：是</para>
    /// <para>会议群 ID。在创建会议群时会返回会议群 ID。</para>
    /// <para>示例值：oc_xxx</para>
    /// </param>
    [HttpDelete("/open-apis/calendar/v4/calendars/{calendar_id}/events/{event_id}/meeting_chat")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCalendarV4CalendarsByCalendarIdEventsByEventIdMeetingChatAsync(
        [PathQuery] string calendar_id,
        [PathQuery] string event_id,
        [PathQuery] string meeting_chat_id);

    /// <summary>
    /// <para>【日历】创建会议群</para>
    /// <para>接口ID：7263360328350744580</para>
    /// <para>接口文档：https://open.feishu.cn/document/calendar-v4/calendar-event-meeting_chat/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口以当前身份（应用或用户）为指定日程创建一个会议群。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar.event:update</item>
    /// </list></para>
    /// </summary>
    /// <param name="calendar_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日程所在的日历 ID。了解更多，参见[日历 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)。</para>
    /// <para>示例值：feishu.cn_xxx@group.calendar.feishu.cn</para>
    /// </param>
    /// <param name="event_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日程 ID。</para>
    /// <para>创建日程时会返回日程 ID。你也可以调用以下接口获取某一日历的 ID。</para>
    /// <para>- [获取日程列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/list)</para>
    /// <para>- [搜索日程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/search)</para>
    /// <para>示例值：75d28f9b-e35c-4230-8a83-123_0</para>
    /// </param>
    [HttpPost("/open-apis/calendar/v4/calendars/{calendar_id}/events/{event_id}/meeting_chat")]
    System.Threading.Tasks.Task<FeishuResponse<Calendar.PostCalendarV4CalendarsByCalendarIdEventsByEventIdMeetingChatResponseDto>> PostCalendarV4CalendarsByCalendarIdEventsByEventIdMeetingChatAsync(
        [PathQuery] string calendar_id,
        [PathQuery] string event_id);

    /// <summary>
    /// <para>【日历】创建会议纪要</para>
    /// <para>接口ID：7263360328350760964</para>
    /// <para>接口文档：https://open.feishu.cn/document/calendar-v4/calendar-event-meeting_minute/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口为指定的日程创建会议纪要。纪要以文档形式展示，成功创建后会返回纪要文档 URL。</para>
    /// <para>## 注意事项</para>
    /// <para>- 所操作的日历需要是当前身份（身份由 Header Authorization 的 Token 类型决定）的主日历，且当前身份具有日历的 writer 权限（即编辑权限）。</para>
    /// <para>- 所操作的日程内至少需要有 1 个参与人，且参与人权限不能为 none（即无法查看参与人列表）。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar.event:update</item>
    /// </list></para>
    /// </summary>
    /// <param name="calendar_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日历 ID。调用[查询主日历信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/primary)接口，获取当前身份的主日历 ID。</para>
    /// <para>示例值：feishu.cn_xxx@group.calendar.feishu.cn</para>
    /// </param>
    /// <param name="event_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日程 ID。调用[搜索日程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/search)接口，在指定日历内搜索日程并获取日程 ID。</para>
    /// <para>示例值：75d28f9b-e35c-4230-8a83-123_0</para>
    /// </param>
    [HttpPost("/open-apis/calendar/v4/calendars/{calendar_id}/events/{event_id}/meeting_minute")]
    System.Threading.Tasks.Task<FeishuResponse<Calendar.PostCalendarV4CalendarsByCalendarIdEventsByEventIdMeetingMinuteResponseDto>> PostCalendarV4CalendarsByCalendarIdEventsByEventIdMeetingMinuteAsync(
        [PathQuery] string calendar_id,
        [PathQuery] string event_id);

    /// <summary>
    /// <para>【邮箱】创建邮箱联系人</para>
    /// <para>接口ID：7270360193791868929</para>
    /// <para>接口文档：https://open.feishu.cn/document/mail-v1/user_mailbox-mail_contact/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>创建一个邮箱联系人</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:user_mailbox.mail_contact:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>mail:user_mailbox.mail_contact.mail_address:read</item>
    /// <item>mail:user_mailbox.mail_contact.phone:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户邮箱地址，使用 user_access_token 时可使用 me</para>
    /// <para>示例值：user@xxx.xx 或 me</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/mail/v1/user_mailboxes/{user_mailbox_id}/mail_contacts")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.PostMailV1UserMailboxesByUserMailboxIdMailContactsResponseDto>> PostMailV1UserMailboxesByUserMailboxIdMailContactsAsync(
        [PathQuery] string user_mailbox_id,
        [JsonContent] Mail.PostMailV1UserMailboxesByUserMailboxIdMailContactsBodyDto dto);

    /// <summary>
    /// <para>【邮箱】删除邮箱联系人</para>
    /// <para>接口ID：7270360193791885313</para>
    /// <para>接口文档：https://open.feishu.cn/document/mail-v1/user_mailbox-mail_contact/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除一个邮箱联系人</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:user_mailbox.mail_contact:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户邮箱地址 或 输入me代表当前调用接口用户</para>
    /// <para>示例值：用户邮箱地址 或 输入me代表当前调用接口用户</para>
    /// </param>
    /// <param name="mail_contact_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>邮箱联系人 id，获取方式见 [列出邮箱联系人](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user_mailbox-mail_contact/list)</para>
    /// <para>示例值：123</para>
    /// </param>
    [HttpDelete("/open-apis/mail/v1/user_mailboxes/{user_mailbox_id}/mail_contacts/{mail_contact_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteMailV1UserMailboxesByUserMailboxIdMailContactsByMailContactIdAsync(
        [PathQuery] string user_mailbox_id,
        [PathQuery] string mail_contact_id);

    /// <summary>
    /// <para>【邮箱】修改邮箱联系人信息</para>
    /// <para>接口ID：7270360193791901697</para>
    /// <para>接口文档：https://open.feishu.cn/document/mail-v1/user_mailbox-mail_contact/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>修改一个邮箱联系人的信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:user_mailbox.mail_contact:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户邮箱地址 或 输入me代表当前调用接口用户</para>
    /// <para>示例值：user@xxx.xx 或 me</para>
    /// </param>
    /// <param name="mail_contact_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>邮箱联系人 id，获取方式见 [列出邮箱联系人](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user_mailbox-mail_contact/list)</para>
    /// <para>示例值：123</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/mail/v1/user_mailboxes/{user_mailbox_id}/mail_contacts/{mail_contact_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PatchMailV1UserMailboxesByUserMailboxIdMailContactsByMailContactIdAsync(
        [PathQuery] string user_mailbox_id,
        [PathQuery] string mail_contact_id,
        [JsonContent] Mail.PatchMailV1UserMailboxesByUserMailboxIdMailContactsByMailContactIdBodyDto dto);

    /// <summary>
    /// <para>【邮箱】列出邮箱联系人</para>
    /// <para>接口ID：7270360193791918081</para>
    /// <para>接口文档：https://open.feishu.cn/document/mail-v1/user_mailbox-mail_contact/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>列出邮箱联系人列表</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:user_mailbox.mail_contact:read</item>
    /// <item>mail:user_mailbox.mail_contact:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>mail:user_mailbox.mail_contact.mail_address:read</item>
    /// <item>mail:user_mailbox.mail_contact.phone:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户邮箱地址 或 输入me代表当前调用接口用户</para>
    /// <para>示例值：user@xxx.xx 或 me</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：20</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：xxx</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/mail/v1/user_mailboxes/{user_mailbox_id}/mail_contacts")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.GetMailV1UserMailboxesByUserMailboxIdMailContactsResponseDto>> GetMailV1UserMailboxesByUserMailboxIdMailContactsAsync(
        [PathQuery] string user_mailbox_id,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【公司圈】查询帖子信息</para>
    /// <para>接口ID：7270433540692639747</para>
    /// <para>接口文档：https://open.feishu.cn/document/moments-v1/post/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过 ID 查询帖子实体数据信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>moments:moments:access_all</item>
    /// <item>moments:moments:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="post_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>帖子的ID，可从发布帖子接口返回数据或发布帖子事件中获取</para>
    /// <para>示例值：6934510454161014804</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/moments/v1/posts/{post_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Moments.GetMomentsV1PostsByPostIdResponseDto>> GetMomentsV1PostsByPostIdAsync(
        [PathQuery] string post_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】更新外部面评</para>
    /// <para>接口ID：7270722035910328322</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/get-candidates/import-external-system-information/import-external-interview-info/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新外部面评部分字段，没有填写的字段不会被更新</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:external_application</item>
    /// </list></para>
    /// </summary>
    /// <param name="external_interview_assessment_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>外部面评 ID</para>
    /// <para>示例值：6930815272790114324</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/hire/v1/external_interview_assessments/{external_interview_assessment_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PatchHireV1ExternalInterviewAssessmentsByExternalInterviewAssessmentIdResponseDto>> PatchHireV1ExternalInterviewAssessmentsByExternalInterviewAssessmentIdAsync(
        [PathQuery] string external_interview_assessment_id,
        [JsonContent] Hire.PatchHireV1ExternalInterviewAssessmentsByExternalInterviewAssessmentIdBodyDto dto);

    /// <summary>
    /// <para>【任务】将自定义字段加入资源</para>
    /// <para>接口ID：7270765454292189186</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/custom_field/add</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>将自定义字段加入一个资源。目前资源类型支持清单tasklist。一个自定义字段可以加入多个清单中。加入后，该清单可以展示任务的该字段的值，同时基于该字段实现筛选，分组等功能。</para>
    /// <para>如果自定义字段的设置被更新，字段加入的所有字段都能收到这个更新，并进行相应的展示。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:custom_field:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="custom_field_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>自定义字段GUID。自定义字段GUID。可以通过[创建自定义字段](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/custom_field/create)接口创建, 或者通过[列取自定义字段](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/custom_field/list)接口查询得到。</para>
    /// <para>示例值：0110a4bd-f24b-4a93-8c1a-1732b94f9593</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v2/custom_fields/{custom_field_guid}/add")]
    System.Threading.Tasks.Task<FeishuResponse> PostTaskV2CustomFieldsByCustomFieldGuidAddAsync(
        [PathQuery] string custom_field_guid,
        [JsonContent] Task.PostTaskV2CustomFieldsByCustomFieldGuidAddBodyDto dto);

    /// <summary>
    /// <para>【任务】将自定义字段移出资源</para>
    /// <para>接口ID：7270765454292205570</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/custom_field/remove</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>将自定义字段从资源中移出。移除后，该资源将无法再使用该字段。目前资源的类型支持"tasklist"。</para>
    /// <para>如果要移除自定义字段本来就不存在于资源，本接口将正常返回。</para>
    /// <para>注意自定义字段是通过清单来实现授权的，如果将自定义字段从所有关联的清单中移除，就意味着任何调用身份都无法再访问改自定义字段。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:custom_field:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="custom_field_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>自定义字段GUID。自定义字段GUID。可以通过[创建自定义字段](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/custom_field/create)接口创建, 或者通过[列取自定义字段](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/custom_field/list)接口查询得到。</para>
    /// <para>示例值：0110a4bd-f24b-4a93-8c1a-1732b94f9593</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v2/custom_fields/{custom_field_guid}/remove")]
    System.Threading.Tasks.Task<FeishuResponse> PostTaskV2CustomFieldsByCustomFieldGuidRemoveAsync(
        [PathQuery] string custom_field_guid,
        [JsonContent] Task.PostTaskV2CustomFieldsByCustomFieldGuidRemoveBodyDto dto);

    /// <summary>
    /// <para>【任务】更新自定义字段选项</para>
    /// <para>接口ID：7270765454292221954</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/custom_field-option/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据一个自定义字段的GUID和其选项的GUID，更新该选项的数据。要更新的字段必须是单选或者多选类型，且要更新的字段必须归属于该字段。</para>
    /// <para>更新时，将`update_fields`字段中填写所有要修改的任务字段名，同时在`option`字段中填写要修改的字段的新值即可。`update_fields`支持的字段包括：</para>
    /// <para>* `name`: 选项名称</para>
    /// <para>* `color_index`: 选项的颜色索引值</para>
    /// <para>* `is_hidden`: 是否从界面上隐藏</para>
    /// <para>* `insert_before`: 将当前option放到同字段某个option之前的那个option_guid。</para>
    /// <para>* `insert_after`: 将当前option放到同字段某个option之后的那个option_guid。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:tasklist:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="custom_field_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要更新的选项的自定义字段GUID</para>
    /// <para>示例值：ec5ed63d-a4a9-44de-a935-7ba243471c0a</para>
    /// </param>
    /// <param name="option_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要更新的选项的GUID</para>
    /// <para>示例值：b13adf3c-cad6-4e02-8929-550c112b5633</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/task/v2/custom_fields/{custom_field_guid}/options/{option_guid}")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PatchTaskV2CustomFieldsByCustomFieldGuidOptionsByOptionGuidResponseDto>> PatchTaskV2CustomFieldsByCustomFieldGuidOptionsByOptionGuidAsync(
        [PathQuery] string custom_field_guid,
        [PathQuery] string option_guid,
        [JsonContent] Task.PatchTaskV2CustomFieldsByCustomFieldGuidOptionsByOptionGuidBodyDto dto);

    /// <summary>
    /// <para>【任务】获取自定义字段</para>
    /// <para>接口ID：7270765454292238338</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/custom_field/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据一个自定义字段的GUID，获取其详细的设置信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:custom_field:read</item>
    /// <item>task:custom_field:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="custom_field_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>自定义字段GUID。可以通过[创建自定义字段](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/custom_field/create)接口创建, 或者通过[列取自定义字段](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/custom_field/list)接口查询得到。</para>
    /// <para>示例值：5ffbe0ca-6600-41e0-a634-2b38cbcf13b8</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/task/v2/custom_fields/{custom_field_guid}")]
    System.Threading.Tasks.Task<FeishuResponse<Task.GetTaskV2CustomFieldsByCustomFieldGuidResponseDto>> GetTaskV2CustomFieldsByCustomFieldGuidAsync(
        [PathQuery] string custom_field_guid,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】更新自定义字段</para>
    /// <para>接口ID：7270765454292254722</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/custom_field/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新一个自定义字段的名称和设定。更新时，将`update_fields`字段中填写所有要修改的任务字段名，同时在`custom_field`字段中填写要修改的字段的新值即可。自定义字段不允许修改类型，只能根据类型修改其设置。</para>
    /// <para>`update_fields`支持更新的字段包括：</para>
    /// <para>* `name`：自定义字段名称</para>
    /// <para>* `number_setting` ：数字类型设置（当且仅当要更新的自定义字段类型是数字时)</para>
    /// <para>* `member_setting` ：人员类型设置（当且仅当要更新的自定义字段类型是人员时)</para>
    /// <para>* `datetime_setting` ：日期类型设置 (当且仅当要更新的自定义字段类型是日期时)</para>
    /// <para>* `single_select_setting`：单选类型设置 (当且仅当要更新的自定义字段类型是单选时)</para>
    /// <para>* `multi_select_setting`：多选类型设置 (当且仅当要更新的自定义字段类型是多选时)</para>
    /// <para>* `text_setting`: 文本类型设置（目前文本类型没有可设置项）</para>
    /// <para>当更改某个设置时，如果不填写一个字段，表示不覆盖原有的设定。比如，对于一个数字，原有的setting是:</para>
    /// <para>```json</para>
    /// <para>"number_setting": {</para>
    /// <para>"format": "normal",</para>
    /// <para>"decimal_count": 2,</para>
    /// <para>"separator": "none",</para>
    /// <para>"custom_symbol": "L",</para>
    /// <para>"custom_symbol_position": "right"</para>
    /// <para>}</para>
    /// <para>```</para>
    /// <para>使用如下参数调用接口：</para>
    /// <para>```</para>
    /// <para>PATCH /task/v2/custom_fields/:custom_field_guid</para>
    /// <para>{</para>
    /// <para>"custom_field": {</para>
    /// <para>"number_setting": {</para>
    /// <para>"decimal_count": 4</para>
    /// <para>}</para>
    /// <para>},</para>
    /// <para>"update_fields": ["number_setting"]</para>
    /// <para>}</para>
    /// <para>```</para>
    /// <para>表示仅仅将小数位数从2改为4，其余的设置`format`, `separator`, `custom_field`等都不变。</para>
    /// <para>对于单选/多选类型的自定义字段，其设定是一个选项列表。更新时，使用方式接近使用App的界面。使用者不必传入字段的所有选项，而是只需要提供最终希望界面可见（is_hidden=false) 的选项。原有字段中的选项如果没有出现在输入中，则被置为`is_hidden=true`并放到所有可见选项之后。</para>
    /// <para>对于某一个更新的选项，如果提供了option_guid，将视作更新该选项（此时option_guid必须存在于当前字段，否则会返回错误）；如果不提供，将视作新建一个选项（新的选项的option_guid会在reponse中被返回)。</para>
    /// <para>例如，一个单选字段原来有3个选项A，B，C，D。其中C是隐藏的。用户可以这样更新选项：</para>
    /// <para>```</para>
    /// <para>PATCH /task/v2/custom_fields/:custom_field_guid</para>
    /// <para>{</para>
    /// <para>"custom_field": {</para>
    /// <para>"single_select_setting": {</para>
    /// <para>"optoins": [</para>
    /// <para>{</para>
    /// <para>"name": "E",</para>
    /// <para>"color_index": 25</para>
    /// <para>},</para>
    /// <para>{</para>
    /// <para>"guid": "&lt;option_guid of A&gt;"</para>
    /// <para>"name": "A2"</para>
    /// <para>},</para>
    /// <para>{</para>
    /// <para>"guid": "&lt;option_guid of C&gt;",</para>
    /// <para>},</para>
    /// <para>]</para>
    /// <para>}</para>
    /// <para>},</para>
    /// <para>"update_fields": ["single_select_setting"]</para>
    /// <para>}</para>
    /// <para>```</para>
    /// <para>调用后最终得到了新的选项列表E, A, C, B, D。其中：</para>
    /// <para>* 选项E被新建出来，其`color_index`被设为了25。</para>
    /// <para>* 选项A被更新，其名称被改为了"A2"。但其color_index因为没有设置而保持不变；</para>
    /// <para>* 选项整体顺序遵循用户的输入顺序，即E，A，C。同时E，A，C作为直接的输入，其is_hidden均被设为了false，其中，C原本是is_hidden=true，也会被设置为is_hidden=false。</para>
    /// <para>* 选项B和D因为用户没有输入，其`is_hidden`被置为了true，并且被放到了所有用户输入的选项之后。</para>
    /// <para>如果只是单纯的希望修改用户可见的选项的顺序，比如从原本的选项A,B,C修改为C,B,A，可以这样调用接口：</para>
    /// <para>```</para>
    /// <para>PATCH /task/v2/custom_fields/:custom_field_guid</para>
    /// <para>{</para>
    /// <para>"custom_field": {</para>
    /// <para>"single_select_setting": {</para>
    /// <para>"optoins": [</para>
    /// <para>{</para>
    /// <para>"guid": "&lt;option_guid_of_C&gt;"</para>
    /// <para>},</para>
    /// <para>{</para>
    /// <para>"guid": "&lt;option_guid of B&gt;"</para>
    /// <para>},</para>
    /// <para>{</para>
    /// <para>"guid": "&lt;option_guid of A&gt;",</para>
    /// <para>},</para>
    /// <para>]</para>
    /// <para>}</para>
    /// <para>},</para>
    /// <para>"update_fields": ["single_select_setting"]</para>
    /// <para>}</para>
    /// <para>```</para>
    /// <para>如果希望直接将字段里的所有选项都标记为不可见，可以这样调用接口：</para>
    /// <para>```</para>
    /// <para>PATCH /task/v2/custom_fields/:custom_field_guid</para>
    /// <para>{</para>
    /// <para>"custom_field": {</para>
    /// <para>"single_select_setting": {</para>
    /// <para>"optoins": []</para>
    /// <para>}</para>
    /// <para>},</para>
    /// <para>"update_fields": ["single_select_setting"]</para>
    /// <para>}</para>
    /// <para>```</para>
    /// <para>更新单选/多选字段的选项必须满足“可见选项名字不能重复”的约束。否则会返回错误。开发者需要自行保证输入的选项名不可以重复。</para>
    /// <para>如希望只更新单个选项，或者希望单独设置某个选项的is_hidden，本接口无法支持，但可以使用[更新自定义字段选项](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/custom_field-option/patch)接口实现。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:custom_field:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="custom_field_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>自定义字段GUID。自定义字段GUID。可以通过[创建自定义字段](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/custom_field/create)接口创建, 或者通过[列取自定义字段](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/custom_field/list)接口查询得到。</para>
    /// <para>示例值：5ffbe0ca-6600-41e0-a634-2b38cbcf13b8</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/task/v2/custom_fields/{custom_field_guid}")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PatchTaskV2CustomFieldsByCustomFieldGuidResponseDto>> PatchTaskV2CustomFieldsByCustomFieldGuidAsync(
        [PathQuery] string custom_field_guid,
        [JsonContent] Task.PatchTaskV2CustomFieldsByCustomFieldGuidBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】列取自定义字段</para>
    /// <para>接口ID：7270765454292271106</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/custom_field/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>列取用户可访问的自定义字段列表。如果不提供`resource_type`和`resource_id`参数，则返回用户可访问的所有自定义字段。</para>
    /// <para>如果提供`resource_type`和`resource_id`，则返回该资源下的自定义字段。目前`resource_type`仅支持"tasklist"，此时`resource_id`应为一个清单的tasklist_guid。</para>
    /// <para>该接口支持分页。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:custom_field:read</item>
    /// <item>task:custom_field:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：50</para>
    /// <para>默认值：50</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：aWQ9NzEwMjMzMjMxMDE=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="resource_type">
    /// <para>必填：否</para>
    /// <para>资源类型，如提供表示仅查询特定资源下的自定义字段。目前只支持tasklist。</para>
    /// <para>示例值：tasklist</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="resource_id">
    /// <para>必填：否</para>
    /// <para>要查询自定义字段的归属resource_id</para>
    /// <para>示例值：5ffbe0ca-6600-41e0-a634-2b38cbcf13b8</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/task/v2/custom_fields")]
    System.Threading.Tasks.Task<FeishuResponse<Task.GetTaskV2CustomFieldsResponseDto>> GetTaskV2CustomFieldsAsync(
        [PathQuery] int? page_size = 50,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? resource_type = null,
        [PathQuery] string? resource_id = null);

    /// <summary>
    /// <para>【任务】创建自定义任务选项</para>
    /// <para>接口ID：7270765454292287490</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/custom_field-option/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>为单选或多选字段添加一个自定义选项。一个单选/多选字段最大支持100个选项。</para>
    /// <para>新添加的选项如果不隐藏，其名字不能和已存在的不隐藏选项的名字重复。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:tasklist:read</item>
    /// <item>task:tasklist:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="custom_field_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要添加选项的自定义字段GUID，该字段必须是</para>
    /// <para>示例值：b13adf3c-cad6-4e02-8929-550c112b5633</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v2/custom_fields/{custom_field_guid}/options")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV2CustomFieldsByCustomFieldGuidOptionsResponseDto>> PostTaskV2CustomFieldsByCustomFieldGuidOptionsAsync(
        [PathQuery] string custom_field_guid,
        [JsonContent] Task.PostTaskV2CustomFieldsByCustomFieldGuidOptionsBodyDto dto);

    /// <summary>
    /// <para>【任务】创建自定义字段</para>
    /// <para>接口ID：7270765454292320258</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/custom_field/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>创建一个自定义字段，并将其加入一个资源上（目前资源只支持清单）。创建自定义字段必须提供字段名称，类型和相应类型的设置。</para>
    /// <para>目前任务自定义字段支持数字(number)，成员(member)，日期(datetime)，单选(single_select),多选(multi_select), 文本(text)几种类型。分别使用"number_setting", "member_setting", "datetime_setting", "single_select_setting", "multi_select_setting","text_setting"来设置。</para>
    /// <para>例如创建一个数字类型的自定义字段，并添加到guid为"ec5ed63d-a4a9-44de-a935-7ba243471c0a"的清单，可以这样发请求。</para>
    /// <para>```</para>
    /// <para>POST /task/v2/custom_fields</para>
    /// <para>{</para>
    /// <para>"name": "价格",</para>
    /// <para>"type": "number",</para>
    /// <para>"resource_type": "tasklist",</para>
    /// <para>"resource_id": "ec5ed63d-a4a9-44de-a935-7ba243471c0a",</para>
    /// <para>"number_setting": {</para>
    /// <para>"format": "cny",</para>
    /// <para>"decimal_count": 2,</para>
    /// <para>"separator": "thousand"</para>
    /// <para>}</para>
    /// <para>}</para>
    /// <para>```</para>
    /// <para>表示创建一个叫做“价格”的自定义字段，保留两位小数。在界面上显示时采用人民币的格式，并显示千分位分割符。</para>
    /// <para>类似的，创建一个单选字段，可以这样调用接口：</para>
    /// <para>```</para>
    /// <para>POST /task/v2/custom_fields</para>
    /// <para>{</para>
    /// <para>"name": "优先级",</para>
    /// <para>"type": "single_select",</para>
    /// <para>"resource_type": "tasklist",</para>
    /// <para>"resource_id": "ec5ed63d-a4a9-44de-a935-7ba243471c0a",</para>
    /// <para>"single_select_setting": {</para>
    /// <para>"options": [</para>
    /// <para>{</para>
    /// <para>"name": "高",</para>
    /// <para>"color_index": 1</para>
    /// <para>},</para>
    /// <para>{</para>
    /// <para>"name": "中",</para>
    /// <para>"color_index": 11</para>
    /// <para>},</para>
    /// <para>{</para>
    /// <para>"name": "低",</para>
    /// <para>"color_index": 16</para>
    /// <para>}</para>
    /// <para>]</para>
    /// <para>}</para>
    /// <para>}</para>
    /// <para>```</para>
    /// <para>表示创建一个叫“优先级”的单选，包含“高”，“中”，“低”三个选项，每个选项设置一个颜色值。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:custom_field:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v2/custom_fields")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV2CustomFieldsResponseDto>> PostTaskV2CustomFieldsAsync(
        [JsonContent] Task.PostTaskV2CustomFieldsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】获取云文档的点赞者列表</para>
    /// <para>接口ID：7270815553257619457</para>
    /// <para>接口文档：https://open.feishu.cn/document/docs/drive-v1/like/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取指定云文档的点赞者列表并按点赞时间由近到远分页返回。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>drive:file.like:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:user.base:readonly</item>
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="file_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要查询点赞者列表的云文档 token。[点击了解如何获取云文档 Token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)</para>
    /// <para>示例值：J6Lddz22AovnqkxWEXBcUJabcef</para>
    /// </param>
    /// <param name="file_type">
    /// <para>必填：是</para>
    /// <para>云文档类型，如果该值为空或者与云文档实际类型不匹配，接口会返回失败。</para>
    /// <para>示例值：doc</para>
    /// <list type="bullet">
    /// <item>doc：旧版文档</item>
    /// <item>docx：新版文档</item>
    /// <item>file：文件</item>
    /// </list>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：aw7DoMKBFMOGwqHCrcO8w6jCmMOvw6ILeADCvsKNw57Di8O5XGV3LG4_w5HCqhFxSnDCrCzCn0BgZcOYUg85EMOYcEAcwqYOw4ojw5QFwofCu8KoIMO3K8Ktw4IuNMOBBHNYw4bCgCV3U1zDu8K-J8KSR8Kgw7Y0fsKZdsKvW3d9w53DnkHDrcO5bDkYwrvDisOEPcOtVFJ-I03CnsOILMOoAmLDknd6dsKqG1bClAjDuS3CvcOTwo7Dg8OrwovDsRdqIcKxw5HDohTDtXN9w5rCkWo</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/drive/v2/files/{file_token}/likes")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDriveV2FilesByFileTokenLikesResponseDto>> GetDriveV2FilesByFileTokenLikesAsync(
        [PathQuery] string file_token,
        [PathQuery] string file_type,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【AI 能力】识别文件中的台湾居民来往大陆通行证</para>
    /// <para>接口ID：7273083612789571587</para>
    /// <para>接口文档：https://open.feishu.cn/document/ai/document_ai-v1/tw_mainland_travel_permit/recognize</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>台湾居民来往大陆通行证识别接口，支持JPG/JPEG/PNG/BMP四种文件类型的一次性的识别。</para>
    /// <para>文件大小需要小于10M。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>document_ai:tw_mainland_travel_permit:recognize</item>
    /// </list></para>
    /// </summary>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>识别的台湾居民来往大陆通行证源文件</para>
    /// </param>
    [HttpPost("/open-apis/document_ai/v1/tw_mainland_travel_permit/recognize")]
    System.Threading.Tasks.Task<FeishuResponse<Ai.PostDocumentAiV1TwMainlandTravelPermitRecognizeResponseDto>> PostDocumentAiV1TwMainlandTravelPermitRecognizeAsync(
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【AI 能力】识别文件中的中国护照</para>
    /// <para>接口ID：7273083612789587971</para>
    /// <para>接口文档：https://open.feishu.cn/document/ai/document_ai-v1/chinese_passport/recognize</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>中国护照识别接口，支持JPG/JPEG/PNG/BMP四种文件类型的一次性的识别。</para>
    /// <para>文件大小需要小于10M。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>document_ai:chinese_passport:recognize</item>
    /// </list></para>
    /// </summary>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>识别的中国护照源文件</para>
    /// </param>
    [HttpPost("/open-apis/document_ai/v1/chinese_passport/recognize")]
    System.Threading.Tasks.Task<FeishuResponse<Ai.PostDocumentAiV1ChinesePassportRecognizeResponseDto>> PostDocumentAiV1ChinesePassportRecognizeAsync(
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【AI 能力】识别文件中的银行卡</para>
    /// <para>接口ID：7273083612789604355</para>
    /// <para>接口文档：https://open.feishu.cn/document/ai/document_ai-v1/bank_card/recognize</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>银行卡识别接口，支持JPG/JPEG/PNG/BMP四种文件类型的一次性的识别。</para>
    /// <para>文件大小需要小于10M。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>document_ai:bank_card:recognize</item>
    /// </list></para>
    /// </summary>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>识别的银行卡源文件</para>
    /// </param>
    [HttpPost("/open-apis/document_ai/v1/bank_card/recognize")]
    System.Threading.Tasks.Task<FeishuResponse<Ai.PostDocumentAiV1BankCardRecognizeResponseDto>> PostDocumentAiV1BankCardRecognizeAsync(
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【AI 能力】识别文件中的港澳居民来往内地通行证</para>
    /// <para>接口ID：7273083612789620739</para>
    /// <para>接口文档：https://open.feishu.cn/document/ai/document_ai-v1/hkm_mainland_travel_permit/recognize</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>港澳居民来往内地通行证识别接口，支持JPG/JPEG/PNG/BMP四种文件类型的一次性的识别。</para>
    /// <para>文件大小需要小于10M。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>document_ai:hkm_mainland_travel_permit:recognize</item>
    /// </list></para>
    /// </summary>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>识别的港澳居民来往内地通行证源文件</para>
    /// </param>
    [HttpPost("/open-apis/document_ai/v1/hkm_mainland_travel_permit/recognize")]
    System.Threading.Tasks.Task<FeishuResponse<Ai.PostDocumentAiV1HkmMainlandTravelPermitRecognizeResponseDto>> PostDocumentAiV1HkmMainlandTravelPermitRecognizeAsync(
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【绩效】获取周期列表</para>
    /// <para>接口ID：7275544940596789251</para>
    /// <para>接口文档：https://open.feishu.cn/document/performance-v1/review_config/semester_activity/semester/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量获取周期的基本信息，如周期的名称、类型等信息。支持根据时间段、周期年份、周期类型等过滤条件进行筛选。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>performance:performance</item>
    /// <item>performance:performance:readonly</item>
    /// <item>performance:semester:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="start_time">
    /// <para>必填：否</para>
    /// <para>周期开始时间最小值，毫秒时间戳，小于该时间开始的周期会被过滤掉</para>
    /// <para>示例值：1630425599999</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="end_time">
    /// <para>必填：否</para>
    /// <para>周期结束时间最大值，毫秒时间戳，大于该时间结束的周期会被过滤掉</para>
    /// <para>示例值：1640425000000</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="year">
    /// <para>必填：否</para>
    /// <para>周期年份，填写时按照周期年份筛选</para>
    /// <para>示例值：2024</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="type_group">
    /// <para>必填：否</para>
    /// <para>周期类型分组，填写时按照周期类型分组</para>
    /// <para>示例值：Annual</para>
    /// <list type="bullet">
    /// <item>Annual：年</item>
    /// <item>Semi-annual：半年</item>
    /// <item>Quarter：季度</item>
    /// <item>Bimonth：双月</item>
    /// <item>Month：月</item>
    /// <item>Non-standard：非标准周期</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="type">
    /// <para>必填：否</para>
    /// <para>周期类型，填写时按照周期类型筛选</para>
    /// <para>示例值：April</para>
    /// <list type="bullet">
    /// <item>Annual：全年</item>
    /// <item>H1：上半年</item>
    /// <item>H2：下半年</item>
    /// <item>Q1：第一季度</item>
    /// <item>Q2：第二季度</item>
    /// <item>Q3：第三季度</item>
    /// <item>Q4：第四季度</item>
    /// <item>January-February：1-2 双月</item>
    /// <item>March-April：3-4 双月</item>
    /// <item>May-June：5-6 双月</item>
    /// <item>July-August：7-8 双月</item>
    /// <item>September-October：9-10 双月</item>
    /// <item>November-December：11-12 双月</item>
    /// <item>January：1月份</item>
    /// <item>February：2月份</item>
    /// <item>March：3月份</item>
    /// <item>April：4月份</item>
    /// <item>May：5月份</item>
    /// <item>June：6月份</item>
    /// <item>July：7月份</item>
    /// <item>August：8月份</item>
    /// <item>September：9月份</item>
    /// <item>October：10月份</item>
    /// <item>November：11月份</item>
    /// <item>December：12月份</item>
    /// <item>Custom：自定义</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/performance/v1/semesters")]
    System.Threading.Tasks.Task<FeishuResponse<Performance.GetPerformanceV1SemestersResponseDto>> GetPerformanceV1SemestersAsync(
        [PathQuery] string? start_time = null,
        [PathQuery] string? end_time = null,
        [PathQuery] int? year = null,
        [PathQuery] string? type_group = null,
        [PathQuery] string? type = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【绩效】获取周期任务（指定用户）</para>
    /// <para>接口ID：7275704938197221378</para>
    /// <para>接口文档：https://open.feishu.cn/document/performance-v1/stage_task/find_by_user_list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据用户 ID 批量获取指定周期的任务信息。支持传入任务分类、任务截止时间参数删选周期内任务数据。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>performance:performance</item>
    /// <item>performance:performance:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/performance/v1/stage_tasks/find_by_user_list")]
    System.Threading.Tasks.Task<FeishuResponse<Performance.PostPerformanceV1StageTasksFindByUserListResponseDto>> PostPerformanceV1StageTasksFindByUserListAsync(
        [JsonContent] Performance.PostPerformanceV1StageTasksFindByUserListBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【绩效】获取周期任务（全部用户）</para>
    /// <para>接口ID：7275704938197237762</para>
    /// <para>接口文档：https://open.feishu.cn/document/performance-v1/stage_task/find_by_page</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量获取周期下所有用户的任务信息。支持传入任务分类、任务截止时间参数删选周期内任务数据。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>performance:performance</item>
    /// <item>performance:performance:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/performance/v1/stage_tasks/find_by_page")]
    System.Threading.Tasks.Task<FeishuResponse<Performance.PostPerformanceV1StageTasksFindByPageResponseDto>> PostPerformanceV1StageTasksFindByPageAsync(
        [JsonContent] Performance.PostPerformanceV1StageTasksFindByPageBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【邮箱】删除收信规则</para>
    /// <para>接口ID：7275929163676057603</para>
    /// <para>接口文档：https://open.feishu.cn/document/mail-v1/user_mailbox-rule/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除收信规则</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:user_mailbox.rule:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户邮箱地址 或 输入me代表当前调用接口用户</para>
    /// <para>示例值：user@xxx.xx 或 me</para>
    /// </param>
    /// <param name="rule_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>规则 id，获取方式见 [列出收信规则](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user_mailbox-rule/list)</para>
    /// <para>示例值：123123123</para>
    /// </param>
    [HttpDelete("/open-apis/mail/v1/user_mailboxes/{user_mailbox_id}/rules/{rule_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteMailV1UserMailboxesByUserMailboxIdRulesByRuleIdAsync(
        [PathQuery] string user_mailbox_id,
        [PathQuery] string rule_id);

    /// <summary>
    /// <para>【邮箱】列出收信规则</para>
    /// <para>接口ID：7275929163676073987</para>
    /// <para>接口文档：https://open.feishu.cn/document/mail-v1/user_mailbox-rule/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>列出收信规则</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:user_mailbox.rule:read</item>
    /// <item>mail:user_mailbox.rule:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户邮箱地址 或 输入me代表当前调用接口用户</para>
    /// <para>示例值：user@xxx.xx 或 me</para>
    /// </param>
    [HttpGet("/open-apis/mail/v1/user_mailboxes/{user_mailbox_id}/rules")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.GetMailV1UserMailboxesByUserMailboxIdRulesResponseDto>> GetMailV1UserMailboxesByUserMailboxIdRulesAsync(
        [PathQuery] string user_mailbox_id);

    /// <summary>
    /// <para>【邮箱】创建邮箱文件夹</para>
    /// <para>接口ID：7275929163676090371</para>
    /// <para>接口文档：https://open.feishu.cn/document/mail-v1/user_mailbox-folder/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>创建邮箱文件夹</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:user_mailbox.folder:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户邮箱地址 或 输入me代表当前调用接口用户</para>
    /// <para>示例值：user@xxx.xx 或 me</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/mail/v1/user_mailboxes/{user_mailbox_id}/folders")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.PostMailV1UserMailboxesByUserMailboxIdFoldersResponseDto>> PostMailV1UserMailboxesByUserMailboxIdFoldersAsync(
        [PathQuery] string user_mailbox_id,
        [JsonContent] Mail.PostMailV1UserMailboxesByUserMailboxIdFoldersBodyDto dto);

    /// <summary>
    /// <para>【邮箱】删除邮箱文件夹</para>
    /// <para>接口ID：7275929163676106755</para>
    /// <para>接口文档：https://open.feishu.cn/document/mail-v1/user_mailbox-folder/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除邮箱文件夹</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:user_mailbox.folder:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户邮箱地址 或 输入me代表当前调用接口用户</para>
    /// <para>示例值：user@xxx.xx 或 me</para>
    /// </param>
    /// <param name="folder_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文件夹 id，id 获取方式见 [列出文邮箱文件夹](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user_mailbox-folder/list)</para>
    /// <para>示例值：111111</para>
    /// </param>
    [HttpDelete("/open-apis/mail/v1/user_mailboxes/{user_mailbox_id}/folders/{folder_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteMailV1UserMailboxesByUserMailboxIdFoldersByFolderIdAsync(
        [PathQuery] string user_mailbox_id,
        [PathQuery] string folder_id);

    /// <summary>
    /// <para>【邮箱】列出邮箱文件夹</para>
    /// <para>接口ID：7275929163676123139</para>
    /// <para>接口文档：https://open.feishu.cn/document/mail-v1/user_mailbox-folder/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>列出邮箱文件夹</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:user_mailbox.folder:read</item>
    /// <item>mail:user_mailbox.folder:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户邮箱地址 或 输入me代表当前调用接口用户</para>
    /// <para>示例值：user@xxx.xx 或 me</para>
    /// </param>
    /// <param name="folder_type">
    /// <para>必填：否</para>
    /// <para>文件夹类型</para>
    /// <para>示例值：1</para>
    /// <list type="bullet">
    /// <item>1：系统文件夹</item>
    /// <item>2：用户文件夹</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/mail/v1/user_mailboxes/{user_mailbox_id}/folders")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.GetMailV1UserMailboxesByUserMailboxIdFoldersResponseDto>> GetMailV1UserMailboxesByUserMailboxIdFoldersAsync(
        [PathQuery] string user_mailbox_id,
        [PathQuery] int? folder_type = null);

    /// <summary>
    /// <para>【邮箱】获取邮件详情</para>
    /// <para>接口ID：7275929163676139523</para>
    /// <para>接口文档：https://open.feishu.cn/document/mail-v1/user_mailbox-message/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取邮件详情</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:user_mailbox.message:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>mail:user_mailbox.message.address:read</item>
    /// <item>mail:user_mailbox.message.body:read</item>
    /// <item>mail:user_mailbox.message.subject:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户邮箱地址 或 输入me代表当前调用接口用户</para>
    /// <para>示例值：user@xxx.xx 或 me</para>
    /// </param>
    /// <param name="message_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户邮件 id，获取方式见 [列出邮件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user_mailbox-message/list)</para>
    /// <para>示例值：TUlHc1NoWFhJMXgyUi9VZTNVL3h6UnlkRUdzPQ==</para>
    /// </param>
    [HttpGet("/open-apis/mail/v1/user_mailboxes/{user_mailbox_id}/messages/{message_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.GetMailV1UserMailboxesByUserMailboxIdMessagesByMessageIdResponseDto>> GetMailV1UserMailboxesByUserMailboxIdMessagesByMessageIdAsync(
        [PathQuery] string user_mailbox_id,
        [PathQuery] string message_id);

    /// <summary>
    /// <para>【邮箱】创建收信规则</para>
    /// <para>接口ID：7275929163676172291</para>
    /// <para>接口文档：https://open.feishu.cn/document/mail-v1/user_mailbox-rule/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>创建收信规则</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:user_mailbox.rule:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户邮箱地址，使用 user_access_token 时可使用 me</para>
    /// <para>示例值：user@xxx.xx 或 me</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/mail/v1/user_mailboxes/{user_mailbox_id}/rules")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.PostMailV1UserMailboxesByUserMailboxIdRulesResponseDto>> PostMailV1UserMailboxesByUserMailboxIdRulesAsync(
        [PathQuery] string user_mailbox_id,
        [JsonContent] Mail.PostMailV1UserMailboxesByUserMailboxIdRulesBodyDto dto);

    /// <summary>
    /// <para>【邮箱】对收信规则进行排序</para>
    /// <para>接口ID：7275929163676188675</para>
    /// <para>接口文档：https://open.feishu.cn/document/mail-v1/user_mailbox-rule/reorder</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>对收信规则进行排序</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:user_mailbox.rule:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户邮箱地址，使用 user_access_token 时可使用 me</para>
    /// <para>示例值：user@xxx.xx 或 me</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/mail/v1/user_mailboxes/{user_mailbox_id}/rules/reorder")]
    System.Threading.Tasks.Task<FeishuResponse> PostMailV1UserMailboxesByUserMailboxIdRulesReorderAsync(
        [PathQuery] string user_mailbox_id,
        [JsonContent] Mail.PostMailV1UserMailboxesByUserMailboxIdRulesReorderBodyDto dto);

    /// <summary>
    /// <para>【邮箱】修改邮箱文件夹</para>
    /// <para>接口ID：7275929163676205059</para>
    /// <para>接口文档：https://open.feishu.cn/document/mail-v1/user_mailbox-folder/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>修改邮箱文件夹</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:user_mailbox.folder:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户邮箱地址 或 输入me代表当前调用接口用户</para>
    /// <para>示例值：user@xxx.xx 或 me</para>
    /// </param>
    /// <param name="folder_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文件夹 id，id 获取方式见 [列出文邮箱文件夹](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user_mailbox-folder/list)</para>
    /// <para>示例值：111111</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/mail/v1/user_mailboxes/{user_mailbox_id}/folders/{folder_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PatchMailV1UserMailboxesByUserMailboxIdFoldersByFolderIdAsync(
        [PathQuery] string user_mailbox_id,
        [PathQuery] string folder_id,
        [JsonContent] Mail.PatchMailV1UserMailboxesByUserMailboxIdFoldersByFolderIdBodyDto dto);

    /// <summary>
    /// <para>【邮箱】列出邮件</para>
    /// <para>接口ID：7275929163676221443</para>
    /// <para>接口文档：https://open.feishu.cn/document/mail-v1/user_mailbox-message/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>列出邮件</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:user_mailbox.message:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户邮箱地址 或 输入me代表当前调用接口用户</para>
    /// <para>示例值：user@xxx.xx 或 me</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：1</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：xxx</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="folder_id">
    /// <para>必填：是</para>
    /// <para>文件夹 id， 获取方式见 [列出文邮箱文件夹](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user_mailbox-folder/list)</para>
    /// <para>示例值：INBOX 或者用户文件夹 id</para>
    /// </param>
    /// <param name="only_unread">
    /// <para>必填：否</para>
    /// <para>是否只查询未读邮件</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/mail/v1/user_mailboxes/{user_mailbox_id}/messages")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.GetMailV1UserMailboxesByUserMailboxIdMessagesResponseDto>> GetMailV1UserMailboxesByUserMailboxIdMessagesAsync(
        [PathQuery] string user_mailbox_id,
        [PathQuery] string folder_id,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] bool? only_unread = null);

    /// <summary>
    /// <para>【邮箱】更新收信规则</para>
    /// <para>接口ID：7275929163676270595</para>
    /// <para>接口文档：https://open.feishu.cn/document/mail-v1/user_mailbox-rule/update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新收信规则</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:user_mailbox.rule:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户邮箱地址 或 输入me代表当前调用接口用户</para>
    /// <para>示例值：user@xxx.xx 或 me</para>
    /// </param>
    /// <param name="rule_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>规则 id，获取方式见 [列出收信规则](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user_mailbox-rule/list)</para>
    /// <para>示例值：123123123</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/mail/v1/user_mailboxes/{user_mailbox_id}/rules/{rule_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PutMailV1UserMailboxesByUserMailboxIdRulesByRuleIdAsync(
        [PathQuery] string user_mailbox_id,
        [PathQuery] string rule_id,
        [JsonContent] Mail.PutMailV1UserMailboxesByUserMailboxIdRulesByRuleIdBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询单个职务</para>
    /// <para>接口ID：7277403063272701954</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/job-management/job/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据 ID 查询单个职务。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// <item>corehr:job:read</item>
    /// <item>corehr:job:write</item>
    /// <item>corehr:job.only:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>corehr:job.job_level:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>职务ID。ID获取方式：</para>
    /// <para>- 调用[【创建职务】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job/create)[【批量查询职务】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/job/list)等可以返回职务ID</para>
    /// <para>- 也可以通过[【事件】创建职务](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job/events/created) [【事件】更新职务](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/department/events/updated) 获取ID</para>
    /// <para>示例值：151515</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v2/jobs/{job_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.GetCorehrV2JobsByJobIdResponseDto>> GetCorehrV2JobsByJobIdAsync(
        [PathQuery] string job_id);

    /// <summary>
    /// <para>【飞书人事（企业版）】批量查询职务</para>
    /// <para>接口ID：7277403063272718338</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/job-management/job/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>可以通过该接口查询租户下全部职务ID列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// <item>corehr:job:read</item>
    /// <item>corehr:job:write</item>
    /// <item>corehr:job.only:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>corehr:job.job_level:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：1231231987</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>每页获取记录数量，最大100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="name">
    /// <para>必填：否</para>
    /// <para>职务名称</para>
    /// <para>示例值：keyword</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="query_language">
    /// <para>必填：否</para>
    /// <para>语言信息，中文用zh-CN，英文用en-US</para>
    /// <para>- 传空默认都返回</para>
    /// <para>示例值：zh-CN</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v2/jobs")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.GetCorehrV2JobsResponseDto>> GetCorehrV2JobsAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int page_size = 10,
        [PathQuery] string? name = null,
        [PathQuery] string? query_language = null);

    /// <summary>
    /// <para>【任务】移除依赖</para>
    /// <para>接口ID：7277445986133442563</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/task/remove_dependencies</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>从一个任务移除一个或者多个依赖。移除时只需要输入要移除的`task_guid`即可。</para>
    /// <para>注意，如果要移除的依赖非当前任务的依赖，会被自动忽略。接口会返回成功。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要移除依赖的任务GUID</para>
    /// <para>示例值：93b7bd05-35e6-4371-b3c9-6b7cbd7100c0</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v2/tasks/{task_guid}/remove_dependencies")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV2TasksByTaskGuidRemoveDependenciesResponseDto>> PostTaskV2TasksByTaskGuidRemoveDependenciesAsync(
        [PathQuery] string task_guid,
        [JsonContent] Task.PostTaskV2TasksByTaskGuidRemoveDependenciesBodyDto dto);

    /// <summary>
    /// <para>【任务】添加依赖</para>
    /// <para>接口ID：7277445986133458947</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/task/add_dependencies</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>为一个任务添加一个或多个依赖。可以添加任务的前置依赖和后置依赖。存在依赖关系的任务如果在同一个清单，可以通过清单的甘特图来展示其依赖关系。</para>
    /// <para>本接口也可以用于修改一个现有依赖的类型（前置改为后置或者后置改为前置）。</para>
    /// <para>注意：添加的依赖的`task_guid`不能重复，也不能添加当前任务为自己的依赖。尝试添加一个已经存在的依赖会被自动忽略。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:task:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务GUID</para>
    /// <para>示例值：93b7bd05-35e6-4371-b3c9-6b7cbd7100c0</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v2/tasks/{task_guid}/add_dependencies")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV2TasksByTaskGuidAddDependenciesResponseDto>> PostTaskV2TasksByTaskGuidAddDependenciesAsync(
        [PathQuery] string task_guid,
        [JsonContent] Task.PostTaskV2TasksByTaskGuidAddDependenciesBodyDto dto);

    /// <summary>
    /// <para>【应用信息】更新应用通讯录权限范围配置</para>
    /// <para>接口ID：7278520881743724547</para>
    /// <para>接口文档：https://open.feishu.cn/document/application-v6/admin/patch-4</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于更新当前企业内自建应用或已安装的商店应用的通讯录权限范围配置。更新后线上立即生效。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>application:application.contacts_range:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用id</para>
    /// <para>示例值：cli_dsfjksdfee1</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>部门id类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以open_department_id标识部门</item>
    /// <item>department_id：以department_id标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/application/v6/applications/{app_id}/contacts_range")]
    System.Threading.Tasks.Task<FeishuResponse> PatchApplicationV6ApplicationsByAppIdContactsRangeAsync(
        [PathQuery] string app_id,
        [JsonContent] Application.PatchApplicationV6ApplicationsByAppIdContactsRangeBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【应用信息】更新应用可用范围</para>
    /// <para>接口ID：7278520881743740931</para>
    /// <para>接口文档：https://open.feishu.cn/document/application-v6/admin/patch-5</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口更新指定应用的可用范围，支持更新当前企业内自建应用的可用范围，或者已安装的商店应用的可用范围，包括可用人员与禁用人员。更新可用范围后对线上立即生效。</para>
    /// <para>## 注意事项</para>
    /// <para>- 该接口仅支持被企业自建应用调用，但传入的路径参数 app_id 可以是企业自建应用的 app_id，也可以是商店应用的 app_id。</para>
    /// <para>- 当通过接口新增用户或部门时，提前判断对应用户或部门是否已在禁用名单中，如果已在禁用名单中，则即便将用户或部门添加到可用名单，该用户或部门也无法看到该应用，即禁用名单优先级高于可用名单。</para>
    /// <para>- 同一个成员(user_id) 在30s内不能重复添加到禁用名单，否则会导致调用失败。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:app.visibility</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用id</para>
    /// <para>示例值：cli_9b445f5258795107</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>部门id 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以open_department_id标识部门</item>
    /// <item>department_id：以department_id标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/application/v6/applications/{app_id}/visibility")]
    System.Threading.Tasks.Task<FeishuResponse> PatchApplicationV6ApplicationsByAppIdVisibilityAsync(
        [PathQuery] string app_id,
        [JsonContent] Application.PatchApplicationV6ApplicationsByAppIdVisibilityBodyDto dto,
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】批量查询部门</para>
    /// <para>接口ID：7280432392631549953</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/department/batch_get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量查询部门信息，**该接口只返回部门当前内容**。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:department:read</item>
    /// <item>corehr:department:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:department.cost_center_id:read</item>
    /// <item>corehr:department.custom_fields:read</item>
    /// <item>corehr:department.manager:read</item>
    /// <item>corehr:department.organize:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：【飞书】用来在具体某个应用中标识一个部门，同一个department_id 在不同应用中的 open_department_id 相同。</item>
    /// <item>department_id：【飞书】用来标识租户内一个唯一的部门</item>
    /// <item>people_corehr_department_id：【飞书人事】用来标识「飞书人事」中的部门。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/departments/batch_get")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2DepartmentsBatchGetResponseDto>> PostCorehrV2DepartmentsBatchGetAsync(
        [JsonContent] Corehr.PostCorehrV2DepartmentsBatchGetBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【云文档】批量增加协作者权限</para>
    /// <para>接口ID：7281248568152981507</para>
    /// <para>接口文档：https://open.feishu.cn/document/docs/permission/permission-member/batch_create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口可根据云文档 token 批量将用户添加为云文档的协作者。</para>
    /// <para>## 注意事项</para>
    /// <para>- 调用该接口需要调用身份有该云文档添加协作者的权限。添加协作者的权限可通过云文档设置中的「谁可以查看、添加、移除协作者」等选项进行控制。</para>
    /// <para>- 调用该接口时，需要调用身份与被授权对象满足 **可见性** ，例如：</para>
    /// <para>- 添加用户协作者：需要调用身份与被授权对象为联系人或同组织内可搜索，且互相未屏蔽。</para>
    /// <para>- 添加群协作者：需要调用身份在群内。要使用 `tenant_access_token` 身份添加群协作者，则需要将该应用作为机器人添加至群组中，使应用对群可见。</para>
    /// <para>- 添加部门协作者：需要调用身份对部门可见。由于应用对企业内的组织架构都不可见，所以暂不支持通过 `tenant_access_token` 添加部门协作者。</para>
    /// <para>- 目前不支持将应用直接添加到文件夹作为协作者（添加成功后实际仍然没有权限）。如果希望给应用授予文件夹的权限，请将应用作为群机器人添加到群组内，然后授予该群组可管理权限。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:permission.member</item>
    /// <item>docs:permission.member:create</item>
    /// </list></para>
    /// </summary>
    /// <param name="token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>云文档的 token，需要与 type 参数指定的云文档类型相匹配。可参考 [如何获取云文档相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)。</para>
    /// <para>示例值：docxnBKgoMyY5OMbUG6FioTXuBe</para>
    /// </param>
    /// <param name="type">
    /// <para>必填：是</para>
    /// <para>云文档类型，需要与云文档的 token 相匹配。</para>
    /// <para>示例值：docx</para>
    /// <list type="bullet">
    /// <item>doc：旧版文档</item>
    /// <item>sheet：电子表格</item>
    /// <item>file：云空间文件</item>
    /// <item>wiki：知识库节点</item>
    /// <item>bitable：多维表格</item>
    /// <item>docx：新版文档</item>
    /// <item>folder：文件夹。使用 &lt;md-tag mode="inline" type="token-tenant"&gt;tenant_access_token&lt;/md-tag&gt; 调用时，需确保文件夹所有者为应用或应用拥有文件夹的可管理权限，你需要将应用作为群机器人添加至群内，然后授予该群组可管理权限。</item>
    /// <item>mindnote：思维笔记</item>
    /// <item>minutes：妙记。目前妙记还不支持 `full_access` 权限角色</item>
    /// <item>slides：幻灯片</item>
    /// </list>
    /// </param>
    /// <param name="need_notification">
    /// <para>必填：否</para>
    /// <para>添加权限后是否通知对方。仅当使用 &lt;md-tag mode="inline" type="token-user"&gt;user_access_token&lt;/md-tag&gt; 调用时有效。</para>
    /// <para>示例值：false</para>
    /// <para>默认值：false</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/drive/v1/permissions/{token}/members/batch_create")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostDriveV1PermissionsByTokenMembersBatchCreateResponseDto>> PostDriveV1PermissionsByTokenMembersBatchCreateAsync(
        [PathQuery] string token,
        [PathQuery] string type,
        [JsonContent] Ccm.PostDriveV1PermissionsByTokenMembersBatchCreateBodyDto dto,
        [PathQuery] bool? need_notification = false);

    /// <summary>
    /// <para>【安全合规】获取OpenAPI审计日志数据</para>
    /// <para>接口ID：7283168587871223810</para>
    /// <para>接口文档：https://open.feishu.cn/document/security_and_compliance-v1/openapi_log/list_data</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于获取OpenAPI审计日志数据</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>security_and_compliance:audit_log.openapi_log:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/security_and_compliance/v1/openapi_logs/list_data")]
    System.Threading.Tasks.Task<FeishuResponse<SecurityAndCompliance.PostSecurityAndComplianceV1OpenapiLogsListDataResponseDto>> PostSecurityAndComplianceV1OpenapiLogsListDataAsync(
        [JsonContent] SecurityAndCompliance.PostSecurityAndComplianceV1OpenapiLogsListDataBodyDto dto);

    /// <summary>
    /// <para>【招聘】获取职位类别列表</para>
    /// <para>接口ID：7287407243900895234</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/recruitment-related-configuration/job/list-4</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取招聘系统预置的职位类别列表，可用于操作职位（如[新建职位](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/combined_create)），操作招聘需求（如[创建招聘需求](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job_requirement/create)）时回填职位类别字段。返回列表默认按创建时间升序排序，且包含节点的层级关系（节点的父节点 ID），可在获取全量数据后自行构建职位类别树。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:job:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>**默认值**：10</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/job_types")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1JobTypesResponseDto>> GetHireV1JobTypesAsync(
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【招聘】批量获取面试评价详细信息</para>
    /// <para>接口ID：7287514613653831708</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/candidate-management/delivery-process-management/interview/list-3</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量获取面试评价详细信息，如面试结论、面试得分和面试官等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:interview</item>
    /// <item>hire:interview:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="ids">
    /// <para>必填：否</para>
    /// <para>面试评价 ID 列表，可通过[获取面试信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/interview/list)接口获取，使用该筛选项时不会分页</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/interview_records")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1InterviewRecordsResponseDto>> GetHireV1InterviewRecordsAsync(
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string[]? ids = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】列取动态订阅</para>
    /// <para>接口ID：7288897051646951426</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/tasklist-activity_subscription/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>给定一个清单的GUID，获取其所有的订阅信息。结果按照订阅的创建时间排序。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:tasklist:read</item>
    /// <item>task:tasklist:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="tasklist_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>清单GUID。可以通过[创建清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist/create)，或者通过[获取清单列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist/list)接口查询得到。</para>
    /// <para>示例值：d19e3a2a-edc0-4e4e-b7cc-950e162b53ae</para>
    /// </param>
    /// <param name="limit">
    /// <para>必填：否</para>
    /// <para>返回结果的最大数量</para>
    /// <para>示例值：50</para>
    /// <para>默认值：50</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/task/v2/tasklists/{tasklist_guid}/activity_subscriptions")]
    System.Threading.Tasks.Task<FeishuResponse<Task.GetTaskV2TasklistsByTasklistGuidActivitySubscriptionsResponseDto>> GetTaskV2TasklistsByTasklistGuidActivitySubscriptionsAsync(
        [PathQuery] string tasklist_guid,
        [PathQuery] int? limit = 50,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】更新动态订阅</para>
    /// <para>接口ID：7288897051646967810</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/tasklist-activity_subscription/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>提供一个清单的GUID和一个动态订阅的GUID，对其进行更新。更新时，将`update_fields`字段中填写所有要修改的字段名，同时在`activity_subscription`字段中填写要修改的字段的新值即可。</para>
    /// <para>`update_fields`支持更新的字段包括：</para>
    /// <para>* name：订阅的名称</para>
    /// <para>* subscribers: 订阅者列表。如更新，会将旧的订阅者列表完全替换为新的订阅者列表。支持最大50个订阅者。并且订阅者必须是chat类型。</para>
    /// <para>* include_keys ：订阅需要发送通知的key。如更新，会将旧的列表完全替换为新的include_keys列表。只能设置支持的event key (见字段描述）。</para>
    /// <para>* disabled：修改订阅的开启/禁用状态。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:tasklist:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="tasklist_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>清单GUID。可以通过[创建清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist/create)，或者通过[获取清单列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist/list)接口查询得到。</para>
    /// <para>示例值：33991879-704f-444f-81d7-55a6aa7be80c</para>
    /// </param>
    /// <param name="activity_subscription_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要更新的动态订阅GUID。可以通过[创建动态订阅](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist-activity_subscription/create)接口创建，或者通过[列取动态订阅](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist-activity_subscription/list)查询得到。</para>
    /// <para>示例值：f5ca6747-5ac3-422e-a97e-972c1b2c24f3</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/task/v2/tasklists/{tasklist_guid}/activity_subscriptions/{activity_subscription_guid}")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PatchTaskV2TasklistsByTasklistGuidActivitySubscriptionsByActivitySubscriptionGuidResponseDto>> PatchTaskV2TasklistsByTasklistGuidActivitySubscriptionsByActivitySubscriptionGuidAsync(
        [PathQuery] string tasklist_guid,
        [PathQuery] string activity_subscription_guid,
        [JsonContent] Task.PatchTaskV2TasklistsByTasklistGuidActivitySubscriptionsByActivitySubscriptionGuidBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】删除动态订阅</para>
    /// <para>接口ID：7288897051646984194</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/tasklist-activity_subscription/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>给定一个清单的GUID和一个订阅的GUID，将其删除。删除后的数据不可恢复。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:tasklist:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="tasklist_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>清单GUID。可以通过[创建清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist/create)，或者通过[获取清单列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist/list)接口查询得到。</para>
    /// <para>示例值：f5ca6747-5ac3-422e-a97e-972c1b2c24f3</para>
    /// </param>
    /// <param name="activity_subscription_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要删除的订阅GUID。可以通过[创建动态订阅](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist-activity_subscription/create)接口创建，或者通过[列取动态订阅](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist-activity_subscription/list)查询得到。</para>
    /// <para>示例值：d19e3a2a-edc0-4e4e-b7cc-950e162b53ae</para>
    /// </param>
    [HttpDelete("/open-apis/task/v2/tasklists/{tasklist_guid}/activity_subscriptions/{activity_subscription_guid}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteTaskV2TasklistsByTasklistGuidActivitySubscriptionsByActivitySubscriptionGuidAsync(
        [PathQuery] string tasklist_guid,
        [PathQuery] string activity_subscription_guid);

    /// <summary>
    /// <para>【任务】创建动态订阅</para>
    /// <para>接口ID：7288897051647000578</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/tasklist-activity_subscription/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>为一个清单创建一个订阅。每个订阅可以包含1个或多个订阅者（目前只支持普通群组）。订阅创建后，如清单发生相应的事件，则会向订阅里的订阅者发送通知消息。一个清单最多可以创建50个订阅。每个订阅最大支持50个订阅者。订阅者目前仅支持"chat"类型。</para>
    /// <para>每个订阅可以通过设置`include_keys`可以针对哪些事件(event_key)做通知。如果`include_keys`为空，则不对任何事件进行通知。</para>
    /// <para>如有需要，创建时也可以直接将`disabled`设为true，创建一个禁止发送订阅通知的订阅。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:tasklist:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="tasklist_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>清单GUID</para>
    /// <para>示例值：d19e3a2a-edc0-4e4e-b7cc-950e162b53ae</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/task/v2/tasklists/{tasklist_guid}/activity_subscriptions")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV2TasklistsByTasklistGuidActivitySubscriptionsResponseDto>> PostTaskV2TasklistsByTasklistGuidActivitySubscriptionsAsync(
        [PathQuery] string tasklist_guid,
        [JsonContent] Task.PostTaskV2TasklistsByTasklistGuidActivitySubscriptionsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】获取动态订阅</para>
    /// <para>接口ID：7288897051647016962</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/tasklist-activity_subscription/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>提供一个清单的GUID和一个订阅的GUID，获取该订阅的详细信息，包括名称，订阅者，可通知的event key列表等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:tasklist:read</item>
    /// <item>task:tasklist:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="tasklist_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>清单GUID。可以通过[创建清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist/create)，或者通过[获取清单列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist/list)接口查询得到。</para>
    /// <para>示例值：33991879-704f-444f-81d7-55a6aa7be80c</para>
    /// </param>
    /// <param name="activity_subscription_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>订阅GUID。可以通过[创建动态订阅](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist-activity_subscription/create)接口创建，或者通过[列取动态订阅](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist-activity_subscription/list)查询得到。</para>
    /// <para>示例值：33991879-704f-444f-81d7-55a6aa7be80c</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/task/v2/tasklists/{tasklist_guid}/activity_subscriptions/{activity_subscription_guid}")]
    System.Threading.Tasks.Task<FeishuResponse<Task.GetTaskV2TasklistsByTasklistGuidActivitySubscriptionsByActivitySubscriptionGuidResponseDto>> GetTaskV2TasklistsByTasklistGuidActivitySubscriptionsByActivitySubscriptionGuidAsync(
        [PathQuery] string tasklist_guid,
        [PathQuery] string activity_subscription_guid,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【妙记】导出妙记文字记录</para>
    /// <para>接口ID：7289369210564329500</para>
    /// <para>接口文档：https://open.feishu.cn/document/minutes-v1/minute-transcript/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取妙记的对话文本</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>minutes:minute:download</item>
    /// <item>minutes:minutes.transcript:export</item>
    /// </list></para>
    /// </summary>
    /// <param name="minute_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>妙记唯一标识</para>
    /// <para>示例值：obcnq3b9jl72l83w4f149w9c</para>
    /// </param>
    /// <param name="need_speaker">
    /// <para>必填：否</para>
    /// <para>是否包含说话人</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="need_timestamp">
    /// <para>必填：否</para>
    /// <para>是否包含时间戳</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="file_format">
    /// <para>必填：否</para>
    /// <para>导出文件格式</para>
    /// <para>示例值：txt；srt</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <returns>返回文件二进制流</returns>
    [HttpGet("/open-apis/minutes/v1/minutes/{minute_token}/transcript")]
    System.Threading.Tasks.Task<HttpResponseMessage> GetMinutesV1MinutesByMinuteTokenTranscriptAsync(
        [PathQuery] string minute_token,
        [PathQuery] bool? need_speaker = null,
        [PathQuery] bool? need_timestamp = null,
        [PathQuery] string? file_format = null);

    /// <summary>
    /// <para>【妙记】下载妙记音视频文件</para>
    /// <para>接口ID：7289369210564345884</para>
    /// <para>接口文档：https://open.feishu.cn/document/minutes-v1/minute-media/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取妙记的音视频文件</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>minutes:minute:download</item>
    /// <item>minutes:minutes.media:export</item>
    /// </list></para>
    /// </summary>
    /// <param name="minute_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>妙记唯一标识</para>
    /// <para>示例值：obcnq3b9jl72l83w4f149w9c</para>
    /// </param>
    [HttpGet("/open-apis/minutes/v1/minutes/{minute_token}/media")]
    System.Threading.Tasks.Task<FeishuResponse<Minutes.GetMinutesV1MinutesByMinuteTokenMediaResponseDto>> GetMinutesV1MinutesByMinuteTokenMediaAsync(
        [PathQuery] string minute_token);

    /// <summary>
    /// <para>【应用信息】更新应用红点</para>
    /// <para>接口ID：7291103260878356482</para>
    /// <para>接口文档：https://open.feishu.cn/document/server-docs/application-v6/app_badge/set</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新应用红点信息，用于工作台场景</para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/application/v6/app_badge/set")]
    System.Threading.Tasks.Task<FeishuResponse> PostApplicationV6AppBadgeSetAsync(
        [JsonContent] Application.PostApplicationV6AppBadgeSetBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【消息与群组】即时提醒</para>
    /// <para>接口ID：7291232621641039875</para>
    /// <para>接口文档：https://open.feishu.cn/document/im-v2/groups-bots/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>即时提醒能力是飞书在消息列表中提供的强提醒能力，当有重要通知或任务需要及时触达用户，可将群组或机器人对话在消息列表中置顶展示，打开飞书首页即可处理重要任务。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:datasync.feed_card.time_sensitive:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="feed_card_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>消息卡片 id，当前只支持群聊类型</para>
    /// <para>示例值：oc_679eaeb583654bff73fefcc6e6371370</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：是</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/im/v2/feed_cards/{feed_card_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PatchImV2FeedCardsByFeedCardIdResponseDto>> PatchImV2FeedCardsByFeedCardIdAsync(
        [PathQuery] string feed_card_id,
        [JsonContent] Im.PatchImV2FeedCardsByFeedCardIdBodyDto dto,
        [PathQuery] string user_id_type = "open_id");

    /// <summary>
    /// <para>【邮箱】获取附件下载链接</para>
    /// <para>接口ID：7296319822873657346</para>
    /// <para>接口文档：https://open.feishu.cn/document/mail-v1/user_mailbox-message/user_mailbox-message-attachment/download_url</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取附件下载链接</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:user_mailbox.message.body:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户邮箱地址 或 输入me代表当前调用接口用户</para>
    /// <para>示例值：user@xxx.xx 或 me</para>
    /// </param>
    /// <param name="message_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户邮件 id，获取方式见 [列出邮件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user_mailbox-message/list)</para>
    /// <para>示例值：TUlHc1NoWFhJMXgyUi9VZTNVL3h6UnlkRUdzPQ==</para>
    /// </param>
    /// <param name="attachment_ids">
    /// <para>必填：是</para>
    /// <para>附件 id 列表</para>
    /// </param>
    [HttpGet("/open-apis/mail/v1/user_mailboxes/{user_mailbox_id}/messages/{message_id}/attachments/download_url")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.GetMailV1UserMailboxesByUserMailboxIdMessagesByMessageIdAttachmentsDownloadUrlResponseDto>> GetMailV1UserMailboxesByUserMailboxIdMessagesByMessageIdAttachmentsDownloadUrlAsync(
        [PathQuery] string user_mailbox_id,
        [PathQuery] string message_id,
        [PathQuery] string[] attachment_ids);

    /// <summary>
    /// <para>【邮箱】将公共邮箱移至回收站</para>
    /// <para>接口ID：7296319822873673730</para>
    /// <para>接口文档：https://open.feishu.cn/document/mail-v1/public-mailbox/public_mailbox/remove_to_recycle_bin</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>将公共邮箱移至回收站</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:public_mailbox</item>
    /// </list></para>
    /// </summary>
    /// <param name="public_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>公共邮箱地址</para>
    /// <para>示例值：test_public_mailbox@xxx.xx</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpDelete("/open-apis/mail/v1/public_mailboxes/{public_mailbox_id}/remove_to_recycle_bin")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteMailV1PublicMailboxesByPublicMailboxIdRemoveToRecycleBinAsync(
        [PathQuery] string public_mailbox_id,
        [JsonContent] Mail.DeleteMailV1PublicMailboxesByPublicMailboxIdRemoveToRecycleBinBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询流程实例列表</para>
    /// <para>接口ID：7296819819722571804</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/process-form_variable_data/process-instance/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>本接口用于查询流程实例列表，支持通过流程定义 ID 等进行查询，其中：</para>
    /// <para>- 流程实例：是指用户在业务功能或者飞书人事的审批中心发起的具体流程，process_id 是其唯一标识。</para>
    /// <para>- 流程定义：是指管理员在设置侧配置的流程，类似流程模板，flow_definition_id 是其唯一标识。用户发起的流程是按照对应的流程定义的配置生成。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:process:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="statuses">
    /// <para>必填：否</para>
    /// <para>查询流程状态列表。如需一次查询多个状态值,可通过将同一参数名多次传递,并且每次传递不同的参数值。例如:https://{url}?statuses=1&amp;statuses=2</para>
    /// <para>可选值：</para>
    /// <para>- 1：进行中</para>
    /// <para>- 2：已拒绝</para>
    /// <para>- 4：已撤回</para>
    /// <para>- 8：已撤销</para>
    /// <para>- 9：已完成</para>
    /// <para>- 15：撤销中</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：7278949005675988535</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="modify_time_from">
    /// <para>必填：是</para>
    /// <para>任务查询开始时间，闭区间</para>
    /// <para>单位：ms。从 1970 年 1 月 1 日 (UTC/GMT的午夜) 开始经过的毫秒数</para>
    /// <para>注意：开始时间和结束时间跨度要小于 31 天</para>
    /// <para>示例值：1547654251506</para>
    /// </param>
    /// <param name="modify_time_to">
    /// <para>必填：是</para>
    /// <para>任务查询结束时间，闭区间</para>
    /// <para>单位：ms。从 1970 年 1 月 1 日 (UTC/GMT的午夜) 开始经过的毫秒数</para>
    /// <para>注意：开始时间和结束时间跨度要小于 31 天</para>
    /// <para>示例值：1547654251506</para>
    /// </param>
    /// <param name="flow_definition_id">
    /// <para>必填：否</para>
    /// <para>流程定义ID</para>
    /// <para>可通过[获取单个流程详情](https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/process/get)查询流程实例对应的流程定义ID</para>
    /// <para>示例值：people_6961286846093788680_7081951411982077732</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v2/processes")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.GetCorehrV2ProcessesResponseDto>> GetCorehrV2ProcessesAsync(
        [PathQuery] string modify_time_from,
        [PathQuery] string modify_time_to,
        [PathQuery] int[]? statuses = null,
        [PathQuery] string? page_token = null,
        [PathQuery] int page_size = 10,
        [PathQuery] string? flow_definition_id = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】获取单个流程详情</para>
    /// <para>接口ID：7296819819722588188</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/process-form_variable_data/process-instance/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据流程实例 id（process_id）获取单个流程详情。比如流程状态、流程发起人、流程发起时间、流程摘要、流程里的所有待办、已办、抄送任务等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:process:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="process_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>流程实例ID。可通过[查询流程实例列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/process/list)接口获取</para>
    /// <para>示例值：7278949005675988535</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v2/processes/{process_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.GetCorehrV2ProcessesByProcessIdResponseDto>> GetCorehrV2ProcessesByProcessIdAsync(
        [PathQuery] string process_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】上传附件</para>
    /// <para>接口ID：7297183031634460675</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/attachment/upload</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>为特定资源上传附件。本接口可以支持一次上传多个附件，最多5个。每个附件尺寸不超过50MB，格式不限。</para>
    /// <para>上传请求体的格式为"form-data"。若希望上传多个附件，则提供多个"file"字段即可。返回的附件顺序将会与输入的file顺序保持一致。</para>
    /// <para>目前资源类型仅支持"task", `resource_id`需要填写任务的GUID。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:attachment:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>要上传的文件，单请求支持最多5个文件。上传结果的顺序将和请求中文件的顺序保持一致。</para>
    /// </param>
    [HttpPost("/open-apis/task/v2/attachments/upload")]
    System.Threading.Tasks.Task<FeishuResponse<Task.PostTaskV2AttachmentsUploadResponseDto>> PostTaskV2AttachmentsUploadAsync(
        [FormDataContent] Task.PostTaskV2AttachmentsUploadBodyDto dto,
        [FormDataContent] FormDataFile file,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】列取附件</para>
    /// <para>接口ID：7297183031634477059</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/attachment/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>列取一个资源的所有附件。返回的附件列表支持分页，按照附件上传时间排序。</para>
    /// <para>每个附件会返回一个可供下载的临时url，有效期为3分钟，最多可以支持3次下载。如果超过使用限制，需要通过本接口获取新的临时url。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:attachment:read</item>
    /// <item>task:attachment:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：50</para>
    /// <para>默认值：50</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：aWQ9NzEwMjMzMjMxMDE=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="resource_type">
    /// <para>必填：否</para>
    /// <para>附件归属的资源类型。目前只支持"task"。</para>
    /// <para>示例值：task</para>
    /// <para>默认值：task</para>
    /// </param>
    /// <param name="resource_id">
    /// <para>必填：是</para>
    /// <para>附件归属资源的id，配合resource_type使用。例如希望获取任务的附件，需要设置 resource_type为task， resource_id为任务GUID。任务GUID的获取方式可以参考[任务功能概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/task/overview)。</para>
    /// <para>示例值：9842501a-9f47-4ff5-a622-d319eeecb97f</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/task/v2/attachments")]
    System.Threading.Tasks.Task<FeishuResponse<Task.GetTaskV2AttachmentsResponseDto>> GetTaskV2AttachmentsAsync(
        [PathQuery] string resource_id,
        [PathQuery] int? page_size = 50,
        [PathQuery] string? page_token = null,
        [PathQuery] string? resource_type = "task",
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】获取附件</para>
    /// <para>接口ID：7297183031634493443</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/attachment/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>提供一个附件GUID，返回附件的详细信息，包括GUID，名称，大小，上传时间，临时可下载链接等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:attachment:read</item>
    /// <item>task:attachment:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="attachment_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>获取详情的附件GUID。可以通过创建[上传附件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/attachment/upload)接口创建, 或者通过[列取附件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/attachment/list)接口查询得到。</para>
    /// <para>示例值：b59aa7a3-e98c-4830-8273-cbb29f89b837</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/task/v2/attachments/{attachment_guid}")]
    System.Threading.Tasks.Task<FeishuResponse<Task.GetTaskV2AttachmentsByAttachmentGuidResponseDto>> GetTaskV2AttachmentsByAttachmentGuidAsync(
        [PathQuery] string attachment_guid,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【任务】删除附件</para>
    /// <para>接口ID：7297183031634509827</para>
    /// <para>接口文档：https://open.feishu.cn/document/task-v2/attachment/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>提供一个附件GUID，删除该附件。删除后该附件不可再恢复。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>task:attachment:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="attachment_guid">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要删除附件的GUID。可以通过创建[上传附件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/attachment/upload)接口创建, 或者通过[列取附件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/attachment/list)接口查询得到。</para>
    /// <para>示例值：b59aa7a3-e98c-4830-8273-cbb29f89b837</para>
    /// </param>
    [HttpDelete("/open-apis/task/v2/attachments/{attachment_guid}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteTaskV2AttachmentsByAttachmentGuidAsync(
        [PathQuery] string attachment_guid);

    /// <summary>
    /// <para>【词典】删除免审词条</para>
    /// <para>接口ID：7301296774114639876</para>
    /// <para>接口文档：https://open.feishu.cn/document/lingo-v1/entity/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过 entity_id 删除已有的词条，无需经过词典管理员审核。因此，调用该接口时应当慎重操作。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>baike:entity:exempt_delete</item>
    /// </list></para>
    /// </summary>
    /// <param name="entity_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>词条 ID</para>
    /// <para>示例值：enterprise_43742132363</para>
    /// </param>
    /// <param name="provider">
    /// <para>必填：否</para>
    /// <para>外部系统（使用时需要将路径中的词条 ID 固定为：enterprise_0，且提供 provider 和 outer_id）</para>
    /// <para>示例值：星云</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="outer_id">
    /// <para>必填：否</para>
    /// <para>词条在外部系统中对应的唯一 ID（使用时需要将路径中的词条 ID 固定为：enterprise_0，且提供 provider 和 outer_id）</para>
    /// <para>示例值：123aaa</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpDelete("/open-apis/lingo/v1/entities/{entity_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteLingoV1EntitiesByEntityIdAsync(
        [PathQuery] string entity_id,
        [PathQuery] string? provider = null,
        [PathQuery] string? outer_id = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询城市信息</para>
    /// <para>接口ID：7301516605753131011</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/basic-infomation/location_data/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据城市 ID、上级省份/主要行政区 ID ，查询城市（自治区、地区、县「美」、町、村「日」）信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.basic_data:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：7316867189967963685</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/basic_info/cities/search")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2BasicInfoCitiesSearchResponseDto>> PostCorehrV2BasicInfoCitiesSearchAsync(
        [JsonContent] Corehr.PostCorehrV2BasicInfoCitiesSearchBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询区/县信息</para>
    /// <para>接口ID：7301516605753147395</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/basic-infomation/location_data/search-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据区/县 ID、上级城市 ID，查询区/县信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.basic_data:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6863333352758314504</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/basic_info/districts/search")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2BasicInfoDistrictsSearchResponseDto>> PostCorehrV2BasicInfoDistrictsSearchAsync(
        [JsonContent] Corehr.PostCorehrV2BasicInfoDistrictsSearchBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询货币信息</para>
    /// <para>接口ID：7301516605753163779</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/basic-infomation/currency/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据货币 ID、状态查询货币信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.basic_data:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6891251722631890445</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/basic_info/currencies/search")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2BasicInfoCurrenciesSearchResponseDto>> PostCorehrV2BasicInfoCurrenciesSearchAsync(
        [JsonContent] Corehr.PostCorehrV2BasicInfoCurrenciesSearchBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询国籍信息</para>
    /// <para>接口ID：7301516605753180163</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/basic-infomation/basic_info-nationality/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据国籍 ID、国家 ID，查询国籍信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.basic_data:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：7075702743846897196</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/basic_info/nationalities/search")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2BasicInfoNationalitiesSearchResponseDto>> PostCorehrV2BasicInfoNationalitiesSearchAsync(
        [JsonContent] Corehr.PostCorehrV2BasicInfoNationalitiesSearchBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询银行信息</para>
    /// <para>接口ID：7301516605753196547</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/basic-infomation/basic_info-bank/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据银行 ID 、银行名称，查询银行信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.basic_data:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：MDBH00000100</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/basic_info/banks/search")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2BasicInfoBanksSearchResponseDto>> PostCorehrV2BasicInfoBanksSearchAsync(
        [JsonContent] Corehr.PostCorehrV2BasicInfoBanksSearchBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询支行信息</para>
    /// <para>接口ID：7301516605753212931</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/basic-infomation/basic_info-bank/search-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据银行 ID、支行 ID 、支行名称、联行号，支行状态、更新时间 查询银行信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.basic_data:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：MDBK00000120</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/basic_info/bank_branchs/search")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2BasicInfoBankBranchsSearchResponseDto>> PostCorehrV2BasicInfoBankBranchsSearchAsync(
        [JsonContent] Corehr.PostCorehrV2BasicInfoBankBranchsSearchBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询国家/地区信息</para>
    /// <para>接口ID：7301516605753229315</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/basic-infomation/location_data/search-4</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据国家/地区 ID、状态，批量查询国家/地区信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.basic_data:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6862995772275688974</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/basic_info/country_regions/search")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2BasicInfoCountryRegionsSearchResponseDto>> PostCorehrV2BasicInfoCountryRegionsSearchAsync(
        [JsonContent] Corehr.PostCorehrV2BasicInfoCountryRegionsSearchBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询省份/主要行政区信息</para>
    /// <para>接口ID：7301516605753245699</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/basic-infomation/location_data/search-3</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据国家/地区 ID、省份/主要行政区 ID、状态，批量查询国家/地区下辖的一级行政区（如省份、直辖市、自治区、州等）数据</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.basic_data:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6891251722631890445</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/basic_info/country_region_subdivisions/search")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2BasicInfoCountryRegionSubdivisionsSearchResponseDto>> PostCorehrV2BasicInfoCountryRegionSubdivisionsSearchAsync(
        [JsonContent] Corehr.PostCorehrV2BasicInfoCountryRegionSubdivisionsSearchBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【消息与群组】更新应用消息流卡片</para>
    /// <para>接口ID：7302258202712473628</para>
    /// <para>接口文档：https://open.feishu.cn/document/im-v2/app_feed_card/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于更新消息流卡片的头像、标题、预览、标签状态、按钮等信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:app_feed_card:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/im/v2/app_feed_card/batch")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PutImV2AppFeedCardBatchResponseDto>> PutImV2AppFeedCardBatchAsync(
        [JsonContent] Im.PutImV2AppFeedCardBatchBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【消息与群组】删除应用消息流卡片</para>
    /// <para>接口ID：7302258202712490012</para>
    /// <para>接口文档：https://open.feishu.cn/document/im-v2/app_feed_card/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于删除应用消息流卡片</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:app_feed_card:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpDelete("/open-apis/im/v2/app_feed_card/batch")]
    System.Threading.Tasks.Task<FeishuResponse<Im.DeleteImV2AppFeedCardBatchResponseDto>> DeleteImV2AppFeedCardBatchAsync(
        [JsonContent] Im.DeleteImV2AppFeedCardBatchBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【消息与群组】更新消息流卡片按钮</para>
    /// <para>接口ID：7302258202712506396</para>
    /// <para>接口文档：https://open.feishu.cn/document/im-v2/groups-bots/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>为群组消息、机器人消息的消息流卡片添加、更新、删除快捷操作按钮。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:app_feed_card:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/im/v2/chat_button")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PutImV2ChatButtonResponseDto>> PutImV2ChatButtonAsync(
        [JsonContent] Im.PutImV2ChatButtonBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【消息与群组】创建应用消息流卡片</para>
    /// <para>接口ID：7302258202712522780</para>
    /// <para>接口文档：https://open.feishu.cn/document/im-v2/app_feed_card/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>应用消息流卡片是飞书为应用提供的消息触达能力，让应用可以直接在消息流发送消息，重要消息能更快触达用户。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:app_feed_card:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/im/v2/app_feed_card")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PostImV2AppFeedCardResponseDto>> PostImV2AppFeedCardAsync(
        [JsonContent] Im.PostImV2AppFeedCardBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】创建三方协议</para>
    /// <para>接口ID：7307160083569623043</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/candidate-management/delivery-process-management/tripartite_agreement/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>在校招投递上创建三方协议。</para>
    /// <para>## 前提条件</para>
    /// <para>- 在「飞书招聘」-「设置」-「候选人流程管理」-「三方协议设置」中勾选了「通过 API 维护三方协议」。</para>
    /// <para>- 该投递为校招投递。</para>
    /// <para>- 该投递的 Offer 办公地点在中国大陆。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:tripartite_agreement</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/tripartite_agreements")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1TripartiteAgreementsResponseDto>> PostHireV1TripartiteAgreementsAsync(
        [JsonContent] Hire.PostHireV1TripartiteAgreementsBodyDto dto);

    /// <summary>
    /// <para>【招聘】删除三方协议</para>
    /// <para>接口ID：7307160083569639427</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/candidate-management/delivery-process-management/tripartite_agreement/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除投递的三方协议。</para>
    /// <para>## 前提条件</para>
    /// <para>在「飞书招聘」-「设置」-「候选人流程管理」-「三方协议设置」中勾选了「通过 API 维护三方协议」。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:tripartite_agreement</item>
    /// </list></para>
    /// </summary>
    /// <param name="tripartite_agreement_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>三方协议 ID，由[创建三方协议](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/tripartite_agreement/create)接口返回或通过[获取三方协议](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/tripartite_agreement/list)获取</para>
    /// <para>示例值：6930815272790114324</para>
    /// </param>
    [HttpDelete("/open-apis/hire/v1/tripartite_agreements/{tripartite_agreement_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteHireV1TripartiteAgreementsByTripartiteAgreementIdAsync(
        [PathQuery] string tripartite_agreement_id);

    /// <summary>
    /// <para>【招聘】查询猎头保护期信息</para>
    /// <para>接口ID：7307160083569655811</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/get-candidates/agency/protect_search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询指定人才的猎头保护期信息列表，包含保护期起止时间、猎头供应商、猎头顾问信息等。若人才已经入职，还会返回入职时所在的保护期信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:agency</item>
    /// <item>hire:agency:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/agencies/protection_period/search")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1AgenciesProtectionPeriodSearchResponseDto>> PostHireV1AgenciesProtectionPeriodSearchAsync(
        [JsonContent] Hire.PostHireV1AgenciesProtectionPeriodSearchBodyDto dto);

    /// <summary>
    /// <para>【招聘】获取三方协议</para>
    /// <para>接口ID：7307160083569672195</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/candidate-management/delivery-process-management/tripartite_agreement/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据三方协议 ID 或投递 ID 获取三方协议信息，如三方协议状态、创建时间等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:tripartite_agreement</item>
    /// <item>hire:tripartite_agreement:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="application_id">
    /// <para>必填：否</para>
    /// <para>投递 ID，可通过[获取投递列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/list)接口获取</para>
    /// <para>示例值：6930815272790114324</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="tripartite_agreement_id">
    /// <para>必填：否</para>
    /// <para>三方协议 ID，由[创建三方协议](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/tripartite_agreement/create)接口返回</para>
    /// <para>示例值：6930815272790114325</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/tripartite_agreements")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1TripartiteAgreementsResponseDto>> GetHireV1TripartiteAgreementsAsync(
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? application_id = null,
        [PathQuery] string? tripartite_agreement_id = null);

    /// <summary>
    /// <para>【招聘】更新三方协议</para>
    /// <para>接口ID：7307160083569688579</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/candidate-management/delivery-process-management/tripartite_agreement/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新三方协议的状态及修改时间信息。</para>
    /// <para>## 前提条件</para>
    /// <para>在「飞书招聘」-「设置」-「候选人流程管理」-「三方协议设置」中勾选了「通过 API 维护三方协议」。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:tripartite_agreement</item>
    /// </list></para>
    /// </summary>
    /// <param name="tripartite_agreement_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>三方协议 ID，可通过[获取三方协议](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/tripartite_agreement/list)获取</para>
    /// <para>示例值：7084008015948283905</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/hire/v1/tripartite_agreements/{tripartite_agreement_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PutHireV1TripartiteAgreementsByTripartiteAgreementIdAsync(
        [PathQuery] string tripartite_agreement_id,
        [JsonContent] Hire.PutHireV1TripartiteAgreementsByTripartiteAgreementIdBodyDto dto);

    /// <summary>
    /// <para>【招聘】查询人才内推信息</para>
    /// <para>接口ID：7307160083569704963</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/get-candidates/referral/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据人才查询内推信息列表，包含内推人信息、内推时间、投递 ID等，按内推投递的`创建时间`从小到大排序返回。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:referral</item>
    /// <item>hire:referral:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/referrals/search")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1ReferralsSearchResponseDto>> PostHireV1ReferralsSearchAsync(
        [JsonContent] Hire.PostHireV1ReferralsSearchBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事】更新公司</para>
    /// <para>接口ID：7309323790810824705</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/company/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新公司信息，包括基本信息、注册地址、办公地址等</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// </list></para>
    /// </summary>
    /// <param name="company_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要更新的公司 ID。ID获取方式：</para>
    /// <para>- 调用[【创建公司】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/create)[【批量查询公司】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/list)等接口可以返回部门ID</para>
    /// <para>示例值：6863333352603125255</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：fe599b60-450f-46ff-b2ef-9f6675625b97</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/corehr/v1/companies/{company_id}")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PatchCorehrV1CompaniesByCompanyIdResponseDto>> PatchCorehrV1CompaniesByCompanyIdAsync(
        [PathQuery] string company_id,
        [JsonContent] FeishuPeople.PatchCorehrV1CompaniesByCompanyIdBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【多维表格】查询记录</para>
    /// <para>接口ID：7312729248342360068</para>
    /// <para>接口文档：https://open.feishu.cn/document/docs/bitable-v1/app-table-record/search</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于查询数据表中的现有记录，单次最多查询 500 行记录，支持分页获取。</para>
    /// <para>## 注意事项</para>
    /// <para>若多维表格开启了高级权限，你需确保调用身份拥有多维表格的可管理权限，否则可能出现调用成功但返回数据为空的情况。了解具体步骤，参考[如何为应用或用户开通文档权限](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#16c6475a)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:record:retrieve</item>
    /// <item>bitable:app</item>
    /// <item>bitable:app:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:user.base:readonly</item>
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 app_token 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 app_token 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 obj_type 的值为 bitable 时，obj_token 字段的值才是多维表格的 app_token。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：NQRxbRkBMa6OnZsjtERcxhNWnNh</para>
    /// </param>
    /// <param name="table_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格数据表的唯一标识。获取方式：</para>
    /// <para>- 你可通过多维表格 URL 获取 `table_id`，下图高亮部分即为当前数据表的 `table_id`</para>
    /// <para>- 也可通过[列出数据表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list)接口获取 `table_id`</para>
    /// <para>![](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/18741fe2a0d3cafafaf9949b263bb57d_yD1wkOrSju.png?height=746&amp;lazyload=true&amp;maxWidth=700&amp;width=2976)</para>
    /// <para>示例值：tbl0xe5g8PP3U3cS</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小。最大值为 500</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/bitable/v1/apps/{app_token}/tables/{table_id}/records/search")]
    System.Threading.Tasks.Task<FeishuResponse<Base.PostBitableV1AppsByAppTokenTablesByTableIdRecordsSearchResponseDto>> PostBitableV1AppsByAppTokenTablesByTableIdRecordsSearchAsync(
        [PathQuery] string app_token,
        [PathQuery] string table_id,
        [JsonContent] Base.PostBitableV1AppsByAppTokenTablesByTableIdRecordsSearchBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【薪酬管理】批量查询定调薪原因</para>
    /// <para>接口ID：7314129756769730564</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/basic-compensation/compensation-setting-and-adjustment/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量查询定调薪原因</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:compensation_change_reason:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：100</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：12314342</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/compensation/v1/change_reasons")]
    System.Threading.Tasks.Task<FeishuResponse<CompensationManagement.GetCompensationV1ChangeReasonsResponseDto>> GetCompensationV1ChangeReasonsAsync(
        [PathQuery] int page_size = 100,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【薪酬管理】批量查询员工薪资档案</para>
    /// <para>接口ID：7314129756769746948</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/basic-compensation/archive/query</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>批量查询员工薪资档案</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:compensation_archive_detail:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:compensation_archive_detail.change_description:read</item>
    /// <item>corehr:compensation_archive_detail.indicators:read</item>
    /// <item>corehr:compensation_archive_detail.items:read</item>
    /// <item>corehr:compensation_archive_detail.plan:read</item>
    /// <item>corehr:compensation_archive_detail.salary_level:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：100</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：231432433</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：是</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以people_corehr_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/compensation/v1/archives/query")]
    System.Threading.Tasks.Task<FeishuResponse<CompensationManagement.PostCompensationV1ArchivesQueryResponseDto>> PostCompensationV1ArchivesQueryAsync(
        [JsonContent] CompensationManagement.PostCompensationV1ArchivesQueryBodyDto dto,
        [PathQuery] int page_size = 100,
        [PathQuery] string? page_token = null,
        [PathQuery] string user_id_type = "open_id");

    /// <summary>
    /// <para>【薪酬管理】批量获取薪资项分类信息</para>
    /// <para>接口ID：7314129756769763332</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/basic-compensation/compensation-component-and-metric/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量获取薪资项分类信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:compensation_item_category:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：100</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：231412341234</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/compensation/v1/item_categories")]
    System.Threading.Tasks.Task<FeishuResponse<CompensationManagement.GetCompensationV1ItemCategoriesResponseDto>> GetCompensationV1ItemCategoriesAsync(
        [PathQuery] int? page_size = 100,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【薪酬管理】批量查询薪资项</para>
    /// <para>接口ID：7314129756769779716</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/basic-compensation/compensation-component-and-metric/list-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量查询薪资项</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:compensation_item:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：100</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：5234233214</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/compensation/v1/items")]
    System.Threading.Tasks.Task<FeishuResponse<CompensationManagement.GetCompensationV1ItemsResponseDto>> GetCompensationV1ItemsAsync(
        [PathQuery] int page_size = 100,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【薪酬管理】批量查询薪资统计指标</para>
    /// <para>接口ID：7314129756769796100</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/basic-compensation/compensation-component-and-metric/list-3</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量查询薪资统计指标</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:compensation_indicator:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：100</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：123423321</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/compensation/v1/indicators")]
    System.Threading.Tasks.Task<FeishuResponse<CompensationManagement.GetCompensationV1IndicatorsResponseDto>> GetCompensationV1IndicatorsAsync(
        [PathQuery] int page_size = 100,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【薪酬管理】批量查询薪资方案</para>
    /// <para>接口ID：7314129756769812484</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/basic-compensation/plan/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>- 此接口将返回全部薪资方案信息，包括薪资方案 ID、生效日期、薪资项/薪资统计指标等</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:compensation_plan:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>corehr:compensation_plan_detail.indicators:read</item>
    /// <item>corehr:compensation_plan_detail.items:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：100</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：213432123</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/compensation/v1/plans")]
    System.Threading.Tasks.Task<FeishuResponse<CompensationManagement.GetCompensationV1PlansResponseDto>> GetCompensationV1PlansAsync(
        [PathQuery] int page_size = 100,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询编制规划方案</para>
    /// <para>接口ID：7314710843818508289</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/workforce_plan/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据传入的筛选项获取编制规划的方案列表</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:workforce_plan:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="get_all_plan">
    /// <para>必填：否</para>
    /// <para>是否获取所有编制规划方案，默认为 false。</para>
    /// <para>- true 所有编制规划方案列表。</para>
    /// <para>- false 为仅获取当前生效的编制规划方案。</para>
    /// <para>示例值：false</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="active">
    /// <para>必填：否</para>
    /// <para>是否只获取已启用的方案，默认为 true。</para>
    /// <para>- true 获取已启用编制规划方案</para>
    /// <para>- false 获取所有编制规划方案</para>
    /// <para>示例值：false</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v2/workforce_plans")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.GetCorehrV2WorkforcePlansResponseDto>> GetCorehrV2WorkforcePlansAsync(
        [PathQuery] bool? get_all_plan = null,
        [PathQuery] bool? active = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询编制规划明细信息（不支持自定义组织）</para>
    /// <para>接口ID：7314710843818524673</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/workforce_plan/batch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询编制规划明细，包括维度信息、编制数和预估在职人数</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:workforce_detail:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：["123456"]</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：100</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/workforce_plan_details/batch")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2WorkforcePlanDetailsBatchResponseDto>> PostCorehrV2WorkforcePlanDetailsBatchAsync(
        [JsonContent] Corehr.PostCorehrV2WorkforcePlanDetailsBatchBodyDto dto,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 100);

    /// <summary>
    /// <para>【消息与群组】解绑标签与群</para>
    /// <para>接口ID：7315032956271263748</para>
    /// <para>接口文档：https://open.feishu.cn/document/tenant-tag/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>从业务实体上解绑标签。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:biz_entity_tag_relation:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/im/v2/biz_entity_tag_relation")]
    System.Threading.Tasks.Task<FeishuResponse> PutImV2BizEntityTagRelationAsync(
        [JsonContent] Im.PutImV2BizEntityTagRelationBodyDto dto);

    /// <summary>
    /// <para>【消息与群组】创建标签</para>
    /// <para>接口ID：7315032956271280132</para>
    /// <para>接口文档：https://open.feishu.cn/document/tenant-tag/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建标签并返回标签 ID。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:tag:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/im/v2/tags")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PostImV2TagsResponseDto>> PostImV2TagsAsync(
        [JsonContent] Im.PostImV2TagsBodyDto dto);

    /// <summary>
    /// <para>【消息与群组】修改标签</para>
    /// <para>接口ID：7315032956271296516</para>
    /// <para>接口文档：https://open.feishu.cn/document/tenant-tag/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>修改标签在各个语言下的名称。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:tag:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="tag_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>标签 ID</para>
    /// <para>示例值：716168xxxxx</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/im/v2/tags/{tag_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PatchImV2TagsByTagIdResponseDto>> PatchImV2TagsByTagIdAsync(
        [PathQuery] string tag_id,
        [JsonContent] Im.PatchImV2TagsByTagIdBodyDto dto);

    /// <summary>
    /// <para>【消息与群组】绑定标签到群</para>
    /// <para>接口ID：7315032956271329284</para>
    /// <para>接口文档：https://open.feishu.cn/document/tenant-tag/create-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>绑定标签到业务实体。目前支持给会话打标签。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:biz_entity_tag_relation:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/im/v2/biz_entity_tag_relation")]
    System.Threading.Tasks.Task<FeishuResponse> PostImV2BizEntityTagRelationAsync(
        [JsonContent] Im.PostImV2BizEntityTagRelationBodyDto dto);

    /// <summary>
    /// <para>【日历】回复日程</para>
    /// <para>接口ID：7317471576948834305</para>
    /// <para>接口文档：https://open.feishu.cn/document/calendar-v4/calendar-event/reply</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口以当前身份（应用或用户）回复日程。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar.event:reply</item>
    /// <item>calendar:calendar.event:writeonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="calendar_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日程所在的日历 ID。了解更多，参见[日历 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)。</para>
    /// <para>示例值：feishu.cn_HF9U2MbibE8PPpjro6xjqa@group.calendar.feishu.cn</para>
    /// </param>
    /// <param name="event_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日程 ID。</para>
    /// <para>创建日程时会返回日程 ID。你也可以调用以下接口获取某一日历的 ID。</para>
    /// <para>- [获取日程列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/list)</para>
    /// <para>- [搜索日程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/search)</para>
    /// <para>示例值：75d28f9b-e35c-4230-8a83-4a661497db54_0</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/calendar/v4/calendars/{calendar_id}/events/{event_id}/reply")]
    System.Threading.Tasks.Task<FeishuResponse> PostCalendarV4CalendarsByCalendarIdEventsByEventIdReplyAsync(
        [PathQuery] string calendar_id,
        [PathQuery] string event_id,
        [JsonContent] Calendar.PostCalendarV4CalendarsByCalendarIdEventsByEventIdReplyBodyDto dto);

    /// <summary>
    /// <para>【日历】获取重复日程实例</para>
    /// <para>接口ID：7317471576948850689</para>
    /// <para>接口文档：https://open.feishu.cn/document/calendar-v4/calendar-event/instances</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口以当前身份（应用或用户）获取指定日历中的某一重复日程信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar:readonly</item>
    /// <item>calendar:calendar.event:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="calendar_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日历 ID。关于日历 ID 可参见[日历 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)。</para>
    /// <para>示例值：feishu.cn_HF9U2MbibE8PPpjro6xjqa@group.calendar.feishu.cn</para>
    /// </param>
    /// <param name="event_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日程 ID。</para>
    /// <para>创建日程时会返回日程 ID。你也可以调用以下接口获取某一日历的 ID。</para>
    /// <para>- [获取日程列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/list)</para>
    /// <para>- [搜索日程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/search)</para>
    /// <para>示例值：75d28f9b-e35c-4230-8a83-4a661497db54_0</para>
    /// </param>
    /// <param name="start_time">
    /// <para>必填：是</para>
    /// <para>开始时间，Unix 时间戳，单位为秒。该参数与 end_time 用于设置时间范围，即重复日程的查询区间为 （start_time, end_time）</para>
    /// <para>**注意**：start_time 与 end_time 之间的时间区间不能超过 2年。</para>
    /// <para>示例值：1631777271</para>
    /// </param>
    /// <param name="end_time">
    /// <para>必填：是</para>
    /// <para>结束时间，Unix 时间戳，单位为秒。该参数与 start_time 用于设置时间范围，即重复日程的查询区间为 （start_time, end_time）</para>
    /// <para>**注意**：start_time 与 end_time 之间的时间区间不能超过 2年。</para>
    /// <para>示例值：1631777271</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>一次调用返回的日程数量上限。</para>
    /// <para>示例值：10</para>
    /// <para>默认值：50</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/calendar/v4/calendars/{calendar_id}/events/{event_id}/instances")]
    System.Threading.Tasks.Task<FeishuResponse<Calendar.GetCalendarV4CalendarsByCalendarIdEventsByEventIdInstancesResponseDto>> GetCalendarV4CalendarsByCalendarIdEventsByEventIdInstancesAsync(
        [PathQuery] string calendar_id,
        [PathQuery] string event_id,
        [PathQuery] string start_time,
        [PathQuery] string end_time,
        [PathQuery] int? page_size = 50,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】根据流程 ID 查询组织架构调整记录</para>
    /// <para>接口ID：7317581509003755524</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/approval_groups/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>用户通过『飞书人事-我的团队-组织架构』 发起一个组织架构调整会根据 审批流配置发起 一个或多个审批。 之后用户可通过流程 process 的单据 ID， 查询到该审批进行的状态， 以及该流程中涉及到的 组织架构信息（包括部门变更、人员变更记录 ID、岗位变更记录 ID）。</para>
    /// <para>如需查询具体变更详情：</para>
    /// <para>- 部门变更：[批量查询部门变更接口](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/approval_groups/open_query_department_change_list_by_ids)</para>
    /// <para>- 员工变更：[批量查询员工变更接口](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/approval_groups/open_query_job_change_list_by_ids)</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:approval_groups:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="process_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>组织架构调整流程 ID， 用户通过『飞书人事-我的团队-组织架构』或『飞书 人事-人员管理-组织架构』 发起一个组织架构调整，并提交审批后，系统会根据管理员在审批流程中配置的规则，生成 一个或多个审批单据。</para>
    /// <para>示例值：6893014062142064111</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v2/approval_groups/{process_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.GetCorehrV2ApprovalGroupsByProcessIdResponseDto>> GetCorehrV2ApprovalGroupsByProcessIdAsync(
        [PathQuery] string process_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】批量查询部门调整内容</para>
    /// <para>接口ID：7317581509003771908</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/approval_groups/open_query_department_change_list_by_ids</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据部门调整记录 ID 批量查询部门调整内容</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:approval_groups.orgdraft_department_change:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:orgrole_info:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="process_id">
    /// <para>必填：是</para>
    /// <para>组织架构调整流程 ID， 用户通过『飞书人事-我的团队-组织架构』或『飞书 人事-人员管理-组织架构』 发起一个组织架构调整，并提交审批后，系统会根据管理员在审批流程中配置的规则，生成 一个或多个审批单据。</para>
    /// <para>示例值：6893014062142064111</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/approval_groups/open_query_department_change_list_by_ids")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2ApprovalGroupsOpenQueryDepartmentChangeListByIdsResponseDto>> PostCorehrV2ApprovalGroupsOpenQueryDepartmentChangeListByIdsAsync(
        [PathQuery] string process_id,
        [JsonContent] Corehr.PostCorehrV2ApprovalGroupsOpenQueryDepartmentChangeListByIdsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】批量查询人员调整内容</para>
    /// <para>接口ID：7317581509003788292</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/approval_groups/open_query_job_change_list_by_ids</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据人员异动记录 ID 批量查询人员调整内容</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:approval_groups.orgdraft_job_change:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:employment.job_grade:read</item>
    /// <item>corehr:employment.job_grade:write</item>
    /// <item>corehr:employment.job_level:read</item>
    /// <item>corehr:employment.job_level:write</item>
    /// <item>corehr:employment.job:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="process_id">
    /// <para>必填：是</para>
    /// <para>组织架构调整流程 ID， 用户通过『飞书人事-我的团队-组织架构』或『飞书 人事-人员管理-组织架构』 发起一个组织架构调整，并提交审批后，系统会根据管理员在审批流程中配置的规则，生成 一个或多个审批单据。</para>
    /// <para>示例值：6991776076699549697</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/approval_groups/open_query_job_change_list_by_ids")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2ApprovalGroupsOpenQueryJobChangeListByIdsResponseDto>> PostCorehrV2ApprovalGroupsOpenQueryJobChangeListByIdsAsync(
        [PathQuery] string process_id,
        [JsonContent] Corehr.PostCorehrV2ApprovalGroupsOpenQueryJobChangeListByIdsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【Payroll】查询成本分摊报表汇总数据</para>
    /// <para>接口ID：7319164056023253020</para>
    /// <para>接口文档：https://open.feishu.cn/document/payroll-v1/cost_allocation_report/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据算薪期间和成本分摊方案id获取成本分摊汇总数据。调用接口前，需在payroll 系统中打开「财务过账」开关，并且完成发布成本分摊报表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>payroll:cost_allocation_report:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：50</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6823630319749592415</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="cost_allocation_plan_id">
    /// <para>必填：是</para>
    /// <para>成本分摊方案ID，通过[批量查询成本分摊方案](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/payroll-v1/cost_allocation_plan/list)获取</para>
    /// <para>示例值：6823630319749580304</para>
    /// </param>
    /// <param name="pay_period">
    /// <para>必填：是</para>
    /// <para>期间，成本分摊数据对应的年月，格式 为yyyy-MM</para>
    /// <para>示例值：2023-11</para>
    /// </param>
    /// <param name="report_type">
    /// <para>必填：是</para>
    /// <para>报表类型</para>
    /// <para>示例值：1</para>
    /// <list type="bullet">
    /// <item>0：默认，表示没有开通计提和实发功能时的报表类型，开通计提和实发之后，该类型报表将无法发布。</item>
    /// <item>1：计提</item>
    /// <item>2：实发</item>
    /// </list>
    /// </param>
    [HttpGet("/open-apis/payroll/v1/cost_allocation_reports")]
    System.Threading.Tasks.Task<FeishuResponse<Payroll.GetPayrollV1CostAllocationReportsResponseDto>> GetPayrollV1CostAllocationReportsAsync(
        [PathQuery] string cost_allocation_plan_id,
        [PathQuery] string pay_period,
        [PathQuery] int report_type,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【Payroll】批量查询成本分摊方案</para>
    /// <para>接口ID：7319164056023269404</para>
    /// <para>接口文档：https://open.feishu.cn/document/payroll-v1/cost_allocation_plan/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据期间分页批量查询成本分摊方案，仅返回期间内生效的方案列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>payroll:cost_allocation_plan:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：50</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6823630319749592024</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="pay_period">
    /// <para>必填：是</para>
    /// <para>期间，生成成本分摊报表对应的年月。格式为 yyyy-MM</para>
    /// <para>示例值：2023-11</para>
    /// </param>
    [HttpGet("/open-apis/payroll/v1/cost_allocation_plans")]
    System.Threading.Tasks.Task<FeishuResponse<Payroll.GetPayrollV1CostAllocationPlansResponseDto>> GetPayrollV1CostAllocationPlansAsync(
        [PathQuery] string pay_period,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【AI 能力】识别文件中的机动车发票</para>
    /// <para>接口ID：7319756481343750148</para>
    /// <para>接口文档：https://open.feishu.cn/document/ai/document_ai-v1/vehicle_invoice/recognize</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>机动车发票识别接口，支持JPG/JPEG/PNG/BMP四种文件类型的一次性的识别。文件大小需要小于10M。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>document_ai:vehicle_invoice:recognize</item>
    /// </list></para>
    /// </summary>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>识别的机动车发票源文件</para>
    /// </param>
    [HttpPost("/open-apis/document_ai/v1/vehicle_invoice/recognize")]
    System.Threading.Tasks.Task<FeishuResponse<Ai.PostDocumentAiV1VehicleInvoiceRecognizeResponseDto>> PostDocumentAiV1VehicleInvoiceRecognizeAsync(
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【AI 能力】识别文件中的健康证</para>
    /// <para>接口ID：7319756481343766532</para>
    /// <para>接口文档：https://open.feishu.cn/document/ai/document_ai-v1/health_certificate/recognize</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>健康证识别接口，支持JPG/JPEG/PNG/BMP四种文件类型的一次性的识别。文件大小需要小于10M。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>document_ai:health_certificate:recognize</item>
    /// </list></para>
    /// </summary>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>识别的健康证源文件</para>
    /// </param>
    [HttpPost("/open-apis/document_ai/v1/health_certificate/recognize")]
    System.Threading.Tasks.Task<FeishuResponse<Ai.PostDocumentAiV1HealthCertificateRecognizeResponseDto>> PostDocumentAiV1HealthCertificateRecognizeAsync(
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【应用信息】更新应用协作者</para>
    /// <para>接口ID：7320160200451686403</para>
    /// <para>接口文档：https://open.feishu.cn/document/application-v6/application/update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>某个应用（包括自建应用和商店应用）中添加/移除应用协作者，添加后协作者将会收到添加通知。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>application:application.collaborators:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用 ID，获取方式参见 [app_id](https://open.feishu.cn/document/ukTMukTMukTM/uYTM5UjL2ETO14iNxkTN/terminology#b047be0c)。</para>
    /// <para>示例值：cli_a5002df1b6f8d01c</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/application/v6/applications/{app_id}/collaborators")]
    System.Threading.Tasks.Task<FeishuResponse> PutApplicationV6ApplicationsByAppIdCollaboratorsAsync(
        [PathQuery] string app_id,
        [JsonContent] Application.PutApplicationV6ApplicationsByAppIdCollaboratorsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【应用信息】获取应用协作者列表</para>
    /// <para>接口ID：7320225176225087491</para>
    /// <para>接口文档：https://open.feishu.cn/document/application-v6/application/get-3</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据 app_id 获取应用（包括自建应用和商店应用）的协作者信息，包括应用的所有者、管理员、开发者、运营人员</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:app.info:readonly</item>
    /// <item>application:application:self_manage</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用 ID，获取方式参见 [app_id](https://open.feishu.cn/document/ukTMukTMukTM/uYTM5UjL2ETO14iNxkTN/terminology#b047be0c)。</para>
    /// <para>示例值：cli_a5002df1b6f8d01c</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/application/v6/applications/{app_id}/collaborators")]
    System.Threading.Tasks.Task<FeishuResponse<Application.GetApplicationV6ApplicationsByAppIdCollaboratorsResponseDto>> GetApplicationV6ApplicationsByAppIdCollaboratorsAsync(
        [PathQuery] string app_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【应用信息】转移应用所有者</para>
    /// <para>接口ID：7320225176225185795</para>
    /// <para>接口文档：https://open.feishu.cn/document/application-v6/application/update-2</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>将某个自建应用的所有者转移给另外一个人。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>application:application.collaborators:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用 ID，获取方式参见 [app_id](https://open.feishu.cn/document/ukTMukTMukTM/uYTM5UjL2ETO14iNxkTN/terminology#b047be0c)。</para>
    /// <para>示例值：cli_a306c5476fb8d00c</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/application/v6/applications/{app_id}/owner")]
    System.Threading.Tasks.Task<FeishuResponse> PutApplicationV6ApplicationsByAppIdOwnerAsync(
        [PathQuery] string app_id,
        [JsonContent] Application.PutApplicationV6ApplicationsByAppIdOwnerBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【消息与群组】转发话题</para>
    /// <para>接口ID：7322036039857700865</para>
    /// <para>接口文档：https://open.feishu.cn/document/im-v1/message/forward-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口将话题转发至指定的用户、群聊或话题。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 调用接口的机器人必须在待转发话题所在的群中，且可见该话题。</para>
    /// <para>- 向用户转发话题时，用户需要在机器人的[可用范围](https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/availability)内。</para>
    /// <para>- 向群组中转发话题，需要机器人在该群组中，且拥有发言权限。</para>
    /// <para>## 使用限制</para>
    /// <para>- 为避免消息发送频繁对用户造成打扰，向同一用户发送消息的限频为 ==5 QPS==、向同一群组发送消息的限频为群内机器人共享 ==5 QPS==。</para>
    /// <para>- 转发话题生成的新消息的消息内容为固定值==Merged and Forwarded Message==，其中的子消息可以使用[获取指定消息的内容](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/get)接口获取。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message</item>
    /// <item>im:message:send_as_bot</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="thread_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要转发的话题ID，获取方式参见[话题概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/thread-introduction)的 **如何获取 thread_id** 章节。</para>
    /// <para>示例值：omt_dc132645203</para>
    /// </param>
    /// <param name="receive_id_type">
    /// <para>必填：是</para>
    /// <para>消息接收者 ID 类型。</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>email：以用户的真实邮箱来标识用户。</item>
    /// <item>chat_id：以群 ID 来标识群聊。[了解更多：如何获取群 ID ](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)。</item>
    /// <item>thread_id：以话题 ID 来标识话题。了解更多：[话题介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/thread-introduction) &lt;/md-enum-item&gt; **当值为 `user_id`，字段权限要求**： &lt;md-perm name="contact:user.employee_id:readonly" desc="获取用户 user ID" support_app_types="custom" tags=""&gt;获取用户 user ID&lt;/md-perm&gt;</item>
    /// </list>
    /// </param>
    /// <param name="uuid">
    /// <para>必填：否</para>
    /// <para>自定义设置的唯一字符串序列，用于在转发话题时请求去重。持有相同 uuid 的请求，在 1 小时内向同一目标的转发只可成功一次。</para>
    /// <para>示例值：b13g2t38-1jd2-458b-8djf-dtbca5104204</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/im/v1/threads/{thread_id}/forward")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PostImV1ThreadsByThreadIdForwardResponseDto>> PostImV1ThreadsByThreadIdForwardAsync(
        [PathQuery] string thread_id,
        [PathQuery] string receive_id_type,
        [JsonContent] Im.PostImV1ThreadsByThreadIdForwardBodyDto dto,
        [PathQuery] string? uuid = null);

    /// <summary>
    /// <para>【日历】查询日程视图</para>
    /// <para>接口ID：7322810271218647043</para>
    /// <para>接口文档：https://open.feishu.cn/document/calendar-v4/calendar-event/instance_view</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>调用该接口以用户身份查询指定日历下的日程视图。与[获取日程列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/list)不同的是，当前接口会按照重复日程的重复性规则展开成多个日程实例（instance），并根据查询的时间区间返回相应的日程实例信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>calendar:calendar</item>
    /// <item>calendar:calendar:readonly</item>
    /// <item>calendar:calendar.event:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="calendar_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>日历 ID。关于日历 ID 可参见[日历 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)。</para>
    /// <para>示例值：feishu.cn_HF9U2MbibE8PPpjro6xjqa@group.calendar.feishu.cn</para>
    /// </param>
    /// <param name="start_time">
    /// <para>必填：是</para>
    /// <para>开始时间，Unix 时间戳，单位为秒。该参数与 end_time 用于设置查询的时间范围。</para>
    /// <para>**注意**：start_time 与 end_time 之间的时间区间需要小于 40 天。</para>
    /// <para>示例值：1631777271</para>
    /// </param>
    /// <param name="end_time">
    /// <para>必填：是</para>
    /// <para>结束时间，Unix 时间戳，单位为秒。该参数与 start_time 用于设置查询的时间范围。</para>
    /// <para>**注意**：start_time 与 end_time 之间的时间区间需要小于 40 天。</para>
    /// <para>示例值：1631777271</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/calendar/v4/calendars/{calendar_id}/events/instance_view")]
    System.Threading.Tasks.Task<FeishuResponse<Calendar.GetCalendarV4CalendarsByCalendarIdEventsInstanceViewResponseDto>> GetCalendarV4CalendarsByCalendarIdEventsInstanceViewAsync(
        [PathQuery] string calendar_id,
        [PathQuery] string start_time,
        [PathQuery] string end_time,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】创建嵌套块</para>
    /// <para>接口ID：7324523155900366876</para>
    /// <para>接口文档：https://open.feishu.cn/document/docs/docs/document-block/create-2</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docx:document</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="document_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>文档的唯一标识</para>
    /// <para>示例值：Ew13dgs8BoZSetxd0CNbr0h3c8e</para>
    /// </param>
    /// <param name="block_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>Block 的唯一标识</para>
    /// <para>示例值：Ew13dgs8BoZSetxd0CNbr0h3c8e</para>
    /// </param>
    /// <param name="document_revision_id">
    /// <para>必填：否</para>
    /// <para>操作的文档版本，-1 表示文档最新版本。若此时操作的版本为文档最新版本，则需要持有文档的阅读权限；若此时操作的版本为文档的历史版本，则需要持有文档的编辑权限</para>
    /// <para>示例值：-1</para>
    /// <para>默认值：-1</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>操作的唯一标识，与接口返回值的 client_token 相对应，用于幂等的进行更新操作。此值为空表示将发起一次新的请求，此值非空表示幂等的进行更新操作</para>
    /// <para>示例值：8aac2291-bc9e-4b12-a162-b3cf15bb06bd</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/docx/v1/documents/{document_id}/blocks/{block_id}/descendant")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostDocxV1DocumentsByDocumentIdBlocksByBlockIdDescendantResponseDto>> PostDocxV1DocumentsByDocumentIdBlocksByBlockIdDescendantAsync(
        [PathQuery] string document_id,
        [PathQuery] string block_id,
        [JsonContent] Ccm.PostDocxV1DocumentsByDocumentIdBlocksByBlockIdDescendantBodyDto dto,
        [PathQuery] int? document_revision_id = -1,
        [PathQuery] string? client_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】导入外部内推奖励</para>
    /// <para>接口ID：7325271522314584065</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/get-candidates/import-external-system-information/import-external-referral-reward-info/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>支持将外部的内推奖励（积分/现金）导入到招聘的「内推账号」中</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:external_referral_reward</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/external_referral_rewards")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1ExternalReferralRewardsResponseDto>> PostHireV1ExternalReferralRewardsAsync(
        [JsonContent] Hire.PostHireV1ExternalReferralRewardsBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【应用信息】启停用应用</para>
    /// <para>接口ID：7327327802326958081</para>
    /// <para>接口文档：https://open.feishu.cn/document/application-v6/admin/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>可停用或启用企业内已安装的自建应用与商店应用。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:app.enable:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用ID</para>
    /// <para>示例值：cli_a4517c8461f8100a</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/application/v6/applications/{app_id}/management")]
    System.Threading.Tasks.Task<FeishuResponse> PutApplicationV6ApplicationsByAppIdManagementAsync(
        [PathQuery] string app_id,
        [JsonContent] Application.PutApplicationV6ApplicationsByAppIdManagementBodyDto dto);

    /// <summary>
    /// <para>【画板】获取所有节点</para>
    /// <para>接口ID：7338460461824360449</para>
    /// <para>接口文档：https://open.feishu.cn/document/docs/board-v1/whiteboard-node/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取画板内所有的节点</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>board:whiteboard:node:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="whiteboard_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>画板唯一标识</para>
    /// <para>示例值：Ru8nwrWFOhEmaFbEU2VbPRsHcxb</para>
    /// </param>
    [HttpGet("/open-apis/board/v1/whiteboards/{whiteboard_id}/nodes")]
    System.Threading.Tasks.Task<FeishuResponse<Board.GetBoardV1WhiteboardsByWhiteboardIdNodesResponseDto>> GetBoardV1WhiteboardsByWhiteboardIdNodesAsync(
        [PathQuery] string whiteboard_id);

    /// <summary>
    /// <para>【飞书人事】ID 转换</para>
    /// <para>接口ID：7338765273649348612</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/common_data-id/convert</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用来进行飞书人事和飞书通讯录、people admin 的各种 ID 转换（仅适用于飞书人事新链路租户）</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.id.convert:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="id_transform_type">
    /// <para>必填：是</para>
    /// <para>ID 转换类型</para>
    /// <para>示例值：1</para>
    /// <list type="bullet">
    /// <item>1：飞书人事 -&gt; 飞书通讯录</item>
    /// <item>2：飞书通讯录 -&gt; 飞书人事</item>
    /// <item>3：people admin -&gt; 飞书通讯录</item>
    /// <item>4：people admin -&gt; 飞书人事</item>
    /// </list>
    /// </param>
    /// <param name="id_type">
    /// <para>必填：是</para>
    /// <para>要转换的ID类型</para>
    /// <para>示例值：user_id</para>
    /// <list type="bullet">
    /// <item>user_id：员工ID，当选择 user_id 且 id_transform_type 为 1、2、4 时，feishu_user_id_type 必填</item>
    /// <item>department_id：部门ID，当选择 department_id 且 id_transform_type 为 1、2、4 时，feishu_department_id_type 必填</item>
    /// <item>job_level_id：职级ID</item>
    /// <item>job_family_id：序列ID</item>
    /// <item>employee_type_id：人员类型ID，people admin 的人员类型ID 即为飞书通讯录人员类型的 enum_value，因此id_transform_type 为 3 时无须转换</item>
    /// </list>
    /// </param>
    /// <param name="feishu_user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="feishu_department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/common_data/id/convert")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1CommonDataIdConvertResponseDto>> PostCorehrV1CommonDataIdConvertAsync(
        [PathQuery] int id_transform_type,
        [PathQuery] string id_type,
        [JsonContent] FeishuPeople.PostCorehrV1CommonDataIdConvertBodyDto dto,
        [PathQuery] string? feishu_user_id_type = "open_id",
        [PathQuery] string? feishu_department_id_type = "open_department_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】通过/拒绝审批任务</para>
    /// <para>接口ID：7340625370520797187</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/process-form_variable_data/approver-task/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对于单个审批任务进行通过（提交）或拒绝操作。对于多人或签节点，一个审批任务通过则整个节点通过；对于多人会签节点，所有审批任务通过则节点通过。在通过（提交）时，若表单中有必填字段，支持写入表单字段。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:process.instance:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="process_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>流程实例id，是一个流程的唯一标识。</para>
    /// <para>可通过[查询流程实例列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/process/list)接口返回的 process_ids 字段获取</para>
    /// <para>示例值：7328345170959681068</para>
    /// </param>
    /// <param name="approver_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>标识流程中一个审批节点的一个审批人的审批任务。</para>
    /// <para>同一个审批节点如果有多个审批人，不同审批人的 approver_id 不同。</para>
    /// <para>可通过 [获取单个流程详情](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/process/get)接口获取流程中各审批任务的 approver_id。</para>
    /// <para>示例值：7381468648050787884</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/corehr/v2/processes/{process_id}/approvers/{approver_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PutCorehrV2ProcessesByProcessIdApproversByApproverIdResponseDto>> PutCorehrV2ProcessesByProcessIdApproversByApproverIdAsync(
        [PathQuery] string process_id,
        [PathQuery] string approver_id,
        [JsonContent] Corehr.PutCorehrV2ProcessesByProcessIdApproversByApproverIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【AI 能力】识别文件中的简历信息</para>
    /// <para>接口ID：7340987945434742812</para>
    /// <para>接口文档：https://open.feishu.cn/document/ai/document_ai-v1/resume/parse</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>简历信息解析接口，支持PDF/DOCX/PNG/JPG四种文件类型的一次性的识别。文件大小需要小于30M。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>document_ai:resume:recognize</item>
    /// </list></para>
    /// </summary>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>简历文件，支持 PDF / DOCX / PNG / JPG</para>
    /// </param>
    [HttpPost("/open-apis/document_ai/v1/resume/parse")]
    System.Threading.Tasks.Task<FeishuResponse<Ai.PostDocumentAiV1ResumeParseResponseDto>> PostDocumentAiV1ResumeParseAsync(
        [FormDataContent] FormDataFile file);

    /// <summary>
    /// <para>【飞书低代码平台】拒绝人工任务</para>
    /// <para>接口ID：7347562540447088641</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/flow/user-task/reject</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对于人工任务进行拒绝操作</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:approval:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="approval_task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>人工任务 ID</para>
    /// <para>示例值：1785996265147395</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/apaas/v1/approval_tasks/{approval_task_id}/reject")]
    System.Threading.Tasks.Task<FeishuResponse> PostApaasV1ApprovalTasksByApprovalTaskIdRejectAsync(
        [PathQuery] string approval_task_id,
        [JsonContent] AppEngine.PostApaasV1ApprovalTasksByApprovalTaskIdRejectBodyDto dto);

    /// <summary>
    /// <para>【飞书低代码平台】转交人工任务</para>
    /// <para>接口ID：7347562540447105025</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/flow/user-task/transfer</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对于人工任务进行转交操作</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:approval:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="approval_task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>人工任务 ID</para>
    /// <para>示例值：1785996265147395</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/apaas/v1/approval_tasks/{approval_task_id}/transfer")]
    System.Threading.Tasks.Task<FeishuResponse> PostApaasV1ApprovalTasksByApprovalTaskIdTransferAsync(
        [PathQuery] string approval_task_id,
        [JsonContent] AppEngine.PostApaasV1ApprovalTasksByApprovalTaskIdTransferBodyDto dto);

    /// <summary>
    /// <para>【飞书低代码平台】人工任务加签</para>
    /// <para>接口ID：7347562540447121409</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/flow/user-task/add_assignee</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对于人工任务进行加签操作</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:approval:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="approval_task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>人工任务 ID</para>
    /// <para>示例值：1785771068261436</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/apaas/v1/approval_tasks/{approval_task_id}/add_assignee")]
    System.Threading.Tasks.Task<FeishuResponse> PostApaasV1ApprovalTasksByApprovalTaskIdAddAssigneeAsync(
        [PathQuery] string approval_task_id,
        [JsonContent] AppEngine.PostApaasV1ApprovalTasksByApprovalTaskIdAddAssigneeBodyDto dto);

    /// <summary>
    /// <para>【飞书低代码平台】同意人工任务</para>
    /// <para>接口ID：7347562540447137793</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/flow/user-task/agree</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对于人工任务进行同意操作</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:approval:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="approval_task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>人工任务 ID</para>
    /// <para>示例值：1785996265147395</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/apaas/v1/approval_tasks/{approval_task_id}/agree")]
    System.Threading.Tasks.Task<FeishuResponse> PostApaasV1ApprovalTasksByApprovalTaskIdAgreeAsync(
        [PathQuery] string approval_task_id,
        [JsonContent] AppEngine.PostApaasV1ApprovalTasksByApprovalTaskIdAgreeBodyDto dto);

    /// <summary>
    /// <para>【消息与群组】机器人单聊即时提醒</para>
    /// <para>接口ID：7350335258430799873</para>
    /// <para>接口文档：https://open.feishu.cn/document/im-v2/groups-bots/bot_time_sentive</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>可将机器人对话在消息列表中置顶展示，打开飞书首页即可处理重要任务。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:datasync.feed_card.time_sensitive:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：是</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/im/v2/feed_cards/bot_time_sentive")]
    System.Threading.Tasks.Task<FeishuResponse<Im.PatchImV2FeedCardsBotTimeSentiveResponseDto>> PatchImV2FeedCardsBotTimeSentiveAsync(
        [JsonContent] Im.PatchImV2FeedCardsBotTimeSentiveBodyDto dto,
        [PathQuery] string user_id_type = "open_id");

    /// <summary>
    /// <para>【消息与群组】查询实体与标签的绑定关系</para>
    /// <para>接口ID：7350335258430816257</para>
    /// <para>接口文档：https://open.feishu.cn/document/tenant-tag/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询实体与标签的绑定关系</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:biz_entity_tag_relation:read</item>
    /// <item>im:tag:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="tag_biz_type">
    /// <para>必填：是</para>
    /// <para>业务类型</para>
    /// <para>示例值：chat</para>
    /// <list type="bullet">
    /// <item>chat：chat类型</item>
    /// </list>
    /// </param>
    /// <param name="biz_entity_id">
    /// <para>必填：是</para>
    /// <para>业务实体id</para>
    /// <para>示例值：71616xxxx</para>
    /// </param>
    [HttpGet("/open-apis/im/v2/biz_entity_tag_relation")]
    System.Threading.Tasks.Task<FeishuResponse<Im.GetImV2BizEntityTagRelationResponseDto>> GetImV2BizEntityTagRelationAsync(
        [PathQuery] string tag_biz_type,
        [PathQuery] string biz_entity_id);

    /// <summary>
    /// <para>【飞书人事（企业版）】添加人员</para>
    /// <para>接口ID：7350663854198161410</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/employee/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>支持在单个接口中进行人员全信息添加，包括人员的基本信息，雇佣信息，入职任职记录及其他分组信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:employee.add:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>操作的唯一标识，用于幂等的进行更新操作，格式为标准的 UUIDV4。此值为空表示将发起一次新的请求，此值非空表示幂等的进行更新操作。</para>
    /// <para>示例值：fe599b60-450f-46ff-b2ef-9f6675625b97</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="rehire">
    /// <para>必填：否</para>
    /// <para>是否为离职重聘</para>
    /// <para>- false：系统直接标为非离职重聘人员，不再做重复判断</para>
    /// <para>- true：要求 rehire_employment_id</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="rehire_employment_id">
    /// <para>必填：否</para>
    /// <para>离职重聘员工雇佣 ID</para>
    /// <para>可通过[【搜索员工信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/employee/search)接口获取</para>
    /// <para>示例值：7140964208476371111</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="force_submit">
    /// <para>必填：否</para>
    /// <para>是否强制提交</para>
    /// <para>- true：是，跳过超编等校验</para>
    /// <para>- false：否，被拦截报错</para>
    /// <para>示例值：false</para>
    /// <para>默认值：false</para>
    /// </param>
    /// <param name="ignore_working_hours_type_rule">
    /// <para>必填：否</para>
    /// <para>是否忽略工时制度自动生成规则</para>
    /// <para>- 值为 false 时，以下字段必填：</para>
    /// <para>- emp_contract_record.first_party</para>
    /// <para>- employment_record.work_location</para>
    /// <para>- employment_record.employee_type</para>
    /// <para>- employment_record.job_family</para>
    /// <para>- employment_record.job</para>
    /// <para>- employment_record.job_level</para>
    /// <para>- employment_record.department</para>
    /// <para>示例值：true</para>
    /// <para>默认值：false</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/employees")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2EmployeesResponseDto>> PostCorehrV2EmployeesAsync(
        [JsonContent] Corehr.PostCorehrV2EmployeesBodyDto dto,
        [PathQuery] string? client_token = null,
        [PathQuery] bool? rehire = null,
        [PathQuery] string? rehire_employment_id = null,
        [PathQuery] bool? force_submit = false,
        [PathQuery] bool? ignore_working_hours_type_rule = false);

    /// <summary>
    /// <para>【招聘】获取角色详情</para>
    /// <para>接口ID：7351241605105090564</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/recruitment-related-configuration/auth/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>可通过此接口获取角色详情信息，包括名称、描述、权限列表等</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:auth</item>
    /// <item>hire:auth:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="role_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>角色 ID，调用 [获取角色列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/role/list)获取。</para>
    /// <para>示例值：7350589232462807068</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/roles/{role_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1RolesByRoleIdResponseDto>> GetHireV1RolesByRoleIdAsync(
        [PathQuery] string role_id);

    /// <summary>
    /// <para>【绩效】获取项目列表</para>
    /// <para>接口ID：7351374599659765764</para>
    /// <para>接口文档：https://open.feishu.cn/document/performance-v1/review_config/semester_activity/activity/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量获取项目的配置信息，如项目名称、项目模式等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>performance:performance</item>
    /// <item>performance:performance:readonly</item>
    /// <item>performance:semester_activity:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/performance/v2/activity/query")]
    System.Threading.Tasks.Task<FeishuResponse<Performance.PostPerformanceV2ActivityQueryResponseDto>> PostPerformanceV2ActivityQueryAsync(
        [JsonContent] Performance.PostPerformanceV2ActivityQueryBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【绩效】获取评估模板配置</para>
    /// <para>接口ID：7351374599659782148</para>
    /// <para>接口文档：https://open.feishu.cn/document/performance-v1/review_config/review_template/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取评估模板配置信息，包括模版名称、执行角色、填写项类型等</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>performance:performance</item>
    /// <item>performance:performance:readonly</item>
    /// <item>performance:review_template:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：30</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/performance/v2/review_templates/query")]
    System.Threading.Tasks.Task<FeishuResponse<Performance.PostPerformanceV2ReviewTemplatesQueryResponseDto>> PostPerformanceV2ReviewTemplatesQueryAsync(
        [JsonContent] Performance.PostPerformanceV2ReviewTemplatesQueryBodyDto dto,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【绩效】获取评估项列表</para>
    /// <para>接口ID：7351374599659798532</para>
    /// <para>接口文档：https://open.feishu.cn/document/performance-v1/review_config/review_template/query-3</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量获取评估项信息，如评估项名称、评估项类型、评估项等级配置等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>performance:performance</item>
    /// <item>performance:performance:readonly</item>
    /// <item>performance:review_template:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：30</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/performance/v2/indicators/query")]
    System.Threading.Tasks.Task<FeishuResponse<Performance.PostPerformanceV2IndicatorsQueryResponseDto>> PostPerformanceV2IndicatorsQueryAsync(
        [JsonContent] Performance.PostPerformanceV2IndicatorsQueryBodyDto dto,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【绩效】获取标签填写题配置</para>
    /// <para>接口ID：7351374599659814916</para>
    /// <para>接口文档：https://open.feishu.cn/document/performance-v1/review_config/review_template/query-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取标签填写题配置信息，包括标签填写题名称、标签列表等</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>performance:performance</item>
    /// <item>performance:performance:readonly</item>
    /// <item>performance:review_template:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：30</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/performance/v2/questions/query")]
    System.Threading.Tasks.Task<FeishuResponse<Performance.PostPerformanceV2QuestionsQueryResponseDto>> PostPerformanceV2QuestionsQueryAsync(
        [JsonContent] Performance.PostPerformanceV2QuestionsQueryBodyDto dto,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【绩效】获取绩效详情数据</para>
    /// <para>接口ID：7351374599659847684</para>
    /// <para>接口文档：https://open.feishu.cn/document/performance-v1/review_data/query-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取被评估人各环节的绩效评估详情（不包含校准环节），如环节评估数据、环节提交状态等</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>performance:performance</item>
    /// <item>performance:performance:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/performance/v2/review_datas/query")]
    System.Threading.Tasks.Task<FeishuResponse<Performance.PostPerformanceV2ReviewDatasQueryResponseDto>> PostPerformanceV2ReviewDatasQueryAsync(
        [JsonContent] Performance.PostPerformanceV2ReviewDatasQueryBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】查询指定生效日期的部门基本信息</para>
    /// <para>接口ID：7351676067814096900</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/department/query_timeline</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询指定生效的部门基本信息，含部门名称、部门类型、上级、编码、负责人、是否启用、描述等信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:department:read</item>
    /// <item>corehr:department:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:department.custom_fields:read</item>
    /// <item>corehr:department.manager:read</item>
    /// <item>corehr:department.organize:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：people_corehr_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：【飞书】用来在具体某个应用中标识一个部门，同一个department_id 在不同应用中的 open_department_id 相同。</item>
    /// <item>department_id：【飞书】用来标识租户内一个唯一的部门。</item>
    /// <item>people_corehr_department_id：【飞书人事】用来标识「飞书人事」中的部门。</item>
    /// </list>
    /// <para>默认值：people_corehr_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/departments/query_timeline")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2DepartmentsQueryTimelineResponseDto>> PostCorehrV2DepartmentsQueryTimelineAsync(
        [JsonContent] Corehr.PostCorehrV2DepartmentsQueryTimelineBodyDto dto,
        [PathQuery] string? user_id_type = "people_corehr_id",
        [PathQuery] string? department_id_type = "people_corehr_department_id");

    /// <summary>
    /// <para>【招聘】获取面试评价表列表</para>
    /// <para>接口ID：7356428725080342530</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/recruitment-related-configuration/interview-settings/list-3</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取面试评价表信息列表，评价表信息包括题目描述、题目选项等。可用于面试评价表展示等场景。</para>
    /// <para>## 注意事项</para>
    /// <para>- 面试评价表通过版本进行变更管理，每次修改评价表都会更新版本，同时变更评价表ID、模块ID、模块维度ID、选项ID、能力项ID。</para>
    /// <para>- 当使用分页方式获取数据时，仅能获取到最新版本的面试评价表，当指定面试评价表 ID 列表时，可以获取到历史版本面评评价表。</para>
    /// <para>## 面试评价表产品示意图</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:interview</item>
    /// <item>hire:interview:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="interview_feedback_form_ids">
    /// <para>必填：否</para>
    /// <para>面试评价表 ID 列表，使用此参数时不再分页</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小。最大值为100，默认值为0</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/interview_feedback_forms")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1InterviewFeedbackFormsResponseDto>> GetHireV1InterviewFeedbackFormsAsync(
        [PathQuery] string[]? interview_feedback_form_ids = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【招聘】获取面试评价详细信息（新版）</para>
    /// <para>接口ID：7356428725080358914</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/candidate-management/delivery-process-management/interview/get-3</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取面试评价详细信息，如面试结论、面试得分和面试官等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:interview</item>
    /// <item>hire:interview:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="interview_record_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>面试评价 ID，可通过[获取面试信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/interview/list)接口获取</para>
    /// <para>示例值：7171693733661327361</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v2/interview_records/{interview_record_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV2InterviewRecordsByInterviewRecordIdResponseDto>> GetHireV2InterviewRecordsByInterviewRecordIdAsync(
        [PathQuery] string interview_record_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】批量获取面试评价详细信息（新版）</para>
    /// <para>接口ID：7356428725080375298</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/candidate-management/delivery-process-management/interview/list-4</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>批量获取面试评价详细信息，如面试结论、面试得分和面试官等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:interview</item>
    /// <item>hire:interview:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="ids">
    /// <para>必填：否</para>
    /// <para>面试评价 ID 列表，可通过[获取面试信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/interview/list)接口获取，使用该筛选项时不会分页</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>**注意**：若不传该参数，则默认根据 `ids` 参数获取数据</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v2/interview_records")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV2InterviewRecordsResponseDto>> GetHireV2InterviewRecordsAsync(
        [PathQuery] string[]? ids = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】操作员工完成入职</para>
    /// <para>接口ID：7357756972752699394</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/pre_hire/complete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>操作待入职员工完成入职，正式入职建立员工和公司/组织的雇佣关系</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:pre_hire:complete</item>
    /// </list></para>
    /// </summary>
    /// <param name="pre_hire_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待入职ID,可从[待入职列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/pre_hire/search)接口获取</para>
    /// <para>示例值：7345005664477775407</para>
    /// </param>
    [HttpPost("/open-apis/corehr/v2/pre_hires/{pre_hire_id}/complete")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2PreHiresByPreHireIdCompleteResponseDto>> PostCorehrV2PreHiresByPreHireIdCompleteAsync(
        [PathQuery] string pre_hire_id);

    /// <summary>
    /// <para>【飞书人事（企业版）】更新待入职信息</para>
    /// <para>接口ID：7357756972752715778</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/pre_hire/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过指定系统字段和自定义字段以更新待入职数据</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:pre_hire:update</item>
    /// </list></para>
    /// </summary>
    /// <param name="pre_hire_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待入职ID，可以通过[搜索待入职人员信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/pre_hire/search)接口获得</para>
    /// <para>示例值：7345005664477775411</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/corehr/v2/pre_hires/{pre_hire_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PatchCorehrV2PreHiresByPreHireIdResponseDto>> PatchCorehrV2PreHiresByPreHireIdAsync(
        [PathQuery] string pre_hire_id,
        [JsonContent] Corehr.PatchCorehrV2PreHiresByPreHireIdBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】流转入职任务</para>
    /// <para>接口ID：7357756972752732162</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/pre_hire/transit_task</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>配置入职流程后，可通过本接口流转进行中的任务</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:pre_hire:transit_tasks</item>
    /// </list></para>
    /// </summary>
    /// <param name="pre_hire_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待入职ID，可从[待入职列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/pre_hire/search)接口获取</para>
    /// <para>示例值：7345005664477775407</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/pre_hires/{pre_hire_id}/transit_task")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2PreHiresByPreHireIdTransitTaskResponseDto>> PostCorehrV2PreHiresByPreHireIdTransitTaskAsync(
        [PathQuery] string pre_hire_id,
        [JsonContent] Corehr.PostCorehrV2PreHiresByPreHireIdTransitTaskBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】启用/停用自定义组织</para>
    /// <para>接口ID：7358017162446471172</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/custom_org/active</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对自定义组织进行启用或停用操作</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:custom_org:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/custom_orgs/active")]
    System.Threading.Tasks.Task<FeishuResponse> PostCorehrV2CustomOrgsActiveAsync(
        [JsonContent] Corehr.PostCorehrV2CustomOrgsActiveBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】删除自定义组织</para>
    /// <para>接口ID：7358017162446487556</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/custom_org/delete_org</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据传入的自定义组织 ID 删除相应自定义组织</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:custom_org:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/custom_orgs/delete_org")]
    System.Threading.Tasks.Task<FeishuResponse> PostCorehrV2CustomOrgsDeleteOrgAsync(
        [JsonContent] Corehr.PostCorehrV2CustomOrgsDeleteOrgBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】创建自定义组织</para>
    /// <para>接口ID：7358017162446503940</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/custom_org/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>使用指定信息创建自定义组织，接口内会做相关规则校验。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:custom_org:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：1245464678</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/custom_orgs")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2CustomOrgsResponseDto>> PostCorehrV2CustomOrgsAsync(
        [JsonContent] Corehr.PostCorehrV2CustomOrgsBodyDto dto,
        [PathQuery] string? client_token = null,
        [PathQuery] string? user_id_type = "people_corehr_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】查询自定义组织信息</para>
    /// <para>接口ID：7358017162446520324</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/custom_org/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据传入的筛选条件批量查询自定义组织信息。不传任何筛选条件，默认获得该租户下所有的自定义组织数据。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:custom_org:read</item>
    /// <item>corehr:custom_org:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6891251722631890445</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/custom_orgs/query")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2CustomOrgsQueryResponseDto>> PostCorehrV2CustomOrgsQueryAsync(
        [JsonContent] Corehr.PostCorehrV2CustomOrgsQueryBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "people_corehr_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】更新自定义组织信息</para>
    /// <para>接口ID：7358017162446536708</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/custom_org/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新一个自定义组织基础信息，不支持更新自动匹配规则，如需更新自动匹配规则请使用[更新匹配规则](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/custom_org/update_rule)</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:custom_org:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="org_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>自定义组织 ID</para>
    /// <para>- 可从 [批量查询自定义组织](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/custom_org/query)的 org_id 字段中获取。</para>
    /// <para>示例值：6862995757234914824</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据 client_token 是否一致来判断是否为同一请求</para>
    /// <para>示例值：1245464678</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/corehr/v2/custom_orgs/{org_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PatchCorehrV2CustomOrgsByOrgIdAsync(
        [PathQuery] string org_id,
        [JsonContent] Corehr.PatchCorehrV2CustomOrgsByOrgIdBodyDto dto,
        [PathQuery] string? client_token = null,
        [PathQuery] string? user_id_type = "people_corehr_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】更新自定义组织的匹配规则</para>
    /// <para>接口ID：7358017162446553092</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/custom_org/update_rule</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新自定义组织的匹配规则。仅开启了「为组织设置自动匹配规则」的自定义组织类型可用。如需更新自定义组织基本信息可使用[更新自定义组织](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/custom_org/patch)</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:custom_org:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/custom_orgs/update_rule")]
    System.Threading.Tasks.Task<FeishuResponse> PostCorehrV2CustomOrgsUpdateRuleAsync(
        [JsonContent] Corehr.PostCorehrV2CustomOrgsUpdateRuleBodyDto dto);

    /// <summary>
    /// <para>【智能伙伴创建平台】获取智能伙伴消息</para>
    /// <para>接口ID：7358047310868152324</para>
    /// <para>接口文档：https://open.feishu.cn/document/aily-v1/aily_session-aily_message/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该 API 用于获取某个飞书智能伙伴应用的消息（Message）的详细信息；包括消息的内容、发送人等。</para>
    /// <para>## 实体概念说明</para>
    /// <para>- **会话**（Session）：管理用户与 Aily 助手之间的交互会话；每次会话记录了用户发送给 Aily 助手的消息以及 Aily 助手的响应。</para>
    /// <para>- **消息**（Message）：消息可以包含文本、表格、图片等多种类型的内容。</para>
    /// <para>- **运行**（Run）：Aily 助手基于会话内消息进行意图判定、调用匹配的技能，并返回技能执行后的结果消息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>aily:message:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="aily_session_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>会话 ID；参考 [创建会话](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/aily-v1/aily_session/create) 接口</para>
    /// <para>示例值：session_4dfunz7sp1g8m</para>
    /// </param>
    /// <param name="aily_message_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>消息 ID</para>
    /// <para>示例值：message_4df45f2xknvcc</para>
    /// </param>
    [HttpGet("/open-apis/aily/v1/sessions/{aily_session_id}/messages/{aily_message_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Aily.GetAilyV1SessionsByAilySessionIdMessagesByAilyMessageIdResponseDto>> GetAilyV1SessionsByAilySessionIdMessagesByAilyMessageIdAsync(
        [PathQuery] string aily_session_id,
        [PathQuery] string aily_message_id);

    /// <summary>
    /// <para>【智能伙伴创建平台】列出智能伙伴消息</para>
    /// <para>接口ID：7358047310868168708</para>
    /// <para>接口文档：https://open.feishu.cn/document/aily-v1/aily_session-aily_message/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该 API 用于列出某个飞书智能伙伴应用的某个会话（Session）下消息（Message）的详细信息；包括消息的内容、发送人等。</para>
    /// <para>## 实体概念说明</para>
    /// <para>- **会话**（Session）：管理用户与 Aily 助手之间的交互会话；每次会话记录了用户发送给 Aily 助手的消息以及 Aily 助手的响应。</para>
    /// <para>- **消息**（Message）：消息可以包含文本、表格、图片等多种类型的内容。</para>
    /// <para>- **运行**（Run）：Aily 助手基于会话内消息进行意图判定、调用匹配的技能，并返回技能执行后的结果消息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>aily:message:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="aily_session_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>会话 ID；参考 [创建会话](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/aily-v1/aily_session/create) 接口</para>
    /// <para>示例值：session_4dfunz7sp1g8m</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>本次请求获取的消息记录条数，默认 20</para>
    /// <para>示例值：20</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="run_id">
    /// <para>必填：否</para>
    /// <para>过滤条件，按执行的唯一 ID 筛选</para>
    /// <para>示例值：run_4dfrxvctjqzzj</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="with_partial_message">
    /// <para>必填：否</para>
    /// <para>是否返回正在进行中（即流式输出中）的消息内容</para>
    /// <para>- 当设置为 `true` 时，返回的消息记录中、每个消息将额外包含一个 `status `字段（`IN_PROGRESS` | `COMPLETED`），此时 `content` 字段为当前时刻的消息内容</para>
    /// <para>- 当设置为 `false` 时，返回的消息记录仅包含已完成的消息</para>
    /// <para>示例值：false</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/aily/v1/sessions/{aily_session_id}/messages")]
    System.Threading.Tasks.Task<FeishuResponse<Aily.GetAilyV1SessionsByAilySessionIdMessagesResponseDto>> GetAilyV1SessionsByAilySessionIdMessagesAsync(
        [PathQuery] string aily_session_id,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? run_id = null,
        [PathQuery] bool? with_partial_message = null);

    /// <summary>
    /// <para>【智能伙伴创建平台】创建运行</para>
    /// <para>接口ID：7358047310868185092</para>
    /// <para>接口文档：https://open.feishu.cn/document/aily-v1/aily_session-run/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该 API 用于在某个飞书智能伙伴应用会话（Session）上创建一次运行（Run）。</para>
    /// <para>## 实体概念说明</para>
    /// <para>- **会话**（Session）：管理用户与 Aily 助手之间的交互会话；每次会话记录了用户发送给 Aily 助手的消息以及 Aily 助手的响应。</para>
    /// <para>- **消息**（Message）：消息可以包含文本、表格、图片等多种类型的内容。</para>
    /// <para>- **运行**（Run）：Aily 助手基于会话内消息进行意图判定、调用匹配的技能，并返回技能执行后的结果消息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>aily:run:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="aily_session_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>会话 ID；参考 [创建会话](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/aily-v1/app-session/create) 接口</para>
    /// <para>示例值：session_4dfunz7sp1g8m</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/aily/v1/sessions/{aily_session_id}/runs")]
    System.Threading.Tasks.Task<FeishuResponse<Aily.PostAilyV1SessionsByAilySessionIdRunsResponseDto>> PostAilyV1SessionsByAilySessionIdRunsAsync(
        [PathQuery] string aily_session_id,
        [JsonContent] Aily.PostAilyV1SessionsByAilySessionIdRunsBodyDto dto);

    /// <summary>
    /// <para>【智能伙伴创建平台】列出运行</para>
    /// <para>接口ID：7358047310868201476</para>
    /// <para>接口文档：https://open.feishu.cn/document/aily-v1/aily_session-run/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该 API 用于列出某个飞书智能伙伴应用的运行（Run）的详细信息；包括状态、结束时间等。</para>
    /// <para>## 实体概念说明</para>
    /// <para>- **会话**（Session）：管理用户与 Aily 助手之间的交互会话；每次会话记录了用户发送给 Aily 助手的消息以及 Aily 助手的响应。</para>
    /// <para>- **消息**（Message）：消息可以包含文本、表格、图片等多种类型的内容。</para>
    /// <para>- **运行**（Run）：Aily 助手基于会话内消息进行意图判定、调用匹配的技能，并返回技能执行后的结果消息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>aily:run:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="aily_session_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>会话 ID；参考 [创建会话](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/aily-v1/app-session/create) 接口</para>
    /// <para>示例值：session_4dfunz7sp1g8m</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>本次请求获取的运行记录条数，默认 20</para>
    /// <para>示例值：20</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/aily/v1/sessions/{aily_session_id}/runs")]
    System.Threading.Tasks.Task<FeishuResponse<Aily.GetAilyV1SessionsByAilySessionIdRunsResponseDto>> GetAilyV1SessionsByAilySessionIdRunsAsync(
        [PathQuery] string aily_session_id,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【智能伙伴创建平台】取消运行</para>
    /// <para>接口ID：7358047310868217860</para>
    /// <para>接口文档：https://open.feishu.cn/document/aily-v1/aily_session-run/cancel</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该 API 用于中止某个飞书智能伙伴的一次运行。</para>
    /// <para>## 实体概念说明</para>
    /// <para>- **会话**（Session）：管理用户与 Aily 助手之间的交互会话；每次会话记录了用户发送给 Aily 助手的消息以及 Aily 助手的响应。</para>
    /// <para>- **消息**（Message）：消息可以包含文本、表格、图片等多种类型的内容。</para>
    /// <para>- **运行**（Run）：Aily 助手基于会话内消息进行意图判定、调用匹配的技能，并返回技能执行后的结果消息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>aily:run:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="aily_session_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>会话 ID；参考 [创建会话](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/aily-v1/app-session/create) 接口</para>
    /// <para>示例值：session_4dfunz7sp1g8m</para>
    /// </param>
    /// <param name="run_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>运行的唯一 ID</para>
    /// <para>示例值：run_4dfrxvctjqzzj</para>
    /// </param>
    [HttpPost("/open-apis/aily/v1/sessions/{aily_session_id}/runs/{run_id}/cancel")]
    System.Threading.Tasks.Task<FeishuResponse<Aily.PostAilyV1SessionsByAilySessionIdRunsByRunIdCancelResponseDto>> PostAilyV1SessionsByAilySessionIdRunsByRunIdCancelAsync(
        [PathQuery] string aily_session_id,
        [PathQuery] string run_id);

    /// <summary>
    /// <para>【智能伙伴创建平台】更新会话</para>
    /// <para>接口ID：7358047310868234244</para>
    /// <para>接口文档：https://open.feishu.cn/document/aily-v1/aily_session/update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该 API 用于更新与某个飞书智能伙伴应用的一次会话（Session）的信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>aily:session:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="aily_session_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>会话 ID</para>
    /// <para>示例值：session_4dfunz7sp1g8m</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/aily/v1/sessions/{aily_session_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Aily.PutAilyV1SessionsByAilySessionIdResponseDto>> PutAilyV1SessionsByAilySessionIdAsync(
        [PathQuery] string aily_session_id,
        [JsonContent] Aily.PutAilyV1SessionsByAilySessionIdBodyDto dto);

    /// <summary>
    /// <para>【智能伙伴创建平台】获取会话</para>
    /// <para>接口ID：7358047310868250628</para>
    /// <para>接口文档：https://open.feishu.cn/document/aily-v1/aily_session/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该 API 用于获取与某个飞书智能伙伴应用的一次会话（Session）的详细信息，包括会话的状态、渠道上下文、创建时间等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>aily:session:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="aily_session_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>会话 ID</para>
    /// <para>示例值：session_4dfunz7sp1g8m</para>
    /// </param>
    [HttpGet("/open-apis/aily/v1/sessions/{aily_session_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Aily.GetAilyV1SessionsByAilySessionIdResponseDto>> GetAilyV1SessionsByAilySessionIdAsync(
        [PathQuery] string aily_session_id);

    /// <summary>
    /// <para>【智能伙伴创建平台】删除会话</para>
    /// <para>接口ID：7358047310868267012</para>
    /// <para>接口文档：https://open.feishu.cn/document/aily-v1/aily_session/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该 API 用于删除与某个飞书智能伙伴应用的一次会话（Session）。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>aily:session:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="aily_session_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>会话 ID</para>
    /// <para>示例值：session_4dfunz7sp1g8m</para>
    /// </param>
    [HttpDelete("/open-apis/aily/v1/sessions/{aily_session_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteAilyV1SessionsByAilySessionIdAsync(
        [PathQuery] string aily_session_id);

    /// <summary>
    /// <para>【智能伙伴创建平台】发送智能伙伴消息</para>
    /// <para>接口ID：7358047310868283396</para>
    /// <para>接口文档：https://open.feishu.cn/document/aily-v1/aily_session-aily_message/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该 API 用于向某个飞书智能伙伴应用发送一条消息（Message）；每个消息从属于一个活跃的会话（Session）。</para>
    /// <para>## 实体概念说明</para>
    /// <para>- **会话**（Session）：管理用户与 Aily 助手之间的交互会话；每次会话记录了用户发送给 Aily 助手的消息以及 Aily 助手的响应。</para>
    /// <para>- **消息**（Message）：消息可以包含文本、表格、图片等多种类型的内容。</para>
    /// <para>- **运行**（Run）：Aily 助手基于会话内消息进行意图判定、调用匹配的技能，并返回技能执行后的结果消息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>aily:message:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="aily_session_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>会话 ID；参考 [创建会话](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/aily-v1/aily_session/create) 接口</para>
    /// <para>示例值：session_4dfunz7sp1g8m</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/aily/v1/sessions/{aily_session_id}/messages")]
    System.Threading.Tasks.Task<FeishuResponse<Aily.PostAilyV1SessionsByAilySessionIdMessagesResponseDto>> PostAilyV1SessionsByAilySessionIdMessagesAsync(
        [PathQuery] string aily_session_id,
        [JsonContent] Aily.PostAilyV1SessionsByAilySessionIdMessagesBodyDto dto);

    /// <summary>
    /// <para>【智能伙伴创建平台】获取运行</para>
    /// <para>接口ID：7358047310868299780</para>
    /// <para>接口文档：https://open.feishu.cn/document/aily-v1/aily_session-run/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该 API 用于获取某个飞书智能伙伴应用的运行（Run）的详细信息；包括运行的状态、结束时间等。</para>
    /// <para>## 实体概念说明</para>
    /// <para>- **会话**（Session）：管理用户与 Aily 助手之间的交互会话；每次会话记录了用户发送给 Aily 助手的消息以及 Aily 助手的响应。</para>
    /// <para>- **消息**（Message）：消息可以包含文本、表格、图片等多种类型的内容。</para>
    /// <para>- **运行**（Run）：Aily 助手基于会话内消息进行意图判定、调用匹配的技能，并返回技能执行后的结果消息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>aily:run:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="aily_session_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>会话 ID；参考 [创建会话](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/aily-v1/app-session/create) 接口</para>
    /// <para>示例值：session_4dfunz7sp1g8m</para>
    /// </param>
    /// <param name="run_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>运行的唯一 ID</para>
    /// <para>示例值：run_4dfrxvctjqzzj</para>
    /// </param>
    [HttpGet("/open-apis/aily/v1/sessions/{aily_session_id}/runs/{run_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Aily.GetAilyV1SessionsByAilySessionIdRunsByRunIdResponseDto>> GetAilyV1SessionsByAilySessionIdRunsByRunIdAsync(
        [PathQuery] string aily_session_id,
        [PathQuery] string run_id);

    /// <summary>
    /// <para>【智能伙伴创建平台】创建会话</para>
    /// <para>接口ID：7358047310868316164</para>
    /// <para>接口文档：https://open.feishu.cn/document/aily-v1/aily_session/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该 API 用于创建与某个飞书智能伙伴应用的一次会话（Session）；当创建会话成功后，可以发送消息、创建运行。</para>
    /// <para>## 实体概念说明</para>
    /// <para>- **会话**（Session）：管理用户与 Aily 助手之间的交互会话；每次会话记录了用户发送给 Aily 助手的消息以及 Aily 助手的响应。</para>
    /// <para>- **消息**（Message）：消息可以包含文本、表格、图片等多种类型的内容。</para>
    /// <para>- **运行**（Run）：Aily 助手基于会话内消息进行意图判定、调用匹配的技能，并返回技能执行后的结果消息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>aily:session:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/aily/v1/sessions")]
    System.Threading.Tasks.Task<FeishuResponse<Aily.PostAilyV1SessionsResponseDto>> PostAilyV1SessionsAsync(
        [JsonContent] Aily.PostAilyV1SessionsBodyDto dto);

    /// <summary>
    /// <para>【消息与群组】更新 URL 预览</para>
    /// <para>接口ID：7358413940747862020</para>
    /// <para>接口文档：https://open.feishu.cn/document/im-v1/url_preview/batch_update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于主动更新 [URL 预览](https://open.feishu.cn/document/uAjLw4CM/ukzMukzMukzM/development-link-preview/link-preview-development-guide)，调用后会重新触发一次客户端拉取，需要回调服务返回更新后的数据。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:url_preview.update</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/im/v2/url_previews/batch_update")]
    System.Threading.Tasks.Task<FeishuResponse> PostImV2UrlPreviewsBatchUpdateAsync(
        [JsonContent] Im.PostImV2UrlPreviewsBatchUpdateBodyDto dto);

    /// <summary>
    /// <para>【主数据】根据主数据编码批量查询国家/地区</para>
    /// <para>接口ID：7359131293821452290</para>
    /// <para>接口文档：https://open.feishu.cn/document/mdm-v1/mdm-v3/country_region/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过mdmcode批量查询国家/地区信息。资源介绍请参考[概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/mdm-v3/country_region/resource-definition)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mdm:country_region:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="fields">
    /// <para>必填：是</para>
    /// <para>需要的查询字段集</para>
    /// </param>
    /// <param name="ids">
    /// <para>必填：是</para>
    /// <para>主数据编码集</para>
    /// </param>
    /// <param name="languages">
    /// <para>必填：是</para>
    /// <para>希望返回的语言种类，支持格式如下：</para>
    /// <para>- 中文：zh-CN</para>
    /// <para>- 英文：en-US</para>
    /// <para>- 日文：ja-JP</para>
    /// <para>对于多语文本字段，传入特定语言，将会返回对应语言文本</para>
    /// </param>
    [HttpGet("/open-apis/mdm/v3/batch_country_region")]
    System.Threading.Tasks.Task<FeishuResponse<Mdm.GetMdmV3BatchCountryRegionResponseDto>> GetMdmV3BatchCountryRegionAsync(
        [PathQuery] string[] fields,
        [PathQuery] string[] ids,
        [PathQuery] string[] languages);

    /// <summary>
    /// <para>【主数据】分页批量查询国家/地区</para>
    /// <para>接口ID：7359131293821468674</para>
    /// <para>接口文档：https://open.feishu.cn/document/mdm-v1/mdm-v3/country_region/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>分页批量查询国家/地区。资源介绍请参考[概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/mdm-v3/country_region/resource-definition)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mdm:country_region:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="languages">
    /// <para>必填：是</para>
    /// <para>希望返回的语言种类，支持格式如下：</para>
    /// <para>- 中文：zh-CN</para>
    /// <para>- 英文：en-US</para>
    /// <para>- 日文：ja-JP</para>
    /// <para>对于多语文本字段，传入特定语言，将会返回对应语言文本</para>
    /// </param>
    /// <param name="fields">
    /// <para>必填：是</para>
    /// <para>需要的查询字段集</para>
    /// </param>
    /// <param name="limit">
    /// <para>必填：否</para>
    /// <para>查询页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="offset">
    /// <para>必填：否</para>
    /// <para>查询起始位置</para>
    /// <para>示例值：0</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="return_count">
    /// <para>必填：否</para>
    /// <para>是否返回总数</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpGet("/open-apis/mdm/v3/country_regions")]
    System.Threading.Tasks.Task<FeishuResponse<Mdm.GetMdmV3CountryRegionsResponseDto>> GetMdmV3CountryRegionsAsync(
        [PathQuery] string[] languages,
        [PathQuery] string[] fields,
        [JsonContent] Mdm.GetMdmV3CountryRegionsBodyDto dto,
        [PathQuery] int? limit = null,
        [PathQuery] int? offset = null,
        [PathQuery] bool? return_count = null,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【组织架构】删除部门</para>
    /// <para>接口ID：7359428154233487364</para>
    /// <para>接口文档：https://open.feishu.cn/document/directory-v1/department/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>本接口用于删除部门。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>directory:department:write</item>
    /// <item>directory:department.delete:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>directory:employee.base.external_id:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="department_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>部门ID，与department_id_type类型保持一致</para>
    /// <para>示例值：weasdqwe</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：用来标识租户内一个唯一的部门</item>
    /// <item>open_department_id：用来在具体某个应用中标识一个部门，同一个部门 在不同应用中的 open_department_id 不相同。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    [HttpDelete("/open-apis/directory/v1/departments/{department_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteDirectoryV1DepartmentsByDepartmentIdAsync(
        [PathQuery] string department_id,
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【组织架构】批量获取员工信息</para>
    /// <para>接口ID：7359428154233520132</para>
    /// <para>接口文档：https://open.feishu.cn/document/directory-v1/employee/mget</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>本接口用于批量根据员工的ID查询员工的详情。</para>
    /// <para>员工指飞书企业内身份为「Employee」的成员，等同于通讯录OpenAPI中的「User」</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>directory:employee:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>directory:department.base:read</item>
    /// <item>directory:department.count:read</item>
    /// <item>directory:department.custom_field:read</item>
    /// <item>directory:department.data_source:read</item>
    /// <item>directory:department.department_path:read</item>
    /// <item>directory:department.external_id:read</item>
    /// <item>directory:department.has_child:read</item>
    /// <item>directory:department.leader:read</item>
    /// <item>directory:department.name:read</item>
    /// <item>directory:department.order_weight:read</item>
    /// <item>directory:department.organization:read</item>
    /// <item>directory:department.parent_id:read</item>
    /// <item>directory:department.status:read</item>
    /// <item>directory:employee.base.active_status:read</item>
    /// <item>directory:employee.base.avatar:read</item>
    /// <item>directory:employee.base.background_image:read</item>
    /// <item>directory:employee.base.base:read</item>
    /// <item>directory:employee.base.custom_field:read</item>
    /// <item>directory:employee.base.data_source:read</item>
    /// <item>directory:employee.base.department_path:read</item>
    /// <item>directory:employee.base.department:read</item>
    /// <item>directory:employee.base.dept_order:read</item>
    /// <item>directory:employee.base.description:read</item>
    /// <item>directory:employee.base.dotted_line_leaders:read</item>
    /// <item>directory:employee.base.email:read</item>
    /// <item>directory:employee.base.enterprise_email_alias:read</item>
    /// <item>directory:employee.base.enterprise_email:read</item>
    /// <item>directory:employee.base.external_id:read</item>
    /// <item>directory:employee.base.gender:read</item>
    /// <item>directory:employee.base.geo:read</item>
    /// <item>directory:employee.base.is_admin:read</item>
    /// <item>directory:employee.base.is_primary_admin:read</item>
    /// <item>directory:employee.base.is_resigned:read</item>
    /// <item>directory:employee.base.leader_id:read</item>
    /// <item>directory:employee.base.leader:read</item>
    /// <item>directory:employee.base.mobile:read</item>
    /// <item>directory:employee.base.name.another_name:read</item>
    /// <item>directory:employee.base.name.name:read</item>
    /// <item>directory:employee.base.resign_time:read</item>
    /// <item>directory:employee.base.role:read</item>
    /// <item>directory:employee.base.status:read</item>
    /// <item>directory:employee.base.subscription_ids:read</item>
    /// <item>directory:employee.work.base_work:read</item>
    /// <item>directory:employee.work.employment_type:read</item>
    /// <item>directory:employee.work.employment:read</item>
    /// <item>directory:employee.work.extension_number:read</item>
    /// <item>directory:employee.work.job_family:read</item>
    /// <item>directory:employee.work.job_number:read</item>
    /// <item>directory:employee.work.job_title:read</item>
    /// <item>directory:employee.work.join_date:read</item>
    /// <item>directory:employee.work.resign_date:read</item>
    /// <item>directory:employee.work.resign_reason:read</item>
    /// <item>directory:employee.work.resign_remark:read</item>
    /// <item>directory:employee.work.resign_type:read</item>
    /// <item>directory:employee.work.staff_status:read</item>
    /// <item>directory:employee.work.work_country_or_region:read</item>
    /// <item>directory:employee.work.work_place:read</item>
    /// <item>directory:employee.work.work_station:read</item>
    /// <item>directory:job_family.base:read</item>
    /// <item>directory:job_family.path:read</item>
    /// <item>directory:job_family.status:read</item>
    /// <item>directory:job_title.base:read</item>
    /// <item>directory:job_title.status:read</item>
    /// <item>directory:place.base:read</item>
    /// <item>directory:place.status:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>employee_id：企业内在职员工的唯一标识。支持自定义，未自定义时系统自动生成。ID支持修改。 获取employee_id的方式： - 企业管理员在 管理后台 &gt; 组织架构 &gt; 成员与部门 页面，点击 成员详情，查询员工ID - 通过 [批量获取员工列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/employee/filter) 的接口，通过手机号或邮箱查询员工ID。</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型</para>
    /// <para>示例值：department_id</para>
    /// <list type="bullet">
    /// <item>department_id：用来标识租户内一个唯一的部门</item>
    /// <item>open_department_id：用来在具体某个应用中标识一个部门，同一个部门 在不同应用中的 open_department_id 不相同。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/directory/v1/employees/mget")]
    System.Threading.Tasks.Task<FeishuResponse<Directory.PostDirectoryV1EmployeesMgetResponseDto>> PostDirectoryV1EmployeesMgetAsync(
        [JsonContent] Directory.PostDirectoryV1EmployeesMgetBodyDto dto,
        [PathQuery] string? employee_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【组织架构】创建部门</para>
    /// <para>接口ID：7359428154233536516</para>
    /// <para>接口文档：https://open.feishu.cn/document/directory-v1/department/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>本接口用于在企业下创建部门</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>directory:department:write</item>
    /// <item>directory:department.create:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>directory:employee.base.external_id:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>employee_id：企业内在职员工的唯一标识。支持自定义，未自定义时系统自动生成。ID支持修改。 获取employee_id的方式： - 企业管理员在 管理后台 &gt; 组织架构 &gt; 成员与部门 页面，点击 成员详情，查询员工ID - 通过 [批量获取员工列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/employee/filter) 的接口，通过手机号或邮箱查询员工ID。</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：用来标识租户内一个唯一的部门</item>
    /// <item>open_department_id：用来在具体某个应用中标识一个部门，同一个部门 在不同应用中的 open_department_id 不相同。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/directory/v1/departments")]
    System.Threading.Tasks.Task<FeishuResponse<Directory.PostDirectoryV1DepartmentsResponseDto>> PostDirectoryV1DepartmentsAsync(
        [JsonContent] Directory.PostDirectoryV1DepartmentsBodyDto dto,
        [PathQuery] string? employee_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【组织架构】更新部门</para>
    /// <para>接口ID：7359428154233552900</para>
    /// <para>接口文档：https://open.feishu.cn/document/directory-v1/department/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>本接口用于更新部门信息。仅更新显式传参的部分。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>directory:department:write</item>
    /// <item>directory:department.update:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>directory:employee.base.external_id:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="department_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>部门ID，与department_id_type类型保持一致</para>
    /// <para>示例值：h12921</para>
    /// </param>
    /// <param name="employee_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>employee_id：企业内在职员工的唯一标识。支持自定义，未自定义时系统自动生成。ID支持修改。 获取employee_id的方式： - 企业管理员在 管理后台 &gt; 组织架构 &gt; 成员与部门 页面，点击 成员详情，查询员工ID - 通过 [批量获取员工列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/employee/filter) 的接口，通过手机号或邮箱查询员工ID。</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：用来在具体某个应用中标识一个部门，同一个部门 在不同应用中的 open_department_id 不相同。</item>
    /// <item>department_id：用来标识租户内一个唯一的部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/directory/v1/departments/{department_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PatchDirectoryV1DepartmentsByDepartmentIdAsync(
        [PathQuery] string department_id,
        [JsonContent] Directory.PatchDirectoryV1DepartmentsByDepartmentIdBodyDto dto,
        [PathQuery] string? employee_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【组织架构】搜索部门</para>
    /// <para>接口ID：7359428154233569284</para>
    /// <para>接口文档：https://open.feishu.cn/document/directory-v1/department/search</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>本接口用于搜索部门信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>directory:department:search</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>directory:department.base:read</item>
    /// <item>directory:department.count:read</item>
    /// <item>directory:department.custom_field:read</item>
    /// <item>directory:department.data_source:read</item>
    /// <item>directory:department.department_path:read</item>
    /// <item>directory:department.external_id:read</item>
    /// <item>directory:department.has_child:read</item>
    /// <item>directory:department.leader:read</item>
    /// <item>directory:department.name:read</item>
    /// <item>directory:department.order_weight:read</item>
    /// <item>directory:department.organization:read</item>
    /// <item>directory:department.parent_id:read</item>
    /// <item>directory:department.status:read</item>
    /// <item>directory:employee.base.external_id:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>employee_id：企业内在职员工的唯一标识。支持自定义，未自定义时系统自动生成。ID支持修改。 获取employee_id的方式： - 企业管理员在 管理后台 &gt; 组织架构 &gt; 成员与部门 页面，点击 成员详情，查询员工ID - 通过 [批量获取员工列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/employee/filter) 的接口，通过手机号或邮箱查询员工ID。</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：用来在具体某个应用中标识一个部门，同一个部门 在不同应用中的 open_department_id 不相同。</item>
    /// <item>department_id：用来标识租户内一个唯一的部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/directory/v1/departments/search")]
    System.Threading.Tasks.Task<FeishuResponse<Directory.PostDirectoryV1DepartmentsSearchResponseDto>> PostDirectoryV1DepartmentsSearchAsync(
        [JsonContent] Directory.PostDirectoryV1DepartmentsSearchBodyDto dto,
        [PathQuery] string? employee_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【组织架构】离职员工</para>
    /// <para>接口ID：7359428154233602052</para>
    /// <para>接口文档：https://open.feishu.cn/document/directory-v1/employee/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>本接口用于离职员工。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>directory:employee:write</item>
    /// <item>directory:employee.resign:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>directory:employee.base.external_id:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要离职的员工的ID。需要与查询参数中的employee_id_type类型保持一致</para>
    /// <para>示例值：eesdasjd</para>
    /// </param>
    /// <param name="employee_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：企业内在职员工的唯一标识。支持自定义，未自定义时系统自动生成。ID支持修改。 获取employee_id的方式： - 企业管理员在 管理后台 &gt; 组织架构 &gt; 成员与部门 页面，点击 成员详情，查询员工ID - 通过 [批量获取员工列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/employee/filter) 的接口，通过手机号或邮箱查询员工ID。</item>
    /// <item>employee_id：企业内在职员工的唯一标识。支持自定义，未自定义时系统自动生成。ID支持修改。 获取employee_id的方式： - 企业管理员在 管理后台 &gt; 组织架构 &gt; 成员与部门 页面，点击 成员详情，查询员工ID - 通过 [批量获取员工列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/employee/filter) 的接口，通过手机号或邮箱查询员工ID。</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpDelete("/open-apis/directory/v1/employees/{employee_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteDirectoryV1EmployeesByEmployeeIdAsync(
        [PathQuery] string employee_id,
        [JsonContent] Directory.DeleteDirectoryV1EmployeesByEmployeeIdBodyDto dto,
        [PathQuery] string? employee_id_type = "open_id");

    /// <summary>
    /// <para>【组织架构】搜索员工</para>
    /// <para>接口ID：7359428154233618436</para>
    /// <para>接口文档：https://open.feishu.cn/document/directory-v1/employee/search</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>本接口用于搜索员工信息。</para>
    /// <para>员工指飞书企业内身份为「Employee」的成员，等同于通讯录OpenAPI中的「User」。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>directory:employee:search</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>directory:department.base:read</item>
    /// <item>directory:department.count:read</item>
    /// <item>directory:department.custom_field:read</item>
    /// <item>directory:department.data_source:read</item>
    /// <item>directory:department.department_path:read</item>
    /// <item>directory:department.external_id:read</item>
    /// <item>directory:department.has_child:read</item>
    /// <item>directory:department.leader:read</item>
    /// <item>directory:department.name:read</item>
    /// <item>directory:department.order_weight:read</item>
    /// <item>directory:department.organization:read</item>
    /// <item>directory:department.parent_id:read</item>
    /// <item>directory:department.status:read</item>
    /// <item>directory:employee.base.active_status:read</item>
    /// <item>directory:employee.base.avatar:read</item>
    /// <item>directory:employee.base.background_image:read</item>
    /// <item>directory:employee.base.base:read</item>
    /// <item>directory:employee.base.custom_field:read</item>
    /// <item>directory:employee.base.data_source:read</item>
    /// <item>directory:employee.base.department_path:read</item>
    /// <item>directory:employee.base.department:read</item>
    /// <item>directory:employee.base.dept_order:read</item>
    /// <item>directory:employee.base.description:read</item>
    /// <item>directory:employee.base.dotted_line_leaders:read</item>
    /// <item>directory:employee.base.email:read</item>
    /// <item>directory:employee.base.enterprise_email_alias:read</item>
    /// <item>directory:employee.base.enterprise_email:read</item>
    /// <item>directory:employee.base.external_id:read</item>
    /// <item>directory:employee.base.gender:read</item>
    /// <item>directory:employee.base.geo:read</item>
    /// <item>directory:employee.base.is_admin:read</item>
    /// <item>directory:employee.base.is_primary_admin:read</item>
    /// <item>directory:employee.base.is_resigned:read</item>
    /// <item>directory:employee.base.leader_id:read</item>
    /// <item>directory:employee.base.leader:read</item>
    /// <item>directory:employee.base.mobile:read</item>
    /// <item>directory:employee.base.name.another_name:read</item>
    /// <item>directory:employee.base.name.name:read</item>
    /// <item>directory:employee.base.resign_time:read</item>
    /// <item>directory:employee.base.role:read</item>
    /// <item>directory:employee.base.status:read</item>
    /// <item>directory:employee.base.subscription_ids:read</item>
    /// <item>directory:employee.work.base_work:read</item>
    /// <item>directory:employee.work.employment_type:read</item>
    /// <item>directory:employee.work.employment:read</item>
    /// <item>directory:employee.work.extension_number:read</item>
    /// <item>directory:employee.work.job_family:read</item>
    /// <item>directory:employee.work.job_number:read</item>
    /// <item>directory:employee.work.job_title:read</item>
    /// <item>directory:employee.work.join_date:read</item>
    /// <item>directory:employee.work.resign_date:read</item>
    /// <item>directory:employee.work.resign_reason:read</item>
    /// <item>directory:employee.work.resign_remark:read</item>
    /// <item>directory:employee.work.resign_type:read</item>
    /// <item>directory:employee.work.staff_status:read</item>
    /// <item>directory:employee.work.work_country_or_region:read</item>
    /// <item>directory:employee.work.work_place:read</item>
    /// <item>directory:employee.work.work_station:read</item>
    /// <item>directory:job_family.base:read</item>
    /// <item>directory:job_family.path:read</item>
    /// <item>directory:job_family.status:read</item>
    /// <item>directory:job_title.base:read</item>
    /// <item>directory:job_title.status:read</item>
    /// <item>directory:place.base:read</item>
    /// <item>directory:place.status:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>employee_id：企业内在职员工的唯一标识。支持自定义，未自定义时系统自动生成。ID支持修改。 获取employee_id的方式： - 企业管理员在 管理后台 &gt; 组织架构 &gt; 成员与部门 页面，点击 成员详情，查询员工ID - 通过 [批量获取员工列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/employee/filter) 的接口，通过手机号或邮箱查询员工ID。</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：用来在具体某个应用中标识一个部门，同一个部门 在不同应用中的 open_department_id 不相同。</item>
    /// <item>department_id：用来标识租户内一个唯一的部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/directory/v1/employees/search")]
    System.Threading.Tasks.Task<FeishuResponse<Directory.PostDirectoryV1EmployeesSearchResponseDto>> PostDirectoryV1EmployeesSearchAsync(
        [JsonContent] Directory.PostDirectoryV1EmployeesSearchBodyDto dto,
        [PathQuery] string? employee_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【组织架构】创建员工</para>
    /// <para>接口ID：7359428154233651204</para>
    /// <para>接口文档：https://open.feishu.cn/document/directory-v1/employee/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>本接口用于在企业下创建员工，可以理解为员工入职。</para>
    /// <para>员工指飞书企业内身份为「Employee」的成员，等同于通讯录OpenAPI中的「User」</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>directory:employee:write</item>
    /// <item>directory:employee.create:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>directory:employee.base.external_id:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>employee_id：企业内在职员工的唯一标识。支持自定义，未自定义时系统自动生成。ID支持修改。 获取employee_id的方式： - 企业管理员在 管理后台 &gt; 组织架构 &gt; 成员与部门 页面，点击 成员详情，查询员工ID - 通过 [批量获取员工列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/employee/filter) 的接口，通过手机号或邮箱查询员工ID。</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：用来标识租户内一个唯一的部门</item>
    /// <item>open_department_id：用来在具体某个应用中标识一个部门，同一个部门 在不同应用中的 open_department_id 相同。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/directory/v1/employees")]
    System.Threading.Tasks.Task<FeishuResponse<Directory.PostDirectoryV1EmployeesResponseDto>> PostDirectoryV1EmployeesAsync(
        [JsonContent] Directory.PostDirectoryV1EmployeesBodyDto dto,
        [PathQuery] string? employee_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【组织架构】更新员工</para>
    /// <para>接口ID：7359428154233667588</para>
    /// <para>接口文档：https://open.feishu.cn/document/directory-v1/employee/patch</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>本接口用于更新在职/离职员工的信息、冻结/恢复员工。未传递的参数不会进行更新。</para>
    /// <para>员工指飞书企业内身份为「Employee」的成员，等同于通讯录OpenAPI中的「User」。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>directory:employee:write</item>
    /// <item>directory:employee.update:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>directory:employee.base.external_id:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>员工ID，与employee_id_type类型保持一致。</para>
    /// <para>示例值：eehsdna</para>
    /// </param>
    /// <param name="employee_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>employee_id：企业内在职员工的唯一标识。支持自定义，未自定义时系统自动生成。ID支持修改。 获取employee_id的方式： - 企业管理员在 管理后台 &gt; 组织架构 &gt; 成员与部门 页面，点击 成员详情，查询员工ID - 通过 [批量获取员工列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/employee/filter) 的接口，通过手机号或邮箱查询员工ID。</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>部门ID类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：department_id</item>
    /// <item>open_department_id：open_department_id</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/directory/v1/employees/{employee_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PatchDirectoryV1EmployeesByEmployeeIdAsync(
        [PathQuery] string employee_id,
        [JsonContent] Directory.PatchDirectoryV1EmployeesByEmployeeIdBodyDto dto,
        [PathQuery] string? employee_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【组织架构】批量获取员工列表</para>
    /// <para>接口ID：7359428154233683972</para>
    /// <para>接口文档：https://open.feishu.cn/document/directory-v1/employee/filter</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>本接口用于依据指定条件，批量获取符合条件的员工详情列表。</para>
    /// <para>员工指飞书企业内身份为「Employee」的成员，等同于通讯录OpenAPI中的「User」</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>directory:employee:list</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>directory:department.base:read</item>
    /// <item>directory:department.count:read</item>
    /// <item>directory:department.custom_field:read</item>
    /// <item>directory:department.data_source:read</item>
    /// <item>directory:department.department_path:read</item>
    /// <item>directory:department.external_id:read</item>
    /// <item>directory:department.has_child:read</item>
    /// <item>directory:department.leader:read</item>
    /// <item>directory:department.name:read</item>
    /// <item>directory:department.order_weight:read</item>
    /// <item>directory:department.organization:read</item>
    /// <item>directory:department.parent_id:read</item>
    /// <item>directory:department.status:read</item>
    /// <item>directory:employee.base.active_status:read</item>
    /// <item>directory:employee.base.avatar:read</item>
    /// <item>directory:employee.base.background_image:read</item>
    /// <item>directory:employee.base.base:read</item>
    /// <item>directory:employee.base.custom_field:read</item>
    /// <item>directory:employee.base.data_source:read</item>
    /// <item>directory:employee.base.department_path:read</item>
    /// <item>directory:employee.base.department:read</item>
    /// <item>directory:employee.base.dept_order:read</item>
    /// <item>directory:employee.base.description:read</item>
    /// <item>directory:employee.base.dotted_line_leaders:read</item>
    /// <item>directory:employee.base.email:read</item>
    /// <item>directory:employee.base.enterprise_email_alias:read</item>
    /// <item>directory:employee.base.enterprise_email:read</item>
    /// <item>directory:employee.base.external_id:read</item>
    /// <item>directory:employee.base.gender:read</item>
    /// <item>directory:employee.base.geo:read</item>
    /// <item>directory:employee.base.is_admin:read</item>
    /// <item>directory:employee.base.is_primary_admin:read</item>
    /// <item>directory:employee.base.is_resigned:read</item>
    /// <item>directory:employee.base.leader_id:read</item>
    /// <item>directory:employee.base.leader:read</item>
    /// <item>directory:employee.base.mobile:read</item>
    /// <item>directory:employee.base.name.another_name:read</item>
    /// <item>directory:employee.base.name.name:read</item>
    /// <item>directory:employee.base.resign_time:read</item>
    /// <item>directory:employee.base.role:read</item>
    /// <item>directory:employee.base.status:read</item>
    /// <item>directory:employee.base.subscription_ids:read</item>
    /// <item>directory:employee.work.base_work:read</item>
    /// <item>directory:employee.work.employment_type:read</item>
    /// <item>directory:employee.work.employment:read</item>
    /// <item>directory:employee.work.extension_number:read</item>
    /// <item>directory:employee.work.job_family:read</item>
    /// <item>directory:employee.work.job_number:read</item>
    /// <item>directory:employee.work.job_title:read</item>
    /// <item>directory:employee.work.join_date:read</item>
    /// <item>directory:employee.work.resign_date:read</item>
    /// <item>directory:employee.work.resign_reason:read</item>
    /// <item>directory:employee.work.resign_remark:read</item>
    /// <item>directory:employee.work.resign_type:read</item>
    /// <item>directory:employee.work.staff_status:read</item>
    /// <item>directory:employee.work.work_country_or_region:read</item>
    /// <item>directory:employee.work.work_place:read</item>
    /// <item>directory:employee.work.work_station:read</item>
    /// <item>directory:job_family.base:read</item>
    /// <item>directory:job_family.path:read</item>
    /// <item>directory:job_family.status:read</item>
    /// <item>directory:job_title.base:read</item>
    /// <item>directory:job_title.status:read</item>
    /// <item>directory:place.base:read</item>
    /// <item>directory:place.status:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>employee_id：企业内在职员工的唯一标识。支持自定义，未自定义时系统自动生成。ID支持修改。 获取employee_id的方式： - 企业管理员在 管理后台 &gt; 组织架构 &gt; 成员与部门 页面，点击 成员详情，查询员工ID - 通过 [批量获取员工列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/employee/filter) 的接口，通过手机号或邮箱查询员工ID。</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：用来标识租户内一个唯一的部门</item>
    /// <item>open_department_id：用来在具体某个应用中标识一个部门，同一个部门 在不同应用中的 open_department_id 相同。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/directory/v1/employees/filter")]
    System.Threading.Tasks.Task<FeishuResponse<Directory.PostDirectoryV1EmployeesFilterResponseDto>> PostDirectoryV1EmployeesFilterAsync(
        [JsonContent] Directory.PostDirectoryV1EmployeesFilterBodyDto dto,
        [PathQuery] string? employee_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【组织架构】批量获取部门列表</para>
    /// <para>接口ID：7359428154233700356</para>
    /// <para>接口文档：https://open.feishu.cn/document/directory-v1/department/filter</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>本接口用于依据指定条件，批量获取符合条件的部门详情列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>directory:department:list</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>directory:department.base:read</item>
    /// <item>directory:department.count:read</item>
    /// <item>directory:department.custom_field:read</item>
    /// <item>directory:department.data_source:read</item>
    /// <item>directory:department.department_path:read</item>
    /// <item>directory:department.external_id:read</item>
    /// <item>directory:department.has_child:read</item>
    /// <item>directory:department.leader:read</item>
    /// <item>directory:department.name:read</item>
    /// <item>directory:department.order_weight:read</item>
    /// <item>directory:department.organization:read</item>
    /// <item>directory:department.parent_id:read</item>
    /// <item>directory:department.status:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的用户ID的类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>employee_id：企业内在职员工的唯一标识。支持自定义，未自定义时系统自动生成。ID支持修改。 获取employee_id的方式： - 企业管理员在 管理后台 &gt; 组织架构 &gt; 成员与部门 页面，点击 成员详情，查询员工ID - 通过 [批量获取员工列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/employee/filter) 的接口，通过手机号或邮箱查询员工ID。</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：用来在具体某个应用中标识一个部门，同一个部门 在不同应用中的 open_department_id 相同。</item>
    /// <item>department_id：用来标识租户内一个唯一的部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/directory/v1/departments/filter")]
    System.Threading.Tasks.Task<FeishuResponse<Directory.PostDirectoryV1DepartmentsFilterResponseDto>> PostDirectoryV1DepartmentsFilterAsync(
        [JsonContent] Directory.PostDirectoryV1DepartmentsFilterBodyDto dto,
        [PathQuery] string? employee_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【组织架构】恢复离职员工</para>
    /// <para>接口ID：7359428234122821636</para>
    /// <para>接口文档：https://open.feishu.cn/document/directory-v1/employee/resurrect</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于恢复已离职的成员。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>directory:employee:write</item>
    /// <item>directory:employee.resurrect:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>directory:employee.base.external_id:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>员工ID，与employee_id_type类型保持一致</para>
    /// <para>示例值：eedasdas</para>
    /// </param>
    /// <param name="employee_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>employee_id：企业内在职员工的唯一标识。支持自定义，未自定义时系统自动生成。ID支持修改。 获取employee_id的方式： - 企业管理员在 管理后台 &gt; 组织架构 &gt; 成员与部门 页面，点击 成员详情，查询员工ID - 通过 [批量获取员工列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/employee/filter) 的接口，通过手机号或邮箱查询员工ID。</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>部门ID类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：department_id</item>
    /// <item>open_department_id：open_department_id</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/directory/v1/employees/{employee_id}/resurrect")]
    System.Threading.Tasks.Task<FeishuResponse> PostDirectoryV1EmployeesByEmployeeIdResurrectAsync(
        [PathQuery] string employee_id,
        [JsonContent] Directory.PostDirectoryV1EmployeesByEmployeeIdResurrectBodyDto dto,
        [PathQuery] string? employee_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【组织架构】批量获取部门信息</para>
    /// <para>接口ID：7359428234122854404</para>
    /// <para>接口文档：https://open.feishu.cn/document/directory-v1/department/mget</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>本接口用于批量根据部门的ID查询部门的详情。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>directory:department:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>directory:department.base:read</item>
    /// <item>directory:department.count:read</item>
    /// <item>directory:department.custom_field:read</item>
    /// <item>directory:department.data_source:read</item>
    /// <item>directory:department.department_path:read</item>
    /// <item>directory:department.external_id:read</item>
    /// <item>directory:department.has_child:read</item>
    /// <item>directory:department.leader:read</item>
    /// <item>directory:department.name:read</item>
    /// <item>directory:department.order_weight:read</item>
    /// <item>directory:department.organization:read</item>
    /// <item>directory:department.parent_id:read</item>
    /// <item>directory:department.status:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的用户ID的类型</para>
    /// <para>示例值：user_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>employee_id：企业内在职员工的唯一标识。支持自定义，未自定义时系统自动生成。ID支持修改。 获取employee_id的方式： - 企业管理员在 管理后台 &gt; 组织架构 &gt; 成员与部门 页面，点击 成员详情，查询员工ID - 通过 [批量获取员工列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/employee/filter) 的接口，通过手机号或邮箱查询员工ID。</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型</para>
    /// <para>示例值：department_id</para>
    /// <list type="bullet">
    /// <item>department_id：用来标识租户内一个唯一的部门</item>
    /// <item>open_department_id：用来在具体某个应用中标识一个部门，同一个部门 在不同应用中的 open_department_id 相同。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/directory/v1/departments/mget")]
    System.Threading.Tasks.Task<FeishuResponse<Directory.PostDirectoryV1DepartmentsMgetResponseDto>> PostDirectoryV1DepartmentsMgetAsync(
        [JsonContent] Directory.PostDirectoryV1DepartmentsMgetBodyDto dto,
        [PathQuery] string? employee_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【招聘】删除外部内推奖励</para>
    /// <para>接口ID：7361028373559230467</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/get-candidates/import-external-system-information/import-external-referral-reward-info/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据外部内推奖励ID删除外部内推奖励。</para>
    /// <para>## 注意事项</para>
    /// <para>- 仅支持删除通过[导入外部内推奖励](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/external_referral_reward/create)导入的内推奖励，飞书招聘系统本身产生的内推奖励不支持删除。</para>
    /// <para>- 删除指定外部奖励后，「飞书招聘」- 「设置」- 「内推」-「内推奖励管理」中对应的内推奖励明细将会被删除。</para>
    /// <para>- 若删除「已确认」、「已发放」的奖励，内推人在「飞书招聘」-「设置」-「内推」-「我的奖励」中对应内推奖励明细将会被删除，请注意与内推人提前沟通。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:external_referral_reward</item>
    /// </list></para>
    /// </summary>
    /// <param name="external_referral_reward_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>外部内推奖励ID，通过[导入外部内推奖励](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/external_referral_reward/create)生成</para>
    /// <para>示例值：6930815272790114324</para>
    /// </param>
    [HttpDelete("/open-apis/hire/v1/external_referral_rewards/{external_referral_reward_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteHireV1ExternalReferralRewardsByExternalReferralRewardIdAsync(
        [PathQuery] string external_referral_reward_id);

    /// <summary>
    /// <para>【飞书人事】移除用户被授权的角色</para>
    /// <para>接口ID：7361618338575777820</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/authorization/remove_role_assign</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>移除用户被授权的指定角色及授权范围，已经存在授权可通过[查询单个用户授权](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/authorization/get_by_param)获得。或者在[飞书人事管理后台](https://people.feishu.cn/people/)里 -「设置」-「权限设置」中的查看已有用户授权信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:authorization:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="employment_id">
    /// <para>必填：是</para>
    /// <para>用户的 ID，ID类型与user_id_type的取值意义一致。默认为飞书人事中的 ==employment_id==。</para>
    /// <para>如果你需要不同类型的ID进行转换，可以使用 [ID转换服务](https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/common_data-id/convert) 换取 ==employment_id==</para>
    /// <para>示例值：7303877149017292801</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="role_id">
    /// <para>必填：是</para>
    /// <para>移除的角色的 ID，一次仅可移除一个角色。</para>
    /// <para>你可以使用 [批量获取角色列表](https://open.larkoffice.com/document/server-docs/corehr-v1/authorization/list) 获取，或者在飞书人事角色详情页的url中获取（URL 末的数字）role_id。</para>
    /// <para>示例值：7358732070333613619</para>
    /// </param>
    [HttpPost("/open-apis/corehr/v1/authorizations/remove_role_assign")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1AuthorizationsRemoveRoleAssignResponseDto>> PostCorehrV1AuthorizationsRemoveRoleAssignAsync(
        [PathQuery] string employment_id,
        [PathQuery] string role_id,
        [PathQuery] string? user_id_type = "people_corehr_id");

    /// <summary>
    /// <para>【飞书人事】为用户授权角色</para>
    /// <para>接口ID：7361618338575794204</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/authorization/add_role_assign</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>为用户授权角色及管理范围</para>
    /// <para>对已被授权某个角色的用户继续授权，将在原授权的数据范围基础上追加数据范围。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:authorization:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="employment_id">
    /// <para>必填：是</para>
    /// <para>被授权用户的 ID，ID类型与user_id_type的取值意义一致。默认为飞书人事中的 ==employment_id==。</para>
    /// <para>如果你需要不同类型的ID进行转换，可以使用 [ID转换服务](https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/common_data-id/convert) 换取 ==employment_id==</para>
    /// <para>示例值：7303877149017292801</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="role_id">
    /// <para>必填：是</para>
    /// <para>被授权角色的 ID，一次仅可授权一个角色。你可以使用 [批量获取角色列表](https://open.larkoffice.com/document/server-docs/corehr-v1/authorization/list) 获取，或者在角色详情中获取（URL 末的数字）</para>
    /// <para>示例值：7358732070333613619</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/authorizations/add_role_assign")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1AuthorizationsAddRoleAssignResponseDto>> PostCorehrV1AuthorizationsAddRoleAssignAsync(
        [PathQuery] string employment_id,
        [PathQuery] string role_id,
        [JsonContent] FeishuPeople.PostCorehrV1AuthorizationsAddRoleAssignBodyDto dto,
        [PathQuery] string? user_id_type = "people_corehr_id");

    /// <summary>
    /// <para>【飞书人事】更新用户被授权的数据范围</para>
    /// <para>接口ID：7361618338575810588</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/authorization/update_role_assign</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新角色被授权的管理范围</para>
    /// <para>更新后的数据范围，以本次提交的数据范围为准，本次未提交的部分将被移除。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:authorization:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="employment_id">
    /// <para>必填：是</para>
    /// <para>被授权用户的 ID，ID类型与user_id_type的取值意义一致。默认为飞书人事中的 ==employment_id==。</para>
    /// <para>如果你需要不同类型的ID进行转换，可以使用 [ID转换服务](https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/common_data-id/convert) 换取 ==employment_id==</para>
    /// <para>示例值：7303877149017292801</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="role_id">
    /// <para>必填：是</para>
    /// <para>被授权角色的 ID，一次仅可授权一个角色。你可以使用 [批量获取角色列表](https://open.larkoffice.com/document/server-docs/corehr-v1/authorization/list) 获取，或者在角色详情中获取（URL 末的数字）</para>
    /// <para>示例值：7358732070333613619</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/authorizations/update_role_assign")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1AuthorizationsUpdateRoleAssignResponseDto>> PostCorehrV1AuthorizationsUpdateRoleAssignAsync(
        [PathQuery] string employment_id,
        [PathQuery] string role_id,
        [JsonContent] FeishuPeople.PostCorehrV1AuthorizationsUpdateRoleAssignBodyDto dto,
        [PathQuery] string? user_id_type = "people_corehr_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】获取流程表单数据</para>
    /// <para>接口ID：7362022982036717571</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/process-form_variable_data/process-instance/get-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据流程实例 id（process_id）获取流程表单字段数据，包括表单里的业务字段和自定义字段。仅支持飞书人事、假勤相关业务流程。</para>
    /// <para>注：[旧版 API](https://open.larkoffice.com/document/server-docs/corehr-v1/process-form_variable_data/get) 文档已移动到【历史版本】目录。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:process:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="process_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>流程实例id，是一个流程的唯一标识。</para>
    /// <para>可通过[查询流程实例列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/process/list)接口返回的 process_ids 字段获取</para>
    /// <para>示例值：7341373094948242956</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：people_corehr_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：people_corehr_department_id</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v2/processes/{process_id}/form_variable_data")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.GetCorehrV2ProcessesByProcessIdFormVariableDataResponseDto>> GetCorehrV2ProcessesByProcessIdFormVariableDataAsync(
        [PathQuery] string process_id,
        [PathQuery] string? user_id_type = "people_corehr_id",
        [PathQuery] string? department_id_type = "people_corehr_department_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】更新部门</para>
    /// <para>接口ID：7362022982037307395</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/department/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新部门，支持数据行权限判权</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:department:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="department_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要更新的部门 ID</para>
    /// <para>示例值：1616161616</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：people_corehr_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：【飞书】用来在具体某个应用中标识一个部门，同一个department_id 在不同应用中的 open_department_id 相同。</item>
    /// <item>department_id：【飞书】用来标识租户内一个唯一的部门。</item>
    /// <item>people_corehr_department_id：飞书人事】用来标识「飞书人事」中的部门。</item>
    /// </list>
    /// <para>默认值：people_corehr_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/corehr/v2/departments/{department_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PatchCorehrV2DepartmentsByDepartmentIdAsync(
        [PathQuery] string department_id,
        [JsonContent] Corehr.PatchCorehrV2DepartmentsByDepartmentIdBodyDto dto,
        [PathQuery] string? client_token = null,
        [PathQuery] string? user_id_type = "people_corehr_id",
        [PathQuery] string? department_id_type = "people_corehr_department_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】删除部门 V2</para>
    /// <para>接口ID：7362022982037323779</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/department/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>可以通过该接口通过部门ID删除一个部门记录，带数据行权限判权</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:department:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="department_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要删除的部门 ID，可通过[【搜索部门信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/department/search)接口查询获得</para>
    /// <para>示例值：1616161616</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：【飞书】用来在具体某个应用中标识一个部门，同一个department_id 在不同应用中的 open_department_id 相同。</item>
    /// <item>department_id：【飞书】用来标识租户内一个唯一的部门。</item>
    /// <item>people_corehr_department_id：【飞书人事】用来标识「飞书人事」中的部门。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    [HttpDelete("/open-apis/corehr/v2/departments/{department_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCorehrV2DepartmentsByDepartmentIdAsync(
        [PathQuery] string department_id,
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】删除待入职信息</para>
    /// <para>接口ID：7362022982037504003</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/pre_hire/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除待入职人员，删除后无法搜索到待入职人员信息，请谨慎操作</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:pre_hire:delete</item>
    /// </list></para>
    /// </summary>
    /// <param name="pre_hire_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>待入职ID，可通过[搜索接口](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/pre_hire/search)获取</para>
    /// <para>示例值：7345005664477775407</para>
    /// </param>
    [HttpDelete("/open-apis/corehr/v2/pre_hires/{pre_hire_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCorehrV2PreHiresByPreHireIdAsync(
        [PathQuery] string pre_hire_id);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询职等</para>
    /// <para>接口ID：7366602835655720964</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/job-management/job_grade/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询职等的详细信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// <item>corehr:job_grade:read</item>
    /// <item>corehr:job_grade:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6891251722631890445</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/job_grades/query")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2JobGradesQueryResponseDto>> PostCorehrV2JobGradesQueryAsync(
        [JsonContent] Corehr.PostCorehrV2JobGradesQueryBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【考勤打卡】查询归档报表表头</para>
    /// <para>接口ID：7368679915980898306</para>
    /// <para>接口文档：https://open.feishu.cn/document/attendance-v1/archive_rule/user_stats_fields_query</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>查询归档报表表头，对应后台假勤管理-考勤统计-报表-[归档报表](https://example.feishu.cn/people/workforce-management/manage/statistics/report)中一个归档报表的表头信息。归档报表支持引用系统报表，可设置归档时间和数据归档周期，并且支持根据部门/人员、国家/地区、人员类型、工作地点、职级、序列、职务进行人员圈选。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:task</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_type">
    /// <para>必填：是</para>
    /// <para>请求体中的 user_ids 和响应体中的 user_id 的员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)</para>
    /// <para>* `employee_id `：员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的用户 ID</para>
    /// <para>* `employee_no`：员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的工号</para>
    /// <para>示例值：employee_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/attendance/v1/archive_rule/user_stats_fields_query")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PostAttendanceV1ArchiveRuleUserStatsFieldsQueryResponseDto>> PostAttendanceV1ArchiveRuleUserStatsFieldsQueryAsync(
        [PathQuery] string employee_type,
        [JsonContent] Attendance.PostAttendanceV1ArchiveRuleUserStatsFieldsQueryBodyDto dto);

    /// <summary>
    /// <para>【考勤打卡】写入归档报表结果</para>
    /// <para>接口ID：7368679915980914690</para>
    /// <para>接口文档：https://open.feishu.cn/document/attendance-v1/archive_rule/upload_report</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>写入归档报表结果，对应假勤管理-考勤统计-报表-[归档报表](https://example.feishu.cn/people/workforce-management/manage/statistics/report)页签，点击报表名称进入后的导入功能。可以将数据直接写入归档报表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:task</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_type">
    /// <para>必填：是</para>
    /// <para>请求体中的 user_ids 和响应体中的 user_id 的员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)</para>
    /// <para>* `employee_id `：员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的用户 ID</para>
    /// <para>* `employee_no`：员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的工号</para>
    /// <para>示例值：employee_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/attendance/v1/archive_rule/upload_report")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PostAttendanceV1ArchiveRuleUploadReportResponseDto>> PostAttendanceV1ArchiveRuleUploadReportAsync(
        [PathQuery] string employee_type,
        [JsonContent] Attendance.PostAttendanceV1ArchiveRuleUploadReportBodyDto dto);

    /// <summary>
    /// <para>【考勤打卡】删除归档报表行数据</para>
    /// <para>接口ID：7368679915980931074</para>
    /// <para>接口文档：https://open.feishu.cn/document/attendance-v1/archive_rule/del_report</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>按月份、用户和归档规则ID直接删除归档报表行数据</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:task</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_type">
    /// <para>必填：是</para>
    /// <para>请求体中的 user_ids 和响应体中的 user_id 的员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)</para>
    /// <para>* `employee_id `：员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的用户 ID</para>
    /// <para>* `employee_no`：员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的工号</para>
    /// <para>示例值：employee_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/attendance/v1/archive_rule/del_report")]
    System.Threading.Tasks.Task<FeishuResponse> PostAttendanceV1ArchiveRuleDelReportAsync(
        [PathQuery] string employee_type,
        [JsonContent] Attendance.PostAttendanceV1ArchiveRuleDelReportBodyDto dto);

    /// <summary>
    /// <para>【考勤打卡】查询所有归档规则</para>
    /// <para>接口ID：7368679915980947458</para>
    /// <para>接口文档：https://open.feishu.cn/document/attendance-v1/archive_rule/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>查询所有归档规则，对应后台假勤管理-考勤统计-报表-[归档报表](https://example.feishu.cn/people/workforce-management/manage/statistics/report)功能</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:task:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，必填参数</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：xxx</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/attendance/v1/archive_rule")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.GetAttendanceV1ArchiveRuleResponseDto>> GetAttendanceV1ArchiveRuleAsync(
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【绩效】批量删除补充信息</para>
    /// <para>接口ID：7371009404255600644</para>
    /// <para>接口文档：https://open.feishu.cn/document/performance-v1/review_config/semester_activity/additional_information/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量删除被评估人的补充信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>performance:performance</item>
    /// <item>performance:semester_activity:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpDelete("/open-apis/performance/v2/additional_informations/batch")]
    System.Threading.Tasks.Task<FeishuResponse<Performance.DeletePerformanceV2AdditionalInformationsBatchResponseDto>> DeletePerformanceV2AdditionalInformationsBatchAsync(
        [JsonContent] Performance.DeletePerformanceV2AdditionalInformationsBatchBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【绩效】批量查询补充信息</para>
    /// <para>接口ID：7371009404255617028</para>
    /// <para>接口文档：https://open.feishu.cn/document/performance-v1/review_config/semester_activity/additional_information/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量查询被评估人的补充信息，如补充信息的事项、时间以及具体描述等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>performance:performance</item>
    /// <item>performance:performance:readonly</item>
    /// <item>performance:semester_activity:read</item>
    /// <item>performance:semester_activity:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：30</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/performance/v2/additional_informations/query")]
    System.Threading.Tasks.Task<FeishuResponse<Performance.PostPerformanceV2AdditionalInformationsQueryResponseDto>> PostPerformanceV2AdditionalInformationsQueryAsync(
        [JsonContent] Performance.PostPerformanceV2AdditionalInformationsQueryBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【绩效】批量导入补充信息</para>
    /// <para>接口ID：7371009404255633412</para>
    /// <para>接口文档：https://open.feishu.cn/document/performance-v1/review_config/semester_activity/additional_information/import</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量导入被评估人的补充信息作为绩效评估的参考，如补充信息的事项、时间以及具体描述等。该接口支持创建和更新补充信息。</para>
    /// <para>## 注意事项</para>
    /// <para>该接口执行创建或者更新的判断逻辑如下（按顺序判断）：</para>
    /// <para>1. 若请求参数 `additional_informations` 中 `item_ids` 传入系统中已有的补充信息 ID 时，将更新对应的补充消息数据。</para>
    /// <para>2. 若请求参数 `additional_informations` 中 `external_ids` 传入系统中已有的外部系统补充信息 ID 时，将更新对应的补充消息数据。</para>
    /// <para>3. 若请求参数 `additional_informations` 中 `reviewee_user_id`、`item `、`time `、`detailed_description` 的参数组合在系统中已存在内容一致的补充消息时，将更新对应的补充消息数据。</para>
    /// <para>4. 以上情况都不符合时，创建新的补充消息数据。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>performance:performance</item>
    /// <item>performance:semester_activity:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：是</para>
    /// <para>根据 `client_token` 是否一致来判断是否为同一请求，同一请求多次调用将被拦截</para>
    /// <para>示例值：12454646</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/performance/v2/additional_informations/import")]
    System.Threading.Tasks.Task<FeishuResponse<Performance.PostPerformanceV2AdditionalInformationsImportResponseDto>> PostPerformanceV2AdditionalInformationsImportAsync(
        [PathQuery] string client_token,
        [JsonContent] Performance.PostPerformanceV2AdditionalInformationsImportBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事】批量查询用户授权</para>
    /// <para>接口ID：7372022997609906178</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/authorization/query-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量查询[飞书人事管理后台](https://people.feishu.cn/people/) -「设置」-「权限设置」中的用户授权信息。授权列表信息中包括员工ID、被授权的角色等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:authorization:read</item>
    /// <item>corehr:authorization:write</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="employment_id_list">
    /// <para>必填：否</para>
    /// <para>员工ID列表，最大100个（不传则默认查询全部员工）。ID类型与user_id_type的取值意义一致。默认为飞书人事中的 ==employment_id==。</para>
    /// <para>如果你需要不同类型的ID进行转换，可以使用 [ID转换服务](https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/common_data-id/convert) 换取 ==employment_id==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="role_id_list">
    /// <para>必填：否</para>
    /// <para>角色 ID 列表，最大 100 个。当传该参数时，会根据rold_id过滤，只返回包含该角色的授权信息。</para>
    /// <para>你可以使用 [批量获取角色列表](https://open.larkoffice.com/document/server-docs/corehr-v1/authorization/list) 获取，或者在角色详情中获取（URL 末的数字）。</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6969864184272078374</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>每页获取记录数量，最大20(不传该参数，默认为20)</para>
    /// <para>示例值：20</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="updated_at_gte">
    /// <para>必填：否</para>
    /// <para>授权时间大于</para>
    /// <para>示例值：1729773628</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="updated_at_lte">
    /// <para>必填：否</para>
    /// <para>授权时间小于</para>
    /// <para>示例值：1729773628</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/authorizations/query")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1AuthorizationsQueryResponseDto>> GetCorehrV1AuthorizationsQueryAsync(
        [PathQuery] string[]? employment_id_list = null,
        [PathQuery] string[]? role_id_list = null,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? user_id_type = "people_corehr_id",
        [PathQuery] string? updated_at_gte = null,
        [PathQuery] string? updated_at_lte = null);

    /// <summary>
    /// <para>【飞书人事】查询单个用户授权</para>
    /// <para>接口ID：7372022997609922562</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/authorization/get_by_param</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询[飞书人事管理后台](https://people.feishu.cn/people/)里 -「设置」-「权限设置」中的单个用户授权信息。授权信息中包括员工ID、被授权的角色等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:authorization:write</item>
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="employment_id">
    /// <para>必填：是</para>
    /// <para>被授权用户的 ID，ID类型与user_id_type的取值意义一致。默认为飞书人事中的 ==employment_id==。</para>
    /// <para>如果你需要不同类型的ID进行转换，可以使用 [ID转换服务](https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/common_data-id/convert) 换取 ==employment_id==</para>
    /// <para>示例值：67489937334909845</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/authorizations/get_by_param")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1AuthorizationsGetByParamResponseDto>> GetCorehrV1AuthorizationsGetByParamAsync(
        [PathQuery] string employment_id,
        [PathQuery] string? user_id_type = "people_corehr_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】批量查询部门版本信息</para>
    /// <para>接口ID：7372158581884911618</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/department/query_multi_timeline</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据部门ID列表，批量查询开始结束时间内的所有部门版本信息，含部门名称、部门类型、上级、编码、负责人、是否启用、描述等信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:department:read</item>
    /// <item>corehr:department:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:department.custom_fields:read</item>
    /// <item>corehr:department.manager:read</item>
    /// <item>corehr:department.organize:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6891251722631890445</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：people_corehr_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：【飞书】用来在具体某个应用中标识一个部门，同一个department_id 在不同应用中的 open_department_id 相同。</item>
    /// <item>department_id：【飞书】用来标识租户内一个唯一的部门。</item>
    /// <item>people_corehr_department_id：【飞书人事】用来标识「飞书人事」中的部门。</item>
    /// </list>
    /// <para>默认值：people_corehr_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/departments/query_multi_timeline")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2DepartmentsQueryMultiTimelineResponseDto>> PostCorehrV2DepartmentsQueryMultiTimelineAsync(
        [JsonContent] Corehr.PostCorehrV2DepartmentsQueryMultiTimelineBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "people_corehr_id",
        [PathQuery] string? department_id_type = "people_corehr_department_id");

    /// <summary>
    /// <para>【招聘】查询面试官信息列表</para>
    /// <para>接口ID：7372229724359835649</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/recruitment-related-configuration/interview-settings/interviewer/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>分页查询面试官列表，接口只会返回执行过「更新面试官信息」用户的数据，通过接口查询不到的数据则默认为「未认证」面试官。接口默认按更新时间、user_id顺序进行顺序拉取。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:interviewer</item>
    /// <item>hire:interviewer:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_ids">
    /// <para>必填：否</para>
    /// <para>面试官userID列表</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="verify_status">
    /// <para>必填：否</para>
    /// <para>认证状态</para>
    /// <para>示例值：1</para>
    /// <list type="bullet">
    /// <item>1：未认证</item>
    /// <item>2：已认证</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="earliest_update_time">
    /// <para>必填：否</para>
    /// <para>最早更新时间，毫秒时间戳</para>
    /// <para>示例值：1714374796615</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="latest_update_time">
    /// <para>必填：否</para>
    /// <para>最晚更新时间，毫秒时间戳</para>
    /// <para>示例值：1714374796616</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/interviewers")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1InterviewersResponseDto>> GetHireV1InterviewersAsync(
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string[]? user_ids = null,
        [PathQuery] int? verify_status = null,
        [PathQuery] string? earliest_update_time = null,
        [PathQuery] string? latest_update_time = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】更新面试官信息</para>
    /// <para>接口ID：7372229724359852033</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/recruitment-related-configuration/interview-settings/interviewer/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>用于更新面试官认证信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:interviewer</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="interviewer_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>面试官userID</para>
    /// <para>示例值：ou_7dab8a3d3cdcc9da365777c7ad535d62</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/hire/v1/interviewers/{interviewer_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PatchHireV1InterviewersByInterviewerIdResponseDto>> PatchHireV1InterviewersByInterviewerIdAsync(
        [PathQuery] string interviewer_id,
        [JsonContent] Hire.PatchHireV1InterviewersByInterviewerIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【消息与群组】添加跟随气泡</para>
    /// <para>接口ID：7377650885165268995</para>
    /// <para>接口文档：https://open.feishu.cn/document/im-v1/message/push_follow_up</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口在最新一条消息下方添加气泡样式的内容，当消息接收者点击气泡或者新消息到达后，气泡消失。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 跟随气泡的效果在飞书客户端 v7.20 及以上版本生效。</para>
    /// <para>- 仅支持在当前机器人与用户单聊的消息上添加跟随气泡，且消息需要符合：</para>
    /// <para>- 消息是机器人发送的。</para>
    /// <para>- 消息是会话内最新的消息。</para>
    /// <para>- 消息发送后未超过 600 秒。</para>
    /// <para>## 注意事项</para>
    /// <para>添加跟随气泡后，会话内的用户点击气泡会自动转换为该用户发送的一条消息，你可以为应用订阅[接收消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/events/receive)事件，接收用户发送的消息并判断是否为跟随气泡的内容。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:message</item>
    /// <item>im:message:send_as_bot</item>
    /// </list></para>
    /// </summary>
    /// <param name="message_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>机器人发送的消息 ID。ID 获取方式：</para>
    /// <para>- 调用[发送消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create)接口后，从响应结果的 `message_id` 参数获取。</para>
    /// <para>- 监听[接收消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/events/receive)事件，当触发该事件后可以从事件体内获取消息的 `message_id`。</para>
    /// <para>- 调用[获取会话历史消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/list)接口，从响应结果的 `message_id` 参数获取。</para>
    /// <para>示例值：om_3210a18894e206715a4359115f4cf2f5</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/im/v1/messages/{message_id}/push_follow_up")]
    System.Threading.Tasks.Task<FeishuResponse> PostImV1MessagesByMessageIdPushFollowUpAsync(
        [PathQuery] string message_id,
        [JsonContent] Im.PostImV1MessagesByMessageIdPushFollowUpBodyDto dto);

    /// <summary>
    /// <para>【招聘】删除备注</para>
    /// <para>接口ID：7380199635317932035</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/candidate-management/note/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据备注 ID 删除备注。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:note</item>
    /// </list></para>
    /// </summary>
    /// <param name="note_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>备注 ID，可通过[获取备注列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/note/list)获取</para>
    /// <para>示例值：6996605821056812588</para>
    /// </param>
    [HttpDelete("/open-apis/hire/v1/notes/{note_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteHireV1NotesByNoteIdAsync(
        [PathQuery] string note_id);

    /// <summary>
    /// <para>【绩效】获取指标列表</para>
    /// <para>接口ID：7380276358332661761</para>
    /// <para>接口文档：https://open.feishu.cn/document/performance-v1/review_config/metric_template/query-3</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取指标库中的指标信息，如指标名称、指标类型、指标标签和指标字段等信息。可通过指标启用状态、指标类型、指标可用范围等筛选条件获取指定范围的指标信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>performance:metric_lib:read</item>
    /// <item>performance:metric:read</item>
    /// <item>performance:metric:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：20</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/performance/v2/metric_libs/query")]
    System.Threading.Tasks.Task<FeishuResponse<Performance.PostPerformanceV2MetricLibsQueryResponseDto>> PostPerformanceV2MetricLibsQueryAsync(
        [JsonContent] Performance.PostPerformanceV2MetricLibsQueryBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【绩效】获取被评估人信息</para>
    /// <para>接口ID：7380276358332678145</para>
    /// <para>接口文档：https://open.feishu.cn/document/performance-v1/review_config/semester_activity/reviewee/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取绩效周期中被圈定到项目中的被评估人信息，包括未启动的项目。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>performance:performance</item>
    /// <item>performance:performance:readonly</item>
    /// <item>performance:semester_user:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：30</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/performance/v2/reviewees/query")]
    System.Threading.Tasks.Task<FeishuResponse<Performance.PostPerformanceV2RevieweesQueryResponseDto>> PostPerformanceV2RevieweesQueryAsync(
        [JsonContent] Performance.PostPerformanceV2RevieweesQueryBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【绩效】录入被评估人关键指标数据</para>
    /// <para>接口ID：7380276358332694529</para>
    /// <para>接口文档：https://open.feishu.cn/document/performance-v1/metric_detail/import</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量录入指定周期中被评估人的关键指标数据。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>performance:metric:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：是</para>
    /// <para>根据 client_token 是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/performance/v2/metric_details/import")]
    System.Threading.Tasks.Task<FeishuResponse<Performance.PostPerformanceV2MetricDetailsImportResponseDto>> PostPerformanceV2MetricDetailsImportAsync(
        [PathQuery] string client_token,
        [JsonContent] Performance.PostPerformanceV2MetricDetailsImportBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【绩效】获取指标模板列表</para>
    /// <para>接口ID：7380276358332710913</para>
    /// <para>接口文档：https://open.feishu.cn/document/performance-v1/review_config/metric_template/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量获取指标模板的信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>performance:metric_lib:read</item>
    /// <item>performance:metric:read</item>
    /// <item>performance:metric:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：30</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/performance/v2/metric_templates/query")]
    System.Threading.Tasks.Task<FeishuResponse<Performance.PostPerformanceV2MetricTemplatesQueryResponseDto>> PostPerformanceV2MetricTemplatesQueryAsync(
        [JsonContent] Performance.PostPerformanceV2MetricTemplatesQueryBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【绩效】获取指标字段列表</para>
    /// <para>接口ID：7380276358332727297</para>
    /// <para>接口文档：https://open.feishu.cn/document/performance-v1/review_config/metric_template/query-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量获取指标的字段基础信息，如指标字段名称、指标字段类型等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>performance:metric_lib:read</item>
    /// <item>performance:metric:read</item>
    /// <item>performance:metric:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/performance/v2/metric_fields/query")]
    System.Threading.Tasks.Task<FeishuResponse<Performance.PostPerformanceV2MetricFieldsQueryResponseDto>> PostPerformanceV2MetricFieldsQueryAsync(
        [JsonContent] Performance.PostPerformanceV2MetricFieldsQueryBodyDto dto);

    /// <summary>
    /// <para>【绩效】获取被评估人关键指标结果</para>
    /// <para>接口ID：7380276358332743681</para>
    /// <para>接口文档：https://open.feishu.cn/document/performance-v1/metric_detail/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量获取指定周期中被评估人的关键指标结果。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>performance:metric:read</item>
    /// <item>performance:metric:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/performance/v2/metric_details/query")]
    System.Threading.Tasks.Task<FeishuResponse<Performance.PostPerformanceV2MetricDetailsQueryResponseDto>> PostPerformanceV2MetricDetailsQueryAsync(
        [JsonContent] Performance.PostPerformanceV2MetricDetailsQueryBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【绩效】更新人员组成员</para>
    /// <para>接口ID：7381506957100875778</para>
    /// <para>接口文档：https://open.feishu.cn/document/performance-v1/review_config/semester_activity/user_group_user_rel/write</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新指定人员组成员。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>performance:semester_activity:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：是</para>
    /// <para>根据 client_token 是否一致来判断是否为同一请求</para>
    /// <para>示例值：123456</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/performance/v2/user_group_user_rels/write")]
    System.Threading.Tasks.Task<FeishuResponse<Performance.PostPerformanceV2UserGroupUserRelsWriteResponseDto>> PostPerformanceV2UserGroupUserRelsWriteAsync(
        [PathQuery] string client_token,
        [JsonContent] Performance.PostPerformanceV2UserGroupUserRelsWriteBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书低代码平台】删除记录</para>
    /// <para>接口ID：7384730094872936476</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/application-object-record/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除对象中的指定记录</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:object.record:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="namespace">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用命名空间</para>
    /// <para>示例值：package_test__c</para>
    /// </param>
    /// <param name="object_api_name">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>对象唯一标识</para>
    /// <para>示例值：user</para>
    /// </param>
    /// <param name="id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>记录ID</para>
    /// <para>示例值：1764024447556775</para>
    /// </param>
    [HttpDelete("/open-apis/apaas/v1/applications/{namespace}/objects/{object_api_name}/records/{id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteApaasV1ApplicationsByNamespaceObjectsByObjectApiNameRecordsByIdAsync(
        [PathQuery] string @namespace,
        [PathQuery] string object_api_name,
        [PathQuery] string id);

    /// <summary>
    /// <para>【飞书低代码平台】新建记录</para>
    /// <para>接口ID：7384730094872952860</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/application-object-record/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>在对象中新建记录</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:object.record:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="namespace">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用命名空间</para>
    /// <para>示例值：package_test__c</para>
    /// </param>
    /// <param name="object_api_name">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>对象唯一标识</para>
    /// <para>示例值：user</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/apaas/v1/applications/{namespace}/objects/{object_api_name}/records")]
    System.Threading.Tasks.Task<FeishuResponse<AppEngine.PostApaasV1ApplicationsByNamespaceObjectsByObjectApiNameRecordsResponseDto>> PostApaasV1ApplicationsByNamespaceObjectsByObjectApiNameRecordsAsync(
        [PathQuery] string @namespace,
        [PathQuery] string object_api_name,
        [JsonContent] AppEngine.PostApaasV1ApplicationsByNamespaceObjectsByObjectApiNameRecordsBodyDto dto);

    /// <summary>
    /// <para>【飞书低代码平台】批量编辑记录</para>
    /// <para>接口ID：7384730094872969244</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/application-object-record/batch_update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>一次编辑多条对象中的记录</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:object.record:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="namespace">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用命名空间</para>
    /// <para>示例值：package_test__c</para>
    /// </param>
    /// <param name="object_api_name">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>对象唯一标识</para>
    /// <para>示例值：user</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/apaas/v1/applications/{namespace}/objects/{object_api_name}/records/batch_update")]
    System.Threading.Tasks.Task<FeishuResponse<AppEngine.PatchApaasV1ApplicationsByNamespaceObjectsByObjectApiNameRecordsBatchUpdateResponseDto>> PatchApaasV1ApplicationsByNamespaceObjectsByObjectApiNameRecordsBatchUpdateAsync(
        [PathQuery] string @namespace,
        [PathQuery] string object_api_name,
        [JsonContent] AppEngine.PatchApaasV1ApplicationsByNamespaceObjectsByObjectApiNameRecordsBatchUpdateBodyDto dto);

    /// <summary>
    /// <para>【飞书低代码平台】批量新建记录</para>
    /// <para>接口ID：7384730094872985628</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/application-object-record/batch_create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>一次新建多条对象中的记录</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:object.record:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="namespace">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用命名空间</para>
    /// <para>示例值：package_test__c</para>
    /// </param>
    /// <param name="object_api_name">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>对象唯一标识</para>
    /// <para>示例值：user</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/apaas/v1/applications/{namespace}/objects/{object_api_name}/records/batch_create")]
    System.Threading.Tasks.Task<FeishuResponse<AppEngine.PostApaasV1ApplicationsByNamespaceObjectsByObjectApiNameRecordsBatchCreateResponseDto>> PostApaasV1ApplicationsByNamespaceObjectsByObjectApiNameRecordsBatchCreateAsync(
        [PathQuery] string @namespace,
        [PathQuery] string object_api_name,
        [JsonContent] AppEngine.PostApaasV1ApplicationsByNamespaceObjectsByObjectApiNameRecordsBatchCreateBodyDto dto);

    /// <summary>
    /// <para>【飞书低代码平台】执行 OQL</para>
    /// <para>接口ID：7384730094873002012</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/application-object-record/oql_query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>在应用内执行 OQL 语句</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:object.record:read</item>
    /// <item>app_engine:object.record:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="namespace">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用命名空间</para>
    /// <para>示例值：package_test__c</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/apaas/v1/applications/{namespace}/objects/oql_query")]
    System.Threading.Tasks.Task<FeishuResponse<AppEngine.PostApaasV1ApplicationsByNamespaceObjectsOqlQueryResponseDto>> PostApaasV1ApplicationsByNamespaceObjectsOqlQueryAsync(
        [PathQuery] string @namespace,
        [JsonContent] AppEngine.PostApaasV1ApplicationsByNamespaceObjectsOqlQueryBodyDto dto);

    /// <summary>
    /// <para>【飞书低代码平台】获取记录详情</para>
    /// <para>接口ID：7384730094873018396</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/application-object-record/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取对象中指定的记录详情</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:object.record:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="namespace">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用命名空间</para>
    /// <para>示例值：package_test__c</para>
    /// </param>
    /// <param name="object_api_name">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>对象唯一标识</para>
    /// <para>示例值：user</para>
    /// </param>
    /// <param name="id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>记录ID</para>
    /// <para>示例值：1764024447556775</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/apaas/v1/applications/{namespace}/objects/{object_api_name}/records/{id}/query")]
    System.Threading.Tasks.Task<FeishuResponse<AppEngine.PostApaasV1ApplicationsByNamespaceObjectsByObjectApiNameRecordsByIdQueryResponseDto>> PostApaasV1ApplicationsByNamespaceObjectsByObjectApiNameRecordsByIdQueryAsync(
        [PathQuery] string @namespace,
        [PathQuery] string object_api_name,
        [PathQuery] string id,
        [JsonContent] AppEngine.PostApaasV1ApplicationsByNamespaceObjectsByObjectApiNameRecordsByIdQueryBodyDto dto);

    /// <summary>
    /// <para>【飞书低代码平台】编辑记录</para>
    /// <para>接口ID：7384730094873034780</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/application-object-record/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>编辑对象中的指定记录</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:object.record:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="namespace">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用命名空间</para>
    /// <para>示例值：package_test__c</para>
    /// </param>
    /// <param name="object_api_name">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>对象唯一标识</para>
    /// <para>示例值：user</para>
    /// </param>
    /// <param name="id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>记录ID</para>
    /// <para>示例值：1764024447556775</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/apaas/v1/applications/{namespace}/objects/{object_api_name}/records/{id}")]
    System.Threading.Tasks.Task<FeishuResponse> PatchApaasV1ApplicationsByNamespaceObjectsByObjectApiNameRecordsByIdAsync(
        [PathQuery] string @namespace,
        [PathQuery] string object_api_name,
        [PathQuery] string id,
        [JsonContent] AppEngine.PatchApaasV1ApplicationsByNamespaceObjectsByObjectApiNameRecordsByIdBodyDto dto);

    /// <summary>
    /// <para>【飞书低代码平台】搜索记录</para>
    /// <para>接口ID：7384730094873051164</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/application-object-record/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>在应用内搜索记录</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:object.record:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="namespace">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用命名空间</para>
    /// <para>示例值：package_test__c</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/apaas/v1/applications/{namespace}/objects/search")]
    System.Threading.Tasks.Task<FeishuResponse<AppEngine.PostApaasV1ApplicationsByNamespaceObjectsSearchResponseDto>> PostApaasV1ApplicationsByNamespaceObjectsSearchAsync(
        [PathQuery] string @namespace,
        [JsonContent] AppEngine.PostApaasV1ApplicationsByNamespaceObjectsSearchBodyDto dto);

    /// <summary>
    /// <para>【飞书低代码平台】查询记录列表</para>
    /// <para>接口ID：7384730094873067548</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/application-object-record/batch_query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取对象中符合指定条件的记录列表</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:object.record:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="namespace">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>命名空间</para>
    /// <para>示例值：package_test__c</para>
    /// </param>
    /// <param name="object_api_name">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>目标对象的唯一标识符</para>
    /// <para>示例值：_user</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/apaas/v1/applications/{namespace}/objects/{object_api_name}/records/batch_query")]
    System.Threading.Tasks.Task<FeishuResponse<AppEngine.PostApaasV1ApplicationsByNamespaceObjectsByObjectApiNameRecordsBatchQueryResponseDto>> PostApaasV1ApplicationsByNamespaceObjectsByObjectApiNameRecordsBatchQueryAsync(
        [PathQuery] string @namespace,
        [PathQuery] string object_api_name,
        [JsonContent] AppEngine.PostApaasV1ApplicationsByNamespaceObjectsByObjectApiNameRecordsBatchQueryBodyDto dto);

    /// <summary>
    /// <para>【飞书低代码平台】批量删除记录</para>
    /// <para>接口ID：7384730094873083932</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/application-object-record/batch_delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>一次删除多条对象中的记录</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:object.record:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="namespace">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用命名空间</para>
    /// <para>示例值：package_test__c</para>
    /// </param>
    /// <param name="object_api_name">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>对象唯一标识</para>
    /// <para>示例值：user</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpDelete("/open-apis/apaas/v1/applications/{namespace}/objects/{object_api_name}/records/batch_delete")]
    System.Threading.Tasks.Task<FeishuResponse<AppEngine.DeleteApaasV1ApplicationsByNamespaceObjectsByObjectApiNameRecordsBatchDeleteResponseDto>> DeleteApaasV1ApplicationsByNamespaceObjectsByObjectApiNameRecordsBatchDeleteAsync(
        [PathQuery] string @namespace,
        [PathQuery] string object_api_name,
        [JsonContent] AppEngine.DeleteApaasV1ApplicationsByNamespaceObjectsByObjectApiNameRecordsBatchDeleteBodyDto dto);

    /// <summary>
    /// <para>【招聘】查询地点列表</para>
    /// <para>接口ID：7385067676815949828</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/recruitment-related-configuration/location/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据地点类型和地点码查询地点列表，获取地点名称信息。</para>
    /// <para>## 名词解释</para>
    /// <para>地点：行政区域划分，如 「中国大陆」、「四川省」、「成都市」、「高新区」</para>
    /// <para>地址：分为职位地址与面试地址，如：「中国四川省成都市成华区熊猫大道1375号」</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:location:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE2Mjc1NTUyMjM2NzIsImlkIjpudWxsfQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>每页限制</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/locations/query")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1LocationsQueryResponseDto>> PostHireV1LocationsQueryAsync(
        [JsonContent] Hire.PostHireV1LocationsQueryBodyDto dto,
        [PathQuery] string? page_token = null,
        [PathQuery] int page_size = 10);

    /// <summary>
    /// <para>【招聘】恢复投递</para>
    /// <para>接口ID：7385067676815966212</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/candidate-management/delivery-process-management/application/recover</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据投递 ID 将「已终止」投递进行恢复。</para>
    /// <para>## 注意事项</para>
    /// <para>投递被终止，且人才未入职、未锁在其他投递才可执行此接口进行恢复。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:application</item>
    /// </list></para>
    /// </summary>
    /// <param name="application_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>投递ID，详情请参考：[获取投递列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/list)</para>
    /// <para>示例值：12312312312</para>
    /// </param>
    [HttpPost("/open-apis/hire/v1/applications/{application_id}/recover")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1ApplicationsByApplicationIdRecoverAsync(
        [PathQuery] string application_id);

    /// <summary>
    /// <para>【飞书低代码平台】执行函数</para>
    /// <para>接口ID：7385474062586281986</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/application-function/invoke</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>执行基于飞书应用引擎开发的应用的自定义函数</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:application.function:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="namespace">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用命名空间</para>
    /// <para>示例值：package_test__c</para>
    /// </param>
    /// <param name="function_api_name">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>函数 API 名称</para>
    /// <para>示例值：printParam</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/apaas/v1/applications/{namespace}/functions/{function_api_name}/invoke")]
    System.Threading.Tasks.Task<FeishuResponse<AppEngine.PostApaasV1ApplicationsByNamespaceFunctionsByFunctionApiNameInvokeResponseDto>> PostApaasV1ApplicationsByNamespaceFunctionsByFunctionApiNameInvokeAsync(
        [PathQuery] string @namespace,
        [PathQuery] string function_api_name,
        [JsonContent] AppEngine.PostApaasV1ApplicationsByNamespaceFunctionsByFunctionApiNameInvokeBodyDto dto);

    /// <summary>
    /// <para>【飞书低代码平台】查询环境变量列表</para>
    /// <para>接口ID：7385474062586298370</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/application-environment_variable/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询基于飞书应用引擎开发的应用的环境变量列表</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:application.environment_variable:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="namespace">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用命名空间</para>
    /// <para>示例值：package_test__c</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/apaas/v1/applications/{namespace}/environment_variables/query")]
    System.Threading.Tasks.Task<FeishuResponse<AppEngine.PostApaasV1ApplicationsByNamespaceEnvironmentVariablesQueryResponseDto>> PostApaasV1ApplicationsByNamespaceEnvironmentVariablesQueryAsync(
        [PathQuery] string @namespace,
        [JsonContent] AppEngine.PostApaasV1ApplicationsByNamespaceEnvironmentVariablesQueryBodyDto dto);

    /// <summary>
    /// <para>【飞书低代码平台】查询环境变量详情</para>
    /// <para>接口ID：7385474062586314754</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/application-environment_variable/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询基于飞书应用引擎开发的应用的环境变量详情，包括名称、描述、变量值等</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:application.environment_variable:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="namespace">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用命名空间</para>
    /// <para>示例值：package_test__c</para>
    /// </param>
    /// <param name="environment_variable_api_name">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>环境变量 API 名称</para>
    /// <para>示例值：globalParam_0b410b17704</para>
    /// </param>
    [HttpGet("/open-apis/apaas/v1/applications/{namespace}/environment_variables/{environment_variable_api_name}")]
    System.Threading.Tasks.Task<FeishuResponse<AppEngine.GetApaasV1ApplicationsByNamespaceEnvironmentVariablesByEnvironmentVariableApiNameResponseDto>> GetApaasV1ApplicationsByNamespaceEnvironmentVariablesByEnvironmentVariableApiNameAsync(
        [PathQuery] string @namespace,
        [PathQuery] string environment_variable_api_name);

    /// <summary>
    /// <para>【飞书人事】修改字段枚举值选项</para>
    /// <para>接口ID：7385867895124328452</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/basic-infomation/custom_field/edit_enum_option</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对于当前已有的所有自定义枚举字段，以及部分系统预置枚举字段，通过本接口可修改字段中已有可选项的展示名称、停启用状态</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.meta_data:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>用户若希望避免重试导致多次重复请求，可填写随机字符串，系统根据 client_token 是否一致来判断是否为同一请求</para>
    /// <para>示例值：6727817538283013641</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/common_data/meta_data/edit_enum_option")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1CommonDataMetaDataEditEnumOptionResponseDto>> PostCorehrV1CommonDataMetaDataEditEnumOptionAsync(
        [JsonContent] FeishuPeople.PostCorehrV1CommonDataMetaDataEditEnumOptionBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事】增加字段枚举值选项</para>
    /// <para>接口ID：7385867895124344836</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/basic-infomation/custom_field/add_enum_option</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对于当前已有的所有自定义枚举字段，以及部分系统预置枚举字段，通过本接口可在字段中批量新增可选项</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.meta_data:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>用户若希望避免重试导致多次重复请求，可填写随机字符串，系统根据 client_token 是否一致来判断是否为同一请求</para>
    /// <para>示例值：6727817538283013641</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/common_data/meta_data/add_enum_option")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1CommonDataMetaDataAddEnumOptionResponseDto>> PostCorehrV1CommonDataMetaDataAddEnumOptionAsync(
        [JsonContent] FeishuPeople.PostCorehrV1CommonDataMetaDataAddEnumOptionBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询待入职信息</para>
    /// <para>接口ID：7386487948991299587</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/pre_hire/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于根据待入职人员 ID(支持批量)查询待入职人员信息，信息包含姓名、手机号等个人信息和任职信息。</para>
    /// <para>- 延迟说明：数据库主从延迟 2s 以内，即：直接创建待入职后2s内调用此接口可能查询不到数据。</para>
    /// <para>- 性能说明：本接口返回数据量较多，查询时请控制每批次数量（&lt;10）和适当减少查询字段数(&lt;50)</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:pre_hire:read_only</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:contract.company:read</item>
    /// <item>corehr:contract.company:write</item>
    /// <item>corehr:contract.period:read</item>
    /// <item>corehr:contract.period:write</item>
    /// <item>corehr:employment.compensation_type:read</item>
    /// <item>corehr:employment.compensation_type:write</item>
    /// <item>corehr:employment.custom_field:read</item>
    /// <item>corehr:employment.has_offer_salary:read</item>
    /// <item>corehr:employment.job_grade:read</item>
    /// <item>corehr:employment.job_grade:write</item>
    /// <item>corehr:employment.job_level:read</item>
    /// <item>corehr:employment.job_level:write</item>
    /// <item>corehr:employment.job:read</item>
    /// <item>corehr:employment.non_compete_covenant:read</item>
    /// <item>corehr:employment.non_compete_covenant:write</item>
    /// <item>corehr:employment.pay_group:read</item>
    /// <item>corehr:employment.position:read</item>
    /// <item>corehr:employment.position:write</item>
    /// <item>corehr:employment.recruitment_project_id:read</item>
    /// <item>corehr:job_data.work_shift:read</item>
    /// <item>corehr:person.address:read</item>
    /// <item>corehr:person.address:write</item>
    /// <item>corehr:person.bank_account:read</item>
    /// <item>corehr:person.bank_account:write</item>
    /// <item>corehr:person.born_country_region:read</item>
    /// <item>corehr:person.born_country_region:write</item>
    /// <item>corehr:person.custom_field:read</item>
    /// <item>corehr:person.custom_field:write</item>
    /// <item>corehr:person.date_entered_workforce:read</item>
    /// <item>corehr:person.date_entered_workforce:write</item>
    /// <item>corehr:person.date_of_birth:read</item>
    /// <item>corehr:person.date_of_birth:write</item>
    /// <item>corehr:person.dependent:read</item>
    /// <item>corehr:person.dependent:write</item>
    /// <item>corehr:person.education:read</item>
    /// <item>corehr:person.education:write</item>
    /// <item>corehr:person.email:read</item>
    /// <item>corehr:person.email:write</item>
    /// <item>corehr:person.emergency_contact:read</item>
    /// <item>corehr:person.emergency_contact:write</item>
    /// <item>corehr:person.gender:read</item>
    /// <item>corehr:person.gender:write</item>
    /// <item>corehr:person.hukou:read</item>
    /// <item>corehr:person.hukou:write</item>
    /// <item>corehr:person.is_disabled:read</item>
    /// <item>corehr:person.is_disabled:write</item>
    /// <item>corehr:person.is_old_alone:read</item>
    /// <item>corehr:person.is_old_alone:write</item>
    /// <item>corehr:person.legal_name:read</item>
    /// <item>corehr:person.legal_name:write</item>
    /// <item>corehr:person.marital_status:read</item>
    /// <item>corehr:person.marital_status:write</item>
    /// <item>corehr:person.martyr_family:read</item>
    /// <item>corehr:person.martyr_family:write</item>
    /// <item>corehr:person.national_id:read</item>
    /// <item>corehr:person.national_id:write</item>
    /// <item>corehr:person.nationality:read</item>
    /// <item>corehr:person.nationality:write</item>
    /// <item>corehr:person.native_region:read</item>
    /// <item>corehr:person.native_region:write</item>
    /// <item>corehr:person.passport_number:read</item>
    /// <item>corehr:person.personal_profile:read</item>
    /// <item>corehr:person.personal_profile:write</item>
    /// <item>corehr:person.phone:read</item>
    /// <item>corehr:person.phone:write</item>
    /// <item>corehr:person.political_affiliation:read</item>
    /// <item>corehr:person.race:read</item>
    /// <item>corehr:person.religion:read</item>
    /// <item>corehr:person.religion:write</item>
    /// <item>corehr:person.resident_tax_custom_field:read</item>
    /// <item>corehr:person.resident_tax_custom_field:write</item>
    /// <item>corehr:person.resident_tax:read</item>
    /// <item>corehr:person.resident_tax:write</item>
    /// <item>corehr:person.work_experience:read</item>
    /// <item>corehr:person.work_experience:write</item>
    /// <item>corehr:pre_hire.abnormal_reason_field:read</item>
    /// <item>corehr:pre_hire.background_check_order_account_name:read</item>
    /// <item>corehr:pre_hire.background_check_order_complete_time:read</item>
    /// <item>corehr:pre_hire.background_check_order_id:read</item>
    /// <item>corehr:pre_hire.background_check_order_name:read</item>
    /// <item>corehr:pre_hire.background_check_order_package_name:read</item>
    /// <item>corehr:pre_hire.background_check_order_result:read</item>
    /// <item>corehr:pre_hire.background_check_order_start_time:read</item>
    /// <item>corehr:pre_hire.background_check_order_status:read</item>
    /// <item>corehr:pre_hire.background_check_order_supplier_name:read</item>
    /// <item>corehr:pre_hire.check_in_data:read</item>
    /// <item>corehr:pre_hire.company_manual_updated:read</item>
    /// <item>corehr:pre_hire.company_sponsored_visa:read</item>
    /// <item>corehr:pre_hire.contract_file_id:read</item>
    /// <item>corehr:pre_hire.cost_center:read</item>
    /// <item>corehr:pre_hire.cost_center:write</item>
    /// <item>corehr:pre_hire.dotted_line_manager:read</item>
    /// <item>corehr:pre_hire.flow_id:read</item>
    /// <item>corehr:pre_hire.office_address:read</item>
    /// <item>corehr:pre_hire.onboarding_address:read</item>
    /// <item>corehr:pre_hire.seniority_adjust_information:read</item>
    /// <item>corehr:pre_hire.suspected_rehiring:read</item>
    /// <item>corehr:pre_hire.working_calendar:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 10</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6891251722631890445</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/pre_hires/query")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2PreHiresQueryResponseDto>> PostCorehrV2PreHiresQueryAsync(
        [JsonContent] Corehr.PostCorehrV2PreHiresQueryBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】编辑离职信息</para>
    /// <para>接口ID：7386577676713328643</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/offboarding/edit</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于编辑飞书人事的[离职信息](https://people.feishu.cn/people/members/dimission/management)，支持的字段包括离职日期、离职原因、离职申请发起时间和离职申请审批通过时间等等，同时也支持编辑离职的自定义字段（附件字段除外）。当接口成功提交后，会产生对应的[离职信息变更](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/offboarding/events/updated)事件。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:offboarding.update:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/offboardings/edit")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2OffboardingsEditResponseDto>> PostCorehrV2OffboardingsEditAsync(
        [JsonContent] Corehr.PostCorehrV2OffboardingsEditBodyDto dto,
        [PathQuery] string? user_id_type = "people_corehr_id");

    /// <summary>
    /// <para>【多维表格】批量获取记录</para>
    /// <para>接口ID：7386702252390268956</para>
    /// <para>接口文档：https://open.feishu.cn/document/docs/bitable-v1/app-table-record/batch_get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>通过多个记录 ID 查询记录信息。该接口最多支持查询 100 条记录。</para>
    /// <para>## 注意事项</para>
    /// <para>若多维表格开启了高级权限，你需确保调用身份拥有多维表格的可管理权限，否则可能出现调用成功但返回数据为空的情况。了解具体步骤，参考[如何为应用或用户开通文档权限](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#16c6475a)。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:record:read</item>
    /// <item>bitable:app</item>
    /// <item>bitable:app:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:contact:access_as_app</item>
    /// <item>contact:contact:readonly</item>
    /// <item>contact:contact:readonly_as_app</item>
    /// <item>contact:user.base:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：NQRxbRkBMa6OnZsjtERcxhabcef</para>
    /// </param>
    /// <param name="table_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格数据表的唯一标识。获取方式：</para>
    /// <para>- 你可通过多维表格 URL 获取 `table_id`，下图高亮部分即为当前数据表的 `table_id`</para>
    /// <para>- 也可通过[列出数据表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list)接口获取 `table_id`</para>
    /// <para>![](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/18741fe2a0d3cafafaf9949b263bb57d_yD1wkOrSju.png?height=746&amp;lazyload=true&amp;maxWidth=700&amp;width=2976)</para>
    /// <para>示例值：tbl0xe5g8PPabcef</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/bitable/v1/apps/{app_token}/tables/{table_id}/records/batch_get")]
    System.Threading.Tasks.Task<FeishuResponse<Base.PostBitableV1AppsByAppTokenTablesByTableIdRecordsBatchGetResponseDto>> PostBitableV1AppsByAppTokenTablesByTableIdRecordsBatchGetAsync(
        [PathQuery] string app_token,
        [PathQuery] string table_id,
        [JsonContent] Base.PostBitableV1AppsByAppTokenTablesByTableIdRecordsBatchGetBodyDto dto);

    /// <summary>
    /// <para>【云文档】获取知识空间成员列表</para>
    /// <para>接口ID：7386702252390449180</para>
    /// <para>接口文档：https://open.feishu.cn/document/docs/wiki-v2/space-member/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取知识空间的成员与管理员列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>wiki:member:retrieve</item>
    /// <item>wiki:wiki</item>
    /// <item>wiki:wiki:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="space_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>知识空间 ID</para>
    /// <para>示例值：7375263209671884820</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：1</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：NzA0NDg5NjIzMDA3MzE3MTk3Ml83MzYzMjE4NDkzNDI1NzI5NTM4</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/wiki/v2/spaces/{space_id}/members")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetWikiV2SpacesBySpaceIdMembersResponseDto>> GetWikiV2SpacesBySpaceIdMembersAsync(
        [PathQuery] string space_id,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【Payroll】批量查询算薪项</para>
    /// <para>接口ID：7387360801748402177</para>
    /// <para>接口文档：https://open.feishu.cn/document/payroll-v1/acct_item/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>批量查询算薪项</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>payroll:payroll_calculation_item:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：50</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：7169773973790425132</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/payroll/v1/acct_items")]
    System.Threading.Tasks.Task<FeishuResponse<Payroll.GetPayrollV1AcctItemsResponseDto>> GetPayrollV1AcctItemsAsync(
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】创建兼职</para>
    /// <para>接口ID：7387981900317540354</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/employee/job_data/employees-additional_job/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建员工的兼职</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:additional_job:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:additional_job.compensation_type:write</item>
    /// <item>corehr:additional_job.job_level:write</item>
    /// <item>corehr:additional_job.job:write</item>
    /// <item>corehr:additional_job.position:write</item>
    /// <item>corehr:additional_job.service_company:write</item>
    /// <item>corehr:additional_job.work_shift:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>操作的唯一标识，用于幂等校验，格式为标准的 UUIDV4。请求成功时，重复的 client_token 不会再创建、变更数据。</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：【飞书】用来在具体某个应用中标识一个部门，同一个 department_id 在不同应用中的 open_department_id 相同。</item>
    /// <item>department_id：【飞书】用来标识租户内一个唯一的部门。</item>
    /// <item>people_corehr_department_id：【飞书人事】用来标识「飞书人事」中的部门。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/employees/additional_jobs")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2EmployeesAdditionalJobsResponseDto>> PostCorehrV2EmployeesAdditionalJobsAsync(
        [JsonContent] Corehr.PostCorehrV2EmployeesAdditionalJobsBodyDto dto,
        [PathQuery] string? client_token = null,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】更新兼职</para>
    /// <para>接口ID：7387981900317556738</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/employee/job_data/employees-additional_job/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新员工的兼职</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:additional_job:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:additional_job.compensation_type:write</item>
    /// <item>corehr:additional_job.job_level:write</item>
    /// <item>corehr:additional_job.job:write</item>
    /// <item>corehr:additional_job.position:write</item>
    /// <item>corehr:additional_job.service_company:write</item>
    /// <item>corehr:additional_job.work_shift:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="additional_job_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>兼职记录 ID</para>
    /// <para>示例值：12454646</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>操作的唯一标识，用于幂等校验，格式为标准的 UUIDV4。请求成功时，重复的 client_token 不会再创建、变更数据。</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：【飞书】用来在具体某个应用中标识一个部门，同一个 department_id 在不同应用中的 open_department_id 相同。</item>
    /// <item>department_id：【飞书】用来标识租户内一个唯一的部门。</item>
    /// <item>people_corehr_department_id：【飞书人事】用来标识「飞书人事」中的部门。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/corehr/v2/employees/additional_jobs/{additional_job_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PatchCorehrV2EmployeesAdditionalJobsByAdditionalJobIdResponseDto>> PatchCorehrV2EmployeesAdditionalJobsByAdditionalJobIdAsync(
        [PathQuery] string additional_job_id,
        [JsonContent] Corehr.PatchCorehrV2EmployeesAdditionalJobsByAdditionalJobIdBodyDto dto,
        [PathQuery] string? client_token = null,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】删除兼职</para>
    /// <para>接口ID：7387981900317573122</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/employee/job_data/employees-additional_job/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除一条指定的员工兼职</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:additional_job:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="additional_job_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>兼职记录 ID</para>
    /// <para>示例值：654637829201</para>
    /// </param>
    [HttpDelete("/open-apis/corehr/v2/employees/additional_jobs/{additional_job_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCorehrV2EmployeesAdditionalJobsByAdditionalJobIdAsync(
        [PathQuery] string additional_job_id);

    /// <summary>
    /// <para>【飞书人事（企业版）】批量查询兼职信息</para>
    /// <para>接口ID：7387981900317589506</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/employee/job_data/employees-additional_job/batch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量查询兼职信息，包括开始日期、职务、序列、上级、薪资类型等信息。</para>
    /// <para>支持全量遍历和筛选查询。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:additional_job:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:additional_job.compensation_type:read</item>
    /// <item>corehr:additional_job.compensation_type:write</item>
    /// <item>corehr:additional_job.job_level:read</item>
    /// <item>corehr:additional_job.job_level:write</item>
    /// <item>corehr:additional_job.job:read</item>
    /// <item>corehr:additional_job.job:write</item>
    /// <item>corehr:additional_job.position:read</item>
    /// <item>corehr:additional_job.position:write</item>
    /// <item>corehr:additional_job.service_company:read</item>
    /// <item>corehr:additional_job.service_company:write</item>
    /// <item>corehr:additional_job.work_shift:read</item>
    /// <item>corehr:additional_job.work_shift:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：100</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：Njg5MTI1MTcyMjYzMTg5MDQ0NQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：【飞书】用来在具体某个应用中标识一个部门，同一个 department_id 在不同应用中的 open_department_id 相同。</item>
    /// <item>department_id：【飞书】用来标识租户内一个唯一的部门。</item>
    /// <item>people_corehr_department_id：【飞书人事】用来标识「飞书人事」中的部门。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/employees/additional_jobs/batch")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2EmployeesAdditionalJobsBatchResponseDto>> PostCorehrV2EmployeesAdditionalJobsBatchAsync(
        [JsonContent] Corehr.PostCorehrV2EmployeesAdditionalJobsBatchBodyDto dto,
        [PathQuery] int? page_size = 100,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【组织架构】更新待离职成员为在职</para>
    /// <para>接口ID：7390661486131691522</para>
    /// <para>接口文档：https://open.feishu.cn/document/directory-v1/employee/regular</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>本接口用于为待离职员工取消离职，将其更新为「在职」状态。取消离职时会清空离职信息。</para>
    /// <para>使用user_access_token时默认为管理员用户，仅可操作「人事管理模式」的管理员可操作。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>directory:employee.to_be_resigned:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>directory:employee.base.external_id:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>员工ID，与employee_id_type类型保持一致</para>
    /// <para>示例值：d2e1jas</para>
    /// </param>
    /// <param name="employee_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>employee_id：企业内在职员工的唯一标识。支持自定义，未自定义时系统自动生成。ID支持修改。 获取employee_id的方式： - 企业管理员在 管理后台 &gt; 组织架构 &gt; 成员与部门 页面，点击 成员详情，查询员工ID - 通过 [批量获取员工列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/employee/filter) 的接口，通过手机号或邮箱查询员工ID。</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>部门ID类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：用来标识租户内一个唯一的部门</item>
    /// <item>open_department_id：用来在具体某个应用中标识一个部门，同一个部门 在不同应用中的 open_department_id 相同。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    [HttpPatch("/open-apis/directory/v1/employees/{employee_id}/regular")]
    System.Threading.Tasks.Task<FeishuResponse> PatchDirectoryV1EmployeesByEmployeeIdRegularAsync(
        [PathQuery] string employee_id,
        [PathQuery] string? employee_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【组织架构】更新在职员工为待离职</para>
    /// <para>接口ID：7390661486131707906</para>
    /// <para>接口文档：https://open.feishu.cn/document/directory-v1/employee/to_be_resigned</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>本接口用于为在职员工办理离职，将其更新为「待离职」状态。「待离职」员工不会自动离职，需要使用「离职员工」API操作离职和资源转交。</para>
    /// <para>使用user_access_token时默认为管理员用户，仅「人事管理模式」的管理员可操作。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>directory:employee.to_be_resigned:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>directory:employee.base.external_id:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>员工ID，与employee_id_type类型保持一致</para>
    /// <para>示例值：cad2cafa</para>
    /// </param>
    /// <param name="employee_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>employee_id：企业内在职员工的唯一标识。支持自定义，未自定义时系统自动生成。ID支持修改。 获取employee_id的方式： - 企业管理员在 管理后台 &gt; 组织架构 &gt; 成员与部门 页面，点击 成员详情，查询员工ID - 通过 [批量获取员工列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/employee/filter) 的接口，通过手机号或邮箱查询员工ID。</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>部门ID类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>department_id：用来标识租户内一个唯一的部门</item>
    /// <item>open_department_id：用来在具体某个应用中标识一个部门，同一个部门 在不同应用中的 open_department_id 相同。</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/directory/v1/employees/{employee_id}/to_be_resigned")]
    System.Threading.Tasks.Task<FeishuResponse> PatchDirectoryV1EmployeesByEmployeeIdToBeResignedAsync(
        [PathQuery] string employee_id,
        [JsonContent] Directory.PatchDirectoryV1EmployeesByEmployeeIdToBeResignedBodyDto dto,
        [PathQuery] string? employee_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【卡片】新增组件</para>
    /// <para>接口ID：7397253002364551171</para>
    /// <para>接口文档：https://open.feishu.cn/document/cardkit-v1/card-element/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>为指定卡片实体新增组件。</para>
    /// <para>## 使用限制</para>
    /// <para>- 本接口仅支持[卡片 JSON 2.0 结构](https://open.feishu.cn/document/uAjLw4CM/ukzMukzMukzM/feishu-cards/card-json-v2-structure)。</para>
    /// <para>- 调用该接口时，不支持将卡片设置为独享卡片模式。即不支持将卡片 JSON 数据中的 `update_multi` 属性设置为 `false`。</para>
    /// <para>- 调用该接口的应用身份需与创建目标卡片实体的应用身份一致。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>cardkit:card:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="card_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>卡片实体 ID。通过[创建卡片实体](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/cardkit-v1/card/create)获取</para>
    /// <para>示例值：7355439197428236291</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/cardkit/v1/cards/{card_id}/elements")]
    System.Threading.Tasks.Task<FeishuResponse> PostCardkitV1CardsByCardIdElementsAsync(
        [PathQuery] string card_id,
        [JsonContent] Cardkit.PostCardkitV1CardsByCardIdElementsBodyDto dto);

    /// <summary>
    /// <para>【卡片】更新组件属性</para>
    /// <para>接口ID：7397253002364567555</para>
    /// <para>接口文档：https://open.feishu.cn/document/cardkit-v1/card-element/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新卡片实体中指定组件的属性。</para>
    /// <para>## 使用限制</para>
    /// <para>- 本接口不支持修改组件的标签（tag）属性。</para>
    /// <para>- 本接口仅支持[卡片 JSON 2.0 结构](https://open.feishu.cn/document/uAjLw4CM/ukzMukzMukzM/feishu-cards/card-json-v2-structure)。</para>
    /// <para>- 调用该接口时，不支持将卡片设置为独享卡片模式。即不支持将卡片 JSON 数据中的 `update_multi` 属性设置为 `false`。</para>
    /// <para>- 调用该接口的应用身份需与创建目标卡片实体的应用身份一致。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>cardkit:card:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="card_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>卡片实体 ID。通过[创建卡片实体](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/cardkit-v1/card/create)获取</para>
    /// <para>示例值：7355439197428236291</para>
    /// </param>
    /// <param name="element_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要更新的组件的 ID。对应 JSON 代码中的 `element_id` 属性，由开发者自定义。</para>
    /// <para>示例值：markdown_1</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/cardkit/v1/cards/{card_id}/elements/{element_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PatchCardkitV1CardsByCardIdElementsByElementIdAsync(
        [PathQuery] string card_id,
        [PathQuery] string element_id,
        [JsonContent] Cardkit.PatchCardkitV1CardsByCardIdElementsByElementIdBodyDto dto);

    /// <summary>
    /// <para>【卡片】删除组件</para>
    /// <para>接口ID：7397253002364600323</para>
    /// <para>接口文档：https://open.feishu.cn/document/cardkit-v1/card-element/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除指定卡片实体中的组件。</para>
    /// <para>## 注意事项</para>
    /// <para>删除容器类组件时，容器中内嵌的组件将一并被删除。</para>
    /// <para>## 使用限制</para>
    /// <para>- 本接口仅支持[卡片 JSON 2.0 结构](https://open.feishu.cn/document/uAjLw4CM/ukzMukzMukzM/feishu-cards/card-json-v2-structure)。</para>
    /// <para>- 调用该接口时，不支持将卡片设置为独享卡片模式。即不支持将卡片 JSON 数据中的 `update_multi` 属性设置为 `false`。</para>
    /// <para>- 调用该接口的应用身份需与创建目标卡片实体的应用身份一致。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>cardkit:card:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="card_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>卡片实体 ID。通过[创建卡片实体](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/cardkit-v1/card/create)获取</para>
    /// <para>示例值：7355439197428236291</para>
    /// </param>
    /// <param name="element_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要删除的组件 ID。对应卡片 JSON 中的 `element_id` 属性，由开发者自定义。</para>
    /// <para>示例值：markdown_1</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpDelete("/open-apis/cardkit/v1/cards/{card_id}/elements/{element_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCardkitV1CardsByCardIdElementsByElementIdAsync(
        [PathQuery] string card_id,
        [PathQuery] string element_id,
        [JsonContent] Cardkit.DeleteCardkitV1CardsByCardIdElementsByElementIdBodyDto dto);

    /// <summary>
    /// <para>【卡片】更新卡片配置</para>
    /// <para>接口ID：7397253002364616707</para>
    /// <para>接口文档：https://open.feishu.cn/document/cardkit-v1/card/settings</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新指定卡片实体的配置，支持更新 `config` 和 `card_link` 字段。</para>
    /// <para>## 使用限制</para>
    /// <para>- 本接口仅支持[卡片 JSON 2.0 结构](https://open.feishu.cn/document/uAjLw4CM/ukzMukzMukzM/feishu-cards/card-json-v2-structure)。</para>
    /// <para>- 调用该接口时，不支持将卡片设置为独享卡片模式。即不支持将卡片 JSON 数据中的 `update_multi` 属性设置为 `false`。</para>
    /// <para>- 调用该接口的应用身份需与创建目标卡片实体的应用身份一致。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>cardkit:card:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="card_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>卡片实体 ID。通过[创建卡片实体](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/cardkit-v1/card/create)获取</para>
    /// <para>示例值：7355372766134157313</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/cardkit/v1/cards/{card_id}/settings")]
    System.Threading.Tasks.Task<FeishuResponse> PatchCardkitV1CardsByCardIdSettingsAsync(
        [PathQuery] string card_id,
        [JsonContent] Cardkit.PatchCardkitV1CardsByCardIdSettingsBodyDto dto);

    /// <summary>
    /// <para>【卡片】批量更新卡片实体</para>
    /// <para>接口ID：7397253002364633091</para>
    /// <para>接口文档：https://open.feishu.cn/document/cardkit-v1/card/batch_update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新指定卡片实体局部，包括配置和组件等。</para>
    /// <para>## 使用限制</para>
    /// <para>- 本接口仅支持[卡片 JSON 2.0 结构](https://open.feishu.cn/document/uAjLw4CM/ukzMukzMukzM/feishu-cards/card-json-v2-structure)。</para>
    /// <para>- 调用该接口时，不支持将卡片设置为独享卡片模式。即不支持将卡片 JSON 数据中的 `update_multi` 属性设置为 `false`。</para>
    /// <para>- 调用该接口的应用身份需与创建目标卡片实体的应用身份一致。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>cardkit:card:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="card_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>卡片实体 ID。通过[创建卡片实体](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/cardkit-v1/card/create)获取</para>
    /// <para>示例值：7355439197428236291</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/cardkit/v1/cards/{card_id}/batch_update")]
    System.Threading.Tasks.Task<FeishuResponse> PostCardkitV1CardsByCardIdBatchUpdateAsync(
        [PathQuery] string card_id,
        [JsonContent] Cardkit.PostCardkitV1CardsByCardIdBatchUpdateBodyDto dto);

    /// <summary>
    /// <para>【卡片】流式更新文本</para>
    /// <para>接口ID：7397253002364649475</para>
    /// <para>接口文档：https://open.feishu.cn/document/cardkit-v1/card-element/content</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对卡片中的普通文本元素（tag 为 plain_text 的元素）或富文本组件（tag 为 markdown 的组件）传入全量文本内容，以实现“打字机”式的文字输出效果。参考[流式更新 OpenAPI 调用指南](https://open.feishu.cn/document/uAjLw4CM/ukzMukzMukzM/feishu-cards/streaming-updates-openapi-overview)，了解流式更新文本的完整流程。</para>
    /// <para>## 输出效果说明</para>
    /// <para>若旧文本为传入的新文本的前缀子串，新增文本将在旧文本末尾继续以打字机效果输出；若新旧文本前缀不同，全量文本将直接上屏输出，无打字机效果。</para>
    /// <para>## 使用限制</para>
    /// <para>- 本接口仅支持[卡片 JSON 2.0 结构](https://open.feishu.cn/document/uAjLw4CM/ukzMukzMukzM/feishu-cards/card-json-v2-structure)。</para>
    /// <para>- 调用该接口时，不支持将卡片设置为独享卡片模式。即不支持将卡片 JSON 数据中的 `update_multi` 属性设置为 `false`。</para>
    /// <para>- 调用该接口的应用身份需与创建目标卡片实体的应用身份一致。</para>
    /// <para>## 前提条件</para>
    /// <para>调用该接口时，需确保已开启卡片的流式更新模式，即将 `streaming_mode` 设为 `true`。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>cardkit:card:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="card_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>卡片实体 ID。通过[创建卡片实体](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/cardkit-v1/card/create)获取</para>
    /// <para>示例值：7355439197428236291</para>
    /// </param>
    /// <param name="element_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>普通文本组件或富文本组件的 ID。对应卡片 JSON 中的 `element_id` 属性，由开发者自定义。</para>
    /// <para>示例值：markdown_1</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/cardkit/v1/cards/{card_id}/elements/{element_id}/content")]
    System.Threading.Tasks.Task<FeishuResponse> PutCardkitV1CardsByCardIdElementsByElementIdContentAsync(
        [PathQuery] string card_id,
        [PathQuery] string element_id,
        [JsonContent] Cardkit.PutCardkitV1CardsByCardIdElementsByElementIdContentBodyDto dto);

    /// <summary>
    /// <para>【卡片】全量更新卡片实体</para>
    /// <para>接口ID：7397253002364682243</para>
    /// <para>接口文档：https://open.feishu.cn/document/cardkit-v1/card/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>传入全新的卡片 JSON 数据，更新指定的卡片实体。</para>
    /// <para>## 使用限制</para>
    /// <para>- 本接口仅支持[卡片 JSON 2.0 结构](https://open.feishu.cn/document/uAjLw4CM/ukzMukzMukzM/feishu-cards/card-json-v2-structure)。</para>
    /// <para>- 调用该接口时，不支持将卡片设置为独享卡片模式。即不支持将卡片 JSON 数据中的 `update_multi` 属性设置为 `false`。</para>
    /// <para>- 调用该接口的应用身份需与创建目标卡片实体的应用身份一致。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>cardkit:card:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="card_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>卡片实体 ID。通过[创建卡片实体](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/cardkit-v1/card/create)获取</para>
    /// <para>示例值：7355372766134157313</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/cardkit/v1/cards/{card_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PutCardkitV1CardsByCardIdAsync(
        [PathQuery] string card_id,
        [JsonContent] Cardkit.PutCardkitV1CardsByCardIdBodyDto dto);

    /// <summary>
    /// <para>【卡片】转换 ID</para>
    /// <para>接口ID：7397265677100957699</para>
    /// <para>接口文档：https://open.feishu.cn/document/historic-version/id_convert</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>将[消息 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#44c58e1c)（ `message_id` ）转换为卡片实体 ID（`card_id`）。用于将由[发送消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create)等接口返回的消息 ID 转换为卡片实体 ID，以进一步对卡片进行全量更新、局部更新、或文本流式更新操作。</para>
    /// <para>## 提示</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>cardkit:card:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [Obsolete("历史版本")]
    [HttpPost("/open-apis/cardkit/v1/cards/id_convert")]
    System.Threading.Tasks.Task<FeishuResponse<Cardkit.PostCardkitV1CardsIdConvertResponseDto>> PostCardkitV1CardsIdConvertAsync(
        [JsonContent] Cardkit.PostCardkitV1CardsIdConvertBodyDto dto);

    /// <summary>
    /// <para>【卡片】创建卡片实体</para>
    /// <para>接口ID：7397265677100974083</para>
    /// <para>接口文档：https://open.feishu.cn/document/cardkit-v1/card/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>基于卡片 JSON 代码，创建卡片实体。</para>
    /// <para>## 使用限制</para>
    /// <para>- 本接口仅支持[卡片 JSON 2.0 结构](https://open.feishu.cn/document/uAjLw4CM/ukzMukzMukzM/feishu-cards/card-json-v2-structure)。</para>
    /// <para>- 调用该接口时，不支持将卡片设置为独享卡片模式。即不支持将卡片 JSON 数据中的 `update_multi` 属性设置为 `false`。</para>
    /// <para>- 卡片实体的有效期为 14 天。即创建卡片实体超出 14 天后，你将无法调用相关接口操作卡片。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>cardkit:card:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/cardkit/v1/cards")]
    System.Threading.Tasks.Task<FeishuResponse<Cardkit.PostCardkitV1CardsResponseDto>> PostCardkitV1CardsAsync(
        [JsonContent] Cardkit.PostCardkitV1CardsBodyDto dto);

    /// <summary>
    /// <para>【卡片】更新组件</para>
    /// <para>接口ID：7397265677100990467</para>
    /// <para>接口文档：https://open.feishu.cn/document/cardkit-v1/card-element/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新卡片实体中的指定组件为新组件。支持传入多个组件。</para>
    /// <para>## 使用限制</para>
    /// <para>- 本接口仅支持[卡片 JSON 2.0 结构](https://open.feishu.cn/document/uAjLw4CM/ukzMukzMukzM/feishu-cards/card-json-v2-structure)。</para>
    /// <para>- 调用该接口时，不支持将卡片设置为独享卡片模式。即不支持将卡片 JSON 数据中的 `update_multi` 属性设置为 `false`。</para>
    /// <para>- 调用该接口的应用身份需与创建目标卡片实体的应用身份一致。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>cardkit:card:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="card_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>卡片实体 ID。通过[创建卡片实体](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/cardkit-v1/card/create)获取</para>
    /// <para>示例值：7355439197428236291</para>
    /// </param>
    /// <param name="element_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>要更新的组件 ID。对应卡片 JSON 中的 `element_id` 属性，由开发者自定义。</para>
    /// <para>示例值：markdown_1</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/cardkit/v1/cards/{card_id}/elements/{element_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PutCardkitV1CardsByCardIdElementsByElementIdAsync(
        [PathQuery] string card_id,
        [PathQuery] string element_id,
        [JsonContent] Cardkit.PutCardkitV1CardsByCardIdElementsByElementIdBodyDto dto);

    /// <summary>
    /// <para>【绩效】获取指标标签列表</para>
    /// <para>接口ID：7397354450872991745</para>
    /// <para>接口文档：https://open.feishu.cn/document/performance-v1/review_config/metric_template/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量获取指标的标签信息，如标签名称、创建时间等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>performance:metric_lib:read</item>
    /// <item>performance:metric:read</item>
    /// <item>performance:metric:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>**默认值**：20</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="tag_ids">
    /// <para>必填：否</para>
    /// <para>指标标签 ID 列表，传此参数时不进行分页，不传时分页返回所有数据。</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/performance/v2/metric_tags")]
    System.Threading.Tasks.Task<FeishuResponse<Performance.GetPerformanceV2MetricTagsResponseDto>> GetPerformanceV2MetricTagsAsync(
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string[]? tag_ids = null);

    /// <summary>
    /// <para>【招聘】获取面试速记明细</para>
    /// <para>接口ID：7397616200375304220</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/candidate-management/delivery-process-management/interview/get-4</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取指定面试的面试速记明细记录</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:interview</item>
    /// <item>hire:interview:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="interview_id">
    /// <para>必填：是</para>
    /// <para>面试ID，可根据接口[获取面试信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/interview/list)、[获取人才面试信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/interview/get_by_talent)获取</para>
    /// <para>示例值：7085989097067563300</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：NzM5MTgyNjQyNDY2MDc4OTU0OA==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，表示本次请求获取的速记中的语句的最大数量</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/minutes")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1MinutesResponseDto>> GetHireV1MinutesAsync(
        [PathQuery] string interview_id,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【招聘】批量加入/移除人才库中人才</para>
    /// <para>接口ID：7397677441913028636</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/candidate-management/talent_pool/batch_change_talent_pool</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对于同一个人才库，可批量执行人才加入或移除操作</para>
    /// <para>- 执行加入操作：当传入不存在人才 ID 时，接口会报错返回不存在人才 ID 列表。 当人才已在人才库中时，接口静默处理。</para>
    /// <para>- 执行移除操作：当传入不存在人才 ID 时，接口会报错返回不存在人才 ID 列表。 当人才未在人才库中时，接口静默处理。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:talent_folder</item>
    /// </list></para>
    /// </summary>
    /// <param name="talent_pool_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>人才库 ID，可通过[获取人才库列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent_pool/search)接口获取</para>
    /// <para>示例值：6930815272790114325</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/talent_pools/{talent_pool_id}/batch_change_talent_pool")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1TalentPoolsByTalentPoolIdBatchChangeTalentPoolAsync(
        [PathQuery] string talent_pool_id,
        [JsonContent] Hire.PostHireV1TalentPoolsByTalentPoolIdBatchChangeTalentPoolBodyDto dto);

    /// <summary>
    /// <para>【招聘】获取职位详情</para>
    /// <para>接口ID：7397677441935884289</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/recruitment-related-configuration/job/get_detail</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据职位 ID 获取职位详情，包含职位基本信息、职位负责人、协助人、用人经理、职位地址列表、职位设置、关联招需、门店列表及标签列表等信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:job.composite_info:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>职位 ID，可通过[获取职位列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/list)接口获取</para>
    /// <para>示例值：7281257045172308287</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 的类型</para>
    /// <para>示例值：department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值：job_level_id_type</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，通过[「获取租户职级列表」](https://open.feishu.cn/document/server-docs/contact-v3/job_level/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_level_id</para>
    /// </param>
    /// <param name="job_family_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「序列 ID」的类型</para>
    /// <para>示例值：people_admin_job_category_id</para>
    /// <list type="bullet">
    /// <item>people_admin_job_category_id：「人力系统管理后台」适用的序列 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_family_id：「飞书管理后台」适用的序列 ID，通过[「获取租户序列列表」](https://open.feishu.cn/document/server-docs/contact-v3/job_family/list)接口获取</item>
    /// </list>
    /// <para>默认值：people_admin_job_category_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/jobs/{job_id}/get_detail")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1JobsByJobIdGetDetailResponseDto>> GetHireV1JobsByJobIdGetDetailAsync(
        [PathQuery] string job_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? job_level_id_type = "people_admin_job_level_id",
        [PathQuery] string? job_family_id_type = "people_admin_job_category_id");

    /// <summary>
    /// <para>【招聘】获取投递详情</para>
    /// <para>接口ID：7397703144758165532</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/candidate-management/delivery-process-management/application/get_detail</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据投递 ID 获取投递信息并通过参数按需获取该投递相关的实体信息，如「职位」、「人才」、「评估」、「面试」、「Offer」、「猎头」、「内推」、「官网」等实体的信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:application</item>
    /// <item>hire:application:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>hire:agency</item>
    /// <item>hire:agency_salary:readonly</item>
    /// <item>hire:agency:readonly</item>
    /// <item>hire:employee</item>
    /// <item>hire:employee:readonly</item>
    /// <item>hire:evaluation:readonly</item>
    /// <item>hire:interview</item>
    /// <item>hire:interview:readonly</item>
    /// <item>hire:job</item>
    /// <item>hire:job:readonly</item>
    /// <item>hire:offer</item>
    /// <item>hire:offer_salary:readonly</item>
    /// <item>hire:offer:readonly</item>
    /// <item>hire:referral</item>
    /// <item>hire:referral:readonly</item>
    /// <item>hire:site</item>
    /// <item>hire:site:readonly</item>
    /// <item>hire:talent</item>
    /// <item>hire:talent:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="application_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>投递 ID，可通过[获取投递列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/list)接口获取</para>
    /// <para>示例值：6956499586395523359</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户,即将下线字段,不建议使用</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门，通过[批量获取部门信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/batch)接口获取</item>
    /// <item>department_id：以 department_id 来标识部门，通过[批量获取部门信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/batch)接口获取</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="job_level_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「职级 ID」的类型</para>
    /// <para>示例值：job_level_id</para>
    /// <list type="bullet">
    /// <item>people_admin_job_level_id：「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_level_id：「飞书管理后台」适用的职级 ID，通过[获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list)接口获取</item>
    /// </list>
    /// <para>默认值：job_level_id</para>
    /// </param>
    /// <param name="job_family_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「序列 ID」的类型</para>
    /// <para>示例值：job_family_id</para>
    /// <list type="bullet">
    /// <item>people_admin_job_category_id：「人力系统管理后台」适用的序列 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>job_family_id：「飞书管理后台」适用的序列 ID，通过[获取租户序列列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_family/list)接口获取</item>
    /// </list>
    /// <para>默认值：job_family_id</para>
    /// </param>
    /// <param name="employee_type_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的「人员类型 ID」的类型</para>
    /// <para>示例值：employee_type_enum_id</para>
    /// <list type="bullet">
    /// <item>people_admin_employee_type_id：「人力系统管理后台」适用的人员类型 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。</item>
    /// <item>employee_type_enum_id：「飞书管理后台」适用的人员类型 ID，通过[查询人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list)接口获取</item>
    /// </list>
    /// <para>默认值：employee_type_enum_id</para>
    /// </param>
    /// <param name="options">
    /// <para>必填：否</para>
    /// <para>关联实体信息获取参数，用于指定获取哪些关联实体信息，不传时默认只返回投递基本信息（`basic_info`）。如需一次查询多个实体信息，可通过将同一参数名多次传递，并且每次传递不同的参数值。</para>
    /// <para> </para>
    /// <para>例如：https://{url}?options=with_job&amp;options=with_talent</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/applications/{application_id}/get_detail")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1ApplicationsByApplicationIdGetDetailResponseDto>> GetHireV1ApplicationsByApplicationIdGetDetailAsync(
        [PathQuery] string application_id,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] string? job_level_id_type = "job_level_id",
        [PathQuery] string? job_family_id_type = "job_family_id",
        [PathQuery] string? employee_type_id_type = "employee_type_enum_id",
        [PathQuery] string[]? options = null);

    /// <summary>
    /// <para>【画板】获取画板缩略图片</para>
    /// <para>接口ID：7398376458043310083</para>
    /// <para>接口文档：https://open.feishu.cn/document/docs/board-v1/whiteboard/download_as_image</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取画板的缩略图片，响应数据为 Content-Type=image/png 的二进制图片流。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>board:whiteboard:node:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="whiteboard_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>画板唯一标识。可通过文档接口 [获取文档所有块](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block/list) 获取，`block_type` 为 43 的 block 即为画板，对应的 &lt;code&gt;block.token&lt;/code&gt; 就是画板的&lt;code&gt;whiteboard_id&lt;/code&gt;。</para>
    /// <para>示例值：Ru8nwrWFOhEmaFbEU2VbPRsHcxb</para>
    /// </param>
    /// <returns>返回文件二进制流</returns>
    [HttpGet("/open-apis/board/v1/whiteboards/{whiteboard_id}/download_as_image")]
    System.Threading.Tasks.Task<HttpResponseMessage> GetBoardV1WhiteboardsByWhiteboardIdDownloadAsImageAsync(
        [PathQuery] string whiteboard_id);

    /// <summary>
    /// <para>【招聘】获取人才标签信息列表</para>
    /// <para>接口ID：7404770953199714306</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/recruitment-related-configuration/application/list-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>可通过关键词、ID 列表、标签类型、停用状态等获取人才标签信息列表，结果按照创建时间倒序排序。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:talent_tag</item>
    /// <item>hire:talent_tag:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="keyword">
    /// <para>必填：否</para>
    /// <para>搜索关键词</para>
    /// <para>示例值：985</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="id_list">
    /// <para>必填：否</para>
    /// <para>标签 ID 列表</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="type">
    /// <para>必填：否</para>
    /// <para>标签类型</para>
    /// <para>示例值：1</para>
    /// <list type="bullet">
    /// <item>1：手动标签</item>
    /// <item>2：自动标签</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="include_inactive">
    /// <para>必填：否</para>
    /// <para>是否包含停用标签</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：20</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE2Mjc1NTUyMjM2NzIsImlkIjpudWxsfQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/talent_tags")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1TalentTagsResponseDto>> GetHireV1TalentTagsAsync(
        [PathQuery] string? keyword = null,
        [PathQuery] string[]? id_list = null,
        [PathQuery] int? type = null,
        [PathQuery] bool? include_inactive = null,
        [PathQuery] int? page_size = 20,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【招聘】操作人才标签</para>
    /// <para>接口ID：7404770953199730690</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/candidate-management/talent/tag</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>可为人才新增、删除标签。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:talent</item>
    /// </list></para>
    /// </summary>
    /// <param name="talent_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>人才 ID，可通过[批量获取人才ID](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent/batch_get_id)获取</para>
    /// <para>示例值：6960663240925956661</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/talents/{talent_id}/tag")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1TalentsByTalentIdTagAsync(
        [PathQuery] string talent_id,
        [JsonContent] Hire.PostHireV1TalentsByTalentIdTagBodyDto dto);

    /// <summary>
    /// <para>【Payroll】获取薪资组基本信息</para>
    /// <para>接口ID：7405412186246627329</para>
    /// <para>接口文档：https://open.feishu.cn/document/payroll-v1/paygroup/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>- 薪资组是按薪酬管理的纬度创建的组，组内的员工由相同的HR处理薪酬相关工作，通过薪资组可实现对薪资组人员的管理和在薪酬计算发放等环节的人员权限范围控制</para>
    /// <para>- 本接口返回所有薪资组的基本信息，包括薪资组ID、薪资组名称、薪资组编码、薪资组状态等，不含薪资组下的员工信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>payroll:pay_groups:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小，默认值100</para>
    /// <para>示例值：50</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6862995757234914824</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/payroll/v1/paygroups")]
    System.Threading.Tasks.Task<FeishuResponse<Payroll.GetPayrollV1PaygroupsResponseDto>> GetPayrollV1PaygroupsAsync(
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询指定生效日期的部门架构树</para>
    /// <para>接口ID：7405851978397581314</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/department/tree</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>支持传入部门ID（不传默认根部门），任意日期（不传默认当前日期）。从给定部门ID开始广度遍历，每页最多返回2000行数据</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:department.organize:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6891251722631890445</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：people_corehr_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：【飞书】用来在具体某个应用中标识一个部门，同一个department_id 在不同应用中的 open_department_id 相同。</item>
    /// <item>department_id：【飞书】用来标识租户内一个唯一的部门。</item>
    /// <item>people_corehr_department_id：【飞书人事】用来标识「飞书人事」中的部门。</item>
    /// </list>
    /// <para>默认值：people_corehr_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/departments/tree")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2DepartmentsTreeResponseDto>> PostCorehrV2DepartmentsTreeAsync(
        [JsonContent] Corehr.PostCorehrV2DepartmentsTreeBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? department_id_type = "people_corehr_department_id");

    /// <summary>
    /// <para>【应用信息】向管理员申请授权</para>
    /// <para>接口ID：7406972061036429316</para>
    /// <para>接口文档：https://open.feishu.cn/document/application-v6/scope/apply</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口以应用身份向租户管理员申请应用内需要审核的 API 权限。</para>
    /// </summary>
    [HttpPost("/open-apis/application/v6/scopes/apply")]
    System.Threading.Tasks.Task<FeishuResponse> PostApplicationV6ScopesApplyAsync();

    /// <summary>
    /// <para>【应用信息】查询租户授权状态</para>
    /// <para>接口ID：7406972061036445700</para>
    /// <para>接口文档：https://open.feishu.cn/document/application-v6/scope/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>调用该接口查询当前应用向租户申请授权的状态。</para>
    /// </summary>
    [HttpGet("/open-apis/application/v6/scopes")]
    System.Threading.Tasks.Task<FeishuResponse<Application.GetApplicationV6ScopesResponseDto>> GetApplicationV6ScopesAsync();

    /// <summary>
    /// <para>【招聘】查询外部面试列表</para>
    /// <para>接口ID：7407298680640913411</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/get-candidates/import-external-system-information/import-external-interview-info/batch_query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>可根据外部投递 ID 或外部面试 ID 列表查询外部面试信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:external_application</item>
    /// <item>hire:external_application:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="external_application_id">
    /// <para>必填：否</para>
    /// <para>外部投递 ID，可通过[查询外部投递列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/external_application/list)接口获取</para>
    /// <para>示例值：6960663240925956660</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE2Mjc1NTUyMjM2NzIsImlkIjpudWxsfQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/external_interviews/batch_query")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1ExternalInterviewsBatchQueryResponseDto>> PostHireV1ExternalInterviewsBatchQueryAsync(
        [JsonContent] Hire.PostHireV1ExternalInterviewsBatchQueryBodyDto dto,
        [PathQuery] string? external_application_id = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【招聘】更新外部背调</para>
    /// <para>接口ID：7407298680640929795</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/get-candidates/import-external-system-information/import-external-background-info/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新外部背调信息。</para>
    /// <para>## 注意事项</para>
    /// <para>该接口会对原背调内容进行全量覆盖更新。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:external_application</item>
    /// </list></para>
    /// </summary>
    /// <param name="external_background_check_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>外部背调 ID，可通过[查询外部背调列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/external_background_check/batch_query)接口获取</para>
    /// <para>示例值：6960663240925956660</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/hire/v1/external_background_checks/{external_background_check_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PutHireV1ExternalBackgroundChecksByExternalBackgroundCheckIdResponseDto>> PutHireV1ExternalBackgroundChecksByExternalBackgroundCheckIdAsync(
        [PathQuery] string external_background_check_id,
        [JsonContent] Hire.PutHireV1ExternalBackgroundChecksByExternalBackgroundCheckIdBodyDto dto);

    /// <summary>
    /// <para>【招聘】创建外部 Offer</para>
    /// <para>接口ID：7407298680640946179</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/get-candidates/import-external-system-information/import-external-offer-info/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建外部 Offer，可用于导入来自其他系统的 Offer 信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:external_offer</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/external_offers")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1ExternalOffersResponseDto>> PostHireV1ExternalOffersAsync(
        [JsonContent] Hire.PostHireV1ExternalOffersBodyDto dto);

    /// <summary>
    /// <para>【招聘】删除外部面试</para>
    /// <para>接口ID：7407298680640995331</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/get-candidates/import-external-system-information/import-external-interview-info/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据外部面试 ID 删除外部面试。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:external_application</item>
    /// </list></para>
    /// </summary>
    /// <param name="external_interview_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>外部面试 ID，可通过[查询外部面试列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/external_interview/batch_query)接口获取</para>
    /// <para>示例值：6960663240925956660</para>
    /// </param>
    [HttpDelete("/open-apis/hire/v1/external_interviews/{external_interview_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteHireV1ExternalInterviewsByExternalInterviewIdAsync(
        [PathQuery] string external_interview_id);

    /// <summary>
    /// <para>【招聘】更新外部面试</para>
    /// <para>接口ID：7407298680641011715</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/get-candidates/import-external-system-information/import-external-interview-info/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新外部面试信息。</para>
    /// <para>## 注意事项</para>
    /// <para>该接口会对原面试以及面试评价内容进行全量覆盖更新。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:external_application</item>
    /// </list></para>
    /// </summary>
    /// <param name="external_interview_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>外部面试 ID，可通过[查询外部面试列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/external_interview/batch_query)接口获取</para>
    /// <para>示例值：6960663240925956660</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/hire/v1/external_interviews/{external_interview_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PutHireV1ExternalInterviewsByExternalInterviewIdResponseDto>> PutHireV1ExternalInterviewsByExternalInterviewIdAsync(
        [PathQuery] string external_interview_id,
        [JsonContent] Hire.PutHireV1ExternalInterviewsByExternalInterviewIdBodyDto dto);

    /// <summary>
    /// <para>【招聘】查询外部背调列表</para>
    /// <para>接口ID：7407298680641028099</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/get-candidates/import-external-system-information/import-external-background-info/batch_query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>可根据外部投递 ID 或外部背调 ID 列表查询外部背调信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:external_application</item>
    /// <item>hire:external_application:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="external_application_id">
    /// <para>必填：否</para>
    /// <para>外部投递 ID，可通过[查询外部投递列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/external_application/list)接口获取</para>
    /// <para>示例值：6960663240925956660</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE2Mjc1NTUyMjM2NzIsImlkIjpudWxsfQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/external_background_checks/batch_query")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1ExternalBackgroundChecksBatchQueryResponseDto>> PostHireV1ExternalBackgroundChecksBatchQueryAsync(
        [JsonContent] Hire.PostHireV1ExternalBackgroundChecksBatchQueryBodyDto dto,
        [PathQuery] string? external_application_id = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【招聘】删除外部背调</para>
    /// <para>接口ID：7407298680641044483</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/get-candidates/import-external-system-information/import-external-background-info/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据外部背调 ID 删除外部背调。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:external_application</item>
    /// </list></para>
    /// </summary>
    /// <param name="external_background_check_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>外部背调 ID，可通过[查询外部背调列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/external_background_check/batch_query)接口获取</para>
    /// <para>示例值：6960663240925956660</para>
    /// </param>
    [HttpDelete("/open-apis/hire/v1/external_background_checks/{external_background_check_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteHireV1ExternalBackgroundChecksByExternalBackgroundCheckIdAsync(
        [PathQuery] string external_background_check_id);

    /// <summary>
    /// <para>【招聘】查询外部 Offer 列表</para>
    /// <para>接口ID：7407298680641060867</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/get-candidates/import-external-system-information/import-external-offer-info/batch_query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>可根据外部投递 ID 或外部 Offer ID 列表查询外部 Offer 信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:external_offer</item>
    /// <item>hire:external_offer:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="external_application_id">
    /// <para>必填：否</para>
    /// <para>外部投递 ID，可通过[查询外部投递列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/external_application/list)接口获取</para>
    /// <para>示例值：6960663240925956660</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEwLCJ0aW1lc3RhbXAiOjE2Mjc1NTUyMjM2NzIsImlkIjpudWxsfQ==</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/external_offers/batch_query")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1ExternalOffersBatchQueryResponseDto>> PostHireV1ExternalOffersBatchQueryAsync(
        [JsonContent] Hire.PostHireV1ExternalOffersBatchQueryBodyDto dto,
        [PathQuery] string? external_application_id = null,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【招聘】删除外部 Offer</para>
    /// <para>接口ID：7407298680641077251</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/get-candidates/import-external-system-information/import-external-offer-info/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据外部 Offer ID 删除外部 Offer。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:external_offer</item>
    /// </list></para>
    /// </summary>
    /// <param name="external_offer_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>外部 Offer ID，可通过[查询外部 Offer 列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/external_offer/batch_query)接口获取</para>
    /// <para>示例值：6960663240925956660</para>
    /// </param>
    [HttpDelete("/open-apis/hire/v1/external_offers/{external_offer_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteHireV1ExternalOffersByExternalOfferIdAsync(
        [PathQuery] string external_offer_id);

    /// <summary>
    /// <para>【招聘】更新外部 Offer</para>
    /// <para>接口ID：7407298680641093635</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/get-candidates/import-external-system-information/import-external-offer-info/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新外部 Offer 信息。</para>
    /// <para>## 注意事项</para>
    /// <para>该接口会对原 Offer 内容进行全量覆盖更新。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:external_offer</item>
    /// </list></para>
    /// </summary>
    /// <param name="external_offer_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>外部 Offer ID，可通过[查询外部 Offer 列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/external_offer/batch_query)接口获取</para>
    /// <para>示例值：6960663240925956660</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/hire/v1/external_offers/{external_offer_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PutHireV1ExternalOffersByExternalOfferIdResponseDto>> PutHireV1ExternalOffersByExternalOfferIdAsync(
        [PathQuery] string external_offer_id,
        [JsonContent] Hire.PutHireV1ExternalOffersByExternalOfferIdBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】启用/停用公司</para>
    /// <para>接口ID：7408127338960781340</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/company/active</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对公司进行启用或停用操作</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:company:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/companies/active")]
    System.Threading.Tasks.Task<FeishuResponse> PostCorehrV2CompaniesActiveAsync(
        [JsonContent] Corehr.PostCorehrV2CompaniesActiveBodyDto dto);

    /// <summary>
    /// <para>【飞书人事】获取工作日历日期详情</para>
    /// <para>接口ID：7408403062694084611</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/leave/work_calendar_date</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取工作日历每一天的日期详情，如日期、日期类型等</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:corehr:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/leaves/work_calendar_date")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1LeavesWorkCalendarDateResponseDto>> PostCorehrV1LeavesWorkCalendarDateAsync(
        [JsonContent] FeishuPeople.PostCorehrV1LeavesWorkCalendarDateBodyDto dto);

    /// <summary>
    /// <para>【飞书人事】获取工作日历</para>
    /// <para>接口ID：7408403062694100995</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/leave/work_calendar</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取工作日历信息，如名称，状态等</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.basic_data:read</item>
    /// <item>corehr:corehr:readonly</item>
    /// <item>corehr:employee:read</item>
    /// <item>corehr:work_calendar:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v1/leaves/work_calendar")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.PostCorehrV1LeavesWorkCalendarResponseDto>> PostCorehrV1LeavesWorkCalendarAsync(
        [JsonContent] FeishuPeople.PostCorehrV1LeavesWorkCalendarBodyDto dto);

    /// <summary>
    /// <para>【Payroll】创建 / 更新外部算薪数据</para>
    /// <para>接口ID：7411366924142460930</para>
    /// <para>接口文档：https://open.feishu.cn/document/payroll-v1/datasource_record/save</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>参照数据源配置字段格式，批量保存（创建或更新）数据记录。</para>
    /// <para>1. 记录的唯一标志通过业务主键判断（employment_id + payroll_period）</para>
    /// <para>2. 若不存在数据记录，则本次保存会插入1条记录。</para>
    /// <para>3. 若已存在数据记录，则本次保存会覆盖更新已有记录（只更新传入字段的值，未传入字段值不更新），如果传入的数据记录没有任何变化，则不更新。</para>
    /// <para>4. 若更新或者插入成功，会返回产生数据变更的记录条数。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>payroll:external_datasource_record:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/payroll/v1/datasource_records/save")]
    System.Threading.Tasks.Task<FeishuResponse<Payroll.PostPayrollV1DatasourceRecordsSaveResponseDto>> PostPayrollV1DatasourceRecordsSaveAsync(
        [JsonContent] Payroll.PostPayrollV1DatasourceRecordsSaveBodyDto dto);

    /// <summary>
    /// <para>【Payroll】批量查询外部算薪数据记录</para>
    /// <para>接口ID：7411366924142477314</para>
    /// <para>接口文档：https://open.feishu.cn/document/payroll-v1/datasource_record/query</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>1. 支持通过payroll_period（必传）、employment_id（可选）这两个预置字段，批量查询指定数据源下的数据记录列表。</para>
    /// <para>2. 数据源配置信息可从[获取外部数据源配置信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/payroll-v1/datasource/list)或者 「飞书人事后台-设置-算薪数据设置-外部数据源配置」页面 获取</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>payroll:external_datasource_record:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/payroll/v1/datasource_records/query")]
    System.Threading.Tasks.Task<FeishuResponse<Payroll.PostPayrollV1DatasourceRecordsQueryResponseDto>> PostPayrollV1DatasourceRecordsQueryAsync(
        [JsonContent] Payroll.PostPayrollV1DatasourceRecordsQueryBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【Payroll】获取外部数据源配置信息</para>
    /// <para>接口ID：7411366924142493698</para>
    /// <para>接口文档：https://open.feishu.cn/document/payroll-v1/datasource/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>批量查询飞书人事后台：设置-&gt;算薪数据设置-&gt;外部数据源设置 中的数据源设置列表</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>payroll:external_datasource_configuration:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/payroll/v1/datasources")]
    System.Threading.Tasks.Task<FeishuResponse<Payroll.GetPayrollV1DatasourcesResponseDto>> GetPayrollV1DatasourcesAsync(
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【Payroll】查询发薪活动明细列表</para>
    /// <para>接口ID：7411460155089502211</para>
    /// <para>接口文档：https://open.feishu.cn/document/payroll-v1/payment_detail/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据「发薪活动 ID 」和「分页参数」查询发薪活动明细列表和关联的算薪明细分段数据。</para>
    /// <para>## 使用场景</para>
    /// <para>&gt; 当前接口仅支持查询某个发薪活动下的所有发薪明细数据，若需要查询某些员工在特定范围内的发薪明细，请使用[批量查询发薪明细](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/payroll-v1/payment_detail/query)接口。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>payroll:payment_activity_details:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_index">
    /// <para>必填：是</para>
    /// <para>页码，第一页从 1 开始</para>
    /// <para>示例值：100</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>每页大小，范围为：[1, 100]</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="activity_id">
    /// <para>必填：是</para>
    /// <para>发薪活动 ID，调用[查询发薪活动列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/payroll-v1/payment_activity/list)接口后，可以从返回结果中获取到发薪活动 ID。</para>
    /// <para>示例值：7202076988667019308</para>
    /// </param>
    /// <param name="include_segment_data">
    /// <para>必填：否</para>
    /// <para>是否需要查询算薪明细的分段信息，如果不传该参数或传 false ，那么只返回发薪活动明细数据；如果该参数传了 true，那么同时返回发薪明细对应的算薪明细分段数据。</para>
    /// <para>示例值：false</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="acct_item_ids">
    /// <para>必填：否</para>
    /// <para>算薪项 ID 列表，调用[批量查询算薪项](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/payroll-v1/acct_item/list)接口后，可以从返回结果中获取到算薪项 ID。</para>
    /// <para>1. 当前参数传空时，接口会返回发薪明细中所有的算薪项；</para>
    /// <para>2. 当前参数不为空时，接口只返回发薪明细中与 acct_item_ids 存在交集的算薪项。</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/payroll/v1/payment_activity_details")]
    System.Threading.Tasks.Task<FeishuResponse<Payroll.GetPayrollV1PaymentActivityDetailsResponseDto>> GetPayrollV1PaymentActivityDetailsAsync(
        [PathQuery] int page_index,
        [PathQuery] string activity_id,
        [PathQuery] int page_size = 10,
        [PathQuery] bool? include_segment_data = null,
        [PathQuery] string[]? acct_item_ids = null);

    /// <summary>
    /// <para>【Payroll】查询发薪活动列表</para>
    /// <para>接口ID：7411460155089518595</para>
    /// <para>接口文档：https://open.feishu.cn/document/payroll-v1/payment_activity/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据「发薪日起止范围」、「发薪活动状态」和「分页参数」查询发薪活动列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>payroll:payment_activity:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="pay_period_start_date">
    /// <para>必填：是</para>
    /// <para>发薪日开始时间，格式：YYYY-MM-dd，[pay_period_start_date, pay_period_end_date] 是一个左闭右闭区间。</para>
    /// <para>示例值：2024-01-01</para>
    /// </param>
    /// <param name="pay_period_end_date">
    /// <para>必填：是</para>
    /// <para>发薪日结束时间，格式：YYYY-MM-dd，[pay_period_start_date, pay_period_end_date] 是一个左闭右闭区间。</para>
    /// <para>示例值：2024-01-31</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，传值范围为 [1, 100]</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="statuses">
    /// <para>必填：否</para>
    /// <para>发薪活动审批状态列表，其中：</para>
    /// <para>1. 100 - 待确认名单</para>
    /// <para>2. 150 - 待提交审批</para>
    /// <para>3. 200 - 审批中</para>
    /// <para>4. 300 - 审批被拒绝</para>
    /// <para>5. 350 - 审批被撤回</para>
    /// <para>6. 360 - 审批被撤销</para>
    /// <para>7. 375 - 审批通过</para>
    /// <para>8. 400 - 已封存</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/payroll/v1/payment_activitys")]
    System.Threading.Tasks.Task<FeishuResponse<Payroll.GetPayrollV1PaymentActivitysResponseDto>> GetPayrollV1PaymentActivitysAsync(
        [PathQuery] string pay_period_start_date,
        [PathQuery] string pay_period_end_date,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] int[]? statuses = null);

    /// <summary>
    /// <para>【飞书人事】根据适用条件获取工作日历 ID</para>
    /// <para>接口ID：7412526256520724508</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/leave/calendar_by_scope</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据日历的适用范围，获取工作日历 ID。适用范围包含工作地点，工时制度等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr:readonly</item>
    /// <item>corehr:leave:read</item>
    /// <item>corehr:work_calendar:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="wk_department_id">
    /// <para>必填：否</para>
    /// <para>用户所属部门的ID列表。</para>
    /// <para>可以通过[批量查询任职信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/list)获取所属部门的 ID</para>
    /// <para>示例值："6722331851580982798"</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="wk_country_region_id">
    /// <para>必填：否</para>
    /// <para>国家/地区 ID。</para>
    /// <para>可以通过[批量查询任职信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/list) 获取所属国家/地区 ID</para>
    /// <para>示例值："6722331851580982798"</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="wk_employee_type_id">
    /// <para>必填：否</para>
    /// <para>人员类型ID。</para>
    /// <para>可以通过[批量查询任职信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/list) 获取所属人员类型ID</para>
    /// <para>示例值："6722331851580982798"</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="wk_work_location_id">
    /// <para>必填：否</para>
    /// <para>工作地点ID。</para>
    /// <para>可以通过[批量查询任职信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/list) 获取工作地点ID</para>
    /// <para>示例值："6722331851580982798"</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="wk_working_hours_type_id">
    /// <para>必填：否</para>
    /// <para>工时制度ID。</para>
    /// <para>可以通过[批量查询任职信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/list) 获取工时制度ID</para>
    /// <para>示例值："6722331851124982728"</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="wk_job_family_id">
    /// <para>必填：否</para>
    /// <para>职务序列ID。</para>
    /// <para>可以通过[批量查询任职信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/list) 获取职务序列ID。</para>
    /// <para>示例值："8234534456354534546"</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="wk_company_id">
    /// <para>必填：否</para>
    /// <para>公司 ID。</para>
    /// <para>可以通过[批量查询任职信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/list)获取公司 ID</para>
    /// <para>示例值："6235435355464465434"</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v1/leaves/calendar_by_scope")]
    System.Threading.Tasks.Task<FeishuResponse<FeishuPeople.GetCorehrV1LeavesCalendarByScopeResponseDto>> GetCorehrV1LeavesCalendarByScopeAsync(
        [PathQuery] string? wk_department_id = null,
        [PathQuery] string? wk_country_region_id = null,
        [PathQuery] string? wk_employee_type_id = null,
        [PathQuery] string? wk_work_location_id = null,
        [PathQuery] string? wk_working_hours_type_id = null,
        [PathQuery] string? wk_job_family_id = null,
        [PathQuery] string? wk_company_id = null);

    /// <summary>
    /// <para>【招聘】禁用/取消禁用猎头</para>
    /// <para>接口ID：7413697955198042116</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/get-candidates/agency/operate_agency_account</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>可根据猎头 ID 对猎头执行禁用/取消禁用操作。被禁用的猎头，不能推荐候选人与被分配职位。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:agency_account</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/agencies/operate_agency_account")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1AgenciesOperateAgencyAccountAsync(
        [JsonContent] Hire.PostHireV1AgenciesOperateAgencyAccountBodyDto dto);

    /// <summary>
    /// <para>【招聘】查询猎头供应商下猎头列表</para>
    /// <para>接口ID：7413697955198058500</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/get-candidates/agency/get_agency_account</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据猎头供应商 ID 查询该猎头供应商下的猎头列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:agency_account</item>
    /// <item>hire:agency_account:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>hire:agency.email:readonly</item>
    /// <item>hire:agency.mobile:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEsInRpbWVzdGFtcCI6MTY0MDc2NTYzMjA4OCwiaWQiOm51bGx9</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>每页获取记录数量</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/agencies/get_agency_account")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1AgenciesGetAgencyAccountResponseDto>> PostHireV1AgenciesGetAgencyAccountAsync(
        [JsonContent] Hire.PostHireV1AgenciesGetAgencyAccountBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10);

    /// <summary>
    /// <para>【招聘】搜索猎头供应商列表</para>
    /// <para>接口ID：7413697955198074884</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/get-candidates/agency/batch_query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>可根据猎头供应商 ID 列表或关键字、筛选项查询供应商信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:agency</item>
    /// <item>hire:agency:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>hire:agency.email:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eyJvZmZzZXQiOjEsInRpbWVzdGFtcCI6MTY0MDc2NTYzMjA4OCwiaWQiOm51bGx9</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>每页获取记录数量</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/agencies/batch_query")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1AgenciesBatchQueryResponseDto>> PostHireV1AgenciesBatchQueryAsync(
        [JsonContent] Hire.PostHireV1AgenciesBatchQueryBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10);

    /// <summary>
    /// <para>【招聘】加入/移除屏蔽名单</para>
    /// <para>接口ID：7413697955198091268</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/candidate-management/talent/change_talent_block</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据人才 ID 将人才加入或移除屏蔽名单。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:talent_blocklist</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/talent_blocklist/change_talent_block")]
    System.Threading.Tasks.Task<FeishuResponse> PostHireV1TalentBlocklistChangeTalentBlockAsync(
        [JsonContent] Hire.PostHireV1TalentBlocklistChangeTalentBlockBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询生效信息变更部门</para>
    /// <para>接口ID：7414100499044646940</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/department/query_recent_change</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询指定时间范围内当前生效信息发生变更的部门，即只有部门当前生效版本的生效时间在查询时间范围内，才返回该部门id</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:department:read</item>
    /// <item>corehr:department:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大支持单次 2000 条变更</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6891251722631890445</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="start_date">
    /// <para>必填：是</para>
    /// <para>查询的开始时间，格式 "YYYY-MM-DD HH:MM:SS", 以 UTC+8 时区查询变更。</para>
    /// <para>示例值：2024-06-01 00:00:00</para>
    /// </param>
    /// <param name="end_date">
    /// <para>必填：是</para>
    /// <para>查询的结束时间，格式 "YYYY-MM-DD HH:MM:SS", 以 UTC+8 时区查询变更。 查询结束时间应大于开始时间。</para>
    /// <para>示例值：2024-08-01 02:10:10</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：people_corehr_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：【飞书】用来在具体某个应用中标识一个部门，同一个department_id 在不同应用中的 open_department_id 相同。</item>
    /// <item>department_id：【飞书】用来标识租户内一个唯一的部门。</item>
    /// <item>people_corehr_department_id：【飞书人事】用来标识「飞书人事」中的部门。</item>
    /// </list>
    /// <para>默认值：people_corehr_department_id</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v2/departments/query_recent_change")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.GetCorehrV2DepartmentsQueryRecentChangeResponseDto>> GetCorehrV2DepartmentsQueryRecentChangeAsync(
        [PathQuery] string start_date,
        [PathQuery] string end_date,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? department_id_type = "people_corehr_department_id");

    /// <summary>
    /// <para>【飞书低代码平台】查询角色成员信息</para>
    /// <para>接口ID：7417675812785455107</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/permission/application-role-member/get</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>获取角色成员详情</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:role:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="namespace">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用命名空间</para>
    /// <para>示例值：package_test__c</para>
    /// </param>
    /// <param name="role_api_name">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>角色 API 名称</para>
    /// <para>示例值：adminRole</para>
    /// </param>
    /// <param name="need_display_name">
    /// <para>必填：否</para>
    /// <para>是否需要公式的展示名称，便于前端展示</para>
    /// <para>示例值：false</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="use_api_id">
    /// <para>必填：否</para>
    /// <para>是否使用 API ID字段作为出入参，默认值为 false</para>
    /// <para>示例值：false</para>
    /// <para>默认值：false</para>
    /// </param>
    [HttpGet("/open-apis/apaas/v1/applications/{namespace}/roles/{role_api_name}/member")]
    System.Threading.Tasks.Task<FeishuResponse<AppEngine.GetApaasV1ApplicationsByNamespaceRolesByRoleApiNameMemberResponseDto>> GetApaasV1ApplicationsByNamespaceRolesByRoleApiNameMemberAsync(
        [PathQuery] string @namespace,
        [PathQuery] string role_api_name,
        [PathQuery] bool? need_display_name = null,
        [PathQuery] bool? use_api_id = false);

    /// <summary>
    /// <para>【飞书低代码平台】批量删除记录权限用户授权</para>
    /// <para>接口ID：7417675812785471491</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/permission/application-record_permission-member/batch_remove_authorization</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量删除记录权限授权</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:record_permission.member:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="namespace">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用命名空间</para>
    /// <para>示例值：package_test__c</para>
    /// </param>
    /// <param name="record_permission_api_name">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>记录权限 API 名称</para>
    /// <para>示例值：adminRecordPermission</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/apaas/v1/applications/{namespace}/record_permissions/{record_permission_api_name}/member/batch_remove_authorization")]
    System.Threading.Tasks.Task<FeishuResponse> PostApaasV1ApplicationsByNamespaceRecordPermissionsByRecordPermissionApiNameMemberBatchRemoveAuthorizationAsync(
        [PathQuery] string @namespace,
        [PathQuery] string record_permission_api_name,
        [JsonContent] AppEngine.PostApaasV1ApplicationsByNamespaceRecordPermissionsByRecordPermissionApiNameMemberBatchRemoveAuthorizationBodyDto dto);

    /// <summary>
    /// <para>【飞书低代码平台】批量删除角色成员授权</para>
    /// <para>接口ID：7417675812785487875</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/permission/application-role-member/batch_remove_authorization</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量删除角色成员授权</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:role.member:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="namespace">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用命名空间</para>
    /// <para>示例值：package_test__c</para>
    /// </param>
    /// <param name="role_api_name">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>角色 API 名称</para>
    /// <para>示例值：adminRole</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/apaas/v1/applications/{namespace}/roles/{role_api_name}/member/batch_remove_authorization")]
    System.Threading.Tasks.Task<FeishuResponse> PostApaasV1ApplicationsByNamespaceRolesByRoleApiNameMemberBatchRemoveAuthorizationAsync(
        [PathQuery] string @namespace,
        [PathQuery] string role_api_name,
        [JsonContent] AppEngine.PostApaasV1ApplicationsByNamespaceRolesByRoleApiNameMemberBatchRemoveAuthorizationBodyDto dto);

    /// <summary>
    /// <para>【飞书低代码平台】批量创建记录权限用户授权</para>
    /// <para>接口ID：7417675812785504259</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/permission/application-record_permission-member/batch_create_authorization</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量创建记录权限授权</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:record_permission.member:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="namespace">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用命名空间</para>
    /// <para>示例值：package_test__c</para>
    /// </param>
    /// <param name="record_permission_api_name">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>记录权限 API 名称</para>
    /// <para>示例值：adminRecordPermission</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/apaas/v1/applications/{namespace}/record_permissions/{record_permission_api_name}/member/batch_create_authorization")]
    System.Threading.Tasks.Task<FeishuResponse> PostApaasV1ApplicationsByNamespaceRecordPermissionsByRecordPermissionApiNameMemberBatchCreateAuthorizationAsync(
        [PathQuery] string @namespace,
        [PathQuery] string record_permission_api_name,
        [JsonContent] AppEngine.PostApaasV1ApplicationsByNamespaceRecordPermissionsByRecordPermissionApiNameMemberBatchCreateAuthorizationBodyDto dto);

    /// <summary>
    /// <para>【飞书低代码平台】批量创建角色成员授权</para>
    /// <para>接口ID：7417675812785520643</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/permission/application-role-member/batch_create_authorization</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量创建角色成员授权</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:role.member:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="namespace">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用命名空间</para>
    /// <para>示例值：package_test__c</para>
    /// </param>
    /// <param name="role_api_name">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>角色 API 名称</para>
    /// <para>示例值：adminRole</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/apaas/v1/applications/{namespace}/roles/{role_api_name}/member/batch_create_authorization")]
    System.Threading.Tasks.Task<FeishuResponse> PostApaasV1ApplicationsByNamespaceRolesByRoleApiNameMemberBatchCreateAuthorizationAsync(
        [PathQuery] string @namespace,
        [PathQuery] string role_api_name,
        [JsonContent] AppEngine.PostApaasV1ApplicationsByNamespaceRolesByRoleApiNameMemberBatchCreateAuthorizationBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】批量查询外派信息</para>
    /// <para>接口ID：7418041559249354755</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/employee/job_data/employees-international_assignment/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询员工的外派信息：外派类型、外派地点、职务、职级、上级等。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:employees.international_assignment:read</item>
    /// <item>corehr:employees.international_assignment:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:employment.international_assignment.compensation_type:read</item>
    /// <item>corehr:employment.international_assignment.compensation_type:write</item>
    /// <item>corehr:employment.international_assignment.custom_field:read</item>
    /// <item>corehr:employment.international_assignment.custom_field:write</item>
    /// <item>corehr:employment.international_assignment.job_grade:read</item>
    /// <item>corehr:employment.international_assignment.job_grade:write</item>
    /// <item>corehr:employment.international_assignment.job_level:read</item>
    /// <item>corehr:employment.international_assignment.job_level:write</item>
    /// <item>corehr:employment.international_assignment.job:read</item>
    /// <item>corehr:employment.international_assignment.job:write</item>
    /// <item>corehr:employment.international_assignment.position:read</item>
    /// <item>corehr:employment.international_assignment.position:write</item>
    /// <item>corehr:employment.international_assignment.service_company:read</item>
    /// <item>corehr:employment.international_assignment.service_company:write</item>
    /// <item>corehr:employment.international_assignment.weekly_working_hours:read</item>
    /// <item>corehr:employment.international_assignment.weekly_working_hours:write</item>
    /// <item>corehr:employment.international_assignment.work_calendar:read</item>
    /// <item>corehr:employment.international_assignment.work_calendar:write</item>
    /// <item>corehr:employment.international_assignment.work_location:read</item>
    /// <item>corehr:employment.international_assignment.work_location:write</item>
    /// <item>corehr:employment.international_assignment.work_shift:read</item>
    /// <item>corehr:employment.international_assignment.work_shift:write</item>
    /// <item>corehr:employment.international_assignment.working_hours_type:read</item>
    /// <item>corehr:employment.international_assignment.working_hours_type:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：200</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：123456</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="employment_ids">
    /// <para>必填：否</para>
    /// <para>雇佣ID</para>
    /// <para>- 可通过[【批量查询员工信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/employee/batch_get)获取详细信息</para>
    /// <para>- 类型必须与 user_id_type 一致</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="international_assignment_ids">
    /// <para>必填：否</para>
    /// <para>外派 ID</para>
    /// <para>- 指定外派记录 ID 查询时，请将 page_size 设为最大值，不返回 has_more 参数</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="effective_time">
    /// <para>必填：否</para>
    /// <para>外派开始日期</para>
    /// <para>- 范围筛选，格式：yyyy-mm-dd~yyyy-mm-dd</para>
    /// <para>示例值：- "2024-01-01~2024-02-02" - "~2024-02-02" - "2024-01-01~"</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="expiration_time">
    /// <para>必填：否</para>
    /// <para>外派结束日期</para>
    /// <para>- 范围筛选，格式：yyyy-mm-dd~yyyy-mm-dd</para>
    /// <para>示例值：- "2024-01-01~2024-02-02" - "~2024-02-02" - "2024-01-01~"</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="employment_status_list">
    /// <para>必填：否</para>
    /// <para>雇佣状态</para>
    /// <para>- 可通过[【获取字段详情】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param)接口查询，查询参数如下：</para>
    /// <para>- object_api_name：employment</para>
    /// <para>- custom_api_name：employment_status</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="work_location_id_list">
    /// <para>必填：否</para>
    /// <para>外派工作地点</para>
    /// <para>- 可通过[【批量查询地点】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/list)获取</para>
    /// <para>- 需要以下权限点之一：</para>
    /// <para>- corehr:employment.international_assignment.work_location:read : 读取外派地点</para>
    /// <para>- corehr:employment.international_assignment.work_location:write : 读写外派地点</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="department_id_list">
    /// <para>必填：否</para>
    /// <para>外派部门</para>
    /// <para>- 可通过[【批量查询部门】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/department/batch_get)获取</para>
    /// <para>- 类型与 department_id_type 一致</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="direct_manager_id_list">
    /// <para>必填：否</para>
    /// <para>外派直属上级</para>
    /// <para>- 可通过[【批量查询员工信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/employee/batch_get)获取</para>
    /// <para>- 类型与 user_id_type 一致</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dotted_line_manager_id_list">
    /// <para>必填：否</para>
    /// <para>外派虚线上级</para>
    /// <para>- 可通过[【批量查询员工信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/employee/batch_get)获取</para>
    /// <para>- 类型与 user_id_type 一致</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="position_id_list">
    /// <para>必填：否</para>
    /// <para>外派岗位</para>
    /// <para>- 功能灰度中，请联系[技术支持](https://applink.feishu.cn/TLJpeNdW)</para>
    /// <para>- 需要以下权限点之一：</para>
    /// <para>- corehr:employment.international_assignment.position:read : 读取外派岗位</para>
    /// <para>- corehr:employment.international_assignment.position:write : 读写外派岗位</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="job_id_list">
    /// <para>必填：否</para>
    /// <para>外派职务</para>
    /// <para>- 可通过[【批量查询职务】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/job/list)获取</para>
    /// <para>- 需要以下权限点之一：</para>
    /// <para>- corehr:employment.international_assignment.job:read : 读取外派职务</para>
    /// <para>- corehr:employment.international_assignment.job:write : 读写外派职务</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="job_family_id_list">
    /// <para>必填：否</para>
    /// <para>外派序列</para>
    /// <para>- 可通过[【批量查询序列】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_family/list)获取</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="job_level_id_list">
    /// <para>必填：否</para>
    /// <para>外派职级</para>
    /// <para>- 可通过[【批量查询职级】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_level/list)获取</para>
    /// <para>- 需要以下权限点之一：</para>
    /// <para>- corehr:employment.international_assignment.job_level:read : 读取外派职级</para>
    /// <para>- corehr:employment.international_assignment.job_level:write : 读写外派职级</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="job_grade_id_list">
    /// <para>必填：否</para>
    /// <para>外派职等</para>
    /// <para>- 可通过[【查询职等】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/job_grade/query)获取</para>
    /// <para>- 需要以下权限点之一：</para>
    /// <para>- corehr:employment.international_assignment.job_grade:read : 读取外派职等</para>
    /// <para>- corehr:employment.international_assignment.job_grade:write : 读写外派职等</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="working_hours_type_id_list">
    /// <para>必填：否</para>
    /// <para>外派工时制度</para>
    /// <para>- 可通过[【批量查询工时制度】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/working_hours_type/list)获取</para>
    /// <para>- 需要以下权限点之一：</para>
    /// <para>- corehr:employment.international_assignment.working_hours_type:read : 读取外派工时制度</para>
    /// <para>- corehr:employment.international_assignment.working_hours_type:write : 读写外派工时制度</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="service_company_list">
    /// <para>必填：否</para>
    /// <para>外派任职公司</para>
    /// <para>- 可通过[【批量查询公司】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/list)获取</para>
    /// <para>- 需要以下权限点之一：</para>
    /// <para>- corehr:employment.international_assignment.service_company:read : 读取外派公司</para>
    /// <para>- corehr:employment.international_assignment.service_company:write : 读写外派公司</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="weekly_working_hours_v2">
    /// <para>必填：否</para>
    /// <para>外派周工作时长</para>
    /// <para>- 限制两位小数</para>
    /// <para>- 需要以下权限点之一：</para>
    /// <para>- corehr:employment.international_assignment.weekly_working_hours:read : 读取外派周工作时长</para>
    /// <para>- corehr:employment.international_assignment.weekly_working_hours:write : 读写外派周工作时长</para>
    /// <para>示例值：10</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="work_shift_list">
    /// <para>必填：否</para>
    /// <para>外派排班类型</para>
    /// <para>- 可通过[【获取字段详情】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param)接口查询，查询参数如下：</para>
    /// <para>- object_api_name：job_data</para>
    /// <para>- custom_api_name：work_shift</para>
    /// <para>- 需要以下权限点之一：</para>
    /// <para>- corehr:employment.international_assignment.work_shift:read : 读取外派排班类型</para>
    /// <para>- corehr:employment.international_assignment.work_shift:write : 读写外派排班类型</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="compensation_type_list">
    /// <para>必填：否</para>
    /// <para>外派薪资类型</para>
    /// <para>- 可通过[【获取字段详情】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param)接口查询，查询参数如下：</para>
    /// <para>- object_api_name：job_data</para>
    /// <para>- custom_api_name：compensation_type</para>
    /// <para>- 需要以下权限点之一：</para>
    /// <para>- corehr:employment.international_assignment.compensation_type:read : 读取外派薪资类型</para>
    /// <para>- corehr:employment.international_assignment.compensation_type:write : 读写外派薪资类型</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="international_assignment_expected_end_date">
    /// <para>必填：否</para>
    /// <para>外派预计结束日期</para>
    /// <para>- 范围筛选，格式：yyyy-mm-dd~yyyy-mm-dd</para>
    /// <para>示例值：- "2024-01-01~2024-02-02" - "~2024-02-02" - "2024-01-01~"</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="international_assignment_status_list">
    /// <para>必填：否</para>
    /// <para>外派状态</para>
    /// <para>- 可通过[【获取字段详情】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param)接口查询，查询参数如下：</para>
    /// <para>- object_api_name：international_assignment</para>
    /// <para>- custom_api_name：international_assignment_status</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="international_assignment_type_list">
    /// <para>必填：否</para>
    /// <para>外派类型</para>
    /// <para>- 可通过[【获取字段详情】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param)接口查询，查询参数如下：</para>
    /// <para>- object_api_name：international_assignment</para>
    /// <para>- custom_api_name：international_assignment_type</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="work_calendar_id_list">
    /// <para>必填：否</para>
    /// <para>外派工作日历</para>
    /// <para>- 可通过[【查询工作日历】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave/work_calendar)获取详细信息</para>
    /// <para>- 需要以下权限点之一：</para>
    /// <para>- corehr:employment.international_assignment.work_calendar:read : 读取外派工作日历</para>
    /// <para>- corehr:employment.international_assignment.work_calendar:write : 读写外派工作日历</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v2/employees/international_assignments")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.GetCorehrV2EmployeesInternationalAssignmentsResponseDto>> GetCorehrV2EmployeesInternationalAssignmentsAsync(
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id",
        [PathQuery] int? page_size = 200,
        [PathQuery] string? page_token = null,
        [PathQuery] string[]? employment_ids = null,
        [PathQuery] string[]? international_assignment_ids = null,
        [PathQuery] string? effective_time = null,
        [PathQuery] string? expiration_time = null,
        [PathQuery] string[]? employment_status_list = null,
        [PathQuery] string[]? work_location_id_list = null,
        [PathQuery] string[]? department_id_list = null,
        [PathQuery] string[]? direct_manager_id_list = null,
        [PathQuery] string[]? dotted_line_manager_id_list = null,
        [PathQuery] string[]? position_id_list = null,
        [PathQuery] string[]? job_id_list = null,
        [PathQuery] string[]? job_family_id_list = null,
        [PathQuery] string[]? job_level_id_list = null,
        [PathQuery] string[]? job_grade_id_list = null,
        [PathQuery] string[]? working_hours_type_id_list = null,
        [PathQuery] string[]? service_company_list = null,
        [PathQuery] float? weekly_working_hours_v2 = null,
        [PathQuery] string[]? work_shift_list = null,
        [PathQuery] string[]? compensation_type_list = null,
        [PathQuery] string? international_assignment_expected_end_date = null,
        [PathQuery] string[]? international_assignment_status_list = null,
        [PathQuery] string[]? international_assignment_type_list = null,
        [PathQuery] string[]? work_calendar_id_list = null);

    /// <summary>
    /// <para>【招聘】启用内推账户</para>
    /// <para>接口ID：7418831232862584833</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/referral_account/enable</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据账户 ID 启用账户，启用后可通过[「内推账户余额变更事件」](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/referral_account/events/assets_update)监听余额变更、通过[「全额提取内推账户余额」](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/referral_account/withdraw)提取余额。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:referral_account</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/referral_account/enable")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1ReferralAccountEnableResponseDto>> PostHireV1ReferralAccountEnableAsync(
        [JsonContent] Hire.PostHireV1ReferralAccountEnableBodyDto dto);

    /// <summary>
    /// <para>【招聘】查询内推账户</para>
    /// <para>接口ID：7418831232862601217</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/referral_account/get_account_assets</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据账户 ID 查询内推账户信息。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:referral_account</item>
    /// <item>hire:referral_account:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>hire:employee.email:readonly</item>
    /// <item>hire:employee.mobile:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="referral_account_id">
    /// <para>必填：是</para>
    /// <para>账户 ID，注册账户后获取：[注册内推账户](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/referral_account/create)</para>
    /// <para>示例值：6942778198054125570</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/hire/v1/referral_account/get_account_assets")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.GetHireV1ReferralAccountGetAccountAssetsResponseDto>> GetHireV1ReferralAccountGetAccountAssetsAsync(
        [PathQuery] string referral_account_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【招聘】将人才从指定文件夹移除</para>
    /// <para>接口ID：7418831232862617601</para>
    /// <para>接口文档：https://open.feishu.cn/document/hire-v1/candidate-management/talent/remove_to_folder</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据人才 ID 列表将人才从指定文件夹移除。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>hire:talent_folder_association</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/hire/v1/talents/remove_to_folder")]
    System.Threading.Tasks.Task<FeishuResponse<Hire.PostHireV1TalentsRemoveToFolderResponseDto>> PostHireV1TalentsRemoveToFolderAsync(
        [JsonContent] Hire.PostHireV1TalentsRemoveToFolderBodyDto dto);

    /// <summary>
    /// <para>【帐号】退出登录</para>
    /// <para>接口ID：7419242474898472963</para>
    /// <para>接口文档：https://open.feishu.cn/document/authentication-management/login-state-management/logout</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于退出用户的登录态</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>passport:session:logout</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/passport/v1/sessions/logout")]
    System.Threading.Tasks.Task<FeishuResponse> PostPassportV1SessionsLogoutAsync(
        [JsonContent] Passport.PostPassportV1SessionsLogoutBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】添加地点地址</para>
    /// <para>接口ID：7420421437192912899</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/location/location-address/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>添加地点地址</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:locations:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="location_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>地点 ID。ID 获取方式：</para>
    /// <para>- 调用[【创建地点】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/create)[【批量分页查询地点】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/list)等接口可以返回地点 ID</para>
    /// <para>示例值：1616161616</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据 client_token 是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/locations/{location_id}/addresses")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2LocationsByLocationIdAddressesResponseDto>> PostCorehrV2LocationsByLocationIdAddressesAsync(
        [PathQuery] string location_id,
        [JsonContent] Corehr.PostCorehrV2LocationsByLocationIdAddressesBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】更新地点地址</para>
    /// <para>接口ID：7420421437192929283</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/location/location-address/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新地点地址</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:locations:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="location_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>地点 ID。ID 获取方式：</para>
    /// <para>- 调用[【创建地点】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/create)[【批量分页查询地点】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/list)等接口可以返回地点 ID</para>
    /// <para>示例值：1616161616</para>
    /// </param>
    /// <param name="address_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>地址 ID。ID 获取方式：</para>
    /// <para>- 调用[【创建地点】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/create)[【批量分页查询地点】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/list)[【添加地点地址】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/location-address/create)等接口可以返回地址 ID</para>
    /// <para>示例值：1515151515</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据 client_token 是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/corehr/v2/locations/{location_id}/addresses/{address_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PatchCorehrV2LocationsByLocationIdAddressesByAddressIdAsync(
        [PathQuery] string location_id,
        [PathQuery] string address_id,
        [JsonContent] Corehr.PatchCorehrV2LocationsByLocationIdAddressesByAddressIdBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】启用/停用地点</para>
    /// <para>接口ID：7420421437192945667</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/location/active</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>启用/停用地点</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:locations:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/locations/active")]
    System.Threading.Tasks.Task<FeishuResponse> PostCorehrV2LocationsActiveAsync(
        [JsonContent] Corehr.PostCorehrV2LocationsActiveBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】更新地点</para>
    /// <para>接口ID：7420421437192962051</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/location/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新地点</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:locations:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="location_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>地点ID。ID获取方式：</para>
    /// <para>- 调用[【创建地点】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/create)[【批量分页查询地点】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/list)等接口可以返回地点ID</para>
    /// <para>示例值：1616161616</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据 client_token 是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/corehr/v2/locations/{location_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PatchCorehrV2LocationsByLocationIdAsync(
        [PathQuery] string location_id,
        [JsonContent] Corehr.PatchCorehrV2LocationsByLocationIdBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】删除地点地址</para>
    /// <para>接口ID：7420421437192978435</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/location/location-address/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除地点地址</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:locations:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="location_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>地点 ID。ID 获取方式：</para>
    /// <para>- 调用[【创建地点】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/create)[【批量分页查询地点】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/list)等接口可以返回地点 ID</para>
    /// <para>示例值：1616161616</para>
    /// </param>
    /// <param name="address_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>地址 ID。ID 获取方式：</para>
    /// <para>- 调用[【创建地点】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/create)[【批量分页查询地点】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/list)[【添加地点地址】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/location-address/create)等接口可以返回地址 ID</para>
    /// <para>示例值：1515151515</para>
    /// </param>
    [HttpDelete("/open-apis/corehr/v2/locations/{location_id}/addresses/{address_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCorehrV2LocationsByLocationIdAddressesByAddressIdAsync(
        [PathQuery] string location_id,
        [PathQuery] string address_id);

    /// <summary>
    /// <para>【飞书人事（企业版）】删除职等</para>
    /// <para>接口ID：7422326822924550146</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/job-management/job_grade/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除职等</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:job_grade:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_grade_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>需要删除的职等ID。ID获取方式：</para>
    /// <para>- 调用[【创建职等】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/job_grade/create)[【查询租户的职等信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/job_grade/query)等接口可以返回职等ID</para>
    /// <para>示例值：1616161616</para>
    /// </param>
    [HttpDelete("/open-apis/corehr/v2/job_grades/{job_grade_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCorehrV2JobGradesByJobGradeIdAsync(
        [PathQuery] string job_grade_id);

    /// <summary>
    /// <para>【飞书人事（企业版）】更新职等</para>
    /// <para>接口ID：7422326822924566530</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/job-management/job_grade/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新职等</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:job_grade:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_grade_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>职等ID。ID获取方式：</para>
    /// <para>- 调用[【创建职等】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/job_grade/create)[【查询租户的职等信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/job_grade/query)等接口可以返回职等ID</para>
    /// <para>示例值：6862995757234914824</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：1245464678</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/corehr/v2/job_grades/{job_grade_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PatchCorehrV2JobGradesByJobGradeIdAsync(
        [PathQuery] string job_grade_id,
        [JsonContent] Corehr.PatchCorehrV2JobGradesByJobGradeIdBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】创建职等</para>
    /// <para>接口ID：7422326822924582914</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/job-management/job_grade/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建职等</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:job_grade:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/job_grades")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2JobGradesResponseDto>> PostCorehrV2JobGradesAsync(
        [JsonContent] Corehr.PostCorehrV2JobGradesBodyDto dto,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询语言信息</para>
    /// <para>接口ID：7424038983966425089</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/basic-infomation/basic_info-language/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据语言 ID、状态，批量查询语言信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.basic_data:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6862995772275688974</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/basic_info/languages/search")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2BasicInfoLanguagesSearchResponseDto>> PostCorehrV2BasicInfoLanguagesSearchAsync(
        [JsonContent] Corehr.PostCorehrV2BasicInfoLanguagesSearchBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询时区信息</para>
    /// <para>接口ID：7424038983966441473</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/basic-infomation/basic_info-time_zone/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据时区 ID、状态，批量查询时区信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.basic_data:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 100</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6862995772275688974</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/basic_info/time_zones/search")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2BasicInfoTimeZonesSearchResponseDto>> PostCorehrV2BasicInfoTimeZonesSearchAsync(
        [JsonContent] Corehr.PostCorehrV2BasicInfoTimeZonesSearchBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【智能伙伴创建平台】执行数据知识问答</para>
    /// <para>接口ID：7424752773160779780</para>
    /// <para>接口文档：https://open.feishu.cn/document/aily-v1/data-knowledge/ask</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>执行飞书智能伙伴的数据知识问答</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>aily:knowledge:ask</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>飞书智能伙伴搭建平台的AppID</para>
    /// <para>示例值：spring_5862e4fea8__c</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/aily/v1/apps/{app_id}/knowledges/ask")]
    System.Threading.Tasks.Task<FeishuResponse<Aily.PostAilyV1AppsByAppIdKnowledgesAskResponseDto>> PostAilyV1AppsByAppIdKnowledgesAskAsync(
        [PathQuery] string app_id,
        [JsonContent] Aily.PostAilyV1AppsByAppIdKnowledgesAskBodyDto dto);

    /// <summary>
    /// <para>【智能伙伴创建平台】查询数据知识列表</para>
    /// <para>接口ID：7424752773160796164</para>
    /// <para>接口文档：https://open.feishu.cn/document/aily-v1/data-knowledge/data-knowledge-management/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取智能伙伴搭建助手的数据知识列表</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>aily:data_asset:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>智能伙伴创建平台的应用的APPID，可以直接从智能伙伴应用的URL中获取。获取示例：/ai/{APPID}</para>
    /// <para>示例值：spring_5862e4fea8__c</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页参数：分页大小，默认：20，最大：100</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="keyword">
    /// <para>必填：否</para>
    /// <para>模糊匹配关键词</para>
    /// <para>示例值：电影</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="data_asset_ids">
    /// <para>必填：否</para>
    /// <para>根据数据知识 ID 进行过滤</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="data_asset_tag_ids">
    /// <para>必填：否</para>
    /// <para>根据数据知识分类 ID 进行过滤</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="with_data_asset_item">
    /// <para>必填：否</para>
    /// <para>结果是否包含数据与知识项目</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="with_connect_status">
    /// <para>必填：否</para>
    /// <para>结果是否包含数据连接状态</para>
    /// <para>示例值：false</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/aily/v1/apps/{app_id}/data_assets")]
    System.Threading.Tasks.Task<FeishuResponse<Aily.GetAilyV1AppsByAppIdDataAssetsResponseDto>> GetAilyV1AppsByAppIdDataAssetsAsync(
        [PathQuery] string app_id,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? keyword = null,
        [PathQuery] string[]? data_asset_ids = null,
        [PathQuery] string[]? data_asset_tag_ids = null,
        [PathQuery] bool? with_data_asset_item = null,
        [PathQuery] bool? with_connect_status = null);

    /// <summary>
    /// <para>【智能伙伴创建平台】获取数据知识分类列表</para>
    /// <para>接口ID：7424752773160812548</para>
    /// <para>接口文档：https://open.feishu.cn/document/aily-v1/data-knowledge/data-knowledge-management/list-2</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取智能伙伴搭建助手的数据知识分类列表</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>aily:data_asset:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>AppID</para>
    /// <para>示例值：spring_5862e4fea8__c</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页参数：分页大小，默认：20，最大：100</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="keyword">
    /// <para>必填：否</para>
    /// <para>模糊匹配分类名称</para>
    /// <para>示例值：电影</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="data_asset_tag_ids">
    /// <para>必填：否</para>
    /// <para>模糊匹配分类名称</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/aily/v1/apps/{app_id}/data_asset_tags")]
    System.Threading.Tasks.Task<FeishuResponse<Aily.GetAilyV1AppsByAppIdDataAssetTagsResponseDto>> GetAilyV1AppsByAppIdDataAssetTagsAsync(
        [PathQuery] string app_id,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? keyword = null,
        [PathQuery] string[]? data_asset_tag_ids = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】获取指定人员审批任务列表</para>
    /// <para>接口ID：7426325309484040193</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/process-form_variable_data/approver-task/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>审批任务依赖于流程节点实例存在，每一个流程节点实例可能包含有一或多个审批任务，每一个任务表明当前节点的审批人是谁，该接口可获取指定人员的审批任务列表。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:process:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小</para>
    /// <para>示例值：20</para>
    /// <para>默认值：20</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：1</para>
    /// <para>默认值：1</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="user_id">
    /// <para>必填：是</para>
    /// <para>指定人员id，按user_id_type类型传递。</para>
    /// <para>示例值：ou_91791271921729102012</para>
    /// </param>
    /// <param name="approver_status">
    /// <para>必填：否</para>
    /// <para>任务状态</para>
    /// <para>示例值：1</para>
    /// <list type="bullet">
    /// <item>-2：跳过</item>
    /// <item>-1：发起</item>
    /// <item>0：未开始</item>
    /// <item>1：进行中</item>
    /// <item>2：已拒绝</item>
    /// <item>3：已通过</item>
    /// <item>4：被撤回</item>
    /// <item>5：抄送</item>
    /// <item>6：表单提交</item>
    /// <item>12：失败</item>
    /// <item>14：已回退</item>
    /// <item>16：发起撤销</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v2/approvers")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.GetCorehrV2ApproversResponseDto>> GetCorehrV2ApproversAsync(
        [PathQuery] string user_id,
        [PathQuery] int page_size = 20,
        [PathQuery] string? page_token = "1",
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] int? approver_status = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询当前生效信息变更公司</para>
    /// <para>接口ID：7428129573351817220</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/company/query_recent_change</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询指定时间范围内当前生效信息发生变更的公司，即只有公司当前生效版本的生效时间在查询时间范围内，才返回该公司id</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:company:read</item>
    /// <item>corehr:company:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 2000</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：100</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="start_date">
    /// <para>必填：是</para>
    /// <para>查询的开始时间，格式 "YYYY-MM-DD HH:MM:SS", 以 UTC+8 时区查询变更。</para>
    /// <para>示例值：2024-01-01 00:00:00</para>
    /// </param>
    /// <param name="end_date">
    /// <para>必填：是</para>
    /// <para>查询的结束时间，格式 "YYYY-MM-DD HH:MM:SS", 以 UTC+8 时区查询变更。 查询结束时间应大于开始时间。</para>
    /// <para>示例值：2024-01-10 02:10:00</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v2/companies/query_recent_change")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.GetCorehrV2CompaniesQueryRecentChangeResponseDto>> GetCorehrV2CompaniesQueryRecentChangeAsync(
        [PathQuery] string start_date,
        [PathQuery] string end_date,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】操作员工离职</para>
    /// <para>接口ID：7428522865559257091</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/offboarding/submit_v2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于发起飞书人事的[离职信息](https://people.feishu.cn/people/members/dimission/management)，支持填写离职日期、离职原因、屏蔽名单和自定义字段（附件字段除外）等。当接口成功提交后，会产生对应的[离职信息变更](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/offboarding/events/updated)事件。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:offboarding.submit:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/offboardings/submit_v2")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2OffboardingsSubmitV2ResponseDto>> PostCorehrV2OffboardingsSubmitV2Async(
        [JsonContent] Corehr.PostCorehrV2OffboardingsSubmitV2BodyDto dto,
        [PathQuery] string? user_id_type = "people_corehr_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】撤销离职</para>
    /// <para>接口ID：7428522865559273475</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/offboarding/revoke</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过离职ID撤销飞书人事的[离职信息](https://people.feishu.cn/people/members/dimission/management)。当接口成功提交后，会产生对应的[离职信息变更](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/offboarding/events/updated)事件。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:offboarding.revoke:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：people_corehr_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：people_corehr_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/offboardings/revoke")]
    System.Threading.Tasks.Task<FeishuResponse> PostCorehrV2OffboardingsRevokeAsync(
        [JsonContent] Corehr.PostCorehrV2OffboardingsRevokeBodyDto dto,
        [PathQuery] string? user_id_type = "people_corehr_id");

    /// <summary>
    /// <para>【智能伙伴创建平台】调用技能</para>
    /// <para>接口ID：7429225800963031042</para>
    /// <para>接口文档：https://open.feishu.cn/document/aily-v1/app-skill/start</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该 API 用于调用某个 Aily 应用的特定技能，支持指定技能入参；并同步返回技能执行的结果。</para>
    /// <para>&gt; **技能 API** 能显著简化业务系统的集成工作（单轮 API 调用）。技能 API 提供更贴合系统间服务调用的参数传递模式（JSON 入参 / 出参），且无需通过文本消息对话的方式调用 AI 能力。</para>
    /// <para>&lt;div style="text-align: center;"&gt;</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>aily:skill:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>Aily 应用 ID（`spring_xxx__c`），可以在 Aily 应用开发页面的浏览器地址里获取</para>
    /// <para>示例值：spring_e7004f87f1__c</para>
    /// </param>
    /// <param name="skill_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>技能 ID；可通过技能编辑页面的浏览器地址栏获取（`skill_xxx`）</para>
    /// <para>示例值：skill_6cc6166178ca</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/aily/v1/apps/{app_id}/skills/{skill_id}/start")]
    System.Threading.Tasks.Task<FeishuResponse<Aily.PostAilyV1AppsByAppIdSkillsBySkillIdStartResponseDto>> PostAilyV1AppsByAppIdSkillsBySkillIdStartAsync(
        [PathQuery] string app_id,
        [PathQuery] string skill_id,
        [JsonContent] Aily.PostAilyV1AppsByAppIdSkillsBySkillIdStartBodyDto dto);

    /// <summary>
    /// <para>【智能伙伴创建平台】获取技能信息</para>
    /// <para>接口ID：7429225800963047426</para>
    /// <para>接口文档：https://open.feishu.cn/document/aily-v1/app-skill/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该 API 用于查询某个 Aily 应用的特定技能详情</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>aily:skill:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>Aily 应用 ID（`spring_xxx__c`），可以在 Aily 应用开发页面的浏览器地址里获取</para>
    /// <para>示例值：spring_e7004f87f1__c</para>
    /// </param>
    /// <param name="skill_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>技能 ID；可通过技能编辑页面的浏览器地址栏获取（`skill_xxx`）</para>
    /// <para>示例值：skill_6cc6166178ca</para>
    /// </param>
    [HttpGet("/open-apis/aily/v1/apps/{app_id}/skills/{skill_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Aily.GetAilyV1AppsByAppIdSkillsBySkillIdResponseDto>> GetAilyV1AppsByAppIdSkillsBySkillIdAsync(
        [PathQuery] string app_id,
        [PathQuery] string skill_id);

    /// <summary>
    /// <para>【智能伙伴创建平台】查询技能列表</para>
    /// <para>接口ID：7429225800963063810</para>
    /// <para>接口文档：https://open.feishu.cn/document/aily-v1/app-skill/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该 API 用于查询某个 Aily 应用的技能列表</para>
    /// <para>&gt; 包括内置的数据分析与问答技能、以及未在对话开启的技能。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>aily:skill:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>Aily 应用 ID（`spring_xxx__c`），可以在 Aily 应用开发页面的浏览器地址里获取</para>
    /// <para>示例值：spring_e7004f87f1__c</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>本次请求获取的消息记录条数，默认 20</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/aily/v1/apps/{app_id}/skills")]
    System.Threading.Tasks.Task<FeishuResponse<Aily.GetAilyV1AppsByAppIdSkillsResponseDto>> GetAilyV1AppsByAppIdSkillsAsync(
        [PathQuery] string app_id,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】加签审批任务</para>
    /// <para>接口ID：7431073872102866972</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/process-form_variable_data/approver-task/update-3</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>给单个流程中的节点或审批任务加签，加签方式有前加签、并加签、后加签三种。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:process.instance:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="process_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>流程实例id，是一个流程的唯一标识。</para>
    /// <para>可通过[查询流程实例列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/process/list)接口返回的 process_ids 字段获取</para>
    /// <para>示例值：7410664363763172908</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/corehr/v2/processes/{process_id}/extra")]
    System.Threading.Tasks.Task<FeishuResponse> PutCorehrV2ProcessesByProcessIdExtraAsync(
        [PathQuery] string process_id,
        [JsonContent] Corehr.PutCorehrV2ProcessesByProcessIdExtraBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】转交审批任务</para>
    /// <para>接口ID：7431073872102883356</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/process-form_variable_data/approver-task/update-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对于单个审批任务进行转交操作。转交后审批流程流转给被转交人。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:process.instance:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="process_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>流程实例id，是一个流程的唯一标识。</para>
    /// <para>可通过[查询流程实例列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/process/list)接口返回的 process_ids 字段获取</para>
    /// <para>示例值：7410664363763172908</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/corehr/v2/processes/{process_id}/transfer")]
    System.Threading.Tasks.Task<FeishuResponse> PutCorehrV2ProcessesByProcessIdTransferAsync(
        [PathQuery] string process_id,
        [JsonContent] Corehr.PutCorehrV2ProcessesByProcessIdTransferBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】撤回流程</para>
    /// <para>接口ID：7431231062508126209</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/process-form_variable_data/process-instance/update</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对状态为“审批中”的单个审批实例进行撤回操作，撤回后审批流程结束</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:process.instance:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="process_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>流程实例ID。可通过[查询流程实例列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/process/list)接口获取</para>
    /// <para>示例值：7328345170959681068</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：people corehr系统的用户id</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/corehr/v2/process_withdraw/{process_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PutCorehrV2ProcessWithdrawByProcessIdAsync(
        [PathQuery] string process_id,
        [JsonContent] Corehr.PutCorehrV2ProcessWithdrawByProcessIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】撤销流程</para>
    /// <para>接口ID：7431231062508142593</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/process-form_variable_data/process-instance/update-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>撤销单个流程，状态为已完成的流程能够进行撤销，使用时需指定操作人，目前支持流程管理员和审批单管理员。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:process.instance:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="process_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>流程实例 ID。可通过[查询流程实例列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/process/list)接口获取</para>
    /// <para>示例值：7328345170959681068</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：people corehr系统的用户id</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/corehr/v2/process_revoke/{process_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PutCorehrV2ProcessRevokeByProcessIdAsync(
        [PathQuery] string process_id,
        [JsonContent] Corehr.PutCorehrV2ProcessRevokeByProcessIdBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【Payroll】批量查询发薪明细</para>
    /// <para>接口ID：7431973248228638722</para>
    /// <para>接口文档：https://open.feishu.cn/document/payroll-v1/payment_detail/query</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据 __发薪活动 ID 列表__ 、__发薪日起止时间__ 和 __飞书人事雇佣 ID 列表__ 分页查询发薪明细列表和关联的算薪明细分段数据。</para>
    /// <para>## 注意事项</para>
    /// <para>1. 批量查询发薪明细接口提供的请求参数中，用户必须填写「__发薪日起止时间__（pay_period_start_date，pay_period_end_date）」或「__发薪活动 ID 列表__」，当传入的三个参数均为空时，开放接口将返回 2500006 错误码。</para>
    /// <para>2. 每一次调用接口时，系统最多会扫描 __50__ 个发薪活动，当用户传入的查询条件命中的发薪活动个数大于 __50__ 时，开放接口将根据查询参数返回 2500003 或 2500008 错误码，请合理使用查询参数。</para>
    /// <para>3. 开放接口中的「员工的飞书人事雇佣 ID 列表（employee_ids）」参数为必填。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>payroll:payment_details:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/payroll/v1/payment_detail/query")]
    System.Threading.Tasks.Task<FeishuResponse<Payroll.PostPayrollV1PaymentDetailQueryResponseDto>> PostPayrollV1PaymentDetailQueryAsync(
        [JsonContent] Payroll.PostPayrollV1PaymentDetailQueryBodyDto dto);

    /// <summary>
    /// <para>【云文档】获取云文档内容</para>
    /// <para>接口ID：7437110392792858625</para>
    /// <para>接口文档：https://open.feishu.cn/document/docs/docs-v1/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>可获取云文档内容，当前只支持获取新版文档 Markdown 格式的内容。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>docs:document.content:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="doc_token">
    /// <para>必填：是</para>
    /// <para>云文档的唯一标识。点击[这里](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-overview)了解如何获取文档的 `doc_token`</para>
    /// <para>示例值：B4EPdAYx8oi8HRxgPQQbM15UcBf</para>
    /// </param>
    /// <param name="doc_type">
    /// <para>必填：是</para>
    /// <para>云文档类型</para>
    /// <para>示例值：docx</para>
    /// <list type="bullet">
    /// <item>docx：新版文档</item>
    /// </list>
    /// </param>
    /// <param name="content_type">
    /// <para>必填：是</para>
    /// <para>内容类型</para>
    /// <para>示例值：markdown</para>
    /// <list type="bullet">
    /// <item>markdown：Markdown 格式</item>
    /// </list>
    /// </param>
    /// <param name="lang">
    /// <para>必填：否</para>
    /// <para>云文档中存在 @用户 元素时，指定该用户名称的语言。默认 `zh`，即中文</para>
    /// <para>示例值：zh</para>
    /// <list type="bullet">
    /// <item>zh：中文</item>
    /// <item>en：英文</item>
    /// <item>ja：日文</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/docs/v1/content")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDocsV1ContentResponseDto>> GetDocsV1ContentAsync(
        [PathQuery] string doc_token,
        [PathQuery] string doc_type,
        [PathQuery] string content_type,
        [PathQuery] string? lang = null);

    /// <summary>
    /// <para>【应用信息】获取企业安装的应用</para>
    /// <para>接口ID：7438462855810138116</para>
    /// <para>接口文档：https://open.feishu.cn/document/application-v6/admin/list</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于查询企业安装的应用列表，只能被企业自建应用调用。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>admin:app.info:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：50</para>
    /// <para>默认值：50</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="lang">
    /// <para>必填：是</para>
    /// <para>应用的图标、描述、帮助文档链接是按照应用的主语言返回；其他内容（如应用权限、应用分类）按照该参数设定返回对应的语言。可选值有： zh_cn：中文 en_us：英文 ja_jp：日文 如不填写，则按照应用的主语言返回</para>
    /// <para>示例值：zh_cn</para>
    /// </param>
    /// <param name="status">
    /// <para>必填：否</para>
    /// <para>不传入代表全部返回。传入则按照这种应用状态返回。应用状态可选值有：0：停用状态1：启用状态 2：未启用状态</para>
    /// <para>示例值：0</para>
    /// <list type="bullet">
    /// <item>0：停用</item>
    /// <item>1：启用</item>
    /// <item>2：未启用</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="payment_type">
    /// <para>必填：否</para>
    /// <para>不传入代表全部返回。传入则按照这种应用状态返回。 付费类型 可选值： 0：免费 1：付费</para>
    /// <para>示例值：0</para>
    /// <list type="bullet">
    /// <item>0：免费</item>
    /// <item>1：付费</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="owner_type">
    /// <para>必填：否</para>
    /// <para>不传入代表全部返回。传入则按照这种应用状态返回。所有者类型，可选值： 0：飞书科技 1：飞书合作伙伴 2：企业内成员</para>
    /// <para>示例值：0</para>
    /// <list type="bullet">
    /// <item>0：飞书科技</item>
    /// <item>1：飞书合作伙伴</item>
    /// <item>2：企业内成员</item>
    /// </list>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/application/v6/applications")]
    System.Threading.Tasks.Task<FeishuResponse<Application.GetApplicationV6ApplicationsResponseDto>> GetApplicationV6ApplicationsAsync(
        [PathQuery] string lang,
        [PathQuery] int? page_size = 50,
        [PathQuery] string? page_token = null,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] int? status = null,
        [PathQuery] int? payment_type = null,
        [PathQuery] int? owner_type = null);

    /// <summary>
    /// <para>【考勤打卡】查询考勤组下所有成员</para>
    /// <para>接口ID：7439549206763372546</para>
    /// <para>接口文档：https://open.feishu.cn/document/attendance-v1/group/list_user</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>查询指定考勤组下的所有成员</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:rule</item>
    /// <item>attendance:rule:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="group_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>考勤组 ID，获取方式：1）[创建或修改考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/create) 2）[按名称查询考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/search) 3）[获取打卡结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task/query)</para>
    /// <para>示例值：6919358128597097404</para>
    /// </param>
    /// <param name="employee_type">
    /// <para>必填：是</para>
    /// <para>响应体中 user_id 的员工 ID 类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)</para>
    /// <para>可选值有：</para>
    /// <para>1. employee_id：员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的用户 ID</para>
    /// <para>2. employee_no：员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的工号</para>
    /// <para>示例值：employee_id</para>
    /// </param>
    /// <param name="dept_type">
    /// <para>必填：是</para>
    /// <para>响应体中 department_ids 的部门 ID 的类型</para>
    /// <para>可选值有：</para>
    /// <para>1. open_id：暂时只支持部门的 openid。具体概念请参考[部门资源介绍](https://open.larkoffice.com/document/server-docs/contact-v3/department/field-overview)中的open_department_id</para>
    /// <para>示例值：open_id</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：92xKiuWrBCSweSZJBSTpag%3D%3D</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="member_clock_type">
    /// <para>必填：是</para>
    /// <para>查询的考勤组成员的打卡类型</para>
    /// <para>可选值有：</para>
    /// <para>&lt;ul&gt;</para>
    /// <para>&lt;li&gt;0：全部打卡类型&lt;/li&gt;</para>
    /// <para>&lt;li&gt;1：需要打卡类型&lt;/li&gt;</para>
    /// <para>&lt;li&gt;2：无需打卡类型&lt;/li&gt;</para>
    /// <para>&lt;/ul&gt;</para>
    /// <para>示例值：1</para>
    /// </param>
    [HttpGet("/open-apis/attendance/v1/groups/{group_id}/list_user")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.GetAttendanceV1GroupsByGroupIdListUserResponseDto>> GetAttendanceV1GroupsByGroupIdListUserAsync(
        [PathQuery] string group_id,
        [PathQuery] string employee_type,
        [PathQuery] string dept_type,
        [PathQuery] int member_clock_type,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】批量查询部门操作日志</para>
    /// <para>接口ID：7439765965024165889</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/department/query_operation_logs</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量查询指定时间范围内的部门操作日志</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:department.operation_log:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 1000</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：2</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：people_corehr_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：【飞书】用来在具体某个应用中标识一个部门，同一个department_id 在不同应用中的 open_department_id 相同。</item>
    /// <item>department_id：【飞书】用来标识租户内一个唯一的部门。</item>
    /// <item>people_corehr_department_id：【飞书人事】用来标识「飞书人事」中的部门。</item>
    /// </list>
    /// <para>默认值：people_corehr_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/departments/query_operation_logs")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2DepartmentsQueryOperationLogsResponseDto>> PostCorehrV2DepartmentsQueryOperationLogsAsync(
        [JsonContent] Corehr.PostCorehrV2DepartmentsQueryOperationLogsBodyDto dto,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null,
        [PathQuery] string? department_id_type = "people_corehr_department_id");

    /// <summary>
    /// <para>【智能伙伴创建平台】创建数据知识</para>
    /// <para>接口ID：7441589456115892227</para>
    /// <para>接口文档：https://open.feishu.cn/document/aily-v1/data-knowledge/data-knowledge-management/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>在智能伙伴中添加单个数据知识</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>aily:data_asset:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>智能伙伴创建平台的应用的APPID，可以直接从智能伙伴应用的URL中获取。获取示例：/ai/{APPID}</para>
    /// <para>示例值：spring_dfasdf__c</para>
    /// </param>
    /// <param name="tenant_type">
    /// <para>必填：否</para>
    /// <para>应用环境，枚举值：</para>
    /// <para>- `online`：线上环境（默认值）</para>
    /// <para>- `dev`：开发环境；目前只支持 `dev`</para>
    /// <para>示例值：dev</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/aily/v1/apps/{app_id}/data_assets")]
    System.Threading.Tasks.Task<FeishuResponse<Aily.PostAilyV1AppsByAppIdDataAssetsResponseDto>> PostAilyV1AppsByAppIdDataAssetsAsync(
        [PathQuery] string app_id,
        [JsonContent] Aily.PostAilyV1AppsByAppIdDataAssetsBodyDto dto,
        [PathQuery] string? tenant_type = null);

    /// <summary>
    /// <para>【智能伙伴创建平台】删除数据知识</para>
    /// <para>接口ID：7441589456115908611</para>
    /// <para>接口文档：https://open.feishu.cn/document/aily-v1/data-knowledge/data-knowledge-management/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>删除智能伙伴的数据知识</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>aily:data_asset:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>智能伙伴创建平台的应用的APPID，可以直接从智能伙伴应用的URL中获取。获取示例：/ai/{APPID}</para>
    /// <para>示例值：spring_dfadsaf__c</para>
    /// </param>
    /// <param name="data_asset_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>数据知识ID，可通过在智能伙伴创建平台查看知识详情页的url中获取，获取示例 https://***/ai/app_namespace/data/data-asset/data_asset_id</para>
    /// <para>示例值：data_asset_dfadsafe</para>
    /// </param>
    /// <param name="tenant_type">
    /// <para>必填：否</para>
    /// <para>应用环境，枚举值：</para>
    /// <para>- `online`：线上环境（默认值）</para>
    /// <para>- `dev`：开发环境；目前只支持 `dev`</para>
    /// <para>示例值：dev</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpDelete("/open-apis/aily/v1/apps/{app_id}/data_assets/{data_asset_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Aily.DeleteAilyV1AppsByAppIdDataAssetsByDataAssetIdResponseDto>> DeleteAilyV1AppsByAppIdDataAssetsByDataAssetIdAsync(
        [PathQuery] string app_id,
        [PathQuery] string data_asset_id,
        [PathQuery] string? tenant_type = null);

    /// <summary>
    /// <para>【智能伙伴创建平台】获取数据知识</para>
    /// <para>接口ID：7441589456115924995</para>
    /// <para>接口文档：https://open.feishu.cn/document/aily-v1/data-knowledge/data-knowledge-management/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取单个数据知识</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>aily:data_asset:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>智能伙伴创建平台的应用的APPID，可以直接从智能伙伴应用的URL中获取。获取示例：/ai/{APPID}</para>
    /// <para>示例值：spring_feafdsaf__c</para>
    /// </param>
    /// <param name="data_asset_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>数据知识ID，可通过在智能伙伴创建平台查看知识详情页的url中获取，获取示例 https://***/ai/app_namespace/data/data-asset/data_asset_id</para>
    /// <para>示例值：data_asset_dafefadsaf1</para>
    /// </param>
    /// <param name="with_data_asset_item">
    /// <para>必填：否</para>
    /// <para>结果是否包含数据与知识项</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="with_connect_status">
    /// <para>必填：否</para>
    /// <para>结果是否包含数据知识连接状态</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="tenant_type">
    /// <para>必填：否</para>
    /// <para>应用环境，默认为线上环境，dev代表开发环境</para>
    /// <para>示例值：dev</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/aily/v1/apps/{app_id}/data_assets/{data_asset_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Aily.GetAilyV1AppsByAppIdDataAssetsByDataAssetIdResponseDto>> GetAilyV1AppsByAppIdDataAssetsByDataAssetIdAsync(
        [PathQuery] string app_id,
        [PathQuery] string data_asset_id,
        [PathQuery] bool? with_data_asset_item = null,
        [PathQuery] bool? with_connect_status = null,
        [PathQuery] string? tenant_type = null);

    /// <summary>
    /// <para>【智能伙伴创建平台】上传文件用于数据知识管理</para>
    /// <para>接口ID：7441589456115941379</para>
    /// <para>接口文档：https://open.feishu.cn/document/aily-v1/data-knowledge/data-knowledge-management/upload_file</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>上传文件用于智能伙伴的数据知识管理</para>
    /// <para>。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>aily:data_asset:upload_file</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>智能伙伴创建平台的应用的APPID，可以直接从智能伙伴应用的URL中获取。获取示例：/ai/{APPID}</para>
    /// <para>示例值：spring_dsafdsaf__c</para>
    /// </param>
    /// <param name="tenant_type">
    /// <para>必填：否</para>
    /// <para>应用环境，枚举值：</para>
    /// <para>- `online`：线上环境（默认值）</para>
    /// <para>- `dev`：开发环境；目前只支持 `dev`</para>
    /// <para>示例值：dev</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="file">
    /// <para>必填：是</para>
    /// <para>需要上传的文件。仅支持上传 docx、txt、pdf、pptx 类型的文件。</para>
    /// </param>
    [HttpPost("/open-apis/aily/v1/apps/{app_id}/data_assets/upload_file")]
    System.Threading.Tasks.Task<FeishuResponse<Aily.PostAilyV1AppsByAppIdDataAssetsUploadFileResponseDto>> PostAilyV1AppsByAppIdDataAssetsUploadFileAsync(
        [PathQuery] string app_id,
        [FormDataContent] FormDataFile file,
        [PathQuery] string? tenant_type = null);

    /// <summary>
    /// <para>【Payroll】封存发薪活动</para>
    /// <para>接口ID：7441890276475142147</para>
    /// <para>接口文档：https://open.feishu.cn/document/payroll-v1/payment_activity/archive</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>根据发薪活动ID对发薪活动进行封存。注意：仅当发薪活动状态为审批通过时，方可进行封存。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>payroll:payment_activity:archive</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/payroll/v1/payment_activitys/archive")]
    System.Threading.Tasks.Task<FeishuResponse> PostPayrollV1PaymentActivitysArchiveAsync(
        [JsonContent] Payroll.PostPayrollV1PaymentActivitysArchiveBodyDto dto);

    /// <summary>
    /// <para>【组织架构】查询可搜可见规则</para>
    /// <para>接口ID：7442539768884543516</para>
    /// <para>接口文档：https://open.feishu.cn/document/trust_party-v1/searchable-and-visible-rules/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>管理员视角查询可搜可见规则。用户需具备关联组织管理员权限。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>trust_party:collaboration_rule:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：100</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="target_tenant_key">
    /// <para>必填：是</para>
    /// <para>对方组织的tenant key，可通过[管理员获取所有关联组织列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/collaboration_tenant/list)获取</para>
    /// <para>示例值：test_key</para>
    /// </param>
    [HttpGet("/open-apis/directory/v1/collaboration_rules")]
    System.Threading.Tasks.Task<FeishuResponse<Directory.GetDirectoryV1CollaborationRulesResponseDto>> GetDirectoryV1CollaborationRulesAsync(
        [PathQuery] string target_tenant_key,
        [PathQuery] int? page_size = 100,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【组织架构】更新可搜可见规则</para>
    /// <para>接口ID：7442539768884559900</para>
    /// <para>接口文档：https://open.feishu.cn/document/trust_party-v1/searchable-and-visible-rules/update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>管理员视角更新可搜可见规则。用户需具备关联组织管理员权限。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>trust_party:collaboration_rule:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="collaboration_rule_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>规则ID，可通过[查询可搜可见规则](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/collaboration_rule/list)获得</para>
    /// <para>示例值：12121</para>
    /// </param>
    /// <param name="target_tenant_key">
    /// <para>必填：是</para>
    /// <para>对方组织的tenant key，可通过[管理员获取所有关联组织列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/collaboration_tenant/list)获取</para>
    /// <para>示例值：test_key</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/directory/v1/collaboration_rules/{collaboration_rule_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PutDirectoryV1CollaborationRulesByCollaborationRuleIdAsync(
        [PathQuery] string collaboration_rule_id,
        [PathQuery] string target_tenant_key,
        [JsonContent] Directory.PutDirectoryV1CollaborationRulesByCollaborationRuleIdBodyDto dto);

    /// <summary>
    /// <para>【组织架构】删除可搜可见规则</para>
    /// <para>接口ID：7442539768884576284</para>
    /// <para>接口文档：https://open.feishu.cn/document/trust_party-v1/searchable-and-visible-rules/delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>管理员视角删除可搜可见规则。用户需具备关联组织管理员权限。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>trust_party:collaboration_rule:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="collaboration_rule_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>规则ID，可通过[查询可搜可见规则](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/collaboration_rule/list)获得</para>
    /// <para>示例值：2121</para>
    /// </param>
    /// <param name="target_tenant_key">
    /// <para>必填：是</para>
    /// <para>对方组织的tenant key，可通过[管理员获取所有关联组织列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/collaboration_tenant/list)获取</para>
    /// <para>示例值：test_key</para>
    /// </param>
    [HttpDelete("/open-apis/directory/v1/collaboration_rules/{collaboration_rule_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteDirectoryV1CollaborationRulesByCollaborationRuleIdAsync(
        [PathQuery] string collaboration_rule_id,
        [PathQuery] string target_tenant_key);

    /// <summary>
    /// <para>【组织架构】管理员获取所有关联组织列表</para>
    /// <para>接口ID：7442539768884592668</para>
    /// <para>接口文档：https://open.feishu.cn/document/trust_party-v1/-collaboraiton-organization/list-2</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>在创建规则时，需要知道对方组织的tenant key，可通过该接口获取有效的tenant key。只允许关联组织管理员权限调用。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>trust_party:collaboration_rule:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：100</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：g102aggaEYLRMSHU6DENYI4HMBAJB75XOQN2CUTV</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/directory/v1/collaboration_tenants")]
    System.Threading.Tasks.Task<FeishuResponse<Directory.GetDirectoryV1CollaborationTenantsResponseDto>> GetDirectoryV1CollaborationTenantsAsync(
        [PathQuery] int? page_size = 100,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【组织架构】获取关联组织双方共享成员范围</para>
    /// <para>接口ID：7442539768884609052</para>
    /// <para>接口文档：https://open.feishu.cn/document/trust_party-v1/-collaboraiton-organization/list-3</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>在创建规则时，需要获取本组织以及对方组织人员、部门和用户组的ID，且这些实体都应该在关联组织的共享范围内。本接口可获取关联组织双方的共享范围下的人员、部门和用户组。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>trust_party:collaboration_rule:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="target_tenant_key">
    /// <para>必填：是</para>
    /// <para>对方组织的tenant key，可通过[管理员获取所有关联组织列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/collaboration_tenant/list)获取</para>
    /// <para>示例值：test_key</para>
    /// </param>
    /// <param name="target_department_id">
    /// <para>必填：否</para>
    /// <para>不填写该参数时，查询整个组织的分享范围，可填写该字段继续下钻查看指定部门下的子部门+成员。填写0分为两种情况，若组织分享的为全员则展示一级部门，否则展示分享的部门+成员；可以递归使用该接口实现整个分享范围的下钻查询</para>
    /// <para>示例值：test_key</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="target_group_id">
    /// <para>必填：否</para>
    /// <para>获取用户组下的成员，填写该值后忽略target_department_id；可以通过本接口参数返回的用户组ID继续本接口查询</para>
    /// <para>示例值：test_key</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="is_select_subject">
    /// <para>必填：否</para>
    /// <para>是否主体组织分享范围，默认是客体组织的分享范围</para>
    /// <para>示例值：true</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：100</para>
    /// </param>
    [HttpGet("/open-apis/directory/v1/share_entities")]
    System.Threading.Tasks.Task<FeishuResponse<Directory.GetDirectoryV1ShareEntitiesResponseDto>> GetDirectoryV1ShareEntitiesAsync(
        [PathQuery] string target_tenant_key,
        [PathQuery] string? target_department_id = null,
        [PathQuery] string? target_group_id = null,
        [PathQuery] bool? is_select_subject = null,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 100);

    /// <summary>
    /// <para>【关联组织】获取关联组织成员详情</para>
    /// <para>接口ID：7442539768884625436</para>
    /// <para>接口文档：https://open.feishu.cn/document/trust_party-v1/-collaboraiton-organization/get-3</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取关联组织成员详情，需要对关联组织成员有权限才可以获取。</para>
    /// <para>## 提示</para>
    /// <para>使用 user_access_token 时，按照 admin 管理后台关联组织列表中针对用户设置的可见性规则进行校验，使用 tenant_access_token 时，按照应用互通界面中针对应用设置的可见性规则进行校验。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>trust_party:collaboration.tenant:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="target_tenant_key">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>对方关联组织的tenant key，可通过[管理员获取所有关联组织列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/collaboration_tenant/list)获取</para>
    /// <para>示例值：4e6ac4d14bcd5071a37a39de902c7141</para>
    /// </param>
    /// <param name="target_user_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>请求的关联组织用户ID，需要与target_user_id_type中填写的类型保持一致</para>
    /// <para>示例值：od-4e6ac4d14bcd5071a37a39de902c7141</para>
    /// </param>
    /// <param name="target_user_id_type">
    /// <para>必填：否</para>
    /// <para>用户ID类型，可以在[获取关联组织的部门和成员信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/collaboration_tenant/visible_organization)中获取对应的用户ID</para>
    /// <para>示例值：user_id</para>
    /// <list type="bullet">
    /// <item>user_id：以user_id来识别用户</item>
    /// <item>union_id：以union_id来识别用户</item>
    /// <item>open_id：以open_id来识别用户</item>
    /// </list>
    /// <para>默认值：user_id</para>
    /// </param>
    [HttpGet("/open-apis/trust_party/v1/collaboration_tenants/{target_tenant_key}/collaboration_users/{target_user_id}")]
    System.Threading.Tasks.Task<FeishuResponse<TrustParty.GetTrustPartyV1CollaborationTenantsByTargetTenantKeyCollaborationUsersByTargetUserIdResponseDto>> GetTrustPartyV1CollaborationTenantsByTargetTenantKeyCollaborationUsersByTargetUserIdAsync(
        [PathQuery] string target_tenant_key,
        [PathQuery] string target_user_id,
        [PathQuery] string? target_user_id_type = "user_id");

    /// <summary>
    /// <para>【关联组织】获取可见关联组织的列表</para>
    /// <para>接口ID：7442539768884641820</para>
    /// <para>接口文档：https://open.feishu.cn/document/trust_party-v1/-collaboraiton-organization/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>分页获取用户可见的关联列表。</para>
    /// <para>## 提示</para>
    /// <para>使用 user_access_token 时，按照 admin 管理后台关联组织列表中针对用户设置的可见性规则进行校验，使用 tenant_access_token 时，按照应用互通界面中针对应用设置的可见性规则进行校验。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>trust_party:collaboration.tenant:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：xxxx</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>单次请求的关联组织数量</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    [HttpGet("/open-apis/trust_party/v1/collaboration_tenants")]
    System.Threading.Tasks.Task<FeishuResponse<TrustParty.GetTrustPartyV1CollaborationTenantsResponseDto>> GetTrustPartyV1CollaborationTenantsAsync(
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 10);

    /// <summary>
    /// <para>【关联组织】获取关联组织部门详情</para>
    /// <para>接口ID：7442539768884674588</para>
    /// <para>接口文档：https://open.feishu.cn/document/trust_party-v1/-collaboraiton-organization/get-2</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取对方的关联组织部门详情，需要对部门有可见性权限才可以获取。</para>
    /// <para>## 提示</para>
    /// <para>使用 user_access_token 时，按照 admin 管理后台关联组织列表中针对用户设置的可见性规则进行校验，使用 tenant_access_token 时，按照应用互通界面中针对应用设置的可见性规则进行校验。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>trust_party:collaboration.tenant:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="target_tenant_key">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>对方关联组织的tenant key，可通过[管理员获取所有关联组织列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/collaboration_tenant/list)获取</para>
    /// <para>示例值：4e6ac4d14bcd5071a37a39de902c7141</para>
    /// </param>
    /// <param name="target_department_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>对方关联组织的部门，需要与target_department_id_type中填写的值保持一致</para>
    /// <para>示例值：od-4e6ac4d14bcd5071a37a39de902c7141</para>
    /// </param>
    /// <param name="target_department_id_type">
    /// <para>必填：否</para>
    /// <para>对方关联组织的入参部门类型</para>
    /// <para>示例值：department_id</para>
    /// <list type="bullet">
    /// <item>department_id：部门ID</item>
    /// <item>open_department_id：部门open ID</item>
    /// </list>
    /// <para>默认值：department_id</para>
    /// </param>
    [HttpGet("/open-apis/trust_party/v1/collaboration_tenants/{target_tenant_key}/collaboration_departments/{target_department_id}")]
    System.Threading.Tasks.Task<FeishuResponse<TrustParty.GetTrustPartyV1CollaborationTenantsByTargetTenantKeyCollaborationDepartmentsByTargetDepartmentIdResponseDto>> GetTrustPartyV1CollaborationTenantsByTargetTenantKeyCollaborationDepartmentsByTargetDepartmentIdAsync(
        [PathQuery] string target_tenant_key,
        [PathQuery] string target_department_id,
        [PathQuery] string? target_department_id_type = "department_id");

    /// <summary>
    /// <para>【关联组织】获取关联组织详情</para>
    /// <para>接口ID：7442539768884690972</para>
    /// <para>接口文档：https://open.feishu.cn/document/trust_party-v1/-collaboraiton-organization/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>基于组织tenant key获取关联组织详情，需要对对方组织有可见权限才可以获取。</para>
    /// <para>## 提示</para>
    /// <para>使用 user_access_token 时，按照 admin 管理后台关联组织列表中针对用户设置的可见性规则进行校验，使用 tenant_access_token 时，按照应用互通界面中针对应用设置的可见性规则进行校验。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>trust_party:collaboration.tenant:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="target_tenant_key">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>对方关联组织的tenant key，可通过[管理员获取所有关联组织列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/collaboration_tenant/list)获取</para>
    /// <para>示例值：4e6ac4d14bcd5071a37a39de902c7141</para>
    /// </param>
    [HttpGet("/open-apis/trust_party/v1/collaboration_tenants/{target_tenant_key}")]
    System.Threading.Tasks.Task<FeishuResponse<TrustParty.GetTrustPartyV1CollaborationTenantsByTargetTenantKeyResponseDto>> GetTrustPartyV1CollaborationTenantsByTargetTenantKeyAsync(
        [PathQuery] string target_tenant_key);

    /// <summary>
    /// <para>【关联组织】获取关联组织的部门和成员信息</para>
    /// <para>接口ID：7442539768884707356</para>
    /// <para>接口文档：https://open.feishu.cn/document/trust_party-v1/-collaboraiton-organization/visible_organization</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口会返回用户在外部部门下可见的下级部门、用户、用户组。</para>
    /// <para>## 提示</para>
    /// <para>使用 user_access_token 时，按照 admin 管理后台关联组织列表中针对用户设置的可见性规则进行校验；使用 tenant_access_token 时，按照应用互通界面中针对应用设置的可见性规则进行校验。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>trust_party:collaboration.tenant:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="target_tenant_key">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>对方关联组织的 tenant key。可通过[管理员获取所有关联组织列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/collaboration_tenant/list)获取</para>
    /// <para>示例值：4e6ac4d14bcd5071a37a39de902c7141</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门ID的类型</para>
    /// <para>示例值：department_id</para>
    /// <list type="bullet">
    /// <item>department_id：以自定义department_id来标识部门</item>
    /// <item>open_department_id：以open_department_id来标识部门</item>
    /// </list>
    /// <para>默认值：department_id</para>
    /// </param>
    /// <param name="target_department_id">
    /// <para>必填：否</para>
    /// <para>请求关联组织的部门ID，0代表根部门，与target_group_id二选一；可以从[获取关联组织的部门和成员信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/collaboration_tenant/visible_organization)中获得</para>
    /// <para>示例值：od-4e6ac4d14bcd5071a37a39de902c7141</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：AQD9/Rn9eij9Pm39ED40/TIx6jupqdAcfLY%2B51xMvNU=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>请求的可见实体数量</para>
    /// <para>示例值：10</para>
    /// <para>默认值：100</para>
    /// </param>
    /// <param name="group_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的用户组ID的类型</para>
    /// <para>示例值：group_id</para>
    /// <list type="bullet">
    /// <item>group_id：group_id</item>
    /// <item>open_group_id：以open_group_id来标识用户组</item>
    /// </list>
    /// <para>默认值：group_id</para>
    /// </param>
    /// <param name="target_group_id">
    /// <para>必填：否</para>
    /// <para>请求关联组织的用户组ID，与target_department_id二选一；可以从[获取关联组织的部门和成员信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/collaboration_tenant/visible_organization)中获得</para>
    /// <para>示例值：od-4e6ac4d14bcd5071a37a39de902c7141</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/trust_party/v1/collaboration_tenants/{target_tenant_key}/visible_organization")]
    System.Threading.Tasks.Task<FeishuResponse<TrustParty.GetTrustPartyV1CollaborationTenantsByTargetTenantKeyVisibleOrganizationResponseDto>> GetTrustPartyV1CollaborationTenantsByTargetTenantKeyVisibleOrganizationAsync(
        [PathQuery] string target_tenant_key,
        [PathQuery] string? department_id_type = "department_id",
        [PathQuery] string? target_department_id = null,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 100,
        [PathQuery] string? group_id_type = "group_id",
        [PathQuery] string? target_group_id = null);

    /// <summary>
    /// <para>【组织架构】新增可搜可见规则</para>
    /// <para>接口ID：7442539768884723740</para>
    /// <para>接口文档：https://open.feishu.cn/document/trust_party-v1/searchable-and-visible-rules/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>管理员视角新增可搜可见规则。用户需具备关联组织管理员权限。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>trust_party:collaboration_rule:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="target_tenant_key">
    /// <para>必填：是</para>
    /// <para>对方组织的tenant key，可通过[管理员获取所有关联组织列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/directory-v1/collaboration_tenant/list)获取</para>
    /// <para>示例值：test_key</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/directory/v1/collaboration_rules")]
    System.Threading.Tasks.Task<FeishuResponse<Directory.PostDirectoryV1CollaborationRulesResponseDto>> PostDirectoryV1CollaborationRulesAsync(
        [PathQuery] string target_tenant_key,
        [JsonContent] Directory.PostDirectoryV1CollaborationRulesBodyDto dto);

    /// <summary>
    /// <para>【飞书低代码平台】发起流程</para>
    /// <para>接口ID：7442599557486624772</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/flow/application-flow/execute</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>执行相应流程</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:flow:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="namespace">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>应用命名空间(低代码平台-&gt;我的应用-&gt;应用管理-&gt;可查看到)</para>
    /// <para>示例值：package_7344545d87__c</para>
    /// </param>
    /// <param name="flow_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>流程API名称（低代码平台-&gt;我的应用-&gt;开发-&gt;流程-&gt;展开为表格-&gt;可查看到）</para>
    /// <para>示例值：deleteObject_99c656599f</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/apaas/v1/applications/{namespace}/flows/{flow_id}/execute")]
    System.Threading.Tasks.Task<FeishuResponse<AppEngine.PostApaasV1ApplicationsByNamespaceFlowsByFlowIdExecuteResponseDto>> PostApaasV1ApplicationsByNamespaceFlowsByFlowIdExecuteAsync(
        [PathQuery] string @namespace,
        [PathQuery] string flow_id,
        [JsonContent] AppEngine.PostApaasV1ApplicationsByNamespaceFlowsByFlowIdExecuteBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】批量删除填报行</para>
    /// <para>接口ID：7446337145820053508</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/workforce_plan/batchDelete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量删除填报行后，可在【设置-编制规划设置-编制规划XXX-集中填报-查看数据】进行查看。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:workforce_plan_centralized_reporting_project_detail:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/report_detail_row/batchDelete")]
    System.Threading.Tasks.Task<FeishuResponse> PostCorehrV2ReportDetailRowBatchDeleteAsync(
        [JsonContent] Corehr.PostCorehrV2ReportDetailRowBatchDeleteBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】批量创建/更新填报行</para>
    /// <para>接口ID：7446337145820069892</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/workforce_plan/batchSave-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量创建/更新填报行后，可在【设置-编制规划设置-编制规划XXX-集中填报-查看数据】进行查看。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:workforce_plan_centralized_reporting_project_detail:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/report_detail_row/batchSave")]
    System.Threading.Tasks.Task<FeishuResponse> PostCorehrV2ReportDetailRowBatchSaveAsync(
        [JsonContent] Corehr.PostCorehrV2ReportDetailRowBatchSaveBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】批量删除明细行</para>
    /// <para>接口ID：7446337145820086276</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/workforce_plan/batchDelete-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量删除明细行后，可在【设置-编制规划设置-编制规划XXX-编辑数据】进行查看明细行是否被删除。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:workforce_detail:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/workforce_plan_detail_row/batchDelete")]
    System.Threading.Tasks.Task<FeishuResponse> PostCorehrV2WorkforcePlanDetailRowBatchDeleteAsync(
        [JsonContent] Corehr.PostCorehrV2WorkforcePlanDetailRowBatchDeleteBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】批量创建/更新明细行</para>
    /// <para>接口ID：7446337145820102660</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/workforce_plan/batchSave</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>批量创建/更新明细行后，可在【设置-编制规划设置-编制规划XXX-编辑数据】进行查看。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:workforce_detail:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/workforce_plan_detail_row/batchSave")]
    System.Threading.Tasks.Task<FeishuResponse> PostCorehrV2WorkforcePlanDetailRowBatchSaveAsync(
        [JsonContent] Corehr.PostCorehrV2WorkforcePlanDetailRowBatchSaveBodyDto dto);

    /// <summary>
    /// <para>【飞书低代码平台】查询人工任务</para>
    /// <para>接口ID：7446337145820315652</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/flow/user-task/query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询人工任务列表</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:approval:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/apaas/v1/user_task/query")]
    System.Threading.Tasks.Task<FeishuResponse<AppEngine.PostApaasV1UserTaskQueryResponseDto>> PostApaasV1UserTaskQueryAsync(
        [JsonContent] AppEngine.PostApaasV1UserTaskQueryBodyDto dto);

    /// <summary>
    /// <para>【飞书低代码平台】抄送人工任务</para>
    /// <para>接口ID：7446337145820332036</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/flow/user-task/cc</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对当前的任务进行一次抄送</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:approval:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务ID，可以通过[查询人工任务](/uAjLw4CM/ukTMukTMukTM/apaas-v1/user_task/query)获取</para>
    /// <para>示例值：1234</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/apaas/v1/user_tasks/{task_id}/cc")]
    System.Threading.Tasks.Task<FeishuResponse> PostApaasV1UserTasksByTaskIdCcAsync(
        [PathQuery] string task_id,
        [JsonContent] AppEngine.PostApaasV1UserTasksByTaskIdCcBodyDto dto);

    /// <summary>
    /// <para>【飞书低代码平台】催办人工任务</para>
    /// <para>接口ID：7446337145820348420</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/flow/user-task/expediting</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对任务当前的处理人发起一次催办</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:approval:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务ID，可以通过[查询人工任务](/uAjLw4CM/ukTMukTMukTM/apaas-v1/user_task/query)获取</para>
    /// <para>示例值：1234</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/apaas/v1/user_tasks/{task_id}/expediting")]
    System.Threading.Tasks.Task<FeishuResponse> PostApaasV1UserTasksByTaskIdExpeditingAsync(
        [PathQuery] string task_id,
        [JsonContent] AppEngine.PostApaasV1UserTasksByTaskIdExpeditingBodyDto dto);

    /// <summary>
    /// <para>【飞书低代码平台】撤销人工任务</para>
    /// <para>接口ID：7446337145820364804</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/flow/user-task/cancel</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>撤销一个人工任务（包括审批任务，填写任务）</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:approval:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="approval_instance_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>审批实例，可以通过[查询人工任务](/uAjLw4CM/ukTMukTMukTM/apaas-v1/user_task/query)获取</para>
    /// <para>示例值：1788173550023689</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/apaas/v1/approval_instances/{approval_instance_id}/cancel")]
    System.Threading.Tasks.Task<FeishuResponse> PostApaasV1ApprovalInstancesByApprovalInstanceIdCancelAsync(
        [PathQuery] string approval_instance_id,
        [JsonContent] AppEngine.PostApaasV1ApprovalInstancesByApprovalInstanceIdCancelBodyDto dto);

    /// <summary>
    /// <para>【飞书低代码平台】查询人工任务可退回的位置</para>
    /// <para>接口ID：7446337145820381188</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/flow/user-task/rollback_points</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询当前任务可以退回的位置</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:approval:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务ID，可以通过[查询人工任务](/uAjLw4CM/ukTMukTMukTM/apaas-v1/user_task/query)获取</para>
    /// <para>示例值：1234</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/apaas/v1/user_tasks/{task_id}/rollback_points")]
    System.Threading.Tasks.Task<FeishuResponse<AppEngine.PostApaasV1UserTasksByTaskIdRollbackPointsResponseDto>> PostApaasV1UserTasksByTaskIdRollbackPointsAsync(
        [PathQuery] string task_id,
        [JsonContent] AppEngine.PostApaasV1UserTasksByTaskIdRollbackPointsBodyDto dto);

    /// <summary>
    /// <para>【飞书低代码平台】退回人工任务</para>
    /// <para>接口ID：7446337145820397572</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/flow/user-task/rollback</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>对当前任务进行一次退回</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:approval:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务ID，可以通过[查询人工任务](/uAjLw4CM/ukTMukTMukTM/apaas-v1/user_task/query)获取</para>
    /// <para>示例值：1234</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/apaas/v1/user_tasks/{task_id}/rollback")]
    System.Threading.Tasks.Task<FeishuResponse> PostApaasV1UserTasksByTaskIdRollbackAsync(
        [PathQuery] string task_id,
        [JsonContent] AppEngine.PostApaasV1UserTasksByTaskIdRollbackBodyDto dto);

    /// <summary>
    /// <para>【飞书低代码平台】基于人工任务发起群聊</para>
    /// <para>接口ID：7446337145820413956</para>
    /// <para>接口文档：https://open.feishu.cn/document/apaas-v1/flow/user-task/chat_group</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>基于任务，发起一个飞书群聊</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>app_engine:approval:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="task_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>任务ID，可以通过[查询人工任务](/uAjLw4CM/ukTMukTMukTM/apaas-v1/user_task/query)获取</para>
    /// <para>示例值：1234</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/apaas/v1/user_tasks/{task_id}/chat_group")]
    System.Threading.Tasks.Task<FeishuResponse<AppEngine.PostApaasV1UserTasksByTaskIdChatGroupResponseDto>> PostApaasV1UserTasksByTaskIdChatGroupAsync(
        [PathQuery] string task_id,
        [JsonContent] AppEngine.PostApaasV1UserTasksByTaskIdChatGroupBodyDto dto);

    /// <summary>
    /// <para>【考勤打卡】创建或修改临时排班</para>
    /// <para>接口ID：7446612629576892419</para>
    /// <para>接口文档：https://open.feishu.cn/document/attendance-v1/user_daily_shift/batch_create_temp</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>可在排班表上创建或修改临时班次，并用于排班。目前支持按日期对一位或多位人员进行排临时班次。</para>
    /// <para>临时排班为付费功能，如需使用请联系您的客户经理。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:rule</item>
    /// </list></para>
    /// </summary>
    /// <param name="employee_type">
    /// <para>必填：是</para>
    /// <para>请求体和响应体中的 user_id 的员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)</para>
    /// <para>示例值：employee_id</para>
    /// <list type="bullet">
    /// <item>employee_id：员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的用户 ID，或者[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)获取的userid。</item>
    /// <item>employee_no：员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) &gt; 组织架构 &gt; 成员与部门 &gt; 成员详情中的工号</item>
    /// </list>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/attendance/v1/user_daily_shifts/batch_create_temp")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PostAttendanceV1UserDailyShiftsBatchCreateTempResponseDto>> PostAttendanceV1UserDailyShiftsBatchCreateTempAsync(
        [PathQuery] string employee_type,
        [JsonContent] Attendance.PostAttendanceV1UserDailyShiftsBatchCreateTempBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】创建外派信息</para>
    /// <para>接口ID：7446683431818395651</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/employee/job_data/employees-international_assignment/create</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>为员工添加外派记录，包括外派信息、任职信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:employees.international_assignment:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:employment.international_assignment.compensation_type:write</item>
    /// <item>corehr:employment.international_assignment.custom_field:write</item>
    /// <item>corehr:employment.international_assignment.job_grade:write</item>
    /// <item>corehr:employment.international_assignment.job_level:write</item>
    /// <item>corehr:employment.international_assignment.job:write</item>
    /// <item>corehr:employment.international_assignment.position:write</item>
    /// <item>corehr:employment.international_assignment.service_company:write</item>
    /// <item>corehr:employment.international_assignment.weekly_working_hours:write</item>
    /// <item>corehr:employment.international_assignment.work_calendar:write</item>
    /// <item>corehr:employment.international_assignment.work_location:write</item>
    /// <item>corehr:employment.international_assignment.work_shift:write</item>
    /// <item>corehr:employment.international_assignment.working_hours_type:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>幂等标识，服务端会忽略 client_token 重复的请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/employees/international_assignments")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2EmployeesInternationalAssignmentsResponseDto>> PostCorehrV2EmployeesInternationalAssignmentsAsync(
        [JsonContent] Corehr.PostCorehrV2EmployeesInternationalAssignmentsBodyDto dto,
        [PathQuery] string? client_token = null,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】更新外派信息</para>
    /// <para>接口ID：7446683431818412035</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/employee/job_data/employees-international_assignment/patch</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新指定的外派信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:employees.international_assignment:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:employment.international_assignment.compensation_type:write</item>
    /// <item>corehr:employment.international_assignment.custom_field:write</item>
    /// <item>corehr:employment.international_assignment.job_grade:write</item>
    /// <item>corehr:employment.international_assignment.job_level:write</item>
    /// <item>corehr:employment.international_assignment.job:write</item>
    /// <item>corehr:employment.international_assignment.position:write</item>
    /// <item>corehr:employment.international_assignment.service_company:write</item>
    /// <item>corehr:employment.international_assignment.weekly_working_hours:write</item>
    /// <item>corehr:employment.international_assignment.work_calendar:write</item>
    /// <item>corehr:employment.international_assignment.work_location:write</item>
    /// <item>corehr:employment.international_assignment.work_shift:write</item>
    /// <item>corehr:employment.international_assignment.working_hours_type:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="international_assignment_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>外派ID</para>
    /// <para>- 可通过[批量查询外派](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/employees-international_assignment/list)获取</para>
    /// <para>示例值：7127921432117937708</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>幂等标识，服务端会忽略client_token重复的请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：open_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：open_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/corehr/v2/employees/international_assignments/{international_assignment_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PatchCorehrV2EmployeesInternationalAssignmentsByInternationalAssignmentIdResponseDto>> PatchCorehrV2EmployeesInternationalAssignmentsByInternationalAssignmentIdAsync(
        [PathQuery] string international_assignment_id,
        [JsonContent] Corehr.PatchCorehrV2EmployeesInternationalAssignmentsByInternationalAssignmentIdBodyDto dto,
        [PathQuery] string? client_token = null,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "open_department_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】删除外派信息</para>
    /// <para>接口ID：7446683431818428419</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/employee/job_data/employees-international_assignment/delete</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除某一条外派信息</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:employees.international_assignment:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="international_assignment_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>外派ID</para>
    /// <para>- 可通过[批量查询外派](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/employees-international_assignment/list)获取</para>
    /// <para>示例值：7127921432117937708</para>
    /// </param>
    [HttpDelete("/open-apis/corehr/v2/employees/international_assignments/{international_assignment_id}")]
    System.Threading.Tasks.Task<FeishuResponse> DeleteCorehrV2EmployeesInternationalAssignmentsByInternationalAssignmentIdAsync(
        [PathQuery] string international_assignment_id);

    /// <summary>
    /// <para>【多维表格】列出自动化流程</para>
    /// <para>接口ID：7447033368182571009</para>
    /// <para>接口文档：https://open.feishu.cn/document/docs/bitable-v1/app-workflow/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>该接口用于列出多维表格的自动化流程。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>bitable:app</item>
    /// <item>bitable:app:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：20</para>
    /// </param>
    [HttpGet("/open-apis/bitable/v1/apps/{app_token}/workflows")]
    System.Threading.Tasks.Task<FeishuResponse<Base.GetBitableV1AppsByAppTokenWorkflowsResponseDto>> GetBitableV1AppsByAppTokenWorkflowsAsync(
        [PathQuery] string app_token,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 20);

    /// <summary>
    /// <para>【多维表格】更新自动化流程状态</para>
    /// <para>接口ID：7447033368182587393</para>
    /// <para>接口文档：https://open.feishu.cn/document/docs/bitable-v1/app-workflow/update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>开启或关闭自动化流程。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>bitable:app</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezh</para>
    /// </param>
    /// <param name="workflow_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>自动化工作流 ID，通过[列出自动化流程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-workflow/list)接口获取。</para>
    /// <para>示例值：730887xxxx552638996</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/bitable/v1/apps/{app_token}/workflows/{workflow_id}")]
    System.Threading.Tasks.Task<FeishuResponse> PutBitableV1AppsByAppTokenWorkflowsByWorkflowIdAsync(
        [PathQuery] string app_token,
        [PathQuery] string workflow_id,
        [JsonContent] Base.PutBitableV1AppsByAppTokenWorkflowsByWorkflowIdBodyDto dto);

    /// <summary>
    /// <para>【邮箱】获取邮件卡片的邮件列表</para>
    /// <para>接口ID：7447350647756800004</para>
    /// <para>接口文档：https://open.feishu.cn/document/mail-v1/user_mailbox-message/get_by_card</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取邮件卡片下的邮件列表</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>mail:user_mailbox.message:readonly</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_mailbox_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>用户邮箱地址 或 输入me代表当前调用接口用户</para>
    /// <para>示例值：user@xxx.xx 或 me</para>
    /// </param>
    /// <param name="card_id">
    /// <para>必填：是</para>
    /// <para>邮件卡片ID，可通过[接收消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/events/receive)事件的推送获取</para>
    /// <para>示例值：512ca581-6059-4449-8150-5522e6641d32</para>
    /// </param>
    /// <param name="owner_id">
    /// <para>必填：是</para>
    /// <para>邮件卡片OwnerID，可通过[接收消息]( https://open.feishu.cn/document/server-docs/im-v1/message/events/receive)事件的推送获取（与`user_id_type`无关）</para>
    /// <para>示例值：1234567890</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/mail/v1/user_mailboxes/{user_mailbox_id}/messages/get_by_card")]
    System.Threading.Tasks.Task<FeishuResponse<Mail.GetMailV1UserMailboxesByUserMailboxIdMessagesGetByCardResponseDto>> GetMailV1UserMailboxesByUserMailboxIdMessagesGetByCardAsync(
        [PathQuery] string user_mailbox_id,
        [PathQuery] string card_id,
        [PathQuery] string owner_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】查询当前生效信息发生变更的地点</para>
    /// <para>接口ID：7447798339566419971</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/location/query_recent_change</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询指定时间范围内当前生效信息发生变更的地点，即只有地点当前生效版本的生效时间在查询时间范围内，才返回该地点id</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:locations:read</item>
    /// <item>corehr:locations:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 2000</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6891251722631890445</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="start_date">
    /// <para>必填：是</para>
    /// <para>查询的开始时间，支持"yyyy-MM-dd HH:MM:SS"</para>
    /// <para>示例值：2024-01-01 00:00:00</para>
    /// </param>
    /// <param name="end_date">
    /// <para>必填：是</para>
    /// <para>查询的结束时间，格式 "yyyy-MM-dd HH:MM:SS"</para>
    /// <para>示例值：2024-04-01 00:00:00</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v2/locations/query_recent_change")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.GetCorehrV2LocationsQueryRecentChangeResponseDto>> GetCorehrV2LocationsQueryRecentChangeAsync(
        [PathQuery] string start_date,
        [PathQuery] string end_date,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询当前生效信息发生变更的成本中心</para>
    /// <para>接口ID：7447798339566436355</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/cost_center/query_recent_change</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询指定时间范围内当前生效信息发生变更的成本中心，即只有部门当前生效版本的生效时间在查询时间范围内，才返回该成本中心id</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:cost_center:read</item>
    /// <item>corehr:cost_center:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 2000</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6891251722631890445</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="start_date">
    /// <para>必填：是</para>
    /// <para>查询的开始时间，支持"yyyy-MM-dd HH:MM:SS"</para>
    /// <para>示例值：2024-01-01 00:00:00</para>
    /// </param>
    /// <param name="end_date">
    /// <para>必填：是</para>
    /// <para>查询的结束时间，格式 "yyyy-MM-dd HH:MM:SS"</para>
    /// <para>示例值：2024-04-01 00:00:00</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v2/cost_centers/query_recent_change")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.GetCorehrV2CostCentersQueryRecentChangeResponseDto>> GetCorehrV2CostCentersQueryRecentChangeAsync(
        [PathQuery] string start_date,
        [PathQuery] string end_date,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】撤销异动</para>
    /// <para>接口ID：7449328616456585235</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/job_change/revoke</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于撤销员工异动，若发起成功，会撤销一条已发起、待生效或已生效的异动数据，同时产生相应的事件：[异动状态变更事件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_change/events/updated)。该接口无法撤销批量发起的多人异动。使用时需指定操作人，关联了流程的异动需要流程管理员和审批单管理员权限。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:corehr</item>
    /// <item>corehr:job_change:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="job_change_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>异动id，[【搜索异动信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/job_change/search) 获取ID</para>
    /// <para>示例值：7402156992338658860</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// <item>people_corehr_id：以飞书人事的ID来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/job_changes/{job_change_id}/revoke")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2JobChangesByJobChangeIdRevokeResponseDto>> PostCorehrV2JobChangesByJobChangeIdRevokeAsync(
        [PathQuery] string job_change_id,
        [JsonContent] Corehr.PostCorehrV2JobChangesByJobChangeIdRevokeBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】发起员工异动</para>
    /// <para>接口ID：7449328616456601619</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/job_change/create-2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>该接口用于发起员工异动（变更员工雇佣信息），若发起成功，会生成一条员工的异动数据</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:job_change:create</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// <item>corehr:contract.company:read</item>
    /// <item>corehr:contract.company:write</item>
    /// <item>corehr:contract.period:read</item>
    /// <item>corehr:contract.period:write</item>
    /// <item>corehr:employment.job_grade:read</item>
    /// <item>corehr:employment.job_grade:write</item>
    /// <item>corehr:employment.job_level:read</item>
    /// <item>corehr:employment.job_level:write</item>
    /// <item>corehr:employment.job:read</item>
    /// <item>corehr:job_change.custom_field:read</item>
    /// <item>corehr:job_change.employment_custom_field:read</item>
    /// <item>corehr:job_change.is_adjust_salary:read</item>
    /// <item>corehr:job_change.remark:read</item>
    /// <item>corehr:job_change.social_security_city:read</item>
    /// <item>corehr:job_data.compensation_type:read</item>
    /// <item>corehr:job_data.service_company:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_admin_id：以people_admin_id来识别用户</item>
    /// <item>people_corehr_id：以飞书人事的ID来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="department_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的部门 ID 类型</para>
    /// <para>示例值：people_corehr_department_id</para>
    /// <list type="bullet">
    /// <item>open_department_id：以 open_department_id 来标识部门</item>
    /// <item>department_id：以 department_id 来标识部门</item>
    /// <item>people_corehr_department_id：以 people_corehr_department_id 来标识部门</item>
    /// </list>
    /// <para>默认值：people_corehr_department_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/job_changes")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2JobChangesResponseDto>> PostCorehrV2JobChangesAsync(
        [JsonContent] Corehr.PostCorehrV2JobChangesBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? department_id_type = "people_corehr_department_id");

    /// <summary>
    /// <para>【云文档】在群公告中创建块</para>
    /// <para>接口ID：7450053428095533084</para>
    /// <para>接口文档：https://open.feishu.cn/document/group/upgraded-group-announcement/chat-announcement-block/create</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat.announcement:write_only</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群公告对应的群 ID</para>
    /// <para>示例值：oc_5ad11d72b830411d72b836c20</para>
    /// </param>
    /// <param name="block_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>Block 的唯一标识</para>
    /// <para>示例值：doxcnO6UW6wAw2qIcYf4hZpFIth</para>
    /// </param>
    /// <param name="revision_id">
    /// <para>必填：否</para>
    /// <para>要操作的群公告版本。-1 表示群公告最新版本。群公告创建后，版本为 1。你需确保你已拥有群公告的编辑权限</para>
    /// <para>示例值：-1</para>
    /// <para>默认值：-1</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>操作的唯一标识，与接口返回值的 client_token 相对应，用于幂等的进行更新操作。此值为空表示将发起一次新的请求，此值非空表示幂等的进行更新操作。</para>
    /// <para>示例值：fe599b60-450f-46ff-b2ef-9f6675625b97</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的用户ID的类型</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/docx/v1/chats/{chat_id}/announcement/blocks/{block_id}/children")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PostDocxV1ChatsByChatIdAnnouncementBlocksByBlockIdChildrenResponseDto>> PostDocxV1ChatsByChatIdAnnouncementBlocksByBlockIdChildrenAsync(
        [PathQuery] string chat_id,
        [PathQuery] string block_id,
        [JsonContent] Ccm.PostDocxV1ChatsByChatIdAnnouncementBlocksByBlockIdChildrenBodyDto dto,
        [PathQuery] int? revision_id = -1,
        [PathQuery] string? client_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】批量更新群公告块的内容</para>
    /// <para>接口ID：7450053428095549468</para>
    /// <para>接口文档：https://open.feishu.cn/document/group/upgraded-group-announcement/chat-announcement-block/batch_update</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat.announcement:write_only</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群公告对应的群 ID</para>
    /// <para>示例值：oc_5ad11d72b830411d72b836c20</para>
    /// </param>
    /// <param name="revision_id">
    /// <para>必填：否</para>
    /// <para>要操作的群公告版本。-1 表示群公告最新版本。群公告创建后，版本为 1。你需确保你已拥有群公告的编辑权限。</para>
    /// <para>示例值：-1</para>
    /// <para>默认值：-1</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>操作的唯一标识，与接口返回值的 client_token 相对应，用于幂等的进行更新操作。此值为空表示将发起一次新的请求，此值非空表示幂等的进行更新操作。</para>
    /// <para>示例值：0e2633a3-aa1a-4171-af9e-0768ff863566</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的用户ID的类型</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPatch("/open-apis/docx/v1/chats/{chat_id}/announcement/blocks/batch_update")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.PatchDocxV1ChatsByChatIdAnnouncementBlocksBatchUpdateResponseDto>> PatchDocxV1ChatsByChatIdAnnouncementBlocksBatchUpdateAsync(
        [PathQuery] string chat_id,
        [JsonContent] Ccm.PatchDocxV1ChatsByChatIdAnnouncementBlocksBatchUpdateBodyDto dto,
        [PathQuery] int? revision_id = -1,
        [PathQuery] string? client_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】获取群公告块的内容</para>
    /// <para>接口ID：7450053428095565852</para>
    /// <para>接口文档：https://open.feishu.cn/document/group/upgraded-group-announcement/chat-announcement-block/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat.announcement:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群公告对应的群 ID</para>
    /// <para>示例值：oc_5ad11d72b830411d72b836c20</para>
    /// </param>
    /// <param name="block_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>Block 的唯一标识</para>
    /// <para>示例值：doxcnO6UW6wAw2qIcYf4hZabcef</para>
    /// </param>
    /// <param name="revision_id">
    /// <para>必填：否</para>
    /// <para>查询的群公告版本，-1 表示群公告最新版本。群公告创建后，版本为 1。若查询的版本为群公告最新版本，则需要持有群公告的阅读权限；若查询的版本为群公告的历史版本，则需要持有群公告的更新权限</para>
    /// <para>示例值：-1</para>
    /// <para>默认值：-1</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的用户ID的类型</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/docx/v1/chats/{chat_id}/announcement/blocks/{block_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDocxV1ChatsByChatIdAnnouncementBlocksByBlockIdResponseDto>> GetDocxV1ChatsByChatIdAnnouncementBlocksByBlockIdAsync(
        [PathQuery] string chat_id,
        [PathQuery] string block_id,
        [PathQuery] int? revision_id = -1,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】获取所有子块</para>
    /// <para>接口ID：7450053428095582236</para>
    /// <para>接口文档：https://open.feishu.cn/document/group/upgraded-group-announcement/chat-announcement-block/get-2</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat.announcement:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群公告对应的群 ID</para>
    /// <para>示例值：oc_5ad11d72b830411d72b836c20</para>
    /// </param>
    /// <param name="block_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>Block 的唯一标识</para>
    /// <para>示例值：doxcnO6UW6wAw2qIcYf4hZpFIth</para>
    /// </param>
    /// <param name="revision_id">
    /// <para>必填：否</para>
    /// <para>查询的群公告版本，-1 表示群公告最新版本。群公告创建后，版本为 1。若查询的版本为群公告最新版本，则需要持有群公告的阅读权限；若查询的版本为群公告的历史版本，则需要持有群公告的更新权限。</para>
    /// <para>示例值：-1</para>
    /// <para>默认值：-1</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：aw7DoMKBFMOGwqHCrcO8w6jCmMOvw6ILeADCvsKNw57Di8O5XGV3LG4_w5HCqhFxSnDCrCzCn0BgZcOYUg85EMOYcEAcwqYOw4ojw5QFwofCu8KoIMO3K8Ktw4IuNMOBBHNYw4bCgCV3U1zDu8K-J8KSR8Kgw7Y0fsKZdsKvW3d9w53DnkHDrcO5bDkYwrvDisOEPcOtVFJ-I03CnsOILMOoAmLDknd6dsKqG1bClAjDuS3CvcOTwo7Dg8OrwovDsRdqIcKxw5HDohTDtXN9w5rCkWo</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：500</para>
    /// <para>默认值：500</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/docx/v1/chats/{chat_id}/announcement/blocks/{block_id}/children")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDocxV1ChatsByChatIdAnnouncementBlocksByBlockIdChildrenResponseDto>> GetDocxV1ChatsByChatIdAnnouncementBlocksByBlockIdChildrenAsync(
        [PathQuery] string chat_id,
        [PathQuery] string block_id,
        [PathQuery] int? revision_id = -1,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 500,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】删除群公告中的块</para>
    /// <para>接口ID：7450053428095598620</para>
    /// <para>接口文档：https://open.feishu.cn/document/group/upgraded-group-announcement/chat-announcement-block/batch_delete</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>指定需要操作的块，删除其指定范围的子块。如果操作成功，接口将返回应用删除操作后的群公告版本号。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 调用当前接口的用户或者机器人必须在对应的群组内。</para>
    /// <para>- 操作内部群的群公告时，请确保当前调用身份（tenant_access_token 或 user_access_token）与对应群组在同一租户下。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat.announcement:write_only</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>**注意**：单聊（群类型为 `p2p`）不支持获取群公告。</para>
    /// <para>示例值：oc_5ad11d72b830411d72b836c20</para>
    /// </param>
    /// <param name="block_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>父 Block 的唯一标识。你可通过调用[获取群公告所有块](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/chat-announcement-block/list)接口获取块的 block_id。</para>
    /// <para>**注意**：</para>
    /// <para>- 此接口不支持删除表格（Table）的行列和删除分栏（Grid）的分栏列。你需通过[批量更新块的内容](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/chat-announcement-block/batch_update)接口完成相关操作。</para>
    /// <para>- 此接口不支持删除表格单元格（Table Cell）、分栏列（Grid Column）和高亮块（Callout）的全部子块。</para>
    /// <para>示例值：doxcnO6UW6wAw2qIcYf4hZpFIth</para>
    /// </param>
    /// <param name="revision_id">
    /// <para>必填：否</para>
    /// <para>要操作的群公告版本。-1 表示群公告最新版本。群公告创建后，版本为 1。你需确保你已拥有群公告的编辑权限。你可通过调用[获取群公告基本信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/chat-announcement/get)获取群公告的最新 revision_id</para>
    /// <para>示例值：-1</para>
    /// <para>默认值：-1</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>操作的唯一标识，与接口返回值的 client_token 相对应，用于幂等的进行更新操作。此值为空表示将发起一次新的请求，此值非空表示幂等的进行更新操作。</para>
    /// <para>示例值：fe599b60-450f-46ff-b2ef-9f6675625b97</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpDelete("/open-apis/docx/v1/chats/{chat_id}/announcement/blocks/{block_id}/children/batch_delete")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.DeleteDocxV1ChatsByChatIdAnnouncementBlocksByBlockIdChildrenBatchDeleteResponseDto>> DeleteDocxV1ChatsByChatIdAnnouncementBlocksByBlockIdChildrenBatchDeleteAsync(
        [PathQuery] string chat_id,
        [PathQuery] string block_id,
        [JsonContent] Ccm.DeleteDocxV1ChatsByChatIdAnnouncementBlocksByBlockIdChildrenBatchDeleteBodyDto dto,
        [PathQuery] int? revision_id = -1,
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【云文档】获取群公告基本信息</para>
    /// <para>接口ID：7450053428095615004</para>
    /// <para>接口文档：https://open.feishu.cn/document/group/upgraded-group-announcement/chat-announcement/get</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>获取指定群组中的群公告基本信息。</para>
    /// <para>## 前提条件</para>
    /// <para>- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。</para>
    /// <para>- 调用当前接口的用户或者机器人必须在对应的群组内。</para>
    /// <para>- 获取内部群信息时，调用当前接口的用户或者机器人必须与对应群组在同一租户下。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat.announcement:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群 ID。获取方式：</para>
    /// <para>- [创建群](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create)，从返回结果中获取该群的 chat_id。</para>
    /// <para>- 调用[获取用户或机器人所在的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list)接口，可以查询用户或机器人所在群的 chat_id。</para>
    /// <para>- 调用[搜索对用户或机器人可见的群列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search)，可搜索用户或机器人所在的群、对用户或机器人公开的群的 chat_id。</para>
    /// <para>**注意**：单聊（群类型为 `p2p`）不支持获取群公告。</para>
    /// <para>示例值：oc_5ad11d72b830411d72b836c20</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/docx/v1/chats/{chat_id}/announcement")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDocxV1ChatsByChatIdAnnouncementResponseDto>> GetDocxV1ChatsByChatIdAnnouncementAsync(
        [PathQuery] string chat_id,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【云文档】获取群公告所有块</para>
    /// <para>接口ID：7450053428095631388</para>
    /// <para>接口文档：https://open.feishu.cn/document/group/upgraded-group-announcement/chat-announcement/list</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>im:chat.announcement:read</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="chat_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>群公告对应的群 ID</para>
    /// <para>示例值：oc_5ad11d72b830411d72b836c20</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：500</para>
    /// <para>默认值：500</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：aw7DoMKBFMOGwqHCrcO8w6jCmMOvw6ILeADCvsKNw57Di8O5XGV3LG4_w5HCqhFxSnDCrCzCn0BgZcOYUg85EMOYcEAcwqYOw4ojw5QFwofCu8KoIMO3K8Ktw4IuNMOBBHNYw4bCgCV3U1zDu8K-J8KSR8Kgw7Y0fsKZdsKvW3d9w53DnkHDrcO5bDkYwrvDisOEPcOtVFJ-I03CnsOILMOoAmLDknd6dsKqG1bClAjDuS3CvcOTwo7Dg8OrwovDsRdqIcKxw5HDohTDtXN9w5rCkWo</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="revision_id">
    /// <para>必填：否</para>
    /// <para>查询的群公告版本，-1 表示群公告最新版本。群公告创建后，版本为 1。若查询的版本为群公告最新版本，则需要持有群公告的阅读权限；若查询的版本为群公告的历史版本，则需要持有群公告的编辑权限。</para>
    /// <para>示例值：-1</para>
    /// <para>默认值：-1</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>此次调用中使用的用户ID的类型</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    [HttpGet("/open-apis/docx/v1/chats/{chat_id}/announcement/blocks")]
    System.Threading.Tasks.Task<FeishuResponse<Ccm.GetDocxV1ChatsByChatIdAnnouncementBlocksResponseDto>> GetDocxV1ChatsByChatIdAnnouncementBlocksAsync(
        [PathQuery] string chat_id,
        [PathQuery] int? page_size = 500,
        [PathQuery] string? page_token = null,
        [PathQuery] int? revision_id = -1,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】撤销入职</para>
    /// <para>接口ID：7450056310967664642</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/pre_hire/withdraw_onboarding</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过本接口对指定待入职，入职准备就绪的员工执行撤销入职操作，对应入职管理页面撤销入职按钮</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:pre_hire:withdraw_onboarding</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/pre_hires/withdraw_onboarding")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2PreHiresWithdrawOnboardingResponseDto>> PostCorehrV2PreHiresWithdrawOnboardingAsync(
        [JsonContent] Corehr.PostCorehrV2PreHiresWithdrawOnboardingBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】恢复入职</para>
    /// <para>接口ID：7450056310967681026</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/pre_hire/restore_flow_instance</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>通过本接口对指定已撤销的待入职员工执行恢复入职操作，对应入职管理页面恢复入职按钮</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:pre_hire:restore_flow_instance</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/pre_hires/restore_flow_instance")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2PreHiresRestoreFlowInstanceResponseDto>> PostCorehrV2PreHiresRestoreFlowInstanceAsync(
        [JsonContent] Corehr.PostCorehrV2PreHiresRestoreFlowInstanceBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询当前生效信息发生变更的序列</para>
    /// <para>接口ID：7452973109948596226</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/job-management/job_family/query_recent_change</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询指定时间范围内当前生效信息发生变更的序列，即只有序列前生效版本的生效时间在查询时间范围内，才返回该序列id</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:job_family:read</item>
    /// <item>corehr:job_family:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 2000</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6891251722631890445</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="start_date">
    /// <para>必填：是</para>
    /// <para>查询的开始时间，支持"yyyy-MM-dd HH:MM:SS"</para>
    /// <para>示例值：2024-01-01 00:00:00</para>
    /// </param>
    /// <param name="end_date">
    /// <para>必填：是</para>
    /// <para>查询的结束时间，格式 "yyyy-MM-dd HH:MM:SS"</para>
    /// <para>示例值：2024-04-01 00:00:00</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v2/job_families/query_recent_change")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.GetCorehrV2JobFamiliesQueryRecentChangeResponseDto>> GetCorehrV2JobFamiliesQueryRecentChangeAsync(
        [PathQuery] string start_date,
        [PathQuery] string end_date,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询当前生效信息发生变更的职级</para>
    /// <para>接口ID：7452973109948612610</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/job-management/job_level/query_recent_change</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询指定时间范围内当前生效信息发生变更的职级，即只有地点当前生效版本的生效时间在查询时间范围内，才返回该职级id</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:job_level:read</item>
    /// <item>corehr:job_level:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 2000</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6891251722631890445</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="start_date">
    /// <para>必填：是</para>
    /// <para>查询的开始时间，支持"yyyy-MM-dd HH:MM:SS"</para>
    /// <para>示例值：2024-01-01 00:00:00</para>
    /// </param>
    /// <param name="end_date">
    /// <para>必填：是</para>
    /// <para>查询的结束时间，格式 "yyyy-MM-dd HH:MM:SS"</para>
    /// <para>示例值：2024-04-01 00:00:00</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v2/job_levels/query_recent_change")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.GetCorehrV2JobLevelsQueryRecentChangeResponseDto>> GetCorehrV2JobLevelsQueryRecentChangeAsync(
        [PathQuery] string start_date,
        [PathQuery] string end_date,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询当前生效信息发生变更的职等</para>
    /// <para>接口ID：7452973109948628994</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/job-management/job_grade/query_recent_change</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询指定时间范围内当前生效信息发生变更的职等，即只有职等当前生效版本的生效时间在查询时间范围内，才返回该地点id</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:job_grade:read</item>
    /// <item>corehr:job_grade:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 2000</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6891251722631890445</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="start_date">
    /// <para>必填：是</para>
    /// <para>查询的开始时间，支持"yyyy-MM-dd HH:MM:SS"</para>
    /// <para>示例值：2024-01-01 00:00:00</para>
    /// </param>
    /// <param name="end_date">
    /// <para>必填：是</para>
    /// <para>查询的结束时间，格式 "yyyy-MM-dd HH:MM:SS"</para>
    /// <para>示例值：2024-04-01 00:00:00</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v2/job_grades/query_recent_change")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.GetCorehrV2JobGradesQueryRecentChangeResponseDto>> GetCorehrV2JobGradesQueryRecentChangeAsync(
        [PathQuery] string start_date,
        [PathQuery] string end_date,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询枚举信息</para>
    /// <para>接口ID：7457854043681603588</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/basic-infomation/enum/search</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>根据枚举的APIName查询枚举详细信息，用于BPM等场景获取枚举选项。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:common_data.meta_data:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/enums/search")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2EnumsSearchResponseDto>> PostCorehrV2EnumsSearchAsync(
        [JsonContent] Corehr.PostCorehrV2EnumsSearchBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询当前生效信息变更的自定义组织</para>
    /// <para>接口ID：7458122701110624275</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/organization-management/custom_org/query_recent_change</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询指定时间范围内当前生效信息发生变更的自定义组织，即只有部门当前生效版本的生效时间在查询时间范围内，才返回该自定义组织id</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:custom_org:read</item>
    /// <item>corehr:custom_org:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 2000</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6891251722631890445</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="object_api_name">
    /// <para>必填：是</para>
    /// <para>组织类型编码，可在「飞书人事-设置-组织设置」中相应的自定义组织目录下查看</para>
    /// <para>示例值：custom_org_01</para>
    /// </param>
    /// <param name="start_date">
    /// <para>必填：是</para>
    /// <para>查询的开始时间，支持"yyyy-MM-dd HH:MM:SS"</para>
    /// <para>示例值：2024-01-01 00:00:00</para>
    /// </param>
    /// <param name="end_date">
    /// <para>必填：是</para>
    /// <para>查询的结束时间，格式 "yyyy-MM-dd HH:MM:SS"</para>
    /// <para>示例值：2024-04-01 00:00:00</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v2/custom_orgs/query_recent_change")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.GetCorehrV2CustomOrgsQueryRecentChangeResponseDto>> GetCorehrV2CustomOrgsQueryRecentChangeAsync(
        [PathQuery] string object_api_name,
        [PathQuery] string start_date,
        [PathQuery] string end_date,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【多维表格】列出自定义角色</para>
    /// <para>接口ID：7473089245106290692</para>
    /// <para>接口文档：https://open.feishu.cn/document/docs/bitable-v1/advanced-permission/app-role/list-2</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>列出多维表格高级权限中用户自定义的角色。</para>
    /// <para>## 前提条件</para>
    /// <para>要调用自定义角色相关接口，你需确保多维表格已开启高级权限。你可通过[更新多维表格元数据](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app/update)接口开启高级权限。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:role:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：10</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：roljRpwIUt</para>
    /// <para>默认值：null</para>
    /// </param>
    [HttpGet("/open-apis/base/v2/apps/{app_token}/roles")]
    System.Threading.Tasks.Task<FeishuResponse<Base.GetBaseV2AppsByAppTokenRolesResponseDto>> GetBaseV2AppsByAppTokenRolesAsync(
        [PathQuery] string app_token,
        [PathQuery] int? page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【多维表格】新增自定义角色</para>
    /// <para>接口ID：7473089245106307076</para>
    /// <para>接口文档：https://open.feishu.cn/document/docs/bitable-v1/advanced-permission/app-role/create-2</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>新增多维表格高级权限中自定义的角色。</para>
    /// <para>## 前提条件</para>
    /// <para>要调用自定义角色相关接口，你需确保多维表格已开启高级权限。你可通过[更新多维表格元数据](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app/update)接口开启高级权限。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:role:create</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/base/v2/apps/{app_token}/roles")]
    System.Threading.Tasks.Task<FeishuResponse<Base.PostBaseV2AppsByAppTokenRolesResponseDto>> PostBaseV2AppsByAppTokenRolesAsync(
        [PathQuery] string app_token,
        [JsonContent] Base.PostBaseV2AppsByAppTokenRolesBodyDto dto);

    /// <summary>
    /// <para>【多维表格】更新自定义角色</para>
    /// <para>接口ID：7473089245106323460</para>
    /// <para>接口文档：https://open.feishu.cn/document/docs/bitable-v1/advanced-permission/app-role/update-2</para>
    /// <para>Authorization：tenant_access_token、user_access_token</para>
    /// <para>更新多维表格高级权限中自定义的角色。</para>
    /// <para>## 前提条件</para>
    /// <para>要调用自定义角色相关接口，你需确保多维表格已开启高级权限。你可通过[更新多维表格元数据](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app/update)接口开启高级权限。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>base:role:update</item>
    /// </list></para>
    /// </summary>
    /// <param name="app_token">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格 App 的唯一标识。不同形态的多维表格，其 `app_token` 的获取方式不同：</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/base**== 开头，该多维表格的 `app_token` 是下图高亮部分：</para>
    /// <para>![app_token.png](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/6916f8cfac4045ba6585b90e3afdfb0a_GxbfkJHZBa.png?height=766&amp;lazyload=true&amp;width=3004)</para>
    /// <para>- 如果多维表格的 URL 以 ==**feishu.cn/wiki**== 开头，你需调用知识库相关[获取知识空间节点信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node)接口获取多维表格的 app_token。当 `obj_type` 的值为 `bitable` 时，`obj_token` 字段的值才是多维表格的 `app_token`。</para>
    /// <para>了解更多，参考[多维表格 app_token 获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/bitable-overview#-752212c)。</para>
    /// <para>示例值：appbcbWCzen6D8dezhoCH2RpMAh</para>
    /// </param>
    /// <param name="role_id">
    /// <para>路径参数</para>
    /// <para>必填：是</para>
    /// <para>多维表格高级权限中自定义角色的唯一标识，以 rol 开头。获取方式：通过[列出自定义角色](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/list)接口获取。</para>
    /// <para>示例值：roljRpwIUt</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPut("/open-apis/base/v2/apps/{app_token}/roles/{role_id}")]
    System.Threading.Tasks.Task<FeishuResponse<Base.PutBaseV2AppsByAppTokenRolesByRoleIdResponseDto>> PutBaseV2AppsByAppTokenRolesByRoleIdAsync(
        [PathQuery] string app_token,
        [PathQuery] string role_id,
        [JsonContent] Base.PutBaseV2AppsByAppTokenRolesByRoleIdBodyDto dto);

    /// <summary>
    /// <para>【考勤打卡】删除打卡流水</para>
    /// <para>接口ID：7473096091899805715</para>
    /// <para>接口文档：https://open.feishu.cn/document/attendance-v1/user_task/batch_del</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除员工从开放平台导入的打卡记录。删除后会重新计算打卡记录对应考勤任务结果。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>attendance:task</item>
    /// </list></para>
    /// </summary>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/attendance/v1/user_flows/batch_del")]
    System.Threading.Tasks.Task<FeishuResponse<Attendance.PostAttendanceV1UserFlowsBatchDelResponseDto>> PostAttendanceV1UserFlowsBatchDelAsync(
        [JsonContent] Attendance.PostAttendanceV1UserFlowsBatchDelBodyDto dto);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询编制规划明细信息（支持自定义组织）</para>
    /// <para>接口ID：7473343327586435100</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/workforce_plan/batch_v2</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询编制规划明细，包括维度信息、编制数、预估在职人数、在职人数和预增/预减人数。</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:workforce_detail:read</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：["123456"]</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="page_size">
    /// <para>必填：否</para>
    /// <para>分页大小</para>
    /// <para>示例值：100</para>
    /// <para>默认值：100</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/workforce_plan_details/batch_v2")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2WorkforcePlanDetailsBatchV2ResponseDto>> PostCorehrV2WorkforcePlanDetailsBatchV2Async(
        [JsonContent] Corehr.PostCorehrV2WorkforcePlanDetailsBatchV2BodyDto dto,
        [PathQuery] string? page_token = null,
        [PathQuery] int? page_size = 100);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询当前生效信息发生变更的职务</para>
    /// <para>接口ID：7473775676862119940</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/job-management/job/query_recent_change</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询指定时间范围内当前生效信息发生变更的职务，即只有职务当前生效版本的生效时间在查询时间范围内，才返回该职务id</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:job:read</item>
    /// <item>corehr:job:write</item>
    /// </list></para>
    /// </summary>
    /// <param name="page_size">
    /// <para>必填：是</para>
    /// <para>分页大小，最大 2000</para>
    /// <para>示例值：100</para>
    /// <para>默认值：10</para>
    /// </param>
    /// <param name="page_token">
    /// <para>必填：否</para>
    /// <para>分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果</para>
    /// <para>示例值：6891251722631890445</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="start_date">
    /// <para>必填：是</para>
    /// <para>查询的开始时间，支持"yyyy-MM-dd HH:MM:SS"。</para>
    /// <para>- 限定查询范围在90天以内</para>
    /// <para>示例值：2024-01-01 00:00:00</para>
    /// </param>
    /// <param name="end_date">
    /// <para>必填：是</para>
    /// <para>查询的结束时间，格式 "yyyy-MM-dd HH:MM:SS"。</para>
    /// <para>- 限定查询范围在90天以内</para>
    /// <para>示例值：2024-04-01 00:00:00</para>
    /// </param>
    [HttpGet("/open-apis/corehr/v2/jobs/query_recent_change")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.GetCorehrV2JobsQueryRecentChangeResponseDto>> GetCorehrV2JobsQueryRecentChangeAsync(
        [PathQuery] string start_date,
        [PathQuery] string end_date,
        [PathQuery] int page_size = 10,
        [PathQuery] string? page_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】更新默认成本中心</para>
    /// <para>接口ID：7486406573931642883</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/employee/default_cost_center/update_version</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新默认成本中心</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:default_cost_center:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>幂等标识，服务端会忽略client_token重复的请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/default_cost_centers/update_version")]
    System.Threading.Tasks.Task<FeishuResponse> PostCorehrV2DefaultCostCentersUpdateVersionAsync(
        [JsonContent] Corehr.PostCorehrV2DefaultCostCentersUpdateVersionBodyDto dto,
        [PathQuery] string? client_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】删除默认成本中心</para>
    /// <para>接口ID：7486406573931659267</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/employee/default_cost_center/remove_version</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除默认成本中心</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:default_cost_center:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>幂等标识，服务端会忽略client_token重复的请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/default_cost_centers/remove_version")]
    System.Threading.Tasks.Task<FeishuResponse> PostCorehrV2DefaultCostCentersRemoveVersionAsync(
        [JsonContent] Corehr.PostCorehrV2DefaultCostCentersRemoveVersionBodyDto dto,
        [PathQuery] string? client_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】添加默认成本中心</para>
    /// <para>接口ID：7486406573931675651</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/employee/default_cost_center/create_version</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>添加默认成本中心</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:default_cost_center:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>幂等标识，服务端会忽略client_token重复的请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/default_cost_centers/create_version")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2DefaultCostCentersCreateVersionResponseDto>> PostCorehrV2DefaultCostCentersCreateVersionAsync(
        [JsonContent] Corehr.PostCorehrV2DefaultCostCentersCreateVersionBodyDto dto,
        [PathQuery] string? client_token = null,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】查询默认成本中心</para>
    /// <para>接口ID：7486406573931692035</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/employee/default_cost_center/batch_query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询默认成本中心</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:default_cost_center:read</item>
    /// <item>corehr:default_cost_center:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/default_cost_centers/batch_query")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2DefaultCostCentersBatchQueryResponseDto>> PostCorehrV2DefaultCostCentersBatchQueryAsync(
        [JsonContent] Corehr.PostCorehrV2DefaultCostCentersBatchQueryBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");

    /// <summary>
    /// <para>【飞书人事（企业版）】更新成本分摊</para>
    /// <para>接口ID：7486406573931708419</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/employee/cost_allocation/update_version</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>更新成本分摊</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:cost_allocation:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：1245464678</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/cost_allocations/update_version")]
    System.Threading.Tasks.Task<FeishuResponse> PostCorehrV2CostAllocationsUpdateVersionAsync(
        [JsonContent] Corehr.PostCorehrV2CostAllocationsUpdateVersionBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】删除成本分摊</para>
    /// <para>接口ID：7486406573931724803</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/employee/cost_allocation/remove_version</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>删除成本分摊</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:cost_allocation:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：1245464678</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/cost_allocations/remove_version")]
    System.Threading.Tasks.Task<FeishuResponse> PostCorehrV2CostAllocationsRemoveVersionAsync(
        [JsonContent] Corehr.PostCorehrV2CostAllocationsRemoveVersionBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】创建成本分摊</para>
    /// <para>接口ID：7486406573931741187</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/employee/cost_allocation/create_version</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>创建成本分摊</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:cost_allocation:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="client_token">
    /// <para>必填：否</para>
    /// <para>根据client_token是否一致来判断是否为同一请求</para>
    /// <para>示例值：12454646</para>
    /// <para>默认值：null</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/cost_allocations/create_version")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2CostAllocationsCreateVersionResponseDto>> PostCorehrV2CostAllocationsCreateVersionAsync(
        [JsonContent] Corehr.PostCorehrV2CostAllocationsCreateVersionBodyDto dto,
        [PathQuery] string? user_id_type = "open_id",
        [PathQuery] string? client_token = null);

    /// <summary>
    /// <para>【飞书人事（企业版）】查询成本分摊</para>
    /// <para>接口ID：7486406573931757571</para>
    /// <para>接口文档：https://open.feishu.cn/document/corehr-v1/employee/cost_allocation/batch_query</para>
    /// <para>Authorization：tenant_access_token</para>
    /// <para>查询成本分摊</para>
    /// <para>权限要求：<list type="bullet">
    /// <item>corehr:cost_allocation:read</item>
    /// <item>corehr:cost_allocation:write</item>
    /// </list></para>
    /// <para>字段权限要求：<list type="bullet">
    /// <item>contact:user.employee_id:readonly</item>
    /// </list></para>
    /// </summary>
    /// <param name="user_id_type">
    /// <para>必填：否</para>
    /// <para>用户 ID 类型</para>
    /// <para>示例值：open_id</para>
    /// <list type="bullet">
    /// <item>open_id：标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)</item>
    /// <item>union_id：标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)</item>
    /// <item>user_id：标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)</item>
    /// <item>people_corehr_id：以飞书人事的 ID 来识别用户</item>
    /// </list>
    /// <para>默认值：open_id</para>
    /// </param>
    /// <param name="dto">请求体</param>
    [HttpPost("/open-apis/corehr/v2/cost_allocations/batch_query")]
    System.Threading.Tasks.Task<FeishuResponse<Corehr.PostCorehrV2CostAllocationsBatchQueryResponseDto>> PostCorehrV2CostAllocationsBatchQueryAsync(
        [JsonContent] Corehr.PostCorehrV2CostAllocationsBatchQueryBodyDto dto,
        [PathQuery] string? user_id_type = "open_id");
}

